
exercicio5_aula4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009c58  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000025c  08009e58  08009e58  0000ae58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a0b4  0800a0b4  0000c1b0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800a0b4  0800a0b4  0000b0b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a0bc  0800a0bc  0000c1b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a0bc  0800a0bc  0000b0bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a0c0  0800a0c0  0000b0c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  0800a0c4  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000070  0800a134  0000c070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000110  0800a1d4  0000c110  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00005324  200001b0  0800a274  0000c1b0  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  200054d4  0800a274  0000c4d4  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  0000c1b0  2**0
                  CONTENTS, READONLY
 14 .debug_info   000240d3  00000000  00000000  0000c1de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000046b0  00000000  00000000  000302b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001c08  00000000  00000000  00034968  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000015cf  00000000  00000000  00036570  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000056a0  00000000  00000000  00037b3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000210b0  00000000  00000000  0003d1df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00115509  00000000  00000000  0005e28f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  00173798  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000822c  00000000  00000000  001737dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000064  00000000  00000000  0017ba08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001b0 	.word	0x200001b0
 800021c:	00000000 	.word	0x00000000
 8000220:	08009e40 	.word	0x08009e40

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001b4 	.word	0x200001b4
 800023c:	08009e40 	.word	0x08009e40

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b988 	b.w	8000618 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	468e      	mov	lr, r1
 8000328:	4604      	mov	r4, r0
 800032a:	4688      	mov	r8, r1
 800032c:	2b00      	cmp	r3, #0
 800032e:	d14a      	bne.n	80003c6 <__udivmoddi4+0xa6>
 8000330:	428a      	cmp	r2, r1
 8000332:	4617      	mov	r7, r2
 8000334:	d962      	bls.n	80003fc <__udivmoddi4+0xdc>
 8000336:	fab2 f682 	clz	r6, r2
 800033a:	b14e      	cbz	r6, 8000350 <__udivmoddi4+0x30>
 800033c:	f1c6 0320 	rsb	r3, r6, #32
 8000340:	fa01 f806 	lsl.w	r8, r1, r6
 8000344:	fa20 f303 	lsr.w	r3, r0, r3
 8000348:	40b7      	lsls	r7, r6
 800034a:	ea43 0808 	orr.w	r8, r3, r8
 800034e:	40b4      	lsls	r4, r6
 8000350:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000354:	fa1f fc87 	uxth.w	ip, r7
 8000358:	fbb8 f1fe 	udiv	r1, r8, lr
 800035c:	0c23      	lsrs	r3, r4, #16
 800035e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000362:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000366:	fb01 f20c 	mul.w	r2, r1, ip
 800036a:	429a      	cmp	r2, r3
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0x62>
 800036e:	18fb      	adds	r3, r7, r3
 8000370:	f101 30ff 	add.w	r0, r1, #4294967295
 8000374:	f080 80ea 	bcs.w	800054c <__udivmoddi4+0x22c>
 8000378:	429a      	cmp	r2, r3
 800037a:	f240 80e7 	bls.w	800054c <__udivmoddi4+0x22c>
 800037e:	3902      	subs	r1, #2
 8000380:	443b      	add	r3, r7
 8000382:	1a9a      	subs	r2, r3, r2
 8000384:	b2a3      	uxth	r3, r4
 8000386:	fbb2 f0fe 	udiv	r0, r2, lr
 800038a:	fb0e 2210 	mls	r2, lr, r0, r2
 800038e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000392:	fb00 fc0c 	mul.w	ip, r0, ip
 8000396:	459c      	cmp	ip, r3
 8000398:	d909      	bls.n	80003ae <__udivmoddi4+0x8e>
 800039a:	18fb      	adds	r3, r7, r3
 800039c:	f100 32ff 	add.w	r2, r0, #4294967295
 80003a0:	f080 80d6 	bcs.w	8000550 <__udivmoddi4+0x230>
 80003a4:	459c      	cmp	ip, r3
 80003a6:	f240 80d3 	bls.w	8000550 <__udivmoddi4+0x230>
 80003aa:	443b      	add	r3, r7
 80003ac:	3802      	subs	r0, #2
 80003ae:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003b2:	eba3 030c 	sub.w	r3, r3, ip
 80003b6:	2100      	movs	r1, #0
 80003b8:	b11d      	cbz	r5, 80003c2 <__udivmoddi4+0xa2>
 80003ba:	40f3      	lsrs	r3, r6
 80003bc:	2200      	movs	r2, #0
 80003be:	e9c5 3200 	strd	r3, r2, [r5]
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d905      	bls.n	80003d6 <__udivmoddi4+0xb6>
 80003ca:	b10d      	cbz	r5, 80003d0 <__udivmoddi4+0xb0>
 80003cc:	e9c5 0100 	strd	r0, r1, [r5]
 80003d0:	2100      	movs	r1, #0
 80003d2:	4608      	mov	r0, r1
 80003d4:	e7f5      	b.n	80003c2 <__udivmoddi4+0xa2>
 80003d6:	fab3 f183 	clz	r1, r3
 80003da:	2900      	cmp	r1, #0
 80003dc:	d146      	bne.n	800046c <__udivmoddi4+0x14c>
 80003de:	4573      	cmp	r3, lr
 80003e0:	d302      	bcc.n	80003e8 <__udivmoddi4+0xc8>
 80003e2:	4282      	cmp	r2, r0
 80003e4:	f200 8105 	bhi.w	80005f2 <__udivmoddi4+0x2d2>
 80003e8:	1a84      	subs	r4, r0, r2
 80003ea:	eb6e 0203 	sbc.w	r2, lr, r3
 80003ee:	2001      	movs	r0, #1
 80003f0:	4690      	mov	r8, r2
 80003f2:	2d00      	cmp	r5, #0
 80003f4:	d0e5      	beq.n	80003c2 <__udivmoddi4+0xa2>
 80003f6:	e9c5 4800 	strd	r4, r8, [r5]
 80003fa:	e7e2      	b.n	80003c2 <__udivmoddi4+0xa2>
 80003fc:	2a00      	cmp	r2, #0
 80003fe:	f000 8090 	beq.w	8000522 <__udivmoddi4+0x202>
 8000402:	fab2 f682 	clz	r6, r2
 8000406:	2e00      	cmp	r6, #0
 8000408:	f040 80a4 	bne.w	8000554 <__udivmoddi4+0x234>
 800040c:	1a8a      	subs	r2, r1, r2
 800040e:	0c03      	lsrs	r3, r0, #16
 8000410:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000414:	b280      	uxth	r0, r0
 8000416:	b2bc      	uxth	r4, r7
 8000418:	2101      	movs	r1, #1
 800041a:	fbb2 fcfe 	udiv	ip, r2, lr
 800041e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000422:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000426:	fb04 f20c 	mul.w	r2, r4, ip
 800042a:	429a      	cmp	r2, r3
 800042c:	d907      	bls.n	800043e <__udivmoddi4+0x11e>
 800042e:	18fb      	adds	r3, r7, r3
 8000430:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000434:	d202      	bcs.n	800043c <__udivmoddi4+0x11c>
 8000436:	429a      	cmp	r2, r3
 8000438:	f200 80e0 	bhi.w	80005fc <__udivmoddi4+0x2dc>
 800043c:	46c4      	mov	ip, r8
 800043e:	1a9b      	subs	r3, r3, r2
 8000440:	fbb3 f2fe 	udiv	r2, r3, lr
 8000444:	fb0e 3312 	mls	r3, lr, r2, r3
 8000448:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800044c:	fb02 f404 	mul.w	r4, r2, r4
 8000450:	429c      	cmp	r4, r3
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x144>
 8000454:	18fb      	adds	r3, r7, r3
 8000456:	f102 30ff 	add.w	r0, r2, #4294967295
 800045a:	d202      	bcs.n	8000462 <__udivmoddi4+0x142>
 800045c:	429c      	cmp	r4, r3
 800045e:	f200 80ca 	bhi.w	80005f6 <__udivmoddi4+0x2d6>
 8000462:	4602      	mov	r2, r0
 8000464:	1b1b      	subs	r3, r3, r4
 8000466:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800046a:	e7a5      	b.n	80003b8 <__udivmoddi4+0x98>
 800046c:	f1c1 0620 	rsb	r6, r1, #32
 8000470:	408b      	lsls	r3, r1
 8000472:	fa22 f706 	lsr.w	r7, r2, r6
 8000476:	431f      	orrs	r7, r3
 8000478:	fa0e f401 	lsl.w	r4, lr, r1
 800047c:	fa20 f306 	lsr.w	r3, r0, r6
 8000480:	fa2e fe06 	lsr.w	lr, lr, r6
 8000484:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000488:	4323      	orrs	r3, r4
 800048a:	fa00 f801 	lsl.w	r8, r0, r1
 800048e:	fa1f fc87 	uxth.w	ip, r7
 8000492:	fbbe f0f9 	udiv	r0, lr, r9
 8000496:	0c1c      	lsrs	r4, r3, #16
 8000498:	fb09 ee10 	mls	lr, r9, r0, lr
 800049c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80004a0:	fb00 fe0c 	mul.w	lr, r0, ip
 80004a4:	45a6      	cmp	lr, r4
 80004a6:	fa02 f201 	lsl.w	r2, r2, r1
 80004aa:	d909      	bls.n	80004c0 <__udivmoddi4+0x1a0>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f100 3aff 	add.w	sl, r0, #4294967295
 80004b2:	f080 809c 	bcs.w	80005ee <__udivmoddi4+0x2ce>
 80004b6:	45a6      	cmp	lr, r4
 80004b8:	f240 8099 	bls.w	80005ee <__udivmoddi4+0x2ce>
 80004bc:	3802      	subs	r0, #2
 80004be:	443c      	add	r4, r7
 80004c0:	eba4 040e 	sub.w	r4, r4, lr
 80004c4:	fa1f fe83 	uxth.w	lr, r3
 80004c8:	fbb4 f3f9 	udiv	r3, r4, r9
 80004cc:	fb09 4413 	mls	r4, r9, r3, r4
 80004d0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004d4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004d8:	45a4      	cmp	ip, r4
 80004da:	d908      	bls.n	80004ee <__udivmoddi4+0x1ce>
 80004dc:	193c      	adds	r4, r7, r4
 80004de:	f103 3eff 	add.w	lr, r3, #4294967295
 80004e2:	f080 8082 	bcs.w	80005ea <__udivmoddi4+0x2ca>
 80004e6:	45a4      	cmp	ip, r4
 80004e8:	d97f      	bls.n	80005ea <__udivmoddi4+0x2ca>
 80004ea:	3b02      	subs	r3, #2
 80004ec:	443c      	add	r4, r7
 80004ee:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004f2:	eba4 040c 	sub.w	r4, r4, ip
 80004f6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004fa:	4564      	cmp	r4, ip
 80004fc:	4673      	mov	r3, lr
 80004fe:	46e1      	mov	r9, ip
 8000500:	d362      	bcc.n	80005c8 <__udivmoddi4+0x2a8>
 8000502:	d05f      	beq.n	80005c4 <__udivmoddi4+0x2a4>
 8000504:	b15d      	cbz	r5, 800051e <__udivmoddi4+0x1fe>
 8000506:	ebb8 0203 	subs.w	r2, r8, r3
 800050a:	eb64 0409 	sbc.w	r4, r4, r9
 800050e:	fa04 f606 	lsl.w	r6, r4, r6
 8000512:	fa22 f301 	lsr.w	r3, r2, r1
 8000516:	431e      	orrs	r6, r3
 8000518:	40cc      	lsrs	r4, r1
 800051a:	e9c5 6400 	strd	r6, r4, [r5]
 800051e:	2100      	movs	r1, #0
 8000520:	e74f      	b.n	80003c2 <__udivmoddi4+0xa2>
 8000522:	fbb1 fcf2 	udiv	ip, r1, r2
 8000526:	0c01      	lsrs	r1, r0, #16
 8000528:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800052c:	b280      	uxth	r0, r0
 800052e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000532:	463b      	mov	r3, r7
 8000534:	4638      	mov	r0, r7
 8000536:	463c      	mov	r4, r7
 8000538:	46b8      	mov	r8, r7
 800053a:	46be      	mov	lr, r7
 800053c:	2620      	movs	r6, #32
 800053e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000542:	eba2 0208 	sub.w	r2, r2, r8
 8000546:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800054a:	e766      	b.n	800041a <__udivmoddi4+0xfa>
 800054c:	4601      	mov	r1, r0
 800054e:	e718      	b.n	8000382 <__udivmoddi4+0x62>
 8000550:	4610      	mov	r0, r2
 8000552:	e72c      	b.n	80003ae <__udivmoddi4+0x8e>
 8000554:	f1c6 0220 	rsb	r2, r6, #32
 8000558:	fa2e f302 	lsr.w	r3, lr, r2
 800055c:	40b7      	lsls	r7, r6
 800055e:	40b1      	lsls	r1, r6
 8000560:	fa20 f202 	lsr.w	r2, r0, r2
 8000564:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000568:	430a      	orrs	r2, r1
 800056a:	fbb3 f8fe 	udiv	r8, r3, lr
 800056e:	b2bc      	uxth	r4, r7
 8000570:	fb0e 3318 	mls	r3, lr, r8, r3
 8000574:	0c11      	lsrs	r1, r2, #16
 8000576:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800057a:	fb08 f904 	mul.w	r9, r8, r4
 800057e:	40b0      	lsls	r0, r6
 8000580:	4589      	cmp	r9, r1
 8000582:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000586:	b280      	uxth	r0, r0
 8000588:	d93e      	bls.n	8000608 <__udivmoddi4+0x2e8>
 800058a:	1879      	adds	r1, r7, r1
 800058c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000590:	d201      	bcs.n	8000596 <__udivmoddi4+0x276>
 8000592:	4589      	cmp	r9, r1
 8000594:	d81f      	bhi.n	80005d6 <__udivmoddi4+0x2b6>
 8000596:	eba1 0109 	sub.w	r1, r1, r9
 800059a:	fbb1 f9fe 	udiv	r9, r1, lr
 800059e:	fb09 f804 	mul.w	r8, r9, r4
 80005a2:	fb0e 1119 	mls	r1, lr, r9, r1
 80005a6:	b292      	uxth	r2, r2
 80005a8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80005ac:	4542      	cmp	r2, r8
 80005ae:	d229      	bcs.n	8000604 <__udivmoddi4+0x2e4>
 80005b0:	18ba      	adds	r2, r7, r2
 80005b2:	f109 31ff 	add.w	r1, r9, #4294967295
 80005b6:	d2c4      	bcs.n	8000542 <__udivmoddi4+0x222>
 80005b8:	4542      	cmp	r2, r8
 80005ba:	d2c2      	bcs.n	8000542 <__udivmoddi4+0x222>
 80005bc:	f1a9 0102 	sub.w	r1, r9, #2
 80005c0:	443a      	add	r2, r7
 80005c2:	e7be      	b.n	8000542 <__udivmoddi4+0x222>
 80005c4:	45f0      	cmp	r8, lr
 80005c6:	d29d      	bcs.n	8000504 <__udivmoddi4+0x1e4>
 80005c8:	ebbe 0302 	subs.w	r3, lr, r2
 80005cc:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005d0:	3801      	subs	r0, #1
 80005d2:	46e1      	mov	r9, ip
 80005d4:	e796      	b.n	8000504 <__udivmoddi4+0x1e4>
 80005d6:	eba7 0909 	sub.w	r9, r7, r9
 80005da:	4449      	add	r1, r9
 80005dc:	f1a8 0c02 	sub.w	ip, r8, #2
 80005e0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005e4:	fb09 f804 	mul.w	r8, r9, r4
 80005e8:	e7db      	b.n	80005a2 <__udivmoddi4+0x282>
 80005ea:	4673      	mov	r3, lr
 80005ec:	e77f      	b.n	80004ee <__udivmoddi4+0x1ce>
 80005ee:	4650      	mov	r0, sl
 80005f0:	e766      	b.n	80004c0 <__udivmoddi4+0x1a0>
 80005f2:	4608      	mov	r0, r1
 80005f4:	e6fd      	b.n	80003f2 <__udivmoddi4+0xd2>
 80005f6:	443b      	add	r3, r7
 80005f8:	3a02      	subs	r2, #2
 80005fa:	e733      	b.n	8000464 <__udivmoddi4+0x144>
 80005fc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000600:	443b      	add	r3, r7
 8000602:	e71c      	b.n	800043e <__udivmoddi4+0x11e>
 8000604:	4649      	mov	r1, r9
 8000606:	e79c      	b.n	8000542 <__udivmoddi4+0x222>
 8000608:	eba1 0109 	sub.w	r1, r1, r9
 800060c:	46c4      	mov	ip, r8
 800060e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000612:	fb09 f804 	mul.w	r8, r9, r4
 8000616:	e7c4      	b.n	80005a2 <__udivmoddi4+0x282>

08000618 <__aeabi_idiv0>:
 8000618:	4770      	bx	lr
 800061a:	bf00      	nop

0800061c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000620:	f000 ff33 	bl	800148a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000624:	f000 f85e 	bl	80006e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000628:	f000 f9cc 	bl	80009c4 <MX_GPIO_Init>
  MX_ETH_Init();
 800062c:	f000 f91e 	bl	800086c <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000630:	f000 f96a 	bl	8000908 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000634:	f000 f998 	bl	8000968 <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 8000638:	f000 f8c6 	bl	80007c8 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800063c:	f004 fe08 	bl	8005250 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of semCalc */
  semCalcHandle = osSemaphoreNew(1, 0, &semCalc_attributes);
 8000640:	4a19      	ldr	r2, [pc, #100]	@ (80006a8 <main+0x8c>)
 8000642:	2100      	movs	r1, #0
 8000644:	2001      	movs	r0, #1
 8000646:	f004 ff41 	bl	80054cc <osSemaphoreNew>
 800064a:	4603      	mov	r3, r0
 800064c:	4a17      	ldr	r2, [pc, #92]	@ (80006ac <main+0x90>)
 800064e:	6013      	str	r3, [r2, #0]

  /* creation of semStart */
  semStartHandle = osSemaphoreNew(1, 1, &semStart_attributes);
 8000650:	4a17      	ldr	r2, [pc, #92]	@ (80006b0 <main+0x94>)
 8000652:	2101      	movs	r1, #1
 8000654:	2001      	movs	r0, #1
 8000656:	f004 ff39 	bl	80054cc <osSemaphoreNew>
 800065a:	4603      	mov	r3, r0
 800065c:	4a15      	ldr	r2, [pc, #84]	@ (80006b4 <main+0x98>)
 800065e:	6013      	str	r3, [r2, #0]

  /* creation of semSend */
  semSendHandle = osSemaphoreNew(1, 0, &semSend_attributes);
 8000660:	4a15      	ldr	r2, [pc, #84]	@ (80006b8 <main+0x9c>)
 8000662:	2100      	movs	r1, #0
 8000664:	2001      	movs	r0, #1
 8000666:	f004 ff31 	bl	80054cc <osSemaphoreNew>
 800066a:	4603      	mov	r3, r0
 800066c:	4a13      	ldr	r2, [pc, #76]	@ (80006bc <main+0xa0>)
 800066e:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of TaskADC */
  TaskADCHandle = osThreadNew(TaskADCfun, NULL, &TaskADC_attributes);
 8000670:	4a13      	ldr	r2, [pc, #76]	@ (80006c0 <main+0xa4>)
 8000672:	2100      	movs	r1, #0
 8000674:	4813      	ldr	r0, [pc, #76]	@ (80006c4 <main+0xa8>)
 8000676:	f004 fe55 	bl	8005324 <osThreadNew>
 800067a:	4603      	mov	r3, r0
 800067c:	4a12      	ldr	r2, [pc, #72]	@ (80006c8 <main+0xac>)
 800067e:	6013      	str	r3, [r2, #0]

  /* creation of TaskCalc */
  TaskCalcHandle = osThreadNew(TaskCalcfun, NULL, &TaskCalc_attributes);
 8000680:	4a12      	ldr	r2, [pc, #72]	@ (80006cc <main+0xb0>)
 8000682:	2100      	movs	r1, #0
 8000684:	4812      	ldr	r0, [pc, #72]	@ (80006d0 <main+0xb4>)
 8000686:	f004 fe4d 	bl	8005324 <osThreadNew>
 800068a:	4603      	mov	r3, r0
 800068c:	4a11      	ldr	r2, [pc, #68]	@ (80006d4 <main+0xb8>)
 800068e:	6013      	str	r3, [r2, #0]

  /* creation of TaskSend */
  TaskSendHandle = osThreadNew(TaskSendfun, NULL, &TaskSend_attributes);
 8000690:	4a11      	ldr	r2, [pc, #68]	@ (80006d8 <main+0xbc>)
 8000692:	2100      	movs	r1, #0
 8000694:	4811      	ldr	r0, [pc, #68]	@ (80006dc <main+0xc0>)
 8000696:	f004 fe45 	bl	8005324 <osThreadNew>
 800069a:	4603      	mov	r3, r0
 800069c:	4a10      	ldr	r2, [pc, #64]	@ (80006e0 <main+0xc4>)
 800069e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80006a0:	f004 fe0a 	bl	80052b8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006a4:	bf00      	nop
 80006a6:	e7fd      	b.n	80006a4 <main+0x88>
 80006a8:	08009f8c 	.word	0x08009f8c
 80006ac:	20000870 	.word	0x20000870
 80006b0:	08009f9c 	.word	0x08009f9c
 80006b4:	20000874 	.word	0x20000874
 80006b8:	08009fac 	.word	0x08009fac
 80006bc:	20000878 	.word	0x20000878
 80006c0:	08009f20 	.word	0x08009f20
 80006c4:	08000b75 	.word	0x08000b75
 80006c8:	20000864 	.word	0x20000864
 80006cc:	08009f44 	.word	0x08009f44
 80006d0:	08000bd9 	.word	0x08000bd9
 80006d4:	20000868 	.word	0x20000868
 80006d8:	08009f68 	.word	0x08009f68
 80006dc:	08000c59 	.word	0x08000c59
 80006e0:	2000086c 	.word	0x2000086c

080006e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b094      	sub	sp, #80	@ 0x50
 80006e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ea:	f107 031c 	add.w	r3, r7, #28
 80006ee:	2234      	movs	r2, #52	@ 0x34
 80006f0:	2100      	movs	r1, #0
 80006f2:	4618      	mov	r0, r3
 80006f4:	f008 faf7 	bl	8008ce6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006f8:	f107 0308 	add.w	r3, r7, #8
 80006fc:	2200      	movs	r2, #0
 80006fe:	601a      	str	r2, [r3, #0]
 8000700:	605a      	str	r2, [r3, #4]
 8000702:	609a      	str	r2, [r3, #8]
 8000704:	60da      	str	r2, [r3, #12]
 8000706:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000708:	f002 f8f0 	bl	80028ec <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800070c:	4b2c      	ldr	r3, [pc, #176]	@ (80007c0 <SystemClock_Config+0xdc>)
 800070e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000710:	4a2b      	ldr	r2, [pc, #172]	@ (80007c0 <SystemClock_Config+0xdc>)
 8000712:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000716:	6413      	str	r3, [r2, #64]	@ 0x40
 8000718:	4b29      	ldr	r3, [pc, #164]	@ (80007c0 <SystemClock_Config+0xdc>)
 800071a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800071c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000720:	607b      	str	r3, [r7, #4]
 8000722:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000724:	4b27      	ldr	r3, [pc, #156]	@ (80007c4 <SystemClock_Config+0xe0>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800072c:	4a25      	ldr	r2, [pc, #148]	@ (80007c4 <SystemClock_Config+0xe0>)
 800072e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000732:	6013      	str	r3, [r2, #0]
 8000734:	4b23      	ldr	r3, [pc, #140]	@ (80007c4 <SystemClock_Config+0xe0>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800073c:	603b      	str	r3, [r7, #0]
 800073e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000740:	2301      	movs	r3, #1
 8000742:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000744:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000748:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800074a:	2302      	movs	r3, #2
 800074c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800074e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000752:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000754:	2304      	movs	r3, #4
 8000756:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000758:	2360      	movs	r3, #96	@ 0x60
 800075a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800075c:	2302      	movs	r3, #2
 800075e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000760:	2304      	movs	r3, #4
 8000762:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000764:	2302      	movs	r3, #2
 8000766:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000768:	f107 031c 	add.w	r3, r7, #28
 800076c:	4618      	mov	r0, r3
 800076e:	f002 f91d 	bl	80029ac <HAL_RCC_OscConfig>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d001      	beq.n	800077c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000778:	f000 fae8 	bl	8000d4c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800077c:	f002 f8c6 	bl	800290c <HAL_PWREx_EnableOverDrive>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000786:	f000 fae1 	bl	8000d4c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800078a:	230f      	movs	r3, #15
 800078c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800078e:	2302      	movs	r3, #2
 8000790:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000792:	2300      	movs	r3, #0
 8000794:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000796:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800079a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800079c:	2300      	movs	r3, #0
 800079e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80007a0:	f107 0308 	add.w	r3, r7, #8
 80007a4:	2103      	movs	r1, #3
 80007a6:	4618      	mov	r0, r3
 80007a8:	f002 fbae 	bl	8002f08 <HAL_RCC_ClockConfig>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80007b2:	f000 facb 	bl	8000d4c <Error_Handler>
  }
}
 80007b6:	bf00      	nop
 80007b8:	3750      	adds	r7, #80	@ 0x50
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	40023800 	.word	0x40023800
 80007c4:	40007000 	.word	0x40007000

080007c8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b084      	sub	sp, #16
 80007cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007ce:	463b      	mov	r3, r7
 80007d0:	2200      	movs	r2, #0
 80007d2:	601a      	str	r2, [r3, #0]
 80007d4:	605a      	str	r2, [r3, #4]
 80007d6:	609a      	str	r2, [r3, #8]
 80007d8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80007da:	4b21      	ldr	r3, [pc, #132]	@ (8000860 <MX_ADC1_Init+0x98>)
 80007dc:	4a21      	ldr	r2, [pc, #132]	@ (8000864 <MX_ADC1_Init+0x9c>)
 80007de:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80007e0:	4b1f      	ldr	r3, [pc, #124]	@ (8000860 <MX_ADC1_Init+0x98>)
 80007e2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80007e6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80007e8:	4b1d      	ldr	r3, [pc, #116]	@ (8000860 <MX_ADC1_Init+0x98>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007ee:	4b1c      	ldr	r3, [pc, #112]	@ (8000860 <MX_ADC1_Init+0x98>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80007f4:	4b1a      	ldr	r3, [pc, #104]	@ (8000860 <MX_ADC1_Init+0x98>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007fa:	4b19      	ldr	r3, [pc, #100]	@ (8000860 <MX_ADC1_Init+0x98>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000802:	4b17      	ldr	r3, [pc, #92]	@ (8000860 <MX_ADC1_Init+0x98>)
 8000804:	2200      	movs	r2, #0
 8000806:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000808:	4b15      	ldr	r3, [pc, #84]	@ (8000860 <MX_ADC1_Init+0x98>)
 800080a:	4a17      	ldr	r2, [pc, #92]	@ (8000868 <MX_ADC1_Init+0xa0>)
 800080c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800080e:	4b14      	ldr	r3, [pc, #80]	@ (8000860 <MX_ADC1_Init+0x98>)
 8000810:	2200      	movs	r2, #0
 8000812:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000814:	4b12      	ldr	r3, [pc, #72]	@ (8000860 <MX_ADC1_Init+0x98>)
 8000816:	2201      	movs	r2, #1
 8000818:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800081a:	4b11      	ldr	r3, [pc, #68]	@ (8000860 <MX_ADC1_Init+0x98>)
 800081c:	2200      	movs	r2, #0
 800081e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000822:	4b0f      	ldr	r3, [pc, #60]	@ (8000860 <MX_ADC1_Init+0x98>)
 8000824:	2201      	movs	r2, #1
 8000826:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000828:	480d      	ldr	r0, [pc, #52]	@ (8000860 <MX_ADC1_Init+0x98>)
 800082a:	f000 fe7f 	bl	800152c <HAL_ADC_Init>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000834:	f000 fa8a 	bl	8000d4c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000838:	2300      	movs	r3, #0
 800083a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800083c:	2301      	movs	r3, #1
 800083e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000840:	2300      	movs	r3, #0
 8000842:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000844:	463b      	mov	r3, r7
 8000846:	4619      	mov	r1, r3
 8000848:	4805      	ldr	r0, [pc, #20]	@ (8000860 <MX_ADC1_Init+0x98>)
 800084a:	f000 feb3 	bl	80015b4 <HAL_ADC_ConfigChannel>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d001      	beq.n	8000858 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000854:	f000 fa7a 	bl	8000d4c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000858:	bf00      	nop
 800085a:	3710      	adds	r7, #16
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}
 8000860:	20000204 	.word	0x20000204
 8000864:	40012000 	.word	0x40012000
 8000868:	0f000001 	.word	0x0f000001

0800086c <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000870:	4b1f      	ldr	r3, [pc, #124]	@ (80008f0 <MX_ETH_Init+0x84>)
 8000872:	4a20      	ldr	r2, [pc, #128]	@ (80008f4 <MX_ETH_Init+0x88>)
 8000874:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000876:	4b20      	ldr	r3, [pc, #128]	@ (80008f8 <MX_ETH_Init+0x8c>)
 8000878:	2200      	movs	r2, #0
 800087a:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 800087c:	4b1e      	ldr	r3, [pc, #120]	@ (80008f8 <MX_ETH_Init+0x8c>)
 800087e:	2280      	movs	r2, #128	@ 0x80
 8000880:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000882:	4b1d      	ldr	r3, [pc, #116]	@ (80008f8 <MX_ETH_Init+0x8c>)
 8000884:	22e1      	movs	r2, #225	@ 0xe1
 8000886:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000888:	4b1b      	ldr	r3, [pc, #108]	@ (80008f8 <MX_ETH_Init+0x8c>)
 800088a:	2200      	movs	r2, #0
 800088c:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800088e:	4b1a      	ldr	r3, [pc, #104]	@ (80008f8 <MX_ETH_Init+0x8c>)
 8000890:	2200      	movs	r2, #0
 8000892:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000894:	4b18      	ldr	r3, [pc, #96]	@ (80008f8 <MX_ETH_Init+0x8c>)
 8000896:	2200      	movs	r2, #0
 8000898:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800089a:	4b15      	ldr	r3, [pc, #84]	@ (80008f0 <MX_ETH_Init+0x84>)
 800089c:	4a16      	ldr	r2, [pc, #88]	@ (80008f8 <MX_ETH_Init+0x8c>)
 800089e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80008a0:	4b13      	ldr	r3, [pc, #76]	@ (80008f0 <MX_ETH_Init+0x84>)
 80008a2:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80008a6:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80008a8:	4b11      	ldr	r3, [pc, #68]	@ (80008f0 <MX_ETH_Init+0x84>)
 80008aa:	4a14      	ldr	r2, [pc, #80]	@ (80008fc <MX_ETH_Init+0x90>)
 80008ac:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80008ae:	4b10      	ldr	r3, [pc, #64]	@ (80008f0 <MX_ETH_Init+0x84>)
 80008b0:	4a13      	ldr	r2, [pc, #76]	@ (8000900 <MX_ETH_Init+0x94>)
 80008b2:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80008b4:	4b0e      	ldr	r3, [pc, #56]	@ (80008f0 <MX_ETH_Init+0x84>)
 80008b6:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 80008ba:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80008bc:	480c      	ldr	r0, [pc, #48]	@ (80008f0 <MX_ETH_Init+0x84>)
 80008be:	f001 f9af 	bl	8001c20 <HAL_ETH_Init>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d001      	beq.n	80008cc <MX_ETH_Init+0x60>
  {
    Error_Handler();
 80008c8:	f000 fa40 	bl	8000d4c <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80008cc:	2238      	movs	r2, #56	@ 0x38
 80008ce:	2100      	movs	r1, #0
 80008d0:	480c      	ldr	r0, [pc, #48]	@ (8000904 <MX_ETH_Init+0x98>)
 80008d2:	f008 fa08 	bl	8008ce6 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80008d6:	4b0b      	ldr	r3, [pc, #44]	@ (8000904 <MX_ETH_Init+0x98>)
 80008d8:	2221      	movs	r2, #33	@ 0x21
 80008da:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80008dc:	4b09      	ldr	r3, [pc, #36]	@ (8000904 <MX_ETH_Init+0x98>)
 80008de:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 80008e2:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80008e4:	4b07      	ldr	r3, [pc, #28]	@ (8000904 <MX_ETH_Init+0x98>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80008ea:	bf00      	nop
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	2000024c 	.word	0x2000024c
 80008f4:	40028000 	.word	0x40028000
 80008f8:	2000094c 	.word	0x2000094c
 80008fc:	20000110 	.word	0x20000110
 8000900:	20000070 	.word	0x20000070
 8000904:	200001cc 	.word	0x200001cc

08000908 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800090c:	4b14      	ldr	r3, [pc, #80]	@ (8000960 <MX_USART3_UART_Init+0x58>)
 800090e:	4a15      	ldr	r2, [pc, #84]	@ (8000964 <MX_USART3_UART_Init+0x5c>)
 8000910:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000912:	4b13      	ldr	r3, [pc, #76]	@ (8000960 <MX_USART3_UART_Init+0x58>)
 8000914:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000918:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800091a:	4b11      	ldr	r3, [pc, #68]	@ (8000960 <MX_USART3_UART_Init+0x58>)
 800091c:	2200      	movs	r2, #0
 800091e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000920:	4b0f      	ldr	r3, [pc, #60]	@ (8000960 <MX_USART3_UART_Init+0x58>)
 8000922:	2200      	movs	r2, #0
 8000924:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000926:	4b0e      	ldr	r3, [pc, #56]	@ (8000960 <MX_USART3_UART_Init+0x58>)
 8000928:	2200      	movs	r2, #0
 800092a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800092c:	4b0c      	ldr	r3, [pc, #48]	@ (8000960 <MX_USART3_UART_Init+0x58>)
 800092e:	220c      	movs	r2, #12
 8000930:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000932:	4b0b      	ldr	r3, [pc, #44]	@ (8000960 <MX_USART3_UART_Init+0x58>)
 8000934:	2200      	movs	r2, #0
 8000936:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000938:	4b09      	ldr	r3, [pc, #36]	@ (8000960 <MX_USART3_UART_Init+0x58>)
 800093a:	2200      	movs	r2, #0
 800093c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800093e:	4b08      	ldr	r3, [pc, #32]	@ (8000960 <MX_USART3_UART_Init+0x58>)
 8000940:	2200      	movs	r2, #0
 8000942:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000944:	4b06      	ldr	r3, [pc, #24]	@ (8000960 <MX_USART3_UART_Init+0x58>)
 8000946:	2200      	movs	r2, #0
 8000948:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800094a:	4805      	ldr	r0, [pc, #20]	@ (8000960 <MX_USART3_UART_Init+0x58>)
 800094c:	f003 fc2a 	bl	80041a4 <HAL_UART_Init>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000956:	f000 f9f9 	bl	8000d4c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800095a:	bf00      	nop
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	200002fc 	.word	0x200002fc
 8000964:	40004800 	.word	0x40004800

08000968 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800096c:	4b14      	ldr	r3, [pc, #80]	@ (80009c0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800096e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000972:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000974:	4b12      	ldr	r3, [pc, #72]	@ (80009c0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000976:	2206      	movs	r2, #6
 8000978:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800097a:	4b11      	ldr	r3, [pc, #68]	@ (80009c0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800097c:	2202      	movs	r2, #2
 800097e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000980:	4b0f      	ldr	r3, [pc, #60]	@ (80009c0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000982:	2200      	movs	r2, #0
 8000984:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000986:	4b0e      	ldr	r3, [pc, #56]	@ (80009c0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000988:	2202      	movs	r2, #2
 800098a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800098c:	4b0c      	ldr	r3, [pc, #48]	@ (80009c0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800098e:	2201      	movs	r2, #1
 8000990:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000992:	4b0b      	ldr	r3, [pc, #44]	@ (80009c0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000994:	2200      	movs	r2, #0
 8000996:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000998:	4b09      	ldr	r3, [pc, #36]	@ (80009c0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800099a:	2200      	movs	r2, #0
 800099c:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800099e:	4b08      	ldr	r3, [pc, #32]	@ (80009c0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009a0:	2201      	movs	r2, #1
 80009a2:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80009a4:	4b06      	ldr	r3, [pc, #24]	@ (80009c0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80009aa:	4805      	ldr	r0, [pc, #20]	@ (80009c0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009ac:	f001 fe64 	bl	8002678 <HAL_PCD_Init>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80009b6:	f000 f9c9 	bl	8000d4c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80009ba:	bf00      	nop
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	20000384 	.word	0x20000384

080009c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b08c      	sub	sp, #48	@ 0x30
 80009c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ca:	f107 031c 	add.w	r3, r7, #28
 80009ce:	2200      	movs	r2, #0
 80009d0:	601a      	str	r2, [r3, #0]
 80009d2:	605a      	str	r2, [r3, #4]
 80009d4:	609a      	str	r2, [r3, #8]
 80009d6:	60da      	str	r2, [r3, #12]
 80009d8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009da:	4b4b      	ldr	r3, [pc, #300]	@ (8000b08 <MX_GPIO_Init+0x144>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009de:	4a4a      	ldr	r2, [pc, #296]	@ (8000b08 <MX_GPIO_Init+0x144>)
 80009e0:	f043 0304 	orr.w	r3, r3, #4
 80009e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80009e6:	4b48      	ldr	r3, [pc, #288]	@ (8000b08 <MX_GPIO_Init+0x144>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ea:	f003 0304 	and.w	r3, r3, #4
 80009ee:	61bb      	str	r3, [r7, #24]
 80009f0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009f2:	4b45      	ldr	r3, [pc, #276]	@ (8000b08 <MX_GPIO_Init+0x144>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009f6:	4a44      	ldr	r2, [pc, #272]	@ (8000b08 <MX_GPIO_Init+0x144>)
 80009f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80009fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80009fe:	4b42      	ldr	r3, [pc, #264]	@ (8000b08 <MX_GPIO_Init+0x144>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a06:	617b      	str	r3, [r7, #20]
 8000a08:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a0a:	4b3f      	ldr	r3, [pc, #252]	@ (8000b08 <MX_GPIO_Init+0x144>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a0e:	4a3e      	ldr	r2, [pc, #248]	@ (8000b08 <MX_GPIO_Init+0x144>)
 8000a10:	f043 0301 	orr.w	r3, r3, #1
 8000a14:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a16:	4b3c      	ldr	r3, [pc, #240]	@ (8000b08 <MX_GPIO_Init+0x144>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a1a:	f003 0301 	and.w	r3, r3, #1
 8000a1e:	613b      	str	r3, [r7, #16]
 8000a20:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a22:	4b39      	ldr	r3, [pc, #228]	@ (8000b08 <MX_GPIO_Init+0x144>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a26:	4a38      	ldr	r2, [pc, #224]	@ (8000b08 <MX_GPIO_Init+0x144>)
 8000a28:	f043 0302 	orr.w	r3, r3, #2
 8000a2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a2e:	4b36      	ldr	r3, [pc, #216]	@ (8000b08 <MX_GPIO_Init+0x144>)
 8000a30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a32:	f003 0302 	and.w	r3, r3, #2
 8000a36:	60fb      	str	r3, [r7, #12]
 8000a38:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a3a:	4b33      	ldr	r3, [pc, #204]	@ (8000b08 <MX_GPIO_Init+0x144>)
 8000a3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a3e:	4a32      	ldr	r2, [pc, #200]	@ (8000b08 <MX_GPIO_Init+0x144>)
 8000a40:	f043 0308 	orr.w	r3, r3, #8
 8000a44:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a46:	4b30      	ldr	r3, [pc, #192]	@ (8000b08 <MX_GPIO_Init+0x144>)
 8000a48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a4a:	f003 0308 	and.w	r3, r3, #8
 8000a4e:	60bb      	str	r3, [r7, #8]
 8000a50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a52:	4b2d      	ldr	r3, [pc, #180]	@ (8000b08 <MX_GPIO_Init+0x144>)
 8000a54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a56:	4a2c      	ldr	r2, [pc, #176]	@ (8000b08 <MX_GPIO_Init+0x144>)
 8000a58:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000a5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a5e:	4b2a      	ldr	r3, [pc, #168]	@ (8000b08 <MX_GPIO_Init+0x144>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000a66:	607b      	str	r3, [r7, #4]
 8000a68:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000a70:	4826      	ldr	r0, [pc, #152]	@ (8000b0c <MX_GPIO_Init+0x148>)
 8000a72:	f001 fdcf 	bl	8002614 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000a76:	2200      	movs	r2, #0
 8000a78:	2140      	movs	r1, #64	@ 0x40
 8000a7a:	4825      	ldr	r0, [pc, #148]	@ (8000b10 <MX_GPIO_Init+0x14c>)
 8000a7c:	f001 fdca 	bl	8002614 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000a80:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a86:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000a8a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000a90:	f107 031c 	add.w	r3, r7, #28
 8000a94:	4619      	mov	r1, r3
 8000a96:	481f      	ldr	r0, [pc, #124]	@ (8000b14 <MX_GPIO_Init+0x150>)
 8000a98:	f001 fc10 	bl	80022bc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000a9c:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000aa0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aae:	f107 031c 	add.w	r3, r7, #28
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	4815      	ldr	r0, [pc, #84]	@ (8000b0c <MX_GPIO_Init+0x148>)
 8000ab6:	f001 fc01 	bl	80022bc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000aba:	2340      	movs	r3, #64	@ 0x40
 8000abc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000abe:	2301      	movs	r3, #1
 8000ac0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000aca:	f107 031c 	add.w	r3, r7, #28
 8000ace:	4619      	mov	r1, r3
 8000ad0:	480f      	ldr	r0, [pc, #60]	@ (8000b10 <MX_GPIO_Init+0x14c>)
 8000ad2:	f001 fbf3 	bl	80022bc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000ad6:	2380      	movs	r3, #128	@ 0x80
 8000ad8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ada:	2300      	movs	r3, #0
 8000adc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000ae2:	f107 031c 	add.w	r3, r7, #28
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	4809      	ldr	r0, [pc, #36]	@ (8000b10 <MX_GPIO_Init+0x14c>)
 8000aea:	f001 fbe7 	bl	80022bc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000aee:	2200      	movs	r2, #0
 8000af0:	2105      	movs	r1, #5
 8000af2:	2028      	movs	r0, #40	@ 0x28
 8000af4:	f001 f86a 	bl	8001bcc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000af8:	2028      	movs	r0, #40	@ 0x28
 8000afa:	f001 f883 	bl	8001c04 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000afe:	bf00      	nop
 8000b00:	3730      	adds	r7, #48	@ 0x30
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	40023800 	.word	0x40023800
 8000b0c:	40020400 	.word	0x40020400
 8000b10:	40021800 	.word	0x40021800
 8000b14:	40020800 	.word	0x40020800

08000b18 <HAL_GPIO_EXTI_Callback>:
float mediaADC;
uint8_t envio_contador = 0;
bool processo_ativo = true;


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b084      	sub	sp, #16
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	4603      	mov	r3, r0
 8000b20:	80fb      	strh	r3, [r7, #6]

	if (GPIO_Pin == GPIO_PIN_13) {
 8000b22:	88fb      	ldrh	r3, [r7, #6]
 8000b24:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000b28:	d116      	bne.n	8000b58 <HAL_GPIO_EXTI_Callback+0x40>
		char *str1 = "Botao pressionado. Reiniciando processo.\r\n";
 8000b2a:	4b0d      	ldr	r3, [pc, #52]	@ (8000b60 <HAL_GPIO_EXTI_Callback+0x48>)
 8000b2c:	60fb      	str	r3, [r7, #12]

		HAL_UART_Transmit(&huart3, (uint8_t*) str1, strlen(str1), 100);
 8000b2e:	68f8      	ldr	r0, [r7, #12]
 8000b30:	f7ff fb86 	bl	8000240 <strlen>
 8000b34:	4603      	mov	r3, r0
 8000b36:	b29a      	uxth	r2, r3
 8000b38:	2364      	movs	r3, #100	@ 0x64
 8000b3a:	68f9      	ldr	r1, [r7, #12]
 8000b3c:	4809      	ldr	r0, [pc, #36]	@ (8000b64 <HAL_GPIO_EXTI_Callback+0x4c>)
 8000b3e:	f003 fb7f 	bl	8004240 <HAL_UART_Transmit>

		envio_contador = 0;
 8000b42:	4b09      	ldr	r3, [pc, #36]	@ (8000b68 <HAL_GPIO_EXTI_Callback+0x50>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	701a      	strb	r2, [r3, #0]
		processo_ativo = true;
 8000b48:	4b08      	ldr	r3, [pc, #32]	@ (8000b6c <HAL_GPIO_EXTI_Callback+0x54>)
 8000b4a:	2201      	movs	r2, #1
 8000b4c:	701a      	strb	r2, [r3, #0]
		osSemaphoreRelease(semStartHandle);
 8000b4e:	4b08      	ldr	r3, [pc, #32]	@ (8000b70 <HAL_GPIO_EXTI_Callback+0x58>)
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	4618      	mov	r0, r3
 8000b54:	f004 fdbc 	bl	80056d0 <osSemaphoreRelease>

	}

}
 8000b58:	bf00      	nop
 8000b5a:	3710      	adds	r7, #16
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	08009e94 	.word	0x08009e94
 8000b64:	200002fc 	.word	0x200002fc
 8000b68:	20000948 	.word	0x20000948
 8000b6c:	20000000 	.word	0x20000000
 8000b70:	20000874 	.word	0x20000874

08000b74 <TaskADCfun>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_TaskADCfun */
void TaskADCfun(void *argument)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b084      	sub	sp, #16
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {

	osSemaphoreAcquire(semStartHandle, osWaitForever);
 8000b7c:	4b13      	ldr	r3, [pc, #76]	@ (8000bcc <TaskADCfun+0x58>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	f04f 31ff 	mov.w	r1, #4294967295
 8000b84:	4618      	mov	r0, r3
 8000b86:	f004 fd3d 	bl	8005604 <osSemaphoreAcquire>

	for (int i = 0; i < 100; ++i) {
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	60fb      	str	r3, [r7, #12]
 8000b8e:	e014      	b.n	8000bba <TaskADCfun+0x46>
		//HAL_ADC_Start(&hadc1);
		//HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
		//bufferADC[i] = HAL_ADC_GetValue(&hadc1);
		bufferADC[i] = rand() % 4096;  // simulado
 8000b90:	f007 ff44 	bl	8008a1c <rand>
 8000b94:	4603      	mov	r3, r0
 8000b96:	425a      	negs	r2, r3
 8000b98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000b9c:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8000ba0:	bf58      	it	pl
 8000ba2:	4253      	negpl	r3, r2
 8000ba4:	b299      	uxth	r1, r3
 8000ba6:	4a0a      	ldr	r2, [pc, #40]	@ (8000bd0 <TaskADCfun+0x5c>)
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		osDelay(10);//tempo de requisição do ADC
 8000bae:	200a      	movs	r0, #10
 8000bb0:	f004 fc5e 	bl	8005470 <osDelay>
	for (int i = 0; i < 100; ++i) {
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	3301      	adds	r3, #1
 8000bb8:	60fb      	str	r3, [r7, #12]
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	2b63      	cmp	r3, #99	@ 0x63
 8000bbe:	dde7      	ble.n	8000b90 <TaskADCfun+0x1c>
	}
    osSemaphoreRelease(semCalcHandle);
 8000bc0:	4b04      	ldr	r3, [pc, #16]	@ (8000bd4 <TaskADCfun+0x60>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f004 fd83 	bl	80056d0 <osSemaphoreRelease>
	osSemaphoreAcquire(semStartHandle, osWaitForever);
 8000bca:	e7d7      	b.n	8000b7c <TaskADCfun+0x8>
 8000bcc:	20000874 	.word	0x20000874
 8000bd0:	2000087c 	.word	0x2000087c
 8000bd4:	20000870 	.word	0x20000870

08000bd8 <TaskCalcfun>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_TaskCalcfun */
void TaskCalcfun(void *argument)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b084      	sub	sp, #16
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TaskCalcfun */
  /* Infinite loop */
  for(;;)
  {

	osSemaphoreAcquire(semCalcHandle, osWaitForever);
 8000be0:	4b19      	ldr	r3, [pc, #100]	@ (8000c48 <TaskCalcfun+0x70>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	f04f 31ff 	mov.w	r1, #4294967295
 8000be8:	4618      	mov	r0, r3
 8000bea:	f004 fd0b 	bl	8005604 <osSemaphoreAcquire>
	uint32_t soma = 0;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	60fb      	str	r3, [r7, #12]

	for (int i = 0; i < 100; ++i) {
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	60bb      	str	r3, [r7, #8]
 8000bf6:	e00a      	b.n	8000c0e <TaskCalcfun+0x36>
		soma += bufferADC[i];
 8000bf8:	4a14      	ldr	r2, [pc, #80]	@ (8000c4c <TaskCalcfun+0x74>)
 8000bfa:	68bb      	ldr	r3, [r7, #8]
 8000bfc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c00:	461a      	mov	r2, r3
 8000c02:	68fb      	ldr	r3, [r7, #12]
 8000c04:	4413      	add	r3, r2
 8000c06:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < 100; ++i) {
 8000c08:	68bb      	ldr	r3, [r7, #8]
 8000c0a:	3301      	adds	r3, #1
 8000c0c:	60bb      	str	r3, [r7, #8]
 8000c0e:	68bb      	ldr	r3, [r7, #8]
 8000c10:	2b63      	cmp	r3, #99	@ 0x63
 8000c12:	ddf1      	ble.n	8000bf8 <TaskCalcfun+0x20>
	}

	mediaADC = soma / 100.00;
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	ee07 3a90 	vmov	s15, r3
 8000c1a:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8000c1e:	ed9f 5b08 	vldr	d5, [pc, #32]	@ 8000c40 <TaskCalcfun+0x68>
 8000c22:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000c26:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000c2a:	4b09      	ldr	r3, [pc, #36]	@ (8000c50 <TaskCalcfun+0x78>)
 8000c2c:	edc3 7a00 	vstr	s15, [r3]
	osSemaphoreRelease(semSendHandle);
 8000c30:	4b08      	ldr	r3, [pc, #32]	@ (8000c54 <TaskCalcfun+0x7c>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	4618      	mov	r0, r3
 8000c36:	f004 fd4b 	bl	80056d0 <osSemaphoreRelease>
  {
 8000c3a:	e7d1      	b.n	8000be0 <TaskCalcfun+0x8>
 8000c3c:	f3af 8000 	nop.w
 8000c40:	00000000 	.word	0x00000000
 8000c44:	40590000 	.word	0x40590000
 8000c48:	20000870 	.word	0x20000870
 8000c4c:	2000087c 	.word	0x2000087c
 8000c50:	20000944 	.word	0x20000944
 8000c54:	20000878 	.word	0x20000878

08000c58 <TaskSendfun>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_TaskSendfun */
void TaskSendfun(void *argument)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b094      	sub	sp, #80	@ 0x50
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  char msg [64];

  for(;;)
  {

	osSemaphoreAcquire(semSendHandle,osWaitForever);
 8000c60:	4b28      	ldr	r3, [pc, #160]	@ (8000d04 <TaskSendfun+0xac>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	f04f 31ff 	mov.w	r1, #4294967295
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f004 fccb 	bl	8005604 <osSemaphoreAcquire>

    int parte_inteira = (int)mediaADC;
 8000c6e:	4b26      	ldr	r3, [pc, #152]	@ (8000d08 <TaskSendfun+0xb0>)
 8000c70:	edd3 7a00 	vldr	s15, [r3]
 8000c74:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000c78:	ee17 3a90 	vmov	r3, s15
 8000c7c:	64fb      	str	r3, [r7, #76]	@ 0x4c
    int parte_decimal = (int)((mediaADC - parte_inteira) * 100);  // 2 casas decimais
 8000c7e:	4b22      	ldr	r3, [pc, #136]	@ (8000d08 <TaskSendfun+0xb0>)
 8000c80:	ed93 7a00 	vldr	s14, [r3]
 8000c84:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000c86:	ee07 3a90 	vmov	s15, r3
 8000c8a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c8e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000c92:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 8000d0c <TaskSendfun+0xb4>
 8000c96:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c9a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000c9e:	ee17 3a90 	vmov	r3, s15
 8000ca2:	64bb      	str	r3, [r7, #72]	@ 0x48


    sprintf(msg, "Media enviada: %d.%02d\r\n", parte_inteira, parte_decimal);
 8000ca4:	f107 0008 	add.w	r0, r7, #8
 8000ca8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000caa:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8000cac:	4918      	ldr	r1, [pc, #96]	@ (8000d10 <TaskSendfun+0xb8>)
 8000cae:	f007 ffb5 	bl	8008c1c <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000cb2:	f107 0308 	add.w	r3, r7, #8
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f7ff fac2 	bl	8000240 <strlen>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	b29a      	uxth	r2, r3
 8000cc0:	f107 0108 	add.w	r1, r7, #8
 8000cc4:	f04f 33ff 	mov.w	r3, #4294967295
 8000cc8:	4812      	ldr	r0, [pc, #72]	@ (8000d14 <TaskSendfun+0xbc>)
 8000cca:	f003 fab9 	bl	8004240 <HAL_UART_Transmit>

	envio_contador++;
 8000cce:	4b12      	ldr	r3, [pc, #72]	@ (8000d18 <TaskSendfun+0xc0>)
 8000cd0:	781b      	ldrb	r3, [r3, #0]
 8000cd2:	3301      	adds	r3, #1
 8000cd4:	b2da      	uxtb	r2, r3
 8000cd6:	4b10      	ldr	r3, [pc, #64]	@ (8000d18 <TaskSendfun+0xc0>)
 8000cd8:	701a      	strb	r2, [r3, #0]

    if (envio_contador >= 10)
 8000cda:	4b0f      	ldr	r3, [pc, #60]	@ (8000d18 <TaskSendfun+0xc0>)
 8000cdc:	781b      	ldrb	r3, [r3, #0]
 8000cde:	2b09      	cmp	r3, #9
 8000ce0:	d90a      	bls.n	8000cf8 <TaskSendfun+0xa0>
    {
      HAL_UART_Transmit(&huart3, (uint8_t*)"Processo concluido. Aguardando botao...\r\n", 41, HAL_MAX_DELAY);
 8000ce2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ce6:	2229      	movs	r2, #41	@ 0x29
 8000ce8:	490c      	ldr	r1, [pc, #48]	@ (8000d1c <TaskSendfun+0xc4>)
 8000cea:	480a      	ldr	r0, [pc, #40]	@ (8000d14 <TaskSendfun+0xbc>)
 8000cec:	f003 faa8 	bl	8004240 <HAL_UART_Transmit>
      processo_ativo = false;
 8000cf0:	4b0b      	ldr	r3, [pc, #44]	@ (8000d20 <TaskSendfun+0xc8>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	701a      	strb	r2, [r3, #0]
 8000cf6:	e7b3      	b.n	8000c60 <TaskSendfun+0x8>
    }
    else
    {
        osSemaphoreRelease(semStartHandle); // inicia novo ciclo
 8000cf8:	4b0a      	ldr	r3, [pc, #40]	@ (8000d24 <TaskSendfun+0xcc>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f004 fce7 	bl	80056d0 <osSemaphoreRelease>
  {
 8000d02:	e7ad      	b.n	8000c60 <TaskSendfun+0x8>
 8000d04:	20000878 	.word	0x20000878
 8000d08:	20000944 	.word	0x20000944
 8000d0c:	42c80000 	.word	0x42c80000
 8000d10:	08009ec0 	.word	0x08009ec0
 8000d14:	200002fc 	.word	0x200002fc
 8000d18:	20000948 	.word	0x20000948
 8000d1c:	08009edc 	.word	0x08009edc
 8000d20:	20000000 	.word	0x20000000
 8000d24:	20000874 	.word	0x20000874

08000d28 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	4a04      	ldr	r2, [pc, #16]	@ (8000d48 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d36:	4293      	cmp	r3, r2
 8000d38:	d101      	bne.n	8000d3e <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000d3a:	f000 fbb3 	bl	80014a4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d3e:	bf00      	nop
 8000d40:	3708      	adds	r7, #8
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	40010000 	.word	0x40010000

08000d4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d50:	b672      	cpsid	i
}
 8000d52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d54:	bf00      	nop
 8000d56:	e7fd      	b.n	8000d54 <Error_Handler+0x8>

08000d58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000d5e:	4b11      	ldr	r3, [pc, #68]	@ (8000da4 <HAL_MspInit+0x4c>)
 8000d60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d62:	4a10      	ldr	r2, [pc, #64]	@ (8000da4 <HAL_MspInit+0x4c>)
 8000d64:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d68:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d6a:	4b0e      	ldr	r3, [pc, #56]	@ (8000da4 <HAL_MspInit+0x4c>)
 8000d6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d72:	607b      	str	r3, [r7, #4]
 8000d74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d76:	4b0b      	ldr	r3, [pc, #44]	@ (8000da4 <HAL_MspInit+0x4c>)
 8000d78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d7a:	4a0a      	ldr	r2, [pc, #40]	@ (8000da4 <HAL_MspInit+0x4c>)
 8000d7c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d80:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d82:	4b08      	ldr	r3, [pc, #32]	@ (8000da4 <HAL_MspInit+0x4c>)
 8000d84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d86:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d8a:	603b      	str	r3, [r7, #0]
 8000d8c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d8e:	2200      	movs	r2, #0
 8000d90:	210f      	movs	r1, #15
 8000d92:	f06f 0001 	mvn.w	r0, #1
 8000d96:	f000 ff19 	bl	8001bcc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d9a:	bf00      	nop
 8000d9c:	3708      	adds	r7, #8
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	40023800 	.word	0x40023800

08000da8 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b08a      	sub	sp, #40	@ 0x28
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db0:	f107 0314 	add.w	r3, r7, #20
 8000db4:	2200      	movs	r2, #0
 8000db6:	601a      	str	r2, [r3, #0]
 8000db8:	605a      	str	r2, [r3, #4]
 8000dba:	609a      	str	r2, [r3, #8]
 8000dbc:	60da      	str	r2, [r3, #12]
 8000dbe:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	4a15      	ldr	r2, [pc, #84]	@ (8000e1c <HAL_ADC_MspInit+0x74>)
 8000dc6:	4293      	cmp	r3, r2
 8000dc8:	d123      	bne.n	8000e12 <HAL_ADC_MspInit+0x6a>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000dca:	4b15      	ldr	r3, [pc, #84]	@ (8000e20 <HAL_ADC_MspInit+0x78>)
 8000dcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dce:	4a14      	ldr	r2, [pc, #80]	@ (8000e20 <HAL_ADC_MspInit+0x78>)
 8000dd0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000dd4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000dd6:	4b12      	ldr	r3, [pc, #72]	@ (8000e20 <HAL_ADC_MspInit+0x78>)
 8000dd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000dde:	613b      	str	r3, [r7, #16]
 8000de0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000de2:	4b0f      	ldr	r3, [pc, #60]	@ (8000e20 <HAL_ADC_MspInit+0x78>)
 8000de4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000de6:	4a0e      	ldr	r2, [pc, #56]	@ (8000e20 <HAL_ADC_MspInit+0x78>)
 8000de8:	f043 0301 	orr.w	r3, r3, #1
 8000dec:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dee:	4b0c      	ldr	r3, [pc, #48]	@ (8000e20 <HAL_ADC_MspInit+0x78>)
 8000df0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000df2:	f003 0301 	and.w	r3, r3, #1
 8000df6:	60fb      	str	r3, [r7, #12]
 8000df8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000dfe:	2303      	movs	r3, #3
 8000e00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e02:	2300      	movs	r3, #0
 8000e04:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e06:	f107 0314 	add.w	r3, r7, #20
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	4805      	ldr	r0, [pc, #20]	@ (8000e24 <HAL_ADC_MspInit+0x7c>)
 8000e0e:	f001 fa55 	bl	80022bc <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000e12:	bf00      	nop
 8000e14:	3728      	adds	r7, #40	@ 0x28
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	40012000 	.word	0x40012000
 8000e20:	40023800 	.word	0x40023800
 8000e24:	40020000 	.word	0x40020000

08000e28 <HAL_ETH_MspInit>:
  * This function configures the hardware resources used in this example
  * @param heth: ETH handle pointer
  * @retval None
  */
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b08e      	sub	sp, #56	@ 0x38
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e30:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e34:	2200      	movs	r2, #0
 8000e36:	601a      	str	r2, [r3, #0]
 8000e38:	605a      	str	r2, [r3, #4]
 8000e3a:	609a      	str	r2, [r3, #8]
 8000e3c:	60da      	str	r2, [r3, #12]
 8000e3e:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4a4e      	ldr	r2, [pc, #312]	@ (8000f80 <HAL_ETH_MspInit+0x158>)
 8000e46:	4293      	cmp	r3, r2
 8000e48:	f040 8096 	bne.w	8000f78 <HAL_ETH_MspInit+0x150>
  {
    /* USER CODE BEGIN ETH_MspInit 0 */

    /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000e4c:	4b4d      	ldr	r3, [pc, #308]	@ (8000f84 <HAL_ETH_MspInit+0x15c>)
 8000e4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e50:	4a4c      	ldr	r2, [pc, #304]	@ (8000f84 <HAL_ETH_MspInit+0x15c>)
 8000e52:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000e56:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e58:	4b4a      	ldr	r3, [pc, #296]	@ (8000f84 <HAL_ETH_MspInit+0x15c>)
 8000e5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e5c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000e60:	623b      	str	r3, [r7, #32]
 8000e62:	6a3b      	ldr	r3, [r7, #32]
 8000e64:	4b47      	ldr	r3, [pc, #284]	@ (8000f84 <HAL_ETH_MspInit+0x15c>)
 8000e66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e68:	4a46      	ldr	r2, [pc, #280]	@ (8000f84 <HAL_ETH_MspInit+0x15c>)
 8000e6a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000e6e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e70:	4b44      	ldr	r3, [pc, #272]	@ (8000f84 <HAL_ETH_MspInit+0x15c>)
 8000e72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e74:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000e78:	61fb      	str	r3, [r7, #28]
 8000e7a:	69fb      	ldr	r3, [r7, #28]
 8000e7c:	4b41      	ldr	r3, [pc, #260]	@ (8000f84 <HAL_ETH_MspInit+0x15c>)
 8000e7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e80:	4a40      	ldr	r2, [pc, #256]	@ (8000f84 <HAL_ETH_MspInit+0x15c>)
 8000e82:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8000e86:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e88:	4b3e      	ldr	r3, [pc, #248]	@ (8000f84 <HAL_ETH_MspInit+0x15c>)
 8000e8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e8c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000e90:	61bb      	str	r3, [r7, #24]
 8000e92:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e94:	4b3b      	ldr	r3, [pc, #236]	@ (8000f84 <HAL_ETH_MspInit+0x15c>)
 8000e96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e98:	4a3a      	ldr	r2, [pc, #232]	@ (8000f84 <HAL_ETH_MspInit+0x15c>)
 8000e9a:	f043 0304 	orr.w	r3, r3, #4
 8000e9e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ea0:	4b38      	ldr	r3, [pc, #224]	@ (8000f84 <HAL_ETH_MspInit+0x15c>)
 8000ea2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ea4:	f003 0304 	and.w	r3, r3, #4
 8000ea8:	617b      	str	r3, [r7, #20]
 8000eaa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eac:	4b35      	ldr	r3, [pc, #212]	@ (8000f84 <HAL_ETH_MspInit+0x15c>)
 8000eae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eb0:	4a34      	ldr	r2, [pc, #208]	@ (8000f84 <HAL_ETH_MspInit+0x15c>)
 8000eb2:	f043 0301 	orr.w	r3, r3, #1
 8000eb6:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eb8:	4b32      	ldr	r3, [pc, #200]	@ (8000f84 <HAL_ETH_MspInit+0x15c>)
 8000eba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ebc:	f003 0301 	and.w	r3, r3, #1
 8000ec0:	613b      	str	r3, [r7, #16]
 8000ec2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ec4:	4b2f      	ldr	r3, [pc, #188]	@ (8000f84 <HAL_ETH_MspInit+0x15c>)
 8000ec6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ec8:	4a2e      	ldr	r2, [pc, #184]	@ (8000f84 <HAL_ETH_MspInit+0x15c>)
 8000eca:	f043 0302 	orr.w	r3, r3, #2
 8000ece:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ed0:	4b2c      	ldr	r3, [pc, #176]	@ (8000f84 <HAL_ETH_MspInit+0x15c>)
 8000ed2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ed4:	f003 0302 	and.w	r3, r3, #2
 8000ed8:	60fb      	str	r3, [r7, #12]
 8000eda:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000edc:	4b29      	ldr	r3, [pc, #164]	@ (8000f84 <HAL_ETH_MspInit+0x15c>)
 8000ede:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ee0:	4a28      	ldr	r2, [pc, #160]	@ (8000f84 <HAL_ETH_MspInit+0x15c>)
 8000ee2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000ee6:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ee8:	4b26      	ldr	r3, [pc, #152]	@ (8000f84 <HAL_ETH_MspInit+0x15c>)
 8000eea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000ef0:	60bb      	str	r3, [r7, #8]
 8000ef2:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000ef4:	2332      	movs	r3, #50	@ 0x32
 8000ef6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef8:	2302      	movs	r3, #2
 8000efa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efc:	2300      	movs	r3, #0
 8000efe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f00:	2303      	movs	r3, #3
 8000f02:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f04:	230b      	movs	r3, #11
 8000f06:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f08:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	481e      	ldr	r0, [pc, #120]	@ (8000f88 <HAL_ETH_MspInit+0x160>)
 8000f10:	f001 f9d4 	bl	80022bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000f14:	2386      	movs	r3, #134	@ 0x86
 8000f16:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f18:	2302      	movs	r3, #2
 8000f1a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f20:	2303      	movs	r3, #3
 8000f22:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f24:	230b      	movs	r3, #11
 8000f26:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f28:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	4817      	ldr	r0, [pc, #92]	@ (8000f8c <HAL_ETH_MspInit+0x164>)
 8000f30:	f001 f9c4 	bl	80022bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000f34:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f38:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f3a:	2302      	movs	r3, #2
 8000f3c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f42:	2303      	movs	r3, #3
 8000f44:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f46:	230b      	movs	r3, #11
 8000f48:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000f4a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f4e:	4619      	mov	r1, r3
 8000f50:	480f      	ldr	r0, [pc, #60]	@ (8000f90 <HAL_ETH_MspInit+0x168>)
 8000f52:	f001 f9b3 	bl	80022bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000f56:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000f5a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f5c:	2302      	movs	r3, #2
 8000f5e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f60:	2300      	movs	r3, #0
 8000f62:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f64:	2303      	movs	r3, #3
 8000f66:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f68:	230b      	movs	r3, #11
 8000f6a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f6c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f70:	4619      	mov	r1, r3
 8000f72:	4808      	ldr	r0, [pc, #32]	@ (8000f94 <HAL_ETH_MspInit+0x16c>)
 8000f74:	f001 f9a2 	bl	80022bc <HAL_GPIO_Init>

    /* USER CODE END ETH_MspInit 1 */

  }

}
 8000f78:	bf00      	nop
 8000f7a:	3738      	adds	r7, #56	@ 0x38
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	40028000 	.word	0x40028000
 8000f84:	40023800 	.word	0x40023800
 8000f88:	40020800 	.word	0x40020800
 8000f8c:	40020000 	.word	0x40020000
 8000f90:	40020400 	.word	0x40020400
 8000f94:	40021800 	.word	0x40021800

08000f98 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b0ae      	sub	sp, #184	@ 0xb8
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa0:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	601a      	str	r2, [r3, #0]
 8000fa8:	605a      	str	r2, [r3, #4]
 8000faa:	609a      	str	r2, [r3, #8]
 8000fac:	60da      	str	r2, [r3, #12]
 8000fae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fb0:	f107 0314 	add.w	r3, r7, #20
 8000fb4:	2290      	movs	r2, #144	@ 0x90
 8000fb6:	2100      	movs	r1, #0
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f007 fe94 	bl	8008ce6 <memset>
  if(huart->Instance==USART3)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	4a22      	ldr	r2, [pc, #136]	@ (800104c <HAL_UART_MspInit+0xb4>)
 8000fc4:	4293      	cmp	r3, r2
 8000fc6:	d13c      	bne.n	8001042 <HAL_UART_MspInit+0xaa>

    /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000fc8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000fcc:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fd2:	f107 0314 	add.w	r3, r7, #20
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f002 f9ee 	bl	80033b8 <HAL_RCCEx_PeriphCLKConfig>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d001      	beq.n	8000fe6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000fe2:	f7ff feb3 	bl	8000d4c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000fe6:	4b1a      	ldr	r3, [pc, #104]	@ (8001050 <HAL_UART_MspInit+0xb8>)
 8000fe8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fea:	4a19      	ldr	r2, [pc, #100]	@ (8001050 <HAL_UART_MspInit+0xb8>)
 8000fec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000ff0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ff2:	4b17      	ldr	r3, [pc, #92]	@ (8001050 <HAL_UART_MspInit+0xb8>)
 8000ff4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ff6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000ffa:	613b      	str	r3, [r7, #16]
 8000ffc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ffe:	4b14      	ldr	r3, [pc, #80]	@ (8001050 <HAL_UART_MspInit+0xb8>)
 8001000:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001002:	4a13      	ldr	r2, [pc, #76]	@ (8001050 <HAL_UART_MspInit+0xb8>)
 8001004:	f043 0308 	orr.w	r3, r3, #8
 8001008:	6313      	str	r3, [r2, #48]	@ 0x30
 800100a:	4b11      	ldr	r3, [pc, #68]	@ (8001050 <HAL_UART_MspInit+0xb8>)
 800100c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800100e:	f003 0308 	and.w	r3, r3, #8
 8001012:	60fb      	str	r3, [r7, #12]
 8001014:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001016:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800101a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800101e:	2302      	movs	r3, #2
 8001020:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001024:	2300      	movs	r3, #0
 8001026:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800102a:	2303      	movs	r3, #3
 800102c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001030:	2307      	movs	r3, #7
 8001032:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001036:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800103a:	4619      	mov	r1, r3
 800103c:	4805      	ldr	r0, [pc, #20]	@ (8001054 <HAL_UART_MspInit+0xbc>)
 800103e:	f001 f93d 	bl	80022bc <HAL_GPIO_Init>

    /* USER CODE END USART3_MspInit 1 */

  }

}
 8001042:	bf00      	nop
 8001044:	37b8      	adds	r7, #184	@ 0xb8
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	40004800 	.word	0x40004800
 8001050:	40023800 	.word	0x40023800
 8001054:	40020c00 	.word	0x40020c00

08001058 <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b0ae      	sub	sp, #184	@ 0xb8
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001060:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001064:	2200      	movs	r2, #0
 8001066:	601a      	str	r2, [r3, #0]
 8001068:	605a      	str	r2, [r3, #4]
 800106a:	609a      	str	r2, [r3, #8]
 800106c:	60da      	str	r2, [r3, #12]
 800106e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001070:	f107 0314 	add.w	r3, r7, #20
 8001074:	2290      	movs	r2, #144	@ 0x90
 8001076:	2100      	movs	r1, #0
 8001078:	4618      	mov	r0, r3
 800107a:	f007 fe34 	bl	8008ce6 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001086:	d159      	bne.n	800113c <HAL_PCD_MspInit+0xe4>

    /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001088:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800108c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800108e:	2300      	movs	r3, #0
 8001090:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001094:	f107 0314 	add.w	r3, r7, #20
 8001098:	4618      	mov	r0, r3
 800109a:	f002 f98d 	bl	80033b8 <HAL_RCCEx_PeriphCLKConfig>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d001      	beq.n	80010a8 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 80010a4:	f7ff fe52 	bl	8000d4c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010a8:	4b26      	ldr	r3, [pc, #152]	@ (8001144 <HAL_PCD_MspInit+0xec>)
 80010aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ac:	4a25      	ldr	r2, [pc, #148]	@ (8001144 <HAL_PCD_MspInit+0xec>)
 80010ae:	f043 0301 	orr.w	r3, r3, #1
 80010b2:	6313      	str	r3, [r2, #48]	@ 0x30
 80010b4:	4b23      	ldr	r3, [pc, #140]	@ (8001144 <HAL_PCD_MspInit+0xec>)
 80010b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010b8:	f003 0301 	and.w	r3, r3, #1
 80010bc:	613b      	str	r3, [r7, #16]
 80010be:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80010c0:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 80010c4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c8:	2302      	movs	r3, #2
 80010ca:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ce:	2300      	movs	r3, #0
 80010d0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010d4:	2303      	movs	r3, #3
 80010d6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80010da:	230a      	movs	r3, #10
 80010dc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010e0:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80010e4:	4619      	mov	r1, r3
 80010e6:	4818      	ldr	r0, [pc, #96]	@ (8001148 <HAL_PCD_MspInit+0xf0>)
 80010e8:	f001 f8e8 	bl	80022bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80010ec:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80010f0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010f4:	2300      	movs	r3, #0
 80010f6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fa:	2300      	movs	r3, #0
 80010fc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001100:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001104:	4619      	mov	r1, r3
 8001106:	4810      	ldr	r0, [pc, #64]	@ (8001148 <HAL_PCD_MspInit+0xf0>)
 8001108:	f001 f8d8 	bl	80022bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800110c:	4b0d      	ldr	r3, [pc, #52]	@ (8001144 <HAL_PCD_MspInit+0xec>)
 800110e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001110:	4a0c      	ldr	r2, [pc, #48]	@ (8001144 <HAL_PCD_MspInit+0xec>)
 8001112:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001116:	6353      	str	r3, [r2, #52]	@ 0x34
 8001118:	4b0a      	ldr	r3, [pc, #40]	@ (8001144 <HAL_PCD_MspInit+0xec>)
 800111a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800111c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001120:	60fb      	str	r3, [r7, #12]
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	4b07      	ldr	r3, [pc, #28]	@ (8001144 <HAL_PCD_MspInit+0xec>)
 8001126:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001128:	4a06      	ldr	r2, [pc, #24]	@ (8001144 <HAL_PCD_MspInit+0xec>)
 800112a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800112e:	6453      	str	r3, [r2, #68]	@ 0x44
 8001130:	4b04      	ldr	r3, [pc, #16]	@ (8001144 <HAL_PCD_MspInit+0xec>)
 8001132:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001134:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001138:	60bb      	str	r3, [r7, #8]
 800113a:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 800113c:	bf00      	nop
 800113e:	37b8      	adds	r7, #184	@ 0xb8
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}
 8001144:	40023800 	.word	0x40023800
 8001148:	40020000 	.word	0x40020000

0800114c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b08c      	sub	sp, #48	@ 0x30
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001154:	2300      	movs	r3, #0
 8001156:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001158:	2300      	movs	r3, #0
 800115a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800115c:	4b2e      	ldr	r3, [pc, #184]	@ (8001218 <HAL_InitTick+0xcc>)
 800115e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001160:	4a2d      	ldr	r2, [pc, #180]	@ (8001218 <HAL_InitTick+0xcc>)
 8001162:	f043 0301 	orr.w	r3, r3, #1
 8001166:	6453      	str	r3, [r2, #68]	@ 0x44
 8001168:	4b2b      	ldr	r3, [pc, #172]	@ (8001218 <HAL_InitTick+0xcc>)
 800116a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800116c:	f003 0301 	and.w	r3, r3, #1
 8001170:	60bb      	str	r3, [r7, #8]
 8001172:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001174:	f107 020c 	add.w	r2, r7, #12
 8001178:	f107 0310 	add.w	r3, r7, #16
 800117c:	4611      	mov	r1, r2
 800117e:	4618      	mov	r0, r3
 8001180:	f002 f8e8 	bl	8003354 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001184:	f002 f8d2 	bl	800332c <HAL_RCC_GetPCLK2Freq>
 8001188:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800118a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800118c:	4a23      	ldr	r2, [pc, #140]	@ (800121c <HAL_InitTick+0xd0>)
 800118e:	fba2 2303 	umull	r2, r3, r2, r3
 8001192:	0c9b      	lsrs	r3, r3, #18
 8001194:	3b01      	subs	r3, #1
 8001196:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001198:	4b21      	ldr	r3, [pc, #132]	@ (8001220 <HAL_InitTick+0xd4>)
 800119a:	4a22      	ldr	r2, [pc, #136]	@ (8001224 <HAL_InitTick+0xd8>)
 800119c:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800119e:	4b20      	ldr	r3, [pc, #128]	@ (8001220 <HAL_InitTick+0xd4>)
 80011a0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80011a4:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80011a6:	4a1e      	ldr	r2, [pc, #120]	@ (8001220 <HAL_InitTick+0xd4>)
 80011a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011aa:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80011ac:	4b1c      	ldr	r3, [pc, #112]	@ (8001220 <HAL_InitTick+0xd4>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011b2:	4b1b      	ldr	r3, [pc, #108]	@ (8001220 <HAL_InitTick+0xd4>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011b8:	4b19      	ldr	r3, [pc, #100]	@ (8001220 <HAL_InitTick+0xd4>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80011be:	4818      	ldr	r0, [pc, #96]	@ (8001220 <HAL_InitTick+0xd4>)
 80011c0:	f002 fd22 	bl	8003c08 <HAL_TIM_Base_Init>
 80011c4:	4603      	mov	r3, r0
 80011c6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 80011ca:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d11b      	bne.n	800120a <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80011d2:	4813      	ldr	r0, [pc, #76]	@ (8001220 <HAL_InitTick+0xd4>)
 80011d4:	f002 fd7a 	bl	8003ccc <HAL_TIM_Base_Start_IT>
 80011d8:	4603      	mov	r3, r0
 80011da:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80011de:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d111      	bne.n	800120a <HAL_InitTick+0xbe>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80011e6:	2019      	movs	r0, #25
 80011e8:	f000 fd0c 	bl	8001c04 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	2b0f      	cmp	r3, #15
 80011f0:	d808      	bhi.n	8001204 <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 80011f2:	2200      	movs	r2, #0
 80011f4:	6879      	ldr	r1, [r7, #4]
 80011f6:	2019      	movs	r0, #25
 80011f8:	f000 fce8 	bl	8001bcc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80011fc:	4a0a      	ldr	r2, [pc, #40]	@ (8001228 <HAL_InitTick+0xdc>)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6013      	str	r3, [r2, #0]
 8001202:	e002      	b.n	800120a <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 8001204:	2301      	movs	r3, #1
 8001206:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800120a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800120e:	4618      	mov	r0, r3
 8001210:	3730      	adds	r7, #48	@ 0x30
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	40023800 	.word	0x40023800
 800121c:	431bde83 	.word	0x431bde83
 8001220:	20000954 	.word	0x20000954
 8001224:	40010000 	.word	0x40010000
 8001228:	20000008 	.word	0x20000008

0800122c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001230:	bf00      	nop
 8001232:	e7fd      	b.n	8001230 <NMI_Handler+0x4>

08001234 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001238:	bf00      	nop
 800123a:	e7fd      	b.n	8001238 <HardFault_Handler+0x4>

0800123c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001240:	bf00      	nop
 8001242:	e7fd      	b.n	8001240 <MemManage_Handler+0x4>

08001244 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001248:	bf00      	nop
 800124a:	e7fd      	b.n	8001248 <BusFault_Handler+0x4>

0800124c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001250:	bf00      	nop
 8001252:	e7fd      	b.n	8001250 <UsageFault_Handler+0x4>

08001254 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001258:	bf00      	nop
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr
	...

08001264 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001268:	4802      	ldr	r0, [pc, #8]	@ (8001274 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800126a:	f002 fda7 	bl	8003dbc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800126e:	bf00      	nop
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	20000954 	.word	0x20000954

08001278 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 800127c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001280:	f001 f9e2 	bl	8002648 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001284:	bf00      	nop
 8001286:	bd80      	pop	{r7, pc}

08001288 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0
  return 1;
 800128c:	2301      	movs	r3, #1
}
 800128e:	4618      	mov	r0, r3
 8001290:	46bd      	mov	sp, r7
 8001292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001296:	4770      	bx	lr

08001298 <_kill>:

int _kill(int pid, int sig)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
 80012a0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80012a2:	f007 fdcd 	bl	8008e40 <__errno>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2216      	movs	r2, #22
 80012aa:	601a      	str	r2, [r3, #0]
  return -1;
 80012ac:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012b0:	4618      	mov	r0, r3
 80012b2:	3708      	adds	r7, #8
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}

080012b8 <_exit>:

void _exit (int status)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80012c0:	f04f 31ff 	mov.w	r1, #4294967295
 80012c4:	6878      	ldr	r0, [r7, #4]
 80012c6:	f7ff ffe7 	bl	8001298 <_kill>
  while (1) {}    /* Make sure we hang here */
 80012ca:	bf00      	nop
 80012cc:	e7fd      	b.n	80012ca <_exit+0x12>

080012ce <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80012ce:	b580      	push	{r7, lr}
 80012d0:	b086      	sub	sp, #24
 80012d2:	af00      	add	r7, sp, #0
 80012d4:	60f8      	str	r0, [r7, #12]
 80012d6:	60b9      	str	r1, [r7, #8]
 80012d8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012da:	2300      	movs	r3, #0
 80012dc:	617b      	str	r3, [r7, #20]
 80012de:	e00a      	b.n	80012f6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80012e0:	f3af 8000 	nop.w
 80012e4:	4601      	mov	r1, r0
 80012e6:	68bb      	ldr	r3, [r7, #8]
 80012e8:	1c5a      	adds	r2, r3, #1
 80012ea:	60ba      	str	r2, [r7, #8]
 80012ec:	b2ca      	uxtb	r2, r1
 80012ee:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	3301      	adds	r3, #1
 80012f4:	617b      	str	r3, [r7, #20]
 80012f6:	697a      	ldr	r2, [r7, #20]
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	429a      	cmp	r2, r3
 80012fc:	dbf0      	blt.n	80012e0 <_read+0x12>
  }

  return len;
 80012fe:	687b      	ldr	r3, [r7, #4]
}
 8001300:	4618      	mov	r0, r3
 8001302:	3718      	adds	r7, #24
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}

08001308 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b086      	sub	sp, #24
 800130c:	af00      	add	r7, sp, #0
 800130e:	60f8      	str	r0, [r7, #12]
 8001310:	60b9      	str	r1, [r7, #8]
 8001312:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001314:	2300      	movs	r3, #0
 8001316:	617b      	str	r3, [r7, #20]
 8001318:	e009      	b.n	800132e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800131a:	68bb      	ldr	r3, [r7, #8]
 800131c:	1c5a      	adds	r2, r3, #1
 800131e:	60ba      	str	r2, [r7, #8]
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	4618      	mov	r0, r3
 8001324:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	3301      	adds	r3, #1
 800132c:	617b      	str	r3, [r7, #20]
 800132e:	697a      	ldr	r2, [r7, #20]
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	429a      	cmp	r2, r3
 8001334:	dbf1      	blt.n	800131a <_write+0x12>
  }
  return len;
 8001336:	687b      	ldr	r3, [r7, #4]
}
 8001338:	4618      	mov	r0, r3
 800133a:	3718      	adds	r7, #24
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}

08001340 <_close>:

int _close(int file)
{
 8001340:	b480      	push	{r7}
 8001342:	b083      	sub	sp, #12
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001348:	f04f 33ff 	mov.w	r3, #4294967295
}
 800134c:	4618      	mov	r0, r3
 800134e:	370c      	adds	r7, #12
 8001350:	46bd      	mov	sp, r7
 8001352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001356:	4770      	bx	lr

08001358 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001358:	b480      	push	{r7}
 800135a:	b083      	sub	sp, #12
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
 8001360:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001368:	605a      	str	r2, [r3, #4]
  return 0;
 800136a:	2300      	movs	r3, #0
}
 800136c:	4618      	mov	r0, r3
 800136e:	370c      	adds	r7, #12
 8001370:	46bd      	mov	sp, r7
 8001372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001376:	4770      	bx	lr

08001378 <_isatty>:

int _isatty(int file)
{
 8001378:	b480      	push	{r7}
 800137a:	b083      	sub	sp, #12
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001380:	2301      	movs	r3, #1
}
 8001382:	4618      	mov	r0, r3
 8001384:	370c      	adds	r7, #12
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr

0800138e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800138e:	b480      	push	{r7}
 8001390:	b085      	sub	sp, #20
 8001392:	af00      	add	r7, sp, #0
 8001394:	60f8      	str	r0, [r7, #12]
 8001396:	60b9      	str	r1, [r7, #8]
 8001398:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800139a:	2300      	movs	r3, #0
}
 800139c:	4618      	mov	r0, r3
 800139e:	3714      	adds	r7, #20
 80013a0:	46bd      	mov	sp, r7
 80013a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a6:	4770      	bx	lr

080013a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b086      	sub	sp, #24
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013b0:	4a14      	ldr	r2, [pc, #80]	@ (8001404 <_sbrk+0x5c>)
 80013b2:	4b15      	ldr	r3, [pc, #84]	@ (8001408 <_sbrk+0x60>)
 80013b4:	1ad3      	subs	r3, r2, r3
 80013b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013bc:	4b13      	ldr	r3, [pc, #76]	@ (800140c <_sbrk+0x64>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d102      	bne.n	80013ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013c4:	4b11      	ldr	r3, [pc, #68]	@ (800140c <_sbrk+0x64>)
 80013c6:	4a12      	ldr	r2, [pc, #72]	@ (8001410 <_sbrk+0x68>)
 80013c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013ca:	4b10      	ldr	r3, [pc, #64]	@ (800140c <_sbrk+0x64>)
 80013cc:	681a      	ldr	r2, [r3, #0]
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	4413      	add	r3, r2
 80013d2:	693a      	ldr	r2, [r7, #16]
 80013d4:	429a      	cmp	r2, r3
 80013d6:	d207      	bcs.n	80013e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013d8:	f007 fd32 	bl	8008e40 <__errno>
 80013dc:	4603      	mov	r3, r0
 80013de:	220c      	movs	r2, #12
 80013e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013e2:	f04f 33ff 	mov.w	r3, #4294967295
 80013e6:	e009      	b.n	80013fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013e8:	4b08      	ldr	r3, [pc, #32]	@ (800140c <_sbrk+0x64>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013ee:	4b07      	ldr	r3, [pc, #28]	@ (800140c <_sbrk+0x64>)
 80013f0:	681a      	ldr	r2, [r3, #0]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	4413      	add	r3, r2
 80013f6:	4a05      	ldr	r2, [pc, #20]	@ (800140c <_sbrk+0x64>)
 80013f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013fa:	68fb      	ldr	r3, [r7, #12]
}
 80013fc:	4618      	mov	r0, r3
 80013fe:	3718      	adds	r7, #24
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}
 8001404:	20080000 	.word	0x20080000
 8001408:	00000400 	.word	0x00000400
 800140c:	200009a0 	.word	0x200009a0
 8001410:	200054d8 	.word	0x200054d8

08001414 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001418:	4b06      	ldr	r3, [pc, #24]	@ (8001434 <SystemInit+0x20>)
 800141a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800141e:	4a05      	ldr	r2, [pc, #20]	@ (8001434 <SystemInit+0x20>)
 8001420:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001424:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001428:	bf00      	nop
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr
 8001432:	bf00      	nop
 8001434:	e000ed00 	.word	0xe000ed00

08001438 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001438:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001470 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800143c:	f7ff ffea 	bl	8001414 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001440:	480c      	ldr	r0, [pc, #48]	@ (8001474 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001442:	490d      	ldr	r1, [pc, #52]	@ (8001478 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001444:	4a0d      	ldr	r2, [pc, #52]	@ (800147c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001446:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001448:	e002      	b.n	8001450 <LoopCopyDataInit>

0800144a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800144a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800144c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800144e:	3304      	adds	r3, #4

08001450 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001450:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001452:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001454:	d3f9      	bcc.n	800144a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001456:	4a0a      	ldr	r2, [pc, #40]	@ (8001480 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001458:	4c0a      	ldr	r4, [pc, #40]	@ (8001484 <LoopFillZerobss+0x22>)
  movs r3, #0
 800145a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800145c:	e001      	b.n	8001462 <LoopFillZerobss>

0800145e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800145e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001460:	3204      	adds	r2, #4

08001462 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001462:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001464:	d3fb      	bcc.n	800145e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001466:	f007 fcf1 	bl	8008e4c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800146a:	f7ff f8d7 	bl	800061c <main>
  bx  lr    
 800146e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001470:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001474:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001478:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800147c:	0800a0c4 	.word	0x0800a0c4
  ldr r2, =_sbss
 8001480:	200001b0 	.word	0x200001b0
  ldr r4, =_ebss
 8001484:	200054d4 	.word	0x200054d4

08001488 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001488:	e7fe      	b.n	8001488 <ADC_IRQHandler>

0800148a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800148a:	b580      	push	{r7, lr}
 800148c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800148e:	2003      	movs	r0, #3
 8001490:	f000 fb91 	bl	8001bb6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001494:	200f      	movs	r0, #15
 8001496:	f7ff fe59 	bl	800114c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800149a:	f7ff fc5d 	bl	8000d58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800149e:	2300      	movs	r3, #0
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	bd80      	pop	{r7, pc}

080014a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014a8:	4b06      	ldr	r3, [pc, #24]	@ (80014c4 <HAL_IncTick+0x20>)
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	461a      	mov	r2, r3
 80014ae:	4b06      	ldr	r3, [pc, #24]	@ (80014c8 <HAL_IncTick+0x24>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4413      	add	r3, r2
 80014b4:	4a04      	ldr	r2, [pc, #16]	@ (80014c8 <HAL_IncTick+0x24>)
 80014b6:	6013      	str	r3, [r2, #0]
}
 80014b8:	bf00      	nop
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr
 80014c2:	bf00      	nop
 80014c4:	2000000c 	.word	0x2000000c
 80014c8:	200009a4 	.word	0x200009a4

080014cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
  return uwTick;
 80014d0:	4b03      	ldr	r3, [pc, #12]	@ (80014e0 <HAL_GetTick+0x14>)
 80014d2:	681b      	ldr	r3, [r3, #0]
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr
 80014de:	bf00      	nop
 80014e0:	200009a4 	.word	0x200009a4

080014e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b084      	sub	sp, #16
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014ec:	f7ff ffee 	bl	80014cc <HAL_GetTick>
 80014f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014fc:	d005      	beq.n	800150a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014fe:	4b0a      	ldr	r3, [pc, #40]	@ (8001528 <HAL_Delay+0x44>)
 8001500:	781b      	ldrb	r3, [r3, #0]
 8001502:	461a      	mov	r2, r3
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	4413      	add	r3, r2
 8001508:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800150a:	bf00      	nop
 800150c:	f7ff ffde 	bl	80014cc <HAL_GetTick>
 8001510:	4602      	mov	r2, r0
 8001512:	68bb      	ldr	r3, [r7, #8]
 8001514:	1ad3      	subs	r3, r2, r3
 8001516:	68fa      	ldr	r2, [r7, #12]
 8001518:	429a      	cmp	r2, r3
 800151a:	d8f7      	bhi.n	800150c <HAL_Delay+0x28>
  {
  }
}
 800151c:	bf00      	nop
 800151e:	bf00      	nop
 8001520:	3710      	adds	r7, #16
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	2000000c 	.word	0x2000000c

0800152c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b084      	sub	sp, #16
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001534:	2300      	movs	r3, #0
 8001536:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d101      	bne.n	8001542 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800153e:	2301      	movs	r3, #1
 8001540:	e031      	b.n	80015a6 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001546:	2b00      	cmp	r3, #0
 8001548:	d109      	bne.n	800155e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800154a:	6878      	ldr	r0, [r7, #4]
 800154c:	f7ff fc2c 	bl	8000da8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2200      	movs	r2, #0
 8001554:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	2200      	movs	r2, #0
 800155a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001562:	f003 0310 	and.w	r3, r3, #16
 8001566:	2b00      	cmp	r3, #0
 8001568:	d116      	bne.n	8001598 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800156e:	4b10      	ldr	r3, [pc, #64]	@ (80015b0 <HAL_ADC_Init+0x84>)
 8001570:	4013      	ands	r3, r2
 8001572:	f043 0202 	orr.w	r2, r3, #2
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800157a:	6878      	ldr	r0, [r7, #4]
 800157c:	f000 f974 	bl	8001868 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2200      	movs	r2, #0
 8001584:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800158a:	f023 0303 	bic.w	r3, r3, #3
 800158e:	f043 0201 	orr.w	r2, r3, #1
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	641a      	str	r2, [r3, #64]	@ 0x40
 8001596:	e001      	b.n	800159c <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001598:	2301      	movs	r3, #1
 800159a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2200      	movs	r2, #0
 80015a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80015a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	3710      	adds	r7, #16
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	ffffeefd 	.word	0xffffeefd

080015b4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b085      	sub	sp, #20
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
 80015bc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80015be:	2300      	movs	r3, #0
 80015c0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80015c8:	2b01      	cmp	r3, #1
 80015ca:	d101      	bne.n	80015d0 <HAL_ADC_ConfigChannel+0x1c>
 80015cc:	2302      	movs	r3, #2
 80015ce:	e13a      	b.n	8001846 <HAL_ADC_ConfigChannel+0x292>
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	2201      	movs	r2, #1
 80015d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	2b09      	cmp	r3, #9
 80015de:	d93a      	bls.n	8001656 <HAL_ADC_ConfigChannel+0xa2>
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80015e8:	d035      	beq.n	8001656 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	68d9      	ldr	r1, [r3, #12]
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	b29b      	uxth	r3, r3
 80015f6:	461a      	mov	r2, r3
 80015f8:	4613      	mov	r3, r2
 80015fa:	005b      	lsls	r3, r3, #1
 80015fc:	4413      	add	r3, r2
 80015fe:	3b1e      	subs	r3, #30
 8001600:	2207      	movs	r2, #7
 8001602:	fa02 f303 	lsl.w	r3, r2, r3
 8001606:	43da      	mvns	r2, r3
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	400a      	ands	r2, r1
 800160e:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a8f      	ldr	r2, [pc, #572]	@ (8001854 <HAL_ADC_ConfigChannel+0x2a0>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d10a      	bne.n	8001630 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	68d9      	ldr	r1, [r3, #12]
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	689b      	ldr	r3, [r3, #8]
 8001624:	061a      	lsls	r2, r3, #24
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	430a      	orrs	r2, r1
 800162c:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800162e:	e039      	b.n	80016a4 <HAL_ADC_ConfigChannel+0xf0>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	68d9      	ldr	r1, [r3, #12]
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	689a      	ldr	r2, [r3, #8]
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	b29b      	uxth	r3, r3
 8001640:	4618      	mov	r0, r3
 8001642:	4603      	mov	r3, r0
 8001644:	005b      	lsls	r3, r3, #1
 8001646:	4403      	add	r3, r0
 8001648:	3b1e      	subs	r3, #30
 800164a:	409a      	lsls	r2, r3
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	430a      	orrs	r2, r1
 8001652:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001654:	e026      	b.n	80016a4 <HAL_ADC_ConfigChannel+0xf0>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	6919      	ldr	r1, [r3, #16]
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	b29b      	uxth	r3, r3
 8001662:	461a      	mov	r2, r3
 8001664:	4613      	mov	r3, r2
 8001666:	005b      	lsls	r3, r3, #1
 8001668:	4413      	add	r3, r2
 800166a:	f003 031f 	and.w	r3, r3, #31
 800166e:	2207      	movs	r2, #7
 8001670:	fa02 f303 	lsl.w	r3, r2, r3
 8001674:	43da      	mvns	r2, r3
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	400a      	ands	r2, r1
 800167c:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	6919      	ldr	r1, [r3, #16]
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	689a      	ldr	r2, [r3, #8]
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	b29b      	uxth	r3, r3
 800168e:	4618      	mov	r0, r3
 8001690:	4603      	mov	r3, r0
 8001692:	005b      	lsls	r3, r3, #1
 8001694:	4403      	add	r3, r0
 8001696:	f003 031f 	and.w	r3, r3, #31
 800169a:	409a      	lsls	r2, r3
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	430a      	orrs	r2, r1
 80016a2:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	2b06      	cmp	r3, #6
 80016aa:	d824      	bhi.n	80016f6 <HAL_ADC_ConfigChannel+0x142>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	685a      	ldr	r2, [r3, #4]
 80016b6:	4613      	mov	r3, r2
 80016b8:	009b      	lsls	r3, r3, #2
 80016ba:	4413      	add	r3, r2
 80016bc:	3b05      	subs	r3, #5
 80016be:	221f      	movs	r2, #31
 80016c0:	fa02 f303 	lsl.w	r3, r2, r3
 80016c4:	43da      	mvns	r2, r3
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	400a      	ands	r2, r1
 80016cc:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	b29b      	uxth	r3, r3
 80016da:	4618      	mov	r0, r3
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	685a      	ldr	r2, [r3, #4]
 80016e0:	4613      	mov	r3, r2
 80016e2:	009b      	lsls	r3, r3, #2
 80016e4:	4413      	add	r3, r2
 80016e6:	3b05      	subs	r3, #5
 80016e8:	fa00 f203 	lsl.w	r2, r0, r3
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	430a      	orrs	r2, r1
 80016f2:	635a      	str	r2, [r3, #52]	@ 0x34
 80016f4:	e04c      	b.n	8001790 <HAL_ADC_ConfigChannel+0x1dc>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	2b0c      	cmp	r3, #12
 80016fc:	d824      	bhi.n	8001748 <HAL_ADC_ConfigChannel+0x194>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	685a      	ldr	r2, [r3, #4]
 8001708:	4613      	mov	r3, r2
 800170a:	009b      	lsls	r3, r3, #2
 800170c:	4413      	add	r3, r2
 800170e:	3b23      	subs	r3, #35	@ 0x23
 8001710:	221f      	movs	r2, #31
 8001712:	fa02 f303 	lsl.w	r3, r2, r3
 8001716:	43da      	mvns	r2, r3
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	400a      	ands	r2, r1
 800171e:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	b29b      	uxth	r3, r3
 800172c:	4618      	mov	r0, r3
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	685a      	ldr	r2, [r3, #4]
 8001732:	4613      	mov	r3, r2
 8001734:	009b      	lsls	r3, r3, #2
 8001736:	4413      	add	r3, r2
 8001738:	3b23      	subs	r3, #35	@ 0x23
 800173a:	fa00 f203 	lsl.w	r2, r0, r3
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	430a      	orrs	r2, r1
 8001744:	631a      	str	r2, [r3, #48]	@ 0x30
 8001746:	e023      	b.n	8001790 <HAL_ADC_ConfigChannel+0x1dc>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	685a      	ldr	r2, [r3, #4]
 8001752:	4613      	mov	r3, r2
 8001754:	009b      	lsls	r3, r3, #2
 8001756:	4413      	add	r3, r2
 8001758:	3b41      	subs	r3, #65	@ 0x41
 800175a:	221f      	movs	r2, #31
 800175c:	fa02 f303 	lsl.w	r3, r2, r3
 8001760:	43da      	mvns	r2, r3
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	400a      	ands	r2, r1
 8001768:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	b29b      	uxth	r3, r3
 8001776:	4618      	mov	r0, r3
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	685a      	ldr	r2, [r3, #4]
 800177c:	4613      	mov	r3, r2
 800177e:	009b      	lsls	r3, r3, #2
 8001780:	4413      	add	r3, r2
 8001782:	3b41      	subs	r3, #65	@ 0x41
 8001784:	fa00 f203 	lsl.w	r2, r0, r3
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	430a      	orrs	r2, r1
 800178e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a30      	ldr	r2, [pc, #192]	@ (8001858 <HAL_ADC_ConfigChannel+0x2a4>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d10a      	bne.n	80017b0 <HAL_ADC_ConfigChannel+0x1fc>
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80017a2:	d105      	bne.n	80017b0 <HAL_ADC_ConfigChannel+0x1fc>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80017a4:	4b2d      	ldr	r3, [pc, #180]	@ (800185c <HAL_ADC_ConfigChannel+0x2a8>)
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	4a2c      	ldr	r2, [pc, #176]	@ (800185c <HAL_ADC_ConfigChannel+0x2a8>)
 80017aa:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80017ae:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a28      	ldr	r2, [pc, #160]	@ (8001858 <HAL_ADC_ConfigChannel+0x2a4>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d10f      	bne.n	80017da <HAL_ADC_ConfigChannel+0x226>
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	2b12      	cmp	r3, #18
 80017c0:	d10b      	bne.n	80017da <HAL_ADC_ConfigChannel+0x226>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 80017c2:	4b26      	ldr	r3, [pc, #152]	@ (800185c <HAL_ADC_ConfigChannel+0x2a8>)
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	4a25      	ldr	r2, [pc, #148]	@ (800185c <HAL_ADC_ConfigChannel+0x2a8>)
 80017c8:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80017cc:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80017ce:	4b23      	ldr	r3, [pc, #140]	@ (800185c <HAL_ADC_ConfigChannel+0x2a8>)
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	4a22      	ldr	r2, [pc, #136]	@ (800185c <HAL_ADC_ConfigChannel+0x2a8>)
 80017d4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80017d8:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4a1e      	ldr	r2, [pc, #120]	@ (8001858 <HAL_ADC_ConfigChannel+0x2a4>)
 80017e0:	4293      	cmp	r3, r2
 80017e2:	d12b      	bne.n	800183c <HAL_ADC_ConfigChannel+0x288>
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a1a      	ldr	r2, [pc, #104]	@ (8001854 <HAL_ADC_ConfigChannel+0x2a0>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d003      	beq.n	80017f6 <HAL_ADC_ConfigChannel+0x242>
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	2b11      	cmp	r3, #17
 80017f4:	d122      	bne.n	800183c <HAL_ADC_ConfigChannel+0x288>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 80017f6:	4b19      	ldr	r3, [pc, #100]	@ (800185c <HAL_ADC_ConfigChannel+0x2a8>)
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	4a18      	ldr	r2, [pc, #96]	@ (800185c <HAL_ADC_ConfigChannel+0x2a8>)
 80017fc:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8001800:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8001802:	4b16      	ldr	r3, [pc, #88]	@ (800185c <HAL_ADC_ConfigChannel+0x2a8>)
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	4a15      	ldr	r2, [pc, #84]	@ (800185c <HAL_ADC_ConfigChannel+0x2a8>)
 8001808:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800180c:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4a10      	ldr	r2, [pc, #64]	@ (8001854 <HAL_ADC_ConfigChannel+0x2a0>)
 8001814:	4293      	cmp	r3, r2
 8001816:	d111      	bne.n	800183c <HAL_ADC_ConfigChannel+0x288>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001818:	4b11      	ldr	r3, [pc, #68]	@ (8001860 <HAL_ADC_ConfigChannel+0x2ac>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a11      	ldr	r2, [pc, #68]	@ (8001864 <HAL_ADC_ConfigChannel+0x2b0>)
 800181e:	fba2 2303 	umull	r2, r3, r2, r3
 8001822:	0c9a      	lsrs	r2, r3, #18
 8001824:	4613      	mov	r3, r2
 8001826:	009b      	lsls	r3, r3, #2
 8001828:	4413      	add	r3, r2
 800182a:	005b      	lsls	r3, r3, #1
 800182c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800182e:	e002      	b.n	8001836 <HAL_ADC_ConfigChannel+0x282>
      {
        counter--;
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	3b01      	subs	r3, #1
 8001834:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d1f9      	bne.n	8001830 <HAL_ADC_ConfigChannel+0x27c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2200      	movs	r2, #0
 8001840:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001844:	2300      	movs	r3, #0
}
 8001846:	4618      	mov	r0, r3
 8001848:	3714      	adds	r7, #20
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr
 8001852:	bf00      	nop
 8001854:	10000012 	.word	0x10000012
 8001858:	40012000 	.word	0x40012000
 800185c:	40012300 	.word	0x40012300
 8001860:	20000004 	.word	0x20000004
 8001864:	431bde83 	.word	0x431bde83

08001868 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001868:	b480      	push	{r7}
 800186a:	b083      	sub	sp, #12
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001870:	4b78      	ldr	r3, [pc, #480]	@ (8001a54 <ADC_Init+0x1ec>)
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	4a77      	ldr	r2, [pc, #476]	@ (8001a54 <ADC_Init+0x1ec>)
 8001876:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 800187a:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 800187c:	4b75      	ldr	r3, [pc, #468]	@ (8001a54 <ADC_Init+0x1ec>)
 800187e:	685a      	ldr	r2, [r3, #4]
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	4973      	ldr	r1, [pc, #460]	@ (8001a54 <ADC_Init+0x1ec>)
 8001886:	4313      	orrs	r3, r2
 8001888:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	685a      	ldr	r2, [r3, #4]
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001898:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	6859      	ldr	r1, [r3, #4]
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	691b      	ldr	r3, [r3, #16]
 80018a4:	021a      	lsls	r2, r3, #8
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	430a      	orrs	r2, r1
 80018ac:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	685a      	ldr	r2, [r3, #4]
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80018bc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	6859      	ldr	r1, [r3, #4]
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	689a      	ldr	r2, [r3, #8]
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	430a      	orrs	r2, r1
 80018ce:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	689a      	ldr	r2, [r3, #8]
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80018de:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	6899      	ldr	r1, [r3, #8]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	68da      	ldr	r2, [r3, #12]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	430a      	orrs	r2, r1
 80018f0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018f6:	4a58      	ldr	r2, [pc, #352]	@ (8001a58 <ADC_Init+0x1f0>)
 80018f8:	4293      	cmp	r3, r2
 80018fa:	d022      	beq.n	8001942 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	689a      	ldr	r2, [r3, #8]
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800190a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	6899      	ldr	r1, [r3, #8]
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	430a      	orrs	r2, r1
 800191c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	689a      	ldr	r2, [r3, #8]
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800192c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	6899      	ldr	r1, [r3, #8]
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	430a      	orrs	r2, r1
 800193e:	609a      	str	r2, [r3, #8]
 8001940:	e00f      	b.n	8001962 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	689a      	ldr	r2, [r3, #8]
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001950:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	689a      	ldr	r2, [r3, #8]
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001960:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	689a      	ldr	r2, [r3, #8]
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f022 0202 	bic.w	r2, r2, #2
 8001970:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	6899      	ldr	r1, [r3, #8]
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	699b      	ldr	r3, [r3, #24]
 800197c:	005a      	lsls	r2, r3, #1
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	430a      	orrs	r2, r1
 8001984:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	f893 3020 	ldrb.w	r3, [r3, #32]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d01b      	beq.n	80019c8 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	685a      	ldr	r2, [r3, #4]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800199e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	685a      	ldr	r2, [r3, #4]
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80019ae:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	6859      	ldr	r1, [r3, #4]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019ba:	3b01      	subs	r3, #1
 80019bc:	035a      	lsls	r2, r3, #13
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	430a      	orrs	r2, r1
 80019c4:	605a      	str	r2, [r3, #4]
 80019c6:	e007      	b.n	80019d8 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	685a      	ldr	r2, [r3, #4]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80019d6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80019e6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	69db      	ldr	r3, [r3, #28]
 80019f2:	3b01      	subs	r3, #1
 80019f4:	051a      	lsls	r2, r3, #20
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	430a      	orrs	r2, r1
 80019fc:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	689a      	ldr	r2, [r3, #8]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001a0c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	6899      	ldr	r1, [r3, #8]
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001a1a:	025a      	lsls	r2, r3, #9
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	430a      	orrs	r2, r1
 8001a22:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	689a      	ldr	r2, [r3, #8]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001a32:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	6899      	ldr	r1, [r3, #8]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	695b      	ldr	r3, [r3, #20]
 8001a3e:	029a      	lsls	r2, r3, #10
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	430a      	orrs	r2, r1
 8001a46:	609a      	str	r2, [r3, #8]
}
 8001a48:	bf00      	nop
 8001a4a:	370c      	adds	r7, #12
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a52:	4770      	bx	lr
 8001a54:	40012300 	.word	0x40012300
 8001a58:	0f000001 	.word	0x0f000001

08001a5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b085      	sub	sp, #20
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	f003 0307 	and.w	r3, r3, #7
 8001a6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a6c:	4b0b      	ldr	r3, [pc, #44]	@ (8001a9c <__NVIC_SetPriorityGrouping+0x40>)
 8001a6e:	68db      	ldr	r3, [r3, #12]
 8001a70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a72:	68ba      	ldr	r2, [r7, #8]
 8001a74:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001a78:	4013      	ands	r3, r2
 8001a7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a80:	68bb      	ldr	r3, [r7, #8]
 8001a82:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001a84:	4b06      	ldr	r3, [pc, #24]	@ (8001aa0 <__NVIC_SetPriorityGrouping+0x44>)
 8001a86:	4313      	orrs	r3, r2
 8001a88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a8a:	4a04      	ldr	r2, [pc, #16]	@ (8001a9c <__NVIC_SetPriorityGrouping+0x40>)
 8001a8c:	68bb      	ldr	r3, [r7, #8]
 8001a8e:	60d3      	str	r3, [r2, #12]
}
 8001a90:	bf00      	nop
 8001a92:	3714      	adds	r7, #20
 8001a94:	46bd      	mov	sp, r7
 8001a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9a:	4770      	bx	lr
 8001a9c:	e000ed00 	.word	0xe000ed00
 8001aa0:	05fa0000 	.word	0x05fa0000

08001aa4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001aa8:	4b04      	ldr	r3, [pc, #16]	@ (8001abc <__NVIC_GetPriorityGrouping+0x18>)
 8001aaa:	68db      	ldr	r3, [r3, #12]
 8001aac:	0a1b      	lsrs	r3, r3, #8
 8001aae:	f003 0307 	and.w	r3, r3, #7
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aba:	4770      	bx	lr
 8001abc:	e000ed00 	.word	0xe000ed00

08001ac0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b083      	sub	sp, #12
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001aca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	db0b      	blt.n	8001aea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ad2:	79fb      	ldrb	r3, [r7, #7]
 8001ad4:	f003 021f 	and.w	r2, r3, #31
 8001ad8:	4907      	ldr	r1, [pc, #28]	@ (8001af8 <__NVIC_EnableIRQ+0x38>)
 8001ada:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ade:	095b      	lsrs	r3, r3, #5
 8001ae0:	2001      	movs	r0, #1
 8001ae2:	fa00 f202 	lsl.w	r2, r0, r2
 8001ae6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001aea:	bf00      	nop
 8001aec:	370c      	adds	r7, #12
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr
 8001af6:	bf00      	nop
 8001af8:	e000e100 	.word	0xe000e100

08001afc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b083      	sub	sp, #12
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	4603      	mov	r3, r0
 8001b04:	6039      	str	r1, [r7, #0]
 8001b06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	db0a      	blt.n	8001b26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	b2da      	uxtb	r2, r3
 8001b14:	490c      	ldr	r1, [pc, #48]	@ (8001b48 <__NVIC_SetPriority+0x4c>)
 8001b16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b1a:	0112      	lsls	r2, r2, #4
 8001b1c:	b2d2      	uxtb	r2, r2
 8001b1e:	440b      	add	r3, r1
 8001b20:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b24:	e00a      	b.n	8001b3c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	b2da      	uxtb	r2, r3
 8001b2a:	4908      	ldr	r1, [pc, #32]	@ (8001b4c <__NVIC_SetPriority+0x50>)
 8001b2c:	79fb      	ldrb	r3, [r7, #7]
 8001b2e:	f003 030f 	and.w	r3, r3, #15
 8001b32:	3b04      	subs	r3, #4
 8001b34:	0112      	lsls	r2, r2, #4
 8001b36:	b2d2      	uxtb	r2, r2
 8001b38:	440b      	add	r3, r1
 8001b3a:	761a      	strb	r2, [r3, #24]
}
 8001b3c:	bf00      	nop
 8001b3e:	370c      	adds	r7, #12
 8001b40:	46bd      	mov	sp, r7
 8001b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b46:	4770      	bx	lr
 8001b48:	e000e100 	.word	0xe000e100
 8001b4c:	e000ed00 	.word	0xe000ed00

08001b50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b089      	sub	sp, #36	@ 0x24
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	60f8      	str	r0, [r7, #12]
 8001b58:	60b9      	str	r1, [r7, #8]
 8001b5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	f003 0307 	and.w	r3, r3, #7
 8001b62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b64:	69fb      	ldr	r3, [r7, #28]
 8001b66:	f1c3 0307 	rsb	r3, r3, #7
 8001b6a:	2b04      	cmp	r3, #4
 8001b6c:	bf28      	it	cs
 8001b6e:	2304      	movcs	r3, #4
 8001b70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b72:	69fb      	ldr	r3, [r7, #28]
 8001b74:	3304      	adds	r3, #4
 8001b76:	2b06      	cmp	r3, #6
 8001b78:	d902      	bls.n	8001b80 <NVIC_EncodePriority+0x30>
 8001b7a:	69fb      	ldr	r3, [r7, #28]
 8001b7c:	3b03      	subs	r3, #3
 8001b7e:	e000      	b.n	8001b82 <NVIC_EncodePriority+0x32>
 8001b80:	2300      	movs	r3, #0
 8001b82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b84:	f04f 32ff 	mov.w	r2, #4294967295
 8001b88:	69bb      	ldr	r3, [r7, #24]
 8001b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8e:	43da      	mvns	r2, r3
 8001b90:	68bb      	ldr	r3, [r7, #8]
 8001b92:	401a      	ands	r2, r3
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b98:	f04f 31ff 	mov.w	r1, #4294967295
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	fa01 f303 	lsl.w	r3, r1, r3
 8001ba2:	43d9      	mvns	r1, r3
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ba8:	4313      	orrs	r3, r2
         );
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	3724      	adds	r7, #36	@ 0x24
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr

08001bb6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bb6:	b580      	push	{r7, lr}
 8001bb8:	b082      	sub	sp, #8
 8001bba:	af00      	add	r7, sp, #0
 8001bbc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bbe:	6878      	ldr	r0, [r7, #4]
 8001bc0:	f7ff ff4c 	bl	8001a5c <__NVIC_SetPriorityGrouping>
}
 8001bc4:	bf00      	nop
 8001bc6:	3708      	adds	r7, #8
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}

08001bcc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b086      	sub	sp, #24
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	60b9      	str	r1, [r7, #8]
 8001bd6:	607a      	str	r2, [r7, #4]
 8001bd8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001bde:	f7ff ff61 	bl	8001aa4 <__NVIC_GetPriorityGrouping>
 8001be2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001be4:	687a      	ldr	r2, [r7, #4]
 8001be6:	68b9      	ldr	r1, [r7, #8]
 8001be8:	6978      	ldr	r0, [r7, #20]
 8001bea:	f7ff ffb1 	bl	8001b50 <NVIC_EncodePriority>
 8001bee:	4602      	mov	r2, r0
 8001bf0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bf4:	4611      	mov	r1, r2
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f7ff ff80 	bl	8001afc <__NVIC_SetPriority>
}
 8001bfc:	bf00      	nop
 8001bfe:	3718      	adds	r7, #24
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}

08001c04 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b082      	sub	sp, #8
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c12:	4618      	mov	r0, r3
 8001c14:	f7ff ff54 	bl	8001ac0 <__NVIC_EnableIRQ>
}
 8001c18:	bf00      	nop
 8001c1a:	3708      	adds	r7, #8
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}

08001c20 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b084      	sub	sp, #16
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d101      	bne.n	8001c32 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e086      	b.n	8001d40 <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d106      	bne.n	8001c4a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2220      	movs	r2, #32
 8001c40:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001c44:	6878      	ldr	r0, [r7, #4]
 8001c46:	f7ff f8ef 	bl	8000e28 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c4a:	4b3f      	ldr	r3, [pc, #252]	@ (8001d48 <HAL_ETH_Init+0x128>)
 8001c4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c4e:	4a3e      	ldr	r2, [pc, #248]	@ (8001d48 <HAL_ETH_Init+0x128>)
 8001c50:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c54:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c56:	4b3c      	ldr	r3, [pc, #240]	@ (8001d48 <HAL_ETH_Init+0x128>)
 8001c58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c5a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c5e:	60bb      	str	r3, [r7, #8]
 8001c60:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001c62:	4b3a      	ldr	r3, [pc, #232]	@ (8001d4c <HAL_ETH_Init+0x12c>)
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	4a39      	ldr	r2, [pc, #228]	@ (8001d4c <HAL_ETH_Init+0x12c>)
 8001c68:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001c6c:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001c6e:	4b37      	ldr	r3, [pc, #220]	@ (8001d4c <HAL_ETH_Init+0x12c>)
 8001c70:	685a      	ldr	r2, [r3, #4]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	689b      	ldr	r3, [r3, #8]
 8001c76:	4935      	ldr	r1, [pc, #212]	@ (8001d4c <HAL_ETH_Init+0x12c>)
 8001c78:	4313      	orrs	r3, r2
 8001c7a:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001c7c:	4b33      	ldr	r3, [pc, #204]	@ (8001d4c <HAL_ETH_Init+0x12c>)
 8001c7e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	687a      	ldr	r2, [r7, #4]
 8001c8c:	6812      	ldr	r2, [r2, #0]
 8001c8e:	f043 0301 	orr.w	r3, r3, #1
 8001c92:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001c96:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001c98:	f7ff fc18 	bl	80014cc <HAL_GetTick>
 8001c9c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001c9e:	e011      	b.n	8001cc4 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001ca0:	f7ff fc14 	bl	80014cc <HAL_GetTick>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	1ad3      	subs	r3, r2, r3
 8001caa:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001cae:	d909      	bls.n	8001cc4 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2204      	movs	r2, #4
 8001cb4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	22e0      	movs	r2, #224	@ 0xe0
 8001cbc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	e03d      	b.n	8001d40 <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f003 0301 	and.w	r3, r3, #1
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d1e4      	bne.n	8001ca0 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001cd6:	6878      	ldr	r0, [r7, #4]
 8001cd8:	f000 f97a 	bl	8001fd0 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001cdc:	6878      	ldr	r0, [r7, #4]
 8001cde:	f000 fa25 	bl	800212c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001ce2:	6878      	ldr	r0, [r7, #4]
 8001ce4:	f000 fa7b 	bl	80021de <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	461a      	mov	r2, r3
 8001cee:	2100      	movs	r1, #0
 8001cf0:	6878      	ldr	r0, [r7, #4]
 8001cf2:	f000 f9e3 	bl	80020bc <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8001d04:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681a      	ldr	r2, [r3, #0]
 8001d12:	4b0f      	ldr	r3, [pc, #60]	@ (8001d50 <HAL_ETH_Init+0x130>)
 8001d14:	430b      	orrs	r3, r1
 8001d16:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 8001d2a:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2200      	movs	r2, #0
 8001d32:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2210      	movs	r2, #16
 8001d3a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8001d3e:	2300      	movs	r3, #0
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	3710      	adds	r7, #16
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}
 8001d48:	40023800 	.word	0x40023800
 8001d4c:	40013800 	.word	0x40013800
 8001d50:	00020060 	.word	0x00020060

08001d54 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b084      	sub	sp, #16
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
 8001d5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001d66:	68fa      	ldr	r2, [r7, #12]
 8001d68:	4b53      	ldr	r3, [pc, #332]	@ (8001eb8 <ETH_SetMACConfig+0x164>)
 8001d6a:	4013      	ands	r3, r2
 8001d6c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	7b9b      	ldrb	r3, [r3, #14]
 8001d72:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001d74:	683a      	ldr	r2, [r7, #0]
 8001d76:	7c12      	ldrb	r2, [r2, #16]
 8001d78:	2a00      	cmp	r2, #0
 8001d7a:	d102      	bne.n	8001d82 <ETH_SetMACConfig+0x2e>
 8001d7c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001d80:	e000      	b.n	8001d84 <ETH_SetMACConfig+0x30>
 8001d82:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8001d84:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001d86:	683a      	ldr	r2, [r7, #0]
 8001d88:	7c52      	ldrb	r2, [r2, #17]
 8001d8a:	2a00      	cmp	r2, #0
 8001d8c:	d102      	bne.n	8001d94 <ETH_SetMACConfig+0x40>
 8001d8e:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001d92:	e000      	b.n	8001d96 <ETH_SetMACConfig+0x42>
 8001d94:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001d96:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001d9c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	7fdb      	ldrb	r3, [r3, #31]
 8001da2:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001da4:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001daa:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001dac:	683a      	ldr	r2, [r7, #0]
 8001dae:	7f92      	ldrb	r2, [r2, #30]
 8001db0:	2a00      	cmp	r2, #0
 8001db2:	d102      	bne.n	8001dba <ETH_SetMACConfig+0x66>
 8001db4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001db8:	e000      	b.n	8001dbc <ETH_SetMACConfig+0x68>
 8001dba:	2200      	movs	r2, #0
                        macconf->Speed |
 8001dbc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	7f1b      	ldrb	r3, [r3, #28]
 8001dc2:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001dc4:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001dca:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	791b      	ldrb	r3, [r3, #4]
 8001dd0:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001dd2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001dd4:	683a      	ldr	r2, [r7, #0]
 8001dd6:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001dda:	2a00      	cmp	r2, #0
 8001ddc:	d102      	bne.n	8001de4 <ETH_SetMACConfig+0x90>
 8001dde:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001de2:	e000      	b.n	8001de6 <ETH_SetMACConfig+0x92>
 8001de4:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001de6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	7bdb      	ldrb	r3, [r3, #15]
 8001dec:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001dee:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001df4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001dfc:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	68fa      	ldr	r2, [r7, #12]
 8001e02:	4313      	orrs	r3, r2
 8001e04:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	68fa      	ldr	r2, [r7, #12]
 8001e0c:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e16:	2001      	movs	r0, #1
 8001e18:	f7ff fb64 	bl	80014e4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	68fa      	ldr	r2, [r7, #12]
 8001e22:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	699b      	ldr	r3, [r3, #24]
 8001e2a:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001e2c:	68fa      	ldr	r2, [r7, #12]
 8001e2e:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8001e32:	4013      	ands	r3, r2
 8001e34:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e3a:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001e3c:	683a      	ldr	r2, [r7, #0]
 8001e3e:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8001e42:	2a00      	cmp	r2, #0
 8001e44:	d101      	bne.n	8001e4a <ETH_SetMACConfig+0xf6>
 8001e46:	2280      	movs	r2, #128	@ 0x80
 8001e48:	e000      	b.n	8001e4c <ETH_SetMACConfig+0xf8>
 8001e4a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001e4c:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001e52:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001e54:	683a      	ldr	r2, [r7, #0]
 8001e56:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8001e5a:	2a01      	cmp	r2, #1
 8001e5c:	d101      	bne.n	8001e62 <ETH_SetMACConfig+0x10e>
 8001e5e:	2208      	movs	r2, #8
 8001e60:	e000      	b.n	8001e64 <ETH_SetMACConfig+0x110>
 8001e62:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001e64:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8001e66:	683a      	ldr	r2, [r7, #0]
 8001e68:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8001e6c:	2a01      	cmp	r2, #1
 8001e6e:	d101      	bne.n	8001e74 <ETH_SetMACConfig+0x120>
 8001e70:	2204      	movs	r2, #4
 8001e72:	e000      	b.n	8001e76 <ETH_SetMACConfig+0x122>
 8001e74:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001e76:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001e78:	683a      	ldr	r2, [r7, #0]
 8001e7a:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8001e7e:	2a01      	cmp	r2, #1
 8001e80:	d101      	bne.n	8001e86 <ETH_SetMACConfig+0x132>
 8001e82:	2202      	movs	r2, #2
 8001e84:	e000      	b.n	8001e88 <ETH_SetMACConfig+0x134>
 8001e86:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	68fa      	ldr	r2, [r7, #12]
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	68fa      	ldr	r2, [r7, #12]
 8001e96:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	699b      	ldr	r3, [r3, #24]
 8001e9e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001ea0:	2001      	movs	r0, #1
 8001ea2:	f7ff fb1f 	bl	80014e4 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	68fa      	ldr	r2, [r7, #12]
 8001eac:	619a      	str	r2, [r3, #24]
}
 8001eae:	bf00      	nop
 8001eb0:	3710      	adds	r7, #16
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	fd20810f 	.word	0xfd20810f

08001ebc <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b084      	sub	sp, #16
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
 8001ec4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001ece:	699b      	ldr	r3, [r3, #24]
 8001ed0:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001ed2:	68fa      	ldr	r2, [r7, #12]
 8001ed4:	4b3d      	ldr	r3, [pc, #244]	@ (8001fcc <ETH_SetDMAConfig+0x110>)
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	7b1b      	ldrb	r3, [r3, #12]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d102      	bne.n	8001ee8 <ETH_SetDMAConfig+0x2c>
 8001ee2:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001ee6:	e000      	b.n	8001eea <ETH_SetDMAConfig+0x2e>
 8001ee8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	7b5b      	ldrb	r3, [r3, #13]
 8001eee:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001ef0:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001ef2:	683a      	ldr	r2, [r7, #0]
 8001ef4:	7f52      	ldrb	r2, [r2, #29]
 8001ef6:	2a00      	cmp	r2, #0
 8001ef8:	d102      	bne.n	8001f00 <ETH_SetDMAConfig+0x44>
 8001efa:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001efe:	e000      	b.n	8001f02 <ETH_SetDMAConfig+0x46>
 8001f00:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001f02:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	7b9b      	ldrb	r3, [r3, #14]
 8001f08:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001f0a:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001f10:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	7f1b      	ldrb	r3, [r3, #28]
 8001f16:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001f18:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	7f9b      	ldrb	r3, [r3, #30]
 8001f1e:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001f20:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001f26:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001f2e:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001f30:	4313      	orrs	r3, r2
 8001f32:	68fa      	ldr	r2, [r7, #12]
 8001f34:	4313      	orrs	r3, r2
 8001f36:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001f40:	461a      	mov	r2, r3
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001f4e:	699b      	ldr	r3, [r3, #24]
 8001f50:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f52:	2001      	movs	r0, #1
 8001f54:	f7ff fac6 	bl	80014e4 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001f60:	461a      	mov	r2, r3
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	791b      	ldrb	r3, [r3, #4]
 8001f6a:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001f70:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8001f76:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001f7c:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001f84:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8001f86:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f8c:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001f8e:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001f94:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001f96:	687a      	ldr	r2, [r7, #4]
 8001f98:	6812      	ldr	r2, [r2, #0]
 8001f9a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001f9e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001fa2:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001fb0:	2001      	movs	r0, #1
 8001fb2:	f7ff fa97 	bl	80014e4 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001fbe:	461a      	mov	r2, r3
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	6013      	str	r3, [r2, #0]
}
 8001fc4:	bf00      	nop
 8001fc6:	3710      	adds	r7, #16
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}
 8001fcc:	f8de3f23 	.word	0xf8de3f23

08001fd0 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b0a6      	sub	sp, #152	@ 0x98
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8002000:	2301      	movs	r3, #1
 8002002:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002006:	2300      	movs	r3, #0
 8002008:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800200c:	2300      	movs	r3, #0
 800200e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002012:	2300      	movs	r3, #0
 8002014:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002016:	2300      	movs	r3, #0
 8002018:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800201c:	2300      	movs	r3, #0
 800201e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002020:	2300      	movs	r3, #0
 8002022:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002026:	2300      	movs	r3, #0
 8002028:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800202c:	2300      	movs	r3, #0
 800202e:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002032:	2300      	movs	r3, #0
 8002034:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002038:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800203c:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800203e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002042:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002044:	2300      	movs	r3, #0
 8002046:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800204a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800204e:	4619      	mov	r1, r3
 8002050:	6878      	ldr	r0, [r7, #4]
 8002052:	f7ff fe7f 	bl	8001d54 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002056:	2301      	movs	r3, #1
 8002058:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 800205a:	2301      	movs	r3, #1
 800205c:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 800205e:	2301      	movs	r3, #1
 8002060:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002064:	2301      	movs	r3, #1
 8002066:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002068:	2300      	movs	r3, #0
 800206a:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800206c:	2300      	movs	r3, #0
 800206e:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002072:	2300      	movs	r3, #0
 8002074:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002078:	2300      	movs	r3, #0
 800207a:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800207c:	2301      	movs	r3, #1
 800207e:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002082:	2301      	movs	r3, #1
 8002084:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002086:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800208a:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800208c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002090:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002092:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002096:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8002098:	2301      	movs	r3, #1
 800209a:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 800209e:	2300      	movs	r3, #0
 80020a0:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80020a2:	2300      	movs	r3, #0
 80020a4:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80020a6:	f107 0308 	add.w	r3, r7, #8
 80020aa:	4619      	mov	r1, r3
 80020ac:	6878      	ldr	r0, [r7, #4]
 80020ae:	f7ff ff05 	bl	8001ebc <ETH_SetDMAConfig>
}
 80020b2:	bf00      	nop
 80020b4:	3798      	adds	r7, #152	@ 0x98
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}
	...

080020bc <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80020bc:	b480      	push	{r7}
 80020be:	b087      	sub	sp, #28
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	60f8      	str	r0, [r7, #12]
 80020c4:	60b9      	str	r1, [r7, #8]
 80020c6:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	3305      	adds	r3, #5
 80020cc:	781b      	ldrb	r3, [r3, #0]
 80020ce:	021b      	lsls	r3, r3, #8
 80020d0:	687a      	ldr	r2, [r7, #4]
 80020d2:	3204      	adds	r2, #4
 80020d4:	7812      	ldrb	r2, [r2, #0]
 80020d6:	4313      	orrs	r3, r2
 80020d8:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80020da:	68ba      	ldr	r2, [r7, #8]
 80020dc:	4b11      	ldr	r3, [pc, #68]	@ (8002124 <ETH_MACAddressConfig+0x68>)
 80020de:	4413      	add	r3, r2
 80020e0:	461a      	mov	r2, r3
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	3303      	adds	r3, #3
 80020ea:	781b      	ldrb	r3, [r3, #0]
 80020ec:	061a      	lsls	r2, r3, #24
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	3302      	adds	r3, #2
 80020f2:	781b      	ldrb	r3, [r3, #0]
 80020f4:	041b      	lsls	r3, r3, #16
 80020f6:	431a      	orrs	r2, r3
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	3301      	adds	r3, #1
 80020fc:	781b      	ldrb	r3, [r3, #0]
 80020fe:	021b      	lsls	r3, r3, #8
 8002100:	4313      	orrs	r3, r2
 8002102:	687a      	ldr	r2, [r7, #4]
 8002104:	7812      	ldrb	r2, [r2, #0]
 8002106:	4313      	orrs	r3, r2
 8002108:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800210a:	68ba      	ldr	r2, [r7, #8]
 800210c:	4b06      	ldr	r3, [pc, #24]	@ (8002128 <ETH_MACAddressConfig+0x6c>)
 800210e:	4413      	add	r3, r2
 8002110:	461a      	mov	r2, r3
 8002112:	697b      	ldr	r3, [r7, #20]
 8002114:	6013      	str	r3, [r2, #0]
}
 8002116:	bf00      	nop
 8002118:	371c      	adds	r7, #28
 800211a:	46bd      	mov	sp, r7
 800211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002120:	4770      	bx	lr
 8002122:	bf00      	nop
 8002124:	40028040 	.word	0x40028040
 8002128:	40028044 	.word	0x40028044

0800212c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800212c:	b480      	push	{r7}
 800212e:	b085      	sub	sp, #20
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002134:	2300      	movs	r3, #0
 8002136:	60fb      	str	r3, [r7, #12]
 8002138:	e03e      	b.n	80021b8 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	68d9      	ldr	r1, [r3, #12]
 800213e:	68fa      	ldr	r2, [r7, #12]
 8002140:	4613      	mov	r3, r2
 8002142:	009b      	lsls	r3, r3, #2
 8002144:	4413      	add	r3, r2
 8002146:	00db      	lsls	r3, r3, #3
 8002148:	440b      	add	r3, r1
 800214a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	2200      	movs	r2, #0
 8002150:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8002152:	68bb      	ldr	r3, [r7, #8]
 8002154:	2200      	movs	r2, #0
 8002156:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	2200      	movs	r2, #0
 800215c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 800215e:	68bb      	ldr	r3, [r7, #8]
 8002160:	2200      	movs	r2, #0
 8002162:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002164:	68b9      	ldr	r1, [r7, #8]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	68fa      	ldr	r2, [r7, #12]
 800216a:	3206      	adds	r2, #6
 800216c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	2b02      	cmp	r3, #2
 8002180:	d80c      	bhi.n	800219c <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	68d9      	ldr	r1, [r3, #12]
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	1c5a      	adds	r2, r3, #1
 800218a:	4613      	mov	r3, r2
 800218c:	009b      	lsls	r3, r3, #2
 800218e:	4413      	add	r3, r2
 8002190:	00db      	lsls	r3, r3, #3
 8002192:	440b      	add	r3, r1
 8002194:	461a      	mov	r2, r3
 8002196:	68bb      	ldr	r3, [r7, #8]
 8002198:	60da      	str	r2, [r3, #12]
 800219a:	e004      	b.n	80021a6 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	68db      	ldr	r3, [r3, #12]
 80021a0:	461a      	mov	r2, r3
 80021a2:	68bb      	ldr	r3, [r7, #8]
 80021a4:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80021a6:	68bb      	ldr	r3, [r7, #8]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 80021ae:	68bb      	ldr	r3, [r7, #8]
 80021b0:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	3301      	adds	r3, #1
 80021b6:	60fb      	str	r3, [r7, #12]
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	2b03      	cmp	r3, #3
 80021bc:	d9bd      	bls.n	800213a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2200      	movs	r2, #0
 80021c2:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	68da      	ldr	r2, [r3, #12]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80021d0:	611a      	str	r2, [r3, #16]
}
 80021d2:	bf00      	nop
 80021d4:	3714      	adds	r7, #20
 80021d6:	46bd      	mov	sp, r7
 80021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021dc:	4770      	bx	lr

080021de <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80021de:	b480      	push	{r7}
 80021e0:	b085      	sub	sp, #20
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80021e6:	2300      	movs	r3, #0
 80021e8:	60fb      	str	r3, [r7, #12]
 80021ea:	e048      	b.n	800227e <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6919      	ldr	r1, [r3, #16]
 80021f0:	68fa      	ldr	r2, [r7, #12]
 80021f2:	4613      	mov	r3, r2
 80021f4:	009b      	lsls	r3, r3, #2
 80021f6:	4413      	add	r3, r2
 80021f8:	00db      	lsls	r3, r3, #3
 80021fa:	440b      	add	r3, r1
 80021fc:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 80021fe:	68bb      	ldr	r3, [r7, #8]
 8002200:	2200      	movs	r2, #0
 8002202:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	2200      	movs	r2, #0
 8002208:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 800220a:	68bb      	ldr	r3, [r7, #8]
 800220c:	2200      	movs	r2, #0
 800220e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	2200      	movs	r2, #0
 8002214:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8002216:	68bb      	ldr	r3, [r7, #8]
 8002218:	2200      	movs	r2, #0
 800221a:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	2200      	movs	r2, #0
 8002220:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002222:	68bb      	ldr	r3, [r7, #8]
 8002224:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8002228:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	695b      	ldr	r3, [r3, #20]
 800222e:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8002232:	68bb      	ldr	r3, [r7, #8]
 8002234:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002236:	68bb      	ldr	r3, [r7, #8]
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800223e:	68bb      	ldr	r3, [r7, #8]
 8002240:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002242:	68b9      	ldr	r1, [r7, #8]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	68fa      	ldr	r2, [r7, #12]
 8002248:	3212      	adds	r2, #18
 800224a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	2b02      	cmp	r3, #2
 8002252:	d80c      	bhi.n	800226e <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6919      	ldr	r1, [r3, #16]
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	1c5a      	adds	r2, r3, #1
 800225c:	4613      	mov	r3, r2
 800225e:	009b      	lsls	r3, r3, #2
 8002260:	4413      	add	r3, r2
 8002262:	00db      	lsls	r3, r3, #3
 8002264:	440b      	add	r3, r1
 8002266:	461a      	mov	r2, r3
 8002268:	68bb      	ldr	r3, [r7, #8]
 800226a:	60da      	str	r2, [r3, #12]
 800226c:	e004      	b.n	8002278 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	691b      	ldr	r3, [r3, #16]
 8002272:	461a      	mov	r2, r3
 8002274:	68bb      	ldr	r3, [r7, #8]
 8002276:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	3301      	adds	r3, #1
 800227c:	60fb      	str	r3, [r7, #12]
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	2b03      	cmp	r3, #3
 8002282:	d9b3      	bls.n	80021ec <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2200      	movs	r2, #0
 8002288:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2200      	movs	r2, #0
 800228e:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2200      	movs	r2, #0
 8002294:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2200      	movs	r2, #0
 800229a:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2200      	movs	r2, #0
 80022a0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	691a      	ldr	r2, [r3, #16]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80022ae:	60da      	str	r2, [r3, #12]
}
 80022b0:	bf00      	nop
 80022b2:	3714      	adds	r7, #20
 80022b4:	46bd      	mov	sp, r7
 80022b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ba:	4770      	bx	lr

080022bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022bc:	b480      	push	{r7}
 80022be:	b089      	sub	sp, #36	@ 0x24
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
 80022c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80022c6:	2300      	movs	r3, #0
 80022c8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80022ca:	2300      	movs	r3, #0
 80022cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80022ce:	2300      	movs	r3, #0
 80022d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80022d2:	2300      	movs	r3, #0
 80022d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80022d6:	2300      	movs	r3, #0
 80022d8:	61fb      	str	r3, [r7, #28]
 80022da:	e175      	b.n	80025c8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80022dc:	2201      	movs	r2, #1
 80022de:	69fb      	ldr	r3, [r7, #28]
 80022e0:	fa02 f303 	lsl.w	r3, r2, r3
 80022e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	697a      	ldr	r2, [r7, #20]
 80022ec:	4013      	ands	r3, r2
 80022ee:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 80022f0:	693a      	ldr	r2, [r7, #16]
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	429a      	cmp	r2, r3
 80022f6:	f040 8164 	bne.w	80025c2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	f003 0303 	and.w	r3, r3, #3
 8002302:	2b01      	cmp	r3, #1
 8002304:	d005      	beq.n	8002312 <HAL_GPIO_Init+0x56>
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	f003 0303 	and.w	r3, r3, #3
 800230e:	2b02      	cmp	r3, #2
 8002310:	d130      	bne.n	8002374 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	689b      	ldr	r3, [r3, #8]
 8002316:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002318:	69fb      	ldr	r3, [r7, #28]
 800231a:	005b      	lsls	r3, r3, #1
 800231c:	2203      	movs	r2, #3
 800231e:	fa02 f303 	lsl.w	r3, r2, r3
 8002322:	43db      	mvns	r3, r3
 8002324:	69ba      	ldr	r2, [r7, #24]
 8002326:	4013      	ands	r3, r2
 8002328:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	68da      	ldr	r2, [r3, #12]
 800232e:	69fb      	ldr	r3, [r7, #28]
 8002330:	005b      	lsls	r3, r3, #1
 8002332:	fa02 f303 	lsl.w	r3, r2, r3
 8002336:	69ba      	ldr	r2, [r7, #24]
 8002338:	4313      	orrs	r3, r2
 800233a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	69ba      	ldr	r2, [r7, #24]
 8002340:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002348:	2201      	movs	r2, #1
 800234a:	69fb      	ldr	r3, [r7, #28]
 800234c:	fa02 f303 	lsl.w	r3, r2, r3
 8002350:	43db      	mvns	r3, r3
 8002352:	69ba      	ldr	r2, [r7, #24]
 8002354:	4013      	ands	r3, r2
 8002356:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	091b      	lsrs	r3, r3, #4
 800235e:	f003 0201 	and.w	r2, r3, #1
 8002362:	69fb      	ldr	r3, [r7, #28]
 8002364:	fa02 f303 	lsl.w	r3, r2, r3
 8002368:	69ba      	ldr	r2, [r7, #24]
 800236a:	4313      	orrs	r3, r2
 800236c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	69ba      	ldr	r2, [r7, #24]
 8002372:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	f003 0303 	and.w	r3, r3, #3
 800237c:	2b03      	cmp	r3, #3
 800237e:	d017      	beq.n	80023b0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	68db      	ldr	r3, [r3, #12]
 8002384:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002386:	69fb      	ldr	r3, [r7, #28]
 8002388:	005b      	lsls	r3, r3, #1
 800238a:	2203      	movs	r2, #3
 800238c:	fa02 f303 	lsl.w	r3, r2, r3
 8002390:	43db      	mvns	r3, r3
 8002392:	69ba      	ldr	r2, [r7, #24]
 8002394:	4013      	ands	r3, r2
 8002396:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	689a      	ldr	r2, [r3, #8]
 800239c:	69fb      	ldr	r3, [r7, #28]
 800239e:	005b      	lsls	r3, r3, #1
 80023a0:	fa02 f303 	lsl.w	r3, r2, r3
 80023a4:	69ba      	ldr	r2, [r7, #24]
 80023a6:	4313      	orrs	r3, r2
 80023a8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	69ba      	ldr	r2, [r7, #24]
 80023ae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	f003 0303 	and.w	r3, r3, #3
 80023b8:	2b02      	cmp	r3, #2
 80023ba:	d123      	bne.n	8002404 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80023bc:	69fb      	ldr	r3, [r7, #28]
 80023be:	08da      	lsrs	r2, r3, #3
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	3208      	adds	r2, #8
 80023c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80023ca:	69fb      	ldr	r3, [r7, #28]
 80023cc:	f003 0307 	and.w	r3, r3, #7
 80023d0:	009b      	lsls	r3, r3, #2
 80023d2:	220f      	movs	r2, #15
 80023d4:	fa02 f303 	lsl.w	r3, r2, r3
 80023d8:	43db      	mvns	r3, r3
 80023da:	69ba      	ldr	r2, [r7, #24]
 80023dc:	4013      	ands	r3, r2
 80023de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	691a      	ldr	r2, [r3, #16]
 80023e4:	69fb      	ldr	r3, [r7, #28]
 80023e6:	f003 0307 	and.w	r3, r3, #7
 80023ea:	009b      	lsls	r3, r3, #2
 80023ec:	fa02 f303 	lsl.w	r3, r2, r3
 80023f0:	69ba      	ldr	r2, [r7, #24]
 80023f2:	4313      	orrs	r3, r2
 80023f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80023f6:	69fb      	ldr	r3, [r7, #28]
 80023f8:	08da      	lsrs	r2, r3, #3
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	3208      	adds	r2, #8
 80023fe:	69b9      	ldr	r1, [r7, #24]
 8002400:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800240a:	69fb      	ldr	r3, [r7, #28]
 800240c:	005b      	lsls	r3, r3, #1
 800240e:	2203      	movs	r2, #3
 8002410:	fa02 f303 	lsl.w	r3, r2, r3
 8002414:	43db      	mvns	r3, r3
 8002416:	69ba      	ldr	r2, [r7, #24]
 8002418:	4013      	ands	r3, r2
 800241a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	f003 0203 	and.w	r2, r3, #3
 8002424:	69fb      	ldr	r3, [r7, #28]
 8002426:	005b      	lsls	r3, r3, #1
 8002428:	fa02 f303 	lsl.w	r3, r2, r3
 800242c:	69ba      	ldr	r2, [r7, #24]
 800242e:	4313      	orrs	r3, r2
 8002430:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	69ba      	ldr	r2, [r7, #24]
 8002436:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002440:	2b00      	cmp	r3, #0
 8002442:	f000 80be 	beq.w	80025c2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002446:	4b66      	ldr	r3, [pc, #408]	@ (80025e0 <HAL_GPIO_Init+0x324>)
 8002448:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800244a:	4a65      	ldr	r2, [pc, #404]	@ (80025e0 <HAL_GPIO_Init+0x324>)
 800244c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002450:	6453      	str	r3, [r2, #68]	@ 0x44
 8002452:	4b63      	ldr	r3, [pc, #396]	@ (80025e0 <HAL_GPIO_Init+0x324>)
 8002454:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002456:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800245a:	60fb      	str	r3, [r7, #12]
 800245c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800245e:	4a61      	ldr	r2, [pc, #388]	@ (80025e4 <HAL_GPIO_Init+0x328>)
 8002460:	69fb      	ldr	r3, [r7, #28]
 8002462:	089b      	lsrs	r3, r3, #2
 8002464:	3302      	adds	r3, #2
 8002466:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800246a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800246c:	69fb      	ldr	r3, [r7, #28]
 800246e:	f003 0303 	and.w	r3, r3, #3
 8002472:	009b      	lsls	r3, r3, #2
 8002474:	220f      	movs	r2, #15
 8002476:	fa02 f303 	lsl.w	r3, r2, r3
 800247a:	43db      	mvns	r3, r3
 800247c:	69ba      	ldr	r2, [r7, #24]
 800247e:	4013      	ands	r3, r2
 8002480:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	4a58      	ldr	r2, [pc, #352]	@ (80025e8 <HAL_GPIO_Init+0x32c>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d037      	beq.n	80024fa <HAL_GPIO_Init+0x23e>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	4a57      	ldr	r2, [pc, #348]	@ (80025ec <HAL_GPIO_Init+0x330>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d031      	beq.n	80024f6 <HAL_GPIO_Init+0x23a>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	4a56      	ldr	r2, [pc, #344]	@ (80025f0 <HAL_GPIO_Init+0x334>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d02b      	beq.n	80024f2 <HAL_GPIO_Init+0x236>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	4a55      	ldr	r2, [pc, #340]	@ (80025f4 <HAL_GPIO_Init+0x338>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d025      	beq.n	80024ee <HAL_GPIO_Init+0x232>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	4a54      	ldr	r2, [pc, #336]	@ (80025f8 <HAL_GPIO_Init+0x33c>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d01f      	beq.n	80024ea <HAL_GPIO_Init+0x22e>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	4a53      	ldr	r2, [pc, #332]	@ (80025fc <HAL_GPIO_Init+0x340>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d019      	beq.n	80024e6 <HAL_GPIO_Init+0x22a>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	4a52      	ldr	r2, [pc, #328]	@ (8002600 <HAL_GPIO_Init+0x344>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d013      	beq.n	80024e2 <HAL_GPIO_Init+0x226>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	4a51      	ldr	r2, [pc, #324]	@ (8002604 <HAL_GPIO_Init+0x348>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d00d      	beq.n	80024de <HAL_GPIO_Init+0x222>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	4a50      	ldr	r2, [pc, #320]	@ (8002608 <HAL_GPIO_Init+0x34c>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d007      	beq.n	80024da <HAL_GPIO_Init+0x21e>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	4a4f      	ldr	r2, [pc, #316]	@ (800260c <HAL_GPIO_Init+0x350>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d101      	bne.n	80024d6 <HAL_GPIO_Init+0x21a>
 80024d2:	2309      	movs	r3, #9
 80024d4:	e012      	b.n	80024fc <HAL_GPIO_Init+0x240>
 80024d6:	230a      	movs	r3, #10
 80024d8:	e010      	b.n	80024fc <HAL_GPIO_Init+0x240>
 80024da:	2308      	movs	r3, #8
 80024dc:	e00e      	b.n	80024fc <HAL_GPIO_Init+0x240>
 80024de:	2307      	movs	r3, #7
 80024e0:	e00c      	b.n	80024fc <HAL_GPIO_Init+0x240>
 80024e2:	2306      	movs	r3, #6
 80024e4:	e00a      	b.n	80024fc <HAL_GPIO_Init+0x240>
 80024e6:	2305      	movs	r3, #5
 80024e8:	e008      	b.n	80024fc <HAL_GPIO_Init+0x240>
 80024ea:	2304      	movs	r3, #4
 80024ec:	e006      	b.n	80024fc <HAL_GPIO_Init+0x240>
 80024ee:	2303      	movs	r3, #3
 80024f0:	e004      	b.n	80024fc <HAL_GPIO_Init+0x240>
 80024f2:	2302      	movs	r3, #2
 80024f4:	e002      	b.n	80024fc <HAL_GPIO_Init+0x240>
 80024f6:	2301      	movs	r3, #1
 80024f8:	e000      	b.n	80024fc <HAL_GPIO_Init+0x240>
 80024fa:	2300      	movs	r3, #0
 80024fc:	69fa      	ldr	r2, [r7, #28]
 80024fe:	f002 0203 	and.w	r2, r2, #3
 8002502:	0092      	lsls	r2, r2, #2
 8002504:	4093      	lsls	r3, r2
 8002506:	69ba      	ldr	r2, [r7, #24]
 8002508:	4313      	orrs	r3, r2
 800250a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800250c:	4935      	ldr	r1, [pc, #212]	@ (80025e4 <HAL_GPIO_Init+0x328>)
 800250e:	69fb      	ldr	r3, [r7, #28]
 8002510:	089b      	lsrs	r3, r3, #2
 8002512:	3302      	adds	r3, #2
 8002514:	69ba      	ldr	r2, [r7, #24]
 8002516:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800251a:	4b3d      	ldr	r3, [pc, #244]	@ (8002610 <HAL_GPIO_Init+0x354>)
 800251c:	689b      	ldr	r3, [r3, #8]
 800251e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	43db      	mvns	r3, r3
 8002524:	69ba      	ldr	r2, [r7, #24]
 8002526:	4013      	ands	r3, r2
 8002528:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002532:	2b00      	cmp	r3, #0
 8002534:	d003      	beq.n	800253e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002536:	69ba      	ldr	r2, [r7, #24]
 8002538:	693b      	ldr	r3, [r7, #16]
 800253a:	4313      	orrs	r3, r2
 800253c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800253e:	4a34      	ldr	r2, [pc, #208]	@ (8002610 <HAL_GPIO_Init+0x354>)
 8002540:	69bb      	ldr	r3, [r7, #24]
 8002542:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002544:	4b32      	ldr	r3, [pc, #200]	@ (8002610 <HAL_GPIO_Init+0x354>)
 8002546:	68db      	ldr	r3, [r3, #12]
 8002548:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	43db      	mvns	r3, r3
 800254e:	69ba      	ldr	r2, [r7, #24]
 8002550:	4013      	ands	r3, r2
 8002552:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800255c:	2b00      	cmp	r3, #0
 800255e:	d003      	beq.n	8002568 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002560:	69ba      	ldr	r2, [r7, #24]
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	4313      	orrs	r3, r2
 8002566:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002568:	4a29      	ldr	r2, [pc, #164]	@ (8002610 <HAL_GPIO_Init+0x354>)
 800256a:	69bb      	ldr	r3, [r7, #24]
 800256c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800256e:	4b28      	ldr	r3, [pc, #160]	@ (8002610 <HAL_GPIO_Init+0x354>)
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002574:	693b      	ldr	r3, [r7, #16]
 8002576:	43db      	mvns	r3, r3
 8002578:	69ba      	ldr	r2, [r7, #24]
 800257a:	4013      	ands	r3, r2
 800257c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002586:	2b00      	cmp	r3, #0
 8002588:	d003      	beq.n	8002592 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800258a:	69ba      	ldr	r2, [r7, #24]
 800258c:	693b      	ldr	r3, [r7, #16]
 800258e:	4313      	orrs	r3, r2
 8002590:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002592:	4a1f      	ldr	r2, [pc, #124]	@ (8002610 <HAL_GPIO_Init+0x354>)
 8002594:	69bb      	ldr	r3, [r7, #24]
 8002596:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002598:	4b1d      	ldr	r3, [pc, #116]	@ (8002610 <HAL_GPIO_Init+0x354>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	43db      	mvns	r3, r3
 80025a2:	69ba      	ldr	r2, [r7, #24]
 80025a4:	4013      	ands	r3, r2
 80025a6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d003      	beq.n	80025bc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80025b4:	69ba      	ldr	r2, [r7, #24]
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	4313      	orrs	r3, r2
 80025ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80025bc:	4a14      	ldr	r2, [pc, #80]	@ (8002610 <HAL_GPIO_Init+0x354>)
 80025be:	69bb      	ldr	r3, [r7, #24]
 80025c0:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 80025c2:	69fb      	ldr	r3, [r7, #28]
 80025c4:	3301      	adds	r3, #1
 80025c6:	61fb      	str	r3, [r7, #28]
 80025c8:	69fb      	ldr	r3, [r7, #28]
 80025ca:	2b0f      	cmp	r3, #15
 80025cc:	f67f ae86 	bls.w	80022dc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80025d0:	bf00      	nop
 80025d2:	bf00      	nop
 80025d4:	3724      	adds	r7, #36	@ 0x24
 80025d6:	46bd      	mov	sp, r7
 80025d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025dc:	4770      	bx	lr
 80025de:	bf00      	nop
 80025e0:	40023800 	.word	0x40023800
 80025e4:	40013800 	.word	0x40013800
 80025e8:	40020000 	.word	0x40020000
 80025ec:	40020400 	.word	0x40020400
 80025f0:	40020800 	.word	0x40020800
 80025f4:	40020c00 	.word	0x40020c00
 80025f8:	40021000 	.word	0x40021000
 80025fc:	40021400 	.word	0x40021400
 8002600:	40021800 	.word	0x40021800
 8002604:	40021c00 	.word	0x40021c00
 8002608:	40022000 	.word	0x40022000
 800260c:	40022400 	.word	0x40022400
 8002610:	40013c00 	.word	0x40013c00

08002614 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002614:	b480      	push	{r7}
 8002616:	b083      	sub	sp, #12
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
 800261c:	460b      	mov	r3, r1
 800261e:	807b      	strh	r3, [r7, #2]
 8002620:	4613      	mov	r3, r2
 8002622:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002624:	787b      	ldrb	r3, [r7, #1]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d003      	beq.n	8002632 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800262a:	887a      	ldrh	r2, [r7, #2]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002630:	e003      	b.n	800263a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002632:	887b      	ldrh	r3, [r7, #2]
 8002634:	041a      	lsls	r2, r3, #16
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	619a      	str	r2, [r3, #24]
}
 800263a:	bf00      	nop
 800263c:	370c      	adds	r7, #12
 800263e:	46bd      	mov	sp, r7
 8002640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002644:	4770      	bx	lr
	...

08002648 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b082      	sub	sp, #8
 800264c:	af00      	add	r7, sp, #0
 800264e:	4603      	mov	r3, r0
 8002650:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002652:	4b08      	ldr	r3, [pc, #32]	@ (8002674 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002654:	695a      	ldr	r2, [r3, #20]
 8002656:	88fb      	ldrh	r3, [r7, #6]
 8002658:	4013      	ands	r3, r2
 800265a:	2b00      	cmp	r3, #0
 800265c:	d006      	beq.n	800266c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800265e:	4a05      	ldr	r2, [pc, #20]	@ (8002674 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002660:	88fb      	ldrh	r3, [r7, #6]
 8002662:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002664:	88fb      	ldrh	r3, [r7, #6]
 8002666:	4618      	mov	r0, r3
 8002668:	f7fe fa56 	bl	8000b18 <HAL_GPIO_EXTI_Callback>
  }
}
 800266c:	bf00      	nop
 800266e:	3708      	adds	r7, #8
 8002670:	46bd      	mov	sp, r7
 8002672:	bd80      	pop	{r7, pc}
 8002674:	40013c00 	.word	0x40013c00

08002678 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b086      	sub	sp, #24
 800267c:	af02      	add	r7, sp, #8
 800267e:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d101      	bne.n	800268a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	e108      	b.n	800289c <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002696:	b2db      	uxtb	r3, r3
 8002698:	2b00      	cmp	r3, #0
 800269a:	d106      	bne.n	80026aa <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2200      	movs	r2, #0
 80026a0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80026a4:	6878      	ldr	r0, [r7, #4]
 80026a6:	f7fe fcd7 	bl	8001058 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2203      	movs	r2, #3
 80026ae:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80026b2:	68bb      	ldr	r3, [r7, #8]
 80026b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80026b8:	d102      	bne.n	80026c0 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2200      	movs	r2, #0
 80026be:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4618      	mov	r0, r3
 80026c6:	f002 fb1f 	bl	8004d08 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6818      	ldr	r0, [r3, #0]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	7c1a      	ldrb	r2, [r3, #16]
 80026d2:	f88d 2000 	strb.w	r2, [sp]
 80026d6:	3304      	adds	r3, #4
 80026d8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80026da:	f002 fabb 	bl	8004c54 <USB_CoreInit>
 80026de:	4603      	mov	r3, r0
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d005      	beq.n	80026f0 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2202      	movs	r2, #2
 80026e8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80026ec:	2301      	movs	r3, #1
 80026ee:	e0d5      	b.n	800289c <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	2100      	movs	r1, #0
 80026f6:	4618      	mov	r0, r3
 80026f8:	f002 fb17 	bl	8004d2a <USB_SetCurrentMode>
 80026fc:	4603      	mov	r3, r0
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d005      	beq.n	800270e <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2202      	movs	r2, #2
 8002706:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800270a:	2301      	movs	r3, #1
 800270c:	e0c6      	b.n	800289c <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800270e:	2300      	movs	r3, #0
 8002710:	73fb      	strb	r3, [r7, #15]
 8002712:	e04a      	b.n	80027aa <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002714:	7bfa      	ldrb	r2, [r7, #15]
 8002716:	6879      	ldr	r1, [r7, #4]
 8002718:	4613      	mov	r3, r2
 800271a:	00db      	lsls	r3, r3, #3
 800271c:	4413      	add	r3, r2
 800271e:	009b      	lsls	r3, r3, #2
 8002720:	440b      	add	r3, r1
 8002722:	3315      	adds	r3, #21
 8002724:	2201      	movs	r2, #1
 8002726:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002728:	7bfa      	ldrb	r2, [r7, #15]
 800272a:	6879      	ldr	r1, [r7, #4]
 800272c:	4613      	mov	r3, r2
 800272e:	00db      	lsls	r3, r3, #3
 8002730:	4413      	add	r3, r2
 8002732:	009b      	lsls	r3, r3, #2
 8002734:	440b      	add	r3, r1
 8002736:	3314      	adds	r3, #20
 8002738:	7bfa      	ldrb	r2, [r7, #15]
 800273a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800273c:	7bfa      	ldrb	r2, [r7, #15]
 800273e:	7bfb      	ldrb	r3, [r7, #15]
 8002740:	b298      	uxth	r0, r3
 8002742:	6879      	ldr	r1, [r7, #4]
 8002744:	4613      	mov	r3, r2
 8002746:	00db      	lsls	r3, r3, #3
 8002748:	4413      	add	r3, r2
 800274a:	009b      	lsls	r3, r3, #2
 800274c:	440b      	add	r3, r1
 800274e:	332e      	adds	r3, #46	@ 0x2e
 8002750:	4602      	mov	r2, r0
 8002752:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002754:	7bfa      	ldrb	r2, [r7, #15]
 8002756:	6879      	ldr	r1, [r7, #4]
 8002758:	4613      	mov	r3, r2
 800275a:	00db      	lsls	r3, r3, #3
 800275c:	4413      	add	r3, r2
 800275e:	009b      	lsls	r3, r3, #2
 8002760:	440b      	add	r3, r1
 8002762:	3318      	adds	r3, #24
 8002764:	2200      	movs	r2, #0
 8002766:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002768:	7bfa      	ldrb	r2, [r7, #15]
 800276a:	6879      	ldr	r1, [r7, #4]
 800276c:	4613      	mov	r3, r2
 800276e:	00db      	lsls	r3, r3, #3
 8002770:	4413      	add	r3, r2
 8002772:	009b      	lsls	r3, r3, #2
 8002774:	440b      	add	r3, r1
 8002776:	331c      	adds	r3, #28
 8002778:	2200      	movs	r2, #0
 800277a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800277c:	7bfa      	ldrb	r2, [r7, #15]
 800277e:	6879      	ldr	r1, [r7, #4]
 8002780:	4613      	mov	r3, r2
 8002782:	00db      	lsls	r3, r3, #3
 8002784:	4413      	add	r3, r2
 8002786:	009b      	lsls	r3, r3, #2
 8002788:	440b      	add	r3, r1
 800278a:	3320      	adds	r3, #32
 800278c:	2200      	movs	r2, #0
 800278e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002790:	7bfa      	ldrb	r2, [r7, #15]
 8002792:	6879      	ldr	r1, [r7, #4]
 8002794:	4613      	mov	r3, r2
 8002796:	00db      	lsls	r3, r3, #3
 8002798:	4413      	add	r3, r2
 800279a:	009b      	lsls	r3, r3, #2
 800279c:	440b      	add	r3, r1
 800279e:	3324      	adds	r3, #36	@ 0x24
 80027a0:	2200      	movs	r2, #0
 80027a2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027a4:	7bfb      	ldrb	r3, [r7, #15]
 80027a6:	3301      	adds	r3, #1
 80027a8:	73fb      	strb	r3, [r7, #15]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	791b      	ldrb	r3, [r3, #4]
 80027ae:	7bfa      	ldrb	r2, [r7, #15]
 80027b0:	429a      	cmp	r2, r3
 80027b2:	d3af      	bcc.n	8002714 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027b4:	2300      	movs	r3, #0
 80027b6:	73fb      	strb	r3, [r7, #15]
 80027b8:	e044      	b.n	8002844 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80027ba:	7bfa      	ldrb	r2, [r7, #15]
 80027bc:	6879      	ldr	r1, [r7, #4]
 80027be:	4613      	mov	r3, r2
 80027c0:	00db      	lsls	r3, r3, #3
 80027c2:	4413      	add	r3, r2
 80027c4:	009b      	lsls	r3, r3, #2
 80027c6:	440b      	add	r3, r1
 80027c8:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80027cc:	2200      	movs	r2, #0
 80027ce:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80027d0:	7bfa      	ldrb	r2, [r7, #15]
 80027d2:	6879      	ldr	r1, [r7, #4]
 80027d4:	4613      	mov	r3, r2
 80027d6:	00db      	lsls	r3, r3, #3
 80027d8:	4413      	add	r3, r2
 80027da:	009b      	lsls	r3, r3, #2
 80027dc:	440b      	add	r3, r1
 80027de:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80027e2:	7bfa      	ldrb	r2, [r7, #15]
 80027e4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80027e6:	7bfa      	ldrb	r2, [r7, #15]
 80027e8:	6879      	ldr	r1, [r7, #4]
 80027ea:	4613      	mov	r3, r2
 80027ec:	00db      	lsls	r3, r3, #3
 80027ee:	4413      	add	r3, r2
 80027f0:	009b      	lsls	r3, r3, #2
 80027f2:	440b      	add	r3, r1
 80027f4:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80027f8:	2200      	movs	r2, #0
 80027fa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80027fc:	7bfa      	ldrb	r2, [r7, #15]
 80027fe:	6879      	ldr	r1, [r7, #4]
 8002800:	4613      	mov	r3, r2
 8002802:	00db      	lsls	r3, r3, #3
 8002804:	4413      	add	r3, r2
 8002806:	009b      	lsls	r3, r3, #2
 8002808:	440b      	add	r3, r1
 800280a:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800280e:	2200      	movs	r2, #0
 8002810:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002812:	7bfa      	ldrb	r2, [r7, #15]
 8002814:	6879      	ldr	r1, [r7, #4]
 8002816:	4613      	mov	r3, r2
 8002818:	00db      	lsls	r3, r3, #3
 800281a:	4413      	add	r3, r2
 800281c:	009b      	lsls	r3, r3, #2
 800281e:	440b      	add	r3, r1
 8002820:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002824:	2200      	movs	r2, #0
 8002826:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002828:	7bfa      	ldrb	r2, [r7, #15]
 800282a:	6879      	ldr	r1, [r7, #4]
 800282c:	4613      	mov	r3, r2
 800282e:	00db      	lsls	r3, r3, #3
 8002830:	4413      	add	r3, r2
 8002832:	009b      	lsls	r3, r3, #2
 8002834:	440b      	add	r3, r1
 8002836:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800283a:	2200      	movs	r2, #0
 800283c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800283e:	7bfb      	ldrb	r3, [r7, #15]
 8002840:	3301      	adds	r3, #1
 8002842:	73fb      	strb	r3, [r7, #15]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	791b      	ldrb	r3, [r3, #4]
 8002848:	7bfa      	ldrb	r2, [r7, #15]
 800284a:	429a      	cmp	r2, r3
 800284c:	d3b5      	bcc.n	80027ba <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6818      	ldr	r0, [r3, #0]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	7c1a      	ldrb	r2, [r3, #16]
 8002856:	f88d 2000 	strb.w	r2, [sp]
 800285a:	3304      	adds	r3, #4
 800285c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800285e:	f002 fab1 	bl	8004dc4 <USB_DevInit>
 8002862:	4603      	mov	r3, r0
 8002864:	2b00      	cmp	r3, #0
 8002866:	d005      	beq.n	8002874 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2202      	movs	r2, #2
 800286c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002870:	2301      	movs	r3, #1
 8002872:	e013      	b.n	800289c <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2200      	movs	r2, #0
 8002878:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2201      	movs	r2, #1
 800287e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	7b1b      	ldrb	r3, [r3, #12]
 8002886:	2b01      	cmp	r3, #1
 8002888:	d102      	bne.n	8002890 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800288a:	6878      	ldr	r0, [r7, #4]
 800288c:	f000 f80a 	bl	80028a4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4618      	mov	r0, r3
 8002896:	f002 fc6c 	bl	8005172 <USB_DevDisconnect>

  return HAL_OK;
 800289a:	2300      	movs	r3, #0
}
 800289c:	4618      	mov	r0, r3
 800289e:	3710      	adds	r7, #16
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bd80      	pop	{r7, pc}

080028a4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b085      	sub	sp, #20
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2201      	movs	r2, #1
 80028b6:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2200      	movs	r2, #0
 80028be:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	699b      	ldr	r3, [r3, #24]
 80028c6:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80028d2:	4b05      	ldr	r3, [pc, #20]	@ (80028e8 <HAL_PCDEx_ActivateLPM+0x44>)
 80028d4:	4313      	orrs	r3, r2
 80028d6:	68fa      	ldr	r2, [r7, #12]
 80028d8:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80028da:	2300      	movs	r3, #0
}
 80028dc:	4618      	mov	r0, r3
 80028de:	3714      	adds	r7, #20
 80028e0:	46bd      	mov	sp, r7
 80028e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e6:	4770      	bx	lr
 80028e8:	10000003 	.word	0x10000003

080028ec <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80028ec:	b480      	push	{r7}
 80028ee:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80028f0:	4b05      	ldr	r3, [pc, #20]	@ (8002908 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a04      	ldr	r2, [pc, #16]	@ (8002908 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80028f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80028fa:	6013      	str	r3, [r2, #0]
}
 80028fc:	bf00      	nop
 80028fe:	46bd      	mov	sp, r7
 8002900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002904:	4770      	bx	lr
 8002906:	bf00      	nop
 8002908:	40007000 	.word	0x40007000

0800290c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b082      	sub	sp, #8
 8002910:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002912:	2300      	movs	r3, #0
 8002914:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002916:	4b23      	ldr	r3, [pc, #140]	@ (80029a4 <HAL_PWREx_EnableOverDrive+0x98>)
 8002918:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800291a:	4a22      	ldr	r2, [pc, #136]	@ (80029a4 <HAL_PWREx_EnableOverDrive+0x98>)
 800291c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002920:	6413      	str	r3, [r2, #64]	@ 0x40
 8002922:	4b20      	ldr	r3, [pc, #128]	@ (80029a4 <HAL_PWREx_EnableOverDrive+0x98>)
 8002924:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002926:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800292a:	603b      	str	r3, [r7, #0]
 800292c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800292e:	4b1e      	ldr	r3, [pc, #120]	@ (80029a8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a1d      	ldr	r2, [pc, #116]	@ (80029a8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002934:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002938:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800293a:	f7fe fdc7 	bl	80014cc <HAL_GetTick>
 800293e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002940:	e009      	b.n	8002956 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002942:	f7fe fdc3 	bl	80014cc <HAL_GetTick>
 8002946:	4602      	mov	r2, r0
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	1ad3      	subs	r3, r2, r3
 800294c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002950:	d901      	bls.n	8002956 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002952:	2303      	movs	r3, #3
 8002954:	e022      	b.n	800299c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002956:	4b14      	ldr	r3, [pc, #80]	@ (80029a8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800295e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002962:	d1ee      	bne.n	8002942 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002964:	4b10      	ldr	r3, [pc, #64]	@ (80029a8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a0f      	ldr	r2, [pc, #60]	@ (80029a8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800296a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800296e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002970:	f7fe fdac 	bl	80014cc <HAL_GetTick>
 8002974:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002976:	e009      	b.n	800298c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002978:	f7fe fda8 	bl	80014cc <HAL_GetTick>
 800297c:	4602      	mov	r2, r0
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	1ad3      	subs	r3, r2, r3
 8002982:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002986:	d901      	bls.n	800298c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002988:	2303      	movs	r3, #3
 800298a:	e007      	b.n	800299c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800298c:	4b06      	ldr	r3, [pc, #24]	@ (80029a8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002994:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002998:	d1ee      	bne.n	8002978 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800299a:	2300      	movs	r3, #0
}
 800299c:	4618      	mov	r0, r3
 800299e:	3708      	adds	r7, #8
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd80      	pop	{r7, pc}
 80029a4:	40023800 	.word	0x40023800
 80029a8:	40007000 	.word	0x40007000

080029ac <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b086      	sub	sp, #24
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80029b4:	2300      	movs	r3, #0
 80029b6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d101      	bne.n	80029c2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80029be:	2301      	movs	r3, #1
 80029c0:	e29b      	b.n	8002efa <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f003 0301 	and.w	r3, r3, #1
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	f000 8087 	beq.w	8002ade <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80029d0:	4b96      	ldr	r3, [pc, #600]	@ (8002c2c <HAL_RCC_OscConfig+0x280>)
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	f003 030c 	and.w	r3, r3, #12
 80029d8:	2b04      	cmp	r3, #4
 80029da:	d00c      	beq.n	80029f6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029dc:	4b93      	ldr	r3, [pc, #588]	@ (8002c2c <HAL_RCC_OscConfig+0x280>)
 80029de:	689b      	ldr	r3, [r3, #8]
 80029e0:	f003 030c 	and.w	r3, r3, #12
 80029e4:	2b08      	cmp	r3, #8
 80029e6:	d112      	bne.n	8002a0e <HAL_RCC_OscConfig+0x62>
 80029e8:	4b90      	ldr	r3, [pc, #576]	@ (8002c2c <HAL_RCC_OscConfig+0x280>)
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80029f0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80029f4:	d10b      	bne.n	8002a0e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029f6:	4b8d      	ldr	r3, [pc, #564]	@ (8002c2c <HAL_RCC_OscConfig+0x280>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d06c      	beq.n	8002adc <HAL_RCC_OscConfig+0x130>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d168      	bne.n	8002adc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e275      	b.n	8002efa <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a16:	d106      	bne.n	8002a26 <HAL_RCC_OscConfig+0x7a>
 8002a18:	4b84      	ldr	r3, [pc, #528]	@ (8002c2c <HAL_RCC_OscConfig+0x280>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a83      	ldr	r2, [pc, #524]	@ (8002c2c <HAL_RCC_OscConfig+0x280>)
 8002a1e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a22:	6013      	str	r3, [r2, #0]
 8002a24:	e02e      	b.n	8002a84 <HAL_RCC_OscConfig+0xd8>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d10c      	bne.n	8002a48 <HAL_RCC_OscConfig+0x9c>
 8002a2e:	4b7f      	ldr	r3, [pc, #508]	@ (8002c2c <HAL_RCC_OscConfig+0x280>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a7e      	ldr	r2, [pc, #504]	@ (8002c2c <HAL_RCC_OscConfig+0x280>)
 8002a34:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a38:	6013      	str	r3, [r2, #0]
 8002a3a:	4b7c      	ldr	r3, [pc, #496]	@ (8002c2c <HAL_RCC_OscConfig+0x280>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a7b      	ldr	r2, [pc, #492]	@ (8002c2c <HAL_RCC_OscConfig+0x280>)
 8002a40:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002a44:	6013      	str	r3, [r2, #0]
 8002a46:	e01d      	b.n	8002a84 <HAL_RCC_OscConfig+0xd8>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002a50:	d10c      	bne.n	8002a6c <HAL_RCC_OscConfig+0xc0>
 8002a52:	4b76      	ldr	r3, [pc, #472]	@ (8002c2c <HAL_RCC_OscConfig+0x280>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4a75      	ldr	r2, [pc, #468]	@ (8002c2c <HAL_RCC_OscConfig+0x280>)
 8002a58:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002a5c:	6013      	str	r3, [r2, #0]
 8002a5e:	4b73      	ldr	r3, [pc, #460]	@ (8002c2c <HAL_RCC_OscConfig+0x280>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a72      	ldr	r2, [pc, #456]	@ (8002c2c <HAL_RCC_OscConfig+0x280>)
 8002a64:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a68:	6013      	str	r3, [r2, #0]
 8002a6a:	e00b      	b.n	8002a84 <HAL_RCC_OscConfig+0xd8>
 8002a6c:	4b6f      	ldr	r3, [pc, #444]	@ (8002c2c <HAL_RCC_OscConfig+0x280>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a6e      	ldr	r2, [pc, #440]	@ (8002c2c <HAL_RCC_OscConfig+0x280>)
 8002a72:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a76:	6013      	str	r3, [r2, #0]
 8002a78:	4b6c      	ldr	r3, [pc, #432]	@ (8002c2c <HAL_RCC_OscConfig+0x280>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a6b      	ldr	r2, [pc, #428]	@ (8002c2c <HAL_RCC_OscConfig+0x280>)
 8002a7e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002a82:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d013      	beq.n	8002ab4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a8c:	f7fe fd1e 	bl	80014cc <HAL_GetTick>
 8002a90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a92:	e008      	b.n	8002aa6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a94:	f7fe fd1a 	bl	80014cc <HAL_GetTick>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	1ad3      	subs	r3, r2, r3
 8002a9e:	2b64      	cmp	r3, #100	@ 0x64
 8002aa0:	d901      	bls.n	8002aa6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002aa2:	2303      	movs	r3, #3
 8002aa4:	e229      	b.n	8002efa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002aa6:	4b61      	ldr	r3, [pc, #388]	@ (8002c2c <HAL_RCC_OscConfig+0x280>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d0f0      	beq.n	8002a94 <HAL_RCC_OscConfig+0xe8>
 8002ab2:	e014      	b.n	8002ade <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ab4:	f7fe fd0a 	bl	80014cc <HAL_GetTick>
 8002ab8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002aba:	e008      	b.n	8002ace <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002abc:	f7fe fd06 	bl	80014cc <HAL_GetTick>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	1ad3      	subs	r3, r2, r3
 8002ac6:	2b64      	cmp	r3, #100	@ 0x64
 8002ac8:	d901      	bls.n	8002ace <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002aca:	2303      	movs	r3, #3
 8002acc:	e215      	b.n	8002efa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ace:	4b57      	ldr	r3, [pc, #348]	@ (8002c2c <HAL_RCC_OscConfig+0x280>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d1f0      	bne.n	8002abc <HAL_RCC_OscConfig+0x110>
 8002ada:	e000      	b.n	8002ade <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002adc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f003 0302 	and.w	r3, r3, #2
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d069      	beq.n	8002bbe <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002aea:	4b50      	ldr	r3, [pc, #320]	@ (8002c2c <HAL_RCC_OscConfig+0x280>)
 8002aec:	689b      	ldr	r3, [r3, #8]
 8002aee:	f003 030c 	and.w	r3, r3, #12
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d00b      	beq.n	8002b0e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002af6:	4b4d      	ldr	r3, [pc, #308]	@ (8002c2c <HAL_RCC_OscConfig+0x280>)
 8002af8:	689b      	ldr	r3, [r3, #8]
 8002afa:	f003 030c 	and.w	r3, r3, #12
 8002afe:	2b08      	cmp	r3, #8
 8002b00:	d11c      	bne.n	8002b3c <HAL_RCC_OscConfig+0x190>
 8002b02:	4b4a      	ldr	r3, [pc, #296]	@ (8002c2c <HAL_RCC_OscConfig+0x280>)
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d116      	bne.n	8002b3c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b0e:	4b47      	ldr	r3, [pc, #284]	@ (8002c2c <HAL_RCC_OscConfig+0x280>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f003 0302 	and.w	r3, r3, #2
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d005      	beq.n	8002b26 <HAL_RCC_OscConfig+0x17a>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	68db      	ldr	r3, [r3, #12]
 8002b1e:	2b01      	cmp	r3, #1
 8002b20:	d001      	beq.n	8002b26 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
 8002b24:	e1e9      	b.n	8002efa <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b26:	4b41      	ldr	r3, [pc, #260]	@ (8002c2c <HAL_RCC_OscConfig+0x280>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	691b      	ldr	r3, [r3, #16]
 8002b32:	00db      	lsls	r3, r3, #3
 8002b34:	493d      	ldr	r1, [pc, #244]	@ (8002c2c <HAL_RCC_OscConfig+0x280>)
 8002b36:	4313      	orrs	r3, r2
 8002b38:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b3a:	e040      	b.n	8002bbe <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	68db      	ldr	r3, [r3, #12]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d023      	beq.n	8002b8c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b44:	4b39      	ldr	r3, [pc, #228]	@ (8002c2c <HAL_RCC_OscConfig+0x280>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a38      	ldr	r2, [pc, #224]	@ (8002c2c <HAL_RCC_OscConfig+0x280>)
 8002b4a:	f043 0301 	orr.w	r3, r3, #1
 8002b4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b50:	f7fe fcbc 	bl	80014cc <HAL_GetTick>
 8002b54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b56:	e008      	b.n	8002b6a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b58:	f7fe fcb8 	bl	80014cc <HAL_GetTick>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	693b      	ldr	r3, [r7, #16]
 8002b60:	1ad3      	subs	r3, r2, r3
 8002b62:	2b02      	cmp	r3, #2
 8002b64:	d901      	bls.n	8002b6a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002b66:	2303      	movs	r3, #3
 8002b68:	e1c7      	b.n	8002efa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b6a:	4b30      	ldr	r3, [pc, #192]	@ (8002c2c <HAL_RCC_OscConfig+0x280>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f003 0302 	and.w	r3, r3, #2
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d0f0      	beq.n	8002b58 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b76:	4b2d      	ldr	r3, [pc, #180]	@ (8002c2c <HAL_RCC_OscConfig+0x280>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	691b      	ldr	r3, [r3, #16]
 8002b82:	00db      	lsls	r3, r3, #3
 8002b84:	4929      	ldr	r1, [pc, #164]	@ (8002c2c <HAL_RCC_OscConfig+0x280>)
 8002b86:	4313      	orrs	r3, r2
 8002b88:	600b      	str	r3, [r1, #0]
 8002b8a:	e018      	b.n	8002bbe <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b8c:	4b27      	ldr	r3, [pc, #156]	@ (8002c2c <HAL_RCC_OscConfig+0x280>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a26      	ldr	r2, [pc, #152]	@ (8002c2c <HAL_RCC_OscConfig+0x280>)
 8002b92:	f023 0301 	bic.w	r3, r3, #1
 8002b96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b98:	f7fe fc98 	bl	80014cc <HAL_GetTick>
 8002b9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b9e:	e008      	b.n	8002bb2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ba0:	f7fe fc94 	bl	80014cc <HAL_GetTick>
 8002ba4:	4602      	mov	r2, r0
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	1ad3      	subs	r3, r2, r3
 8002baa:	2b02      	cmp	r3, #2
 8002bac:	d901      	bls.n	8002bb2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002bae:	2303      	movs	r3, #3
 8002bb0:	e1a3      	b.n	8002efa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bb2:	4b1e      	ldr	r3, [pc, #120]	@ (8002c2c <HAL_RCC_OscConfig+0x280>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f003 0302 	and.w	r3, r3, #2
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d1f0      	bne.n	8002ba0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f003 0308 	and.w	r3, r3, #8
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d038      	beq.n	8002c3c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	695b      	ldr	r3, [r3, #20]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d019      	beq.n	8002c06 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002bd2:	4b16      	ldr	r3, [pc, #88]	@ (8002c2c <HAL_RCC_OscConfig+0x280>)
 8002bd4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002bd6:	4a15      	ldr	r2, [pc, #84]	@ (8002c2c <HAL_RCC_OscConfig+0x280>)
 8002bd8:	f043 0301 	orr.w	r3, r3, #1
 8002bdc:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bde:	f7fe fc75 	bl	80014cc <HAL_GetTick>
 8002be2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002be4:	e008      	b.n	8002bf8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002be6:	f7fe fc71 	bl	80014cc <HAL_GetTick>
 8002bea:	4602      	mov	r2, r0
 8002bec:	693b      	ldr	r3, [r7, #16]
 8002bee:	1ad3      	subs	r3, r2, r3
 8002bf0:	2b02      	cmp	r3, #2
 8002bf2:	d901      	bls.n	8002bf8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002bf4:	2303      	movs	r3, #3
 8002bf6:	e180      	b.n	8002efa <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bf8:	4b0c      	ldr	r3, [pc, #48]	@ (8002c2c <HAL_RCC_OscConfig+0x280>)
 8002bfa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002bfc:	f003 0302 	and.w	r3, r3, #2
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d0f0      	beq.n	8002be6 <HAL_RCC_OscConfig+0x23a>
 8002c04:	e01a      	b.n	8002c3c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c06:	4b09      	ldr	r3, [pc, #36]	@ (8002c2c <HAL_RCC_OscConfig+0x280>)
 8002c08:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c0a:	4a08      	ldr	r2, [pc, #32]	@ (8002c2c <HAL_RCC_OscConfig+0x280>)
 8002c0c:	f023 0301 	bic.w	r3, r3, #1
 8002c10:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c12:	f7fe fc5b 	bl	80014cc <HAL_GetTick>
 8002c16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c18:	e00a      	b.n	8002c30 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c1a:	f7fe fc57 	bl	80014cc <HAL_GetTick>
 8002c1e:	4602      	mov	r2, r0
 8002c20:	693b      	ldr	r3, [r7, #16]
 8002c22:	1ad3      	subs	r3, r2, r3
 8002c24:	2b02      	cmp	r3, #2
 8002c26:	d903      	bls.n	8002c30 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002c28:	2303      	movs	r3, #3
 8002c2a:	e166      	b.n	8002efa <HAL_RCC_OscConfig+0x54e>
 8002c2c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c30:	4b92      	ldr	r3, [pc, #584]	@ (8002e7c <HAL_RCC_OscConfig+0x4d0>)
 8002c32:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c34:	f003 0302 	and.w	r3, r3, #2
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d1ee      	bne.n	8002c1a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f003 0304 	and.w	r3, r3, #4
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	f000 80a4 	beq.w	8002d92 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c4a:	4b8c      	ldr	r3, [pc, #560]	@ (8002e7c <HAL_RCC_OscConfig+0x4d0>)
 8002c4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d10d      	bne.n	8002c72 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c56:	4b89      	ldr	r3, [pc, #548]	@ (8002e7c <HAL_RCC_OscConfig+0x4d0>)
 8002c58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c5a:	4a88      	ldr	r2, [pc, #544]	@ (8002e7c <HAL_RCC_OscConfig+0x4d0>)
 8002c5c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c60:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c62:	4b86      	ldr	r3, [pc, #536]	@ (8002e7c <HAL_RCC_OscConfig+0x4d0>)
 8002c64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c6a:	60bb      	str	r3, [r7, #8]
 8002c6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c72:	4b83      	ldr	r3, [pc, #524]	@ (8002e80 <HAL_RCC_OscConfig+0x4d4>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d118      	bne.n	8002cb0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002c7e:	4b80      	ldr	r3, [pc, #512]	@ (8002e80 <HAL_RCC_OscConfig+0x4d4>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a7f      	ldr	r2, [pc, #508]	@ (8002e80 <HAL_RCC_OscConfig+0x4d4>)
 8002c84:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c8a:	f7fe fc1f 	bl	80014cc <HAL_GetTick>
 8002c8e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c90:	e008      	b.n	8002ca4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c92:	f7fe fc1b 	bl	80014cc <HAL_GetTick>
 8002c96:	4602      	mov	r2, r0
 8002c98:	693b      	ldr	r3, [r7, #16]
 8002c9a:	1ad3      	subs	r3, r2, r3
 8002c9c:	2b64      	cmp	r3, #100	@ 0x64
 8002c9e:	d901      	bls.n	8002ca4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002ca0:	2303      	movs	r3, #3
 8002ca2:	e12a      	b.n	8002efa <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ca4:	4b76      	ldr	r3, [pc, #472]	@ (8002e80 <HAL_RCC_OscConfig+0x4d4>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d0f0      	beq.n	8002c92 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	2b01      	cmp	r3, #1
 8002cb6:	d106      	bne.n	8002cc6 <HAL_RCC_OscConfig+0x31a>
 8002cb8:	4b70      	ldr	r3, [pc, #448]	@ (8002e7c <HAL_RCC_OscConfig+0x4d0>)
 8002cba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cbc:	4a6f      	ldr	r2, [pc, #444]	@ (8002e7c <HAL_RCC_OscConfig+0x4d0>)
 8002cbe:	f043 0301 	orr.w	r3, r3, #1
 8002cc2:	6713      	str	r3, [r2, #112]	@ 0x70
 8002cc4:	e02d      	b.n	8002d22 <HAL_RCC_OscConfig+0x376>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	689b      	ldr	r3, [r3, #8]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d10c      	bne.n	8002ce8 <HAL_RCC_OscConfig+0x33c>
 8002cce:	4b6b      	ldr	r3, [pc, #428]	@ (8002e7c <HAL_RCC_OscConfig+0x4d0>)
 8002cd0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cd2:	4a6a      	ldr	r2, [pc, #424]	@ (8002e7c <HAL_RCC_OscConfig+0x4d0>)
 8002cd4:	f023 0301 	bic.w	r3, r3, #1
 8002cd8:	6713      	str	r3, [r2, #112]	@ 0x70
 8002cda:	4b68      	ldr	r3, [pc, #416]	@ (8002e7c <HAL_RCC_OscConfig+0x4d0>)
 8002cdc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cde:	4a67      	ldr	r2, [pc, #412]	@ (8002e7c <HAL_RCC_OscConfig+0x4d0>)
 8002ce0:	f023 0304 	bic.w	r3, r3, #4
 8002ce4:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ce6:	e01c      	b.n	8002d22 <HAL_RCC_OscConfig+0x376>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	689b      	ldr	r3, [r3, #8]
 8002cec:	2b05      	cmp	r3, #5
 8002cee:	d10c      	bne.n	8002d0a <HAL_RCC_OscConfig+0x35e>
 8002cf0:	4b62      	ldr	r3, [pc, #392]	@ (8002e7c <HAL_RCC_OscConfig+0x4d0>)
 8002cf2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cf4:	4a61      	ldr	r2, [pc, #388]	@ (8002e7c <HAL_RCC_OscConfig+0x4d0>)
 8002cf6:	f043 0304 	orr.w	r3, r3, #4
 8002cfa:	6713      	str	r3, [r2, #112]	@ 0x70
 8002cfc:	4b5f      	ldr	r3, [pc, #380]	@ (8002e7c <HAL_RCC_OscConfig+0x4d0>)
 8002cfe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d00:	4a5e      	ldr	r2, [pc, #376]	@ (8002e7c <HAL_RCC_OscConfig+0x4d0>)
 8002d02:	f043 0301 	orr.w	r3, r3, #1
 8002d06:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d08:	e00b      	b.n	8002d22 <HAL_RCC_OscConfig+0x376>
 8002d0a:	4b5c      	ldr	r3, [pc, #368]	@ (8002e7c <HAL_RCC_OscConfig+0x4d0>)
 8002d0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d0e:	4a5b      	ldr	r2, [pc, #364]	@ (8002e7c <HAL_RCC_OscConfig+0x4d0>)
 8002d10:	f023 0301 	bic.w	r3, r3, #1
 8002d14:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d16:	4b59      	ldr	r3, [pc, #356]	@ (8002e7c <HAL_RCC_OscConfig+0x4d0>)
 8002d18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d1a:	4a58      	ldr	r2, [pc, #352]	@ (8002e7c <HAL_RCC_OscConfig+0x4d0>)
 8002d1c:	f023 0304 	bic.w	r3, r3, #4
 8002d20:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d015      	beq.n	8002d56 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d2a:	f7fe fbcf 	bl	80014cc <HAL_GetTick>
 8002d2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d30:	e00a      	b.n	8002d48 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d32:	f7fe fbcb 	bl	80014cc <HAL_GetTick>
 8002d36:	4602      	mov	r2, r0
 8002d38:	693b      	ldr	r3, [r7, #16]
 8002d3a:	1ad3      	subs	r3, r2, r3
 8002d3c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d901      	bls.n	8002d48 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002d44:	2303      	movs	r3, #3
 8002d46:	e0d8      	b.n	8002efa <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d48:	4b4c      	ldr	r3, [pc, #304]	@ (8002e7c <HAL_RCC_OscConfig+0x4d0>)
 8002d4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d4c:	f003 0302 	and.w	r3, r3, #2
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d0ee      	beq.n	8002d32 <HAL_RCC_OscConfig+0x386>
 8002d54:	e014      	b.n	8002d80 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d56:	f7fe fbb9 	bl	80014cc <HAL_GetTick>
 8002d5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d5c:	e00a      	b.n	8002d74 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d5e:	f7fe fbb5 	bl	80014cc <HAL_GetTick>
 8002d62:	4602      	mov	r2, r0
 8002d64:	693b      	ldr	r3, [r7, #16]
 8002d66:	1ad3      	subs	r3, r2, r3
 8002d68:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d901      	bls.n	8002d74 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002d70:	2303      	movs	r3, #3
 8002d72:	e0c2      	b.n	8002efa <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d74:	4b41      	ldr	r3, [pc, #260]	@ (8002e7c <HAL_RCC_OscConfig+0x4d0>)
 8002d76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d78:	f003 0302 	and.w	r3, r3, #2
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d1ee      	bne.n	8002d5e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002d80:	7dfb      	ldrb	r3, [r7, #23]
 8002d82:	2b01      	cmp	r3, #1
 8002d84:	d105      	bne.n	8002d92 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d86:	4b3d      	ldr	r3, [pc, #244]	@ (8002e7c <HAL_RCC_OscConfig+0x4d0>)
 8002d88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d8a:	4a3c      	ldr	r2, [pc, #240]	@ (8002e7c <HAL_RCC_OscConfig+0x4d0>)
 8002d8c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d90:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	699b      	ldr	r3, [r3, #24]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	f000 80ae 	beq.w	8002ef8 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d9c:	4b37      	ldr	r3, [pc, #220]	@ (8002e7c <HAL_RCC_OscConfig+0x4d0>)
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	f003 030c 	and.w	r3, r3, #12
 8002da4:	2b08      	cmp	r3, #8
 8002da6:	d06d      	beq.n	8002e84 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	699b      	ldr	r3, [r3, #24]
 8002dac:	2b02      	cmp	r3, #2
 8002dae:	d14b      	bne.n	8002e48 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002db0:	4b32      	ldr	r3, [pc, #200]	@ (8002e7c <HAL_RCC_OscConfig+0x4d0>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a31      	ldr	r2, [pc, #196]	@ (8002e7c <HAL_RCC_OscConfig+0x4d0>)
 8002db6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002dba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dbc:	f7fe fb86 	bl	80014cc <HAL_GetTick>
 8002dc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dc2:	e008      	b.n	8002dd6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dc4:	f7fe fb82 	bl	80014cc <HAL_GetTick>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	1ad3      	subs	r3, r2, r3
 8002dce:	2b02      	cmp	r3, #2
 8002dd0:	d901      	bls.n	8002dd6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002dd2:	2303      	movs	r3, #3
 8002dd4:	e091      	b.n	8002efa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dd6:	4b29      	ldr	r3, [pc, #164]	@ (8002e7c <HAL_RCC_OscConfig+0x4d0>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d1f0      	bne.n	8002dc4 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	69da      	ldr	r2, [r3, #28]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6a1b      	ldr	r3, [r3, #32]
 8002dea:	431a      	orrs	r2, r3
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002df0:	019b      	lsls	r3, r3, #6
 8002df2:	431a      	orrs	r2, r3
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002df8:	085b      	lsrs	r3, r3, #1
 8002dfa:	3b01      	subs	r3, #1
 8002dfc:	041b      	lsls	r3, r3, #16
 8002dfe:	431a      	orrs	r2, r3
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e04:	061b      	lsls	r3, r3, #24
 8002e06:	431a      	orrs	r2, r3
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e0c:	071b      	lsls	r3, r3, #28
 8002e0e:	491b      	ldr	r1, [pc, #108]	@ (8002e7c <HAL_RCC_OscConfig+0x4d0>)
 8002e10:	4313      	orrs	r3, r2
 8002e12:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e14:	4b19      	ldr	r3, [pc, #100]	@ (8002e7c <HAL_RCC_OscConfig+0x4d0>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a18      	ldr	r2, [pc, #96]	@ (8002e7c <HAL_RCC_OscConfig+0x4d0>)
 8002e1a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002e1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e20:	f7fe fb54 	bl	80014cc <HAL_GetTick>
 8002e24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e26:	e008      	b.n	8002e3a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e28:	f7fe fb50 	bl	80014cc <HAL_GetTick>
 8002e2c:	4602      	mov	r2, r0
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	1ad3      	subs	r3, r2, r3
 8002e32:	2b02      	cmp	r3, #2
 8002e34:	d901      	bls.n	8002e3a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002e36:	2303      	movs	r3, #3
 8002e38:	e05f      	b.n	8002efa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e3a:	4b10      	ldr	r3, [pc, #64]	@ (8002e7c <HAL_RCC_OscConfig+0x4d0>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d0f0      	beq.n	8002e28 <HAL_RCC_OscConfig+0x47c>
 8002e46:	e057      	b.n	8002ef8 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e48:	4b0c      	ldr	r3, [pc, #48]	@ (8002e7c <HAL_RCC_OscConfig+0x4d0>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a0b      	ldr	r2, [pc, #44]	@ (8002e7c <HAL_RCC_OscConfig+0x4d0>)
 8002e4e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002e52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e54:	f7fe fb3a 	bl	80014cc <HAL_GetTick>
 8002e58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e5a:	e008      	b.n	8002e6e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e5c:	f7fe fb36 	bl	80014cc <HAL_GetTick>
 8002e60:	4602      	mov	r2, r0
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	1ad3      	subs	r3, r2, r3
 8002e66:	2b02      	cmp	r3, #2
 8002e68:	d901      	bls.n	8002e6e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002e6a:	2303      	movs	r3, #3
 8002e6c:	e045      	b.n	8002efa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e6e:	4b03      	ldr	r3, [pc, #12]	@ (8002e7c <HAL_RCC_OscConfig+0x4d0>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d1f0      	bne.n	8002e5c <HAL_RCC_OscConfig+0x4b0>
 8002e7a:	e03d      	b.n	8002ef8 <HAL_RCC_OscConfig+0x54c>
 8002e7c:	40023800 	.word	0x40023800
 8002e80:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002e84:	4b1f      	ldr	r3, [pc, #124]	@ (8002f04 <HAL_RCC_OscConfig+0x558>)
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	699b      	ldr	r3, [r3, #24]
 8002e8e:	2b01      	cmp	r3, #1
 8002e90:	d030      	beq.n	8002ef4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e9c:	429a      	cmp	r2, r3
 8002e9e:	d129      	bne.n	8002ef4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002eaa:	429a      	cmp	r2, r3
 8002eac:	d122      	bne.n	8002ef4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002eae:	68fa      	ldr	r2, [r7, #12]
 8002eb0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002eb4:	4013      	ands	r3, r2
 8002eb6:	687a      	ldr	r2, [r7, #4]
 8002eb8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002eba:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d119      	bne.n	8002ef4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002eca:	085b      	lsrs	r3, r3, #1
 8002ecc:	3b01      	subs	r3, #1
 8002ece:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ed0:	429a      	cmp	r2, r3
 8002ed2:	d10f      	bne.n	8002ef4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ede:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002ee0:	429a      	cmp	r2, r3
 8002ee2:	d107      	bne.n	8002ef4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eee:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ef0:	429a      	cmp	r2, r3
 8002ef2:	d001      	beq.n	8002ef8 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	e000      	b.n	8002efa <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002ef8:	2300      	movs	r3, #0
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	3718      	adds	r7, #24
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}
 8002f02:	bf00      	nop
 8002f04:	40023800 	.word	0x40023800

08002f08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b084      	sub	sp, #16
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
 8002f10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002f12:	2300      	movs	r3, #0
 8002f14:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d101      	bne.n	8002f20 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	e0d0      	b.n	80030c2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f20:	4b6a      	ldr	r3, [pc, #424]	@ (80030cc <HAL_RCC_ClockConfig+0x1c4>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f003 030f 	and.w	r3, r3, #15
 8002f28:	683a      	ldr	r2, [r7, #0]
 8002f2a:	429a      	cmp	r2, r3
 8002f2c:	d910      	bls.n	8002f50 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f2e:	4b67      	ldr	r3, [pc, #412]	@ (80030cc <HAL_RCC_ClockConfig+0x1c4>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f023 020f 	bic.w	r2, r3, #15
 8002f36:	4965      	ldr	r1, [pc, #404]	@ (80030cc <HAL_RCC_ClockConfig+0x1c4>)
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f3e:	4b63      	ldr	r3, [pc, #396]	@ (80030cc <HAL_RCC_ClockConfig+0x1c4>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f003 030f 	and.w	r3, r3, #15
 8002f46:	683a      	ldr	r2, [r7, #0]
 8002f48:	429a      	cmp	r2, r3
 8002f4a:	d001      	beq.n	8002f50 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	e0b8      	b.n	80030c2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f003 0302 	and.w	r3, r3, #2
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d020      	beq.n	8002f9e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f003 0304 	and.w	r3, r3, #4
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d005      	beq.n	8002f74 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f68:	4b59      	ldr	r3, [pc, #356]	@ (80030d0 <HAL_RCC_ClockConfig+0x1c8>)
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	4a58      	ldr	r2, [pc, #352]	@ (80030d0 <HAL_RCC_ClockConfig+0x1c8>)
 8002f6e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002f72:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f003 0308 	and.w	r3, r3, #8
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d005      	beq.n	8002f8c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f80:	4b53      	ldr	r3, [pc, #332]	@ (80030d0 <HAL_RCC_ClockConfig+0x1c8>)
 8002f82:	689b      	ldr	r3, [r3, #8]
 8002f84:	4a52      	ldr	r2, [pc, #328]	@ (80030d0 <HAL_RCC_ClockConfig+0x1c8>)
 8002f86:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002f8a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f8c:	4b50      	ldr	r3, [pc, #320]	@ (80030d0 <HAL_RCC_ClockConfig+0x1c8>)
 8002f8e:	689b      	ldr	r3, [r3, #8]
 8002f90:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	494d      	ldr	r1, [pc, #308]	@ (80030d0 <HAL_RCC_ClockConfig+0x1c8>)
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f003 0301 	and.w	r3, r3, #1
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d040      	beq.n	800302c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	2b01      	cmp	r3, #1
 8002fb0:	d107      	bne.n	8002fc2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fb2:	4b47      	ldr	r3, [pc, #284]	@ (80030d0 <HAL_RCC_ClockConfig+0x1c8>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d115      	bne.n	8002fea <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	e07f      	b.n	80030c2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	2b02      	cmp	r3, #2
 8002fc8:	d107      	bne.n	8002fda <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fca:	4b41      	ldr	r3, [pc, #260]	@ (80030d0 <HAL_RCC_ClockConfig+0x1c8>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d109      	bne.n	8002fea <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	e073      	b.n	80030c2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fda:	4b3d      	ldr	r3, [pc, #244]	@ (80030d0 <HAL_RCC_ClockConfig+0x1c8>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f003 0302 	and.w	r3, r3, #2
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d101      	bne.n	8002fea <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e06b      	b.n	80030c2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002fea:	4b39      	ldr	r3, [pc, #228]	@ (80030d0 <HAL_RCC_ClockConfig+0x1c8>)
 8002fec:	689b      	ldr	r3, [r3, #8]
 8002fee:	f023 0203 	bic.w	r2, r3, #3
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	4936      	ldr	r1, [pc, #216]	@ (80030d0 <HAL_RCC_ClockConfig+0x1c8>)
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ffc:	f7fe fa66 	bl	80014cc <HAL_GetTick>
 8003000:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003002:	e00a      	b.n	800301a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003004:	f7fe fa62 	bl	80014cc <HAL_GetTick>
 8003008:	4602      	mov	r2, r0
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	1ad3      	subs	r3, r2, r3
 800300e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003012:	4293      	cmp	r3, r2
 8003014:	d901      	bls.n	800301a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003016:	2303      	movs	r3, #3
 8003018:	e053      	b.n	80030c2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800301a:	4b2d      	ldr	r3, [pc, #180]	@ (80030d0 <HAL_RCC_ClockConfig+0x1c8>)
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	f003 020c 	and.w	r2, r3, #12
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	009b      	lsls	r3, r3, #2
 8003028:	429a      	cmp	r2, r3
 800302a:	d1eb      	bne.n	8003004 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800302c:	4b27      	ldr	r3, [pc, #156]	@ (80030cc <HAL_RCC_ClockConfig+0x1c4>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f003 030f 	and.w	r3, r3, #15
 8003034:	683a      	ldr	r2, [r7, #0]
 8003036:	429a      	cmp	r2, r3
 8003038:	d210      	bcs.n	800305c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800303a:	4b24      	ldr	r3, [pc, #144]	@ (80030cc <HAL_RCC_ClockConfig+0x1c4>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f023 020f 	bic.w	r2, r3, #15
 8003042:	4922      	ldr	r1, [pc, #136]	@ (80030cc <HAL_RCC_ClockConfig+0x1c4>)
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	4313      	orrs	r3, r2
 8003048:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800304a:	4b20      	ldr	r3, [pc, #128]	@ (80030cc <HAL_RCC_ClockConfig+0x1c4>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f003 030f 	and.w	r3, r3, #15
 8003052:	683a      	ldr	r2, [r7, #0]
 8003054:	429a      	cmp	r2, r3
 8003056:	d001      	beq.n	800305c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003058:	2301      	movs	r3, #1
 800305a:	e032      	b.n	80030c2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f003 0304 	and.w	r3, r3, #4
 8003064:	2b00      	cmp	r3, #0
 8003066:	d008      	beq.n	800307a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003068:	4b19      	ldr	r3, [pc, #100]	@ (80030d0 <HAL_RCC_ClockConfig+0x1c8>)
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	68db      	ldr	r3, [r3, #12]
 8003074:	4916      	ldr	r1, [pc, #88]	@ (80030d0 <HAL_RCC_ClockConfig+0x1c8>)
 8003076:	4313      	orrs	r3, r2
 8003078:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f003 0308 	and.w	r3, r3, #8
 8003082:	2b00      	cmp	r3, #0
 8003084:	d009      	beq.n	800309a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003086:	4b12      	ldr	r3, [pc, #72]	@ (80030d0 <HAL_RCC_ClockConfig+0x1c8>)
 8003088:	689b      	ldr	r3, [r3, #8]
 800308a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	691b      	ldr	r3, [r3, #16]
 8003092:	00db      	lsls	r3, r3, #3
 8003094:	490e      	ldr	r1, [pc, #56]	@ (80030d0 <HAL_RCC_ClockConfig+0x1c8>)
 8003096:	4313      	orrs	r3, r2
 8003098:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800309a:	f000 f821 	bl	80030e0 <HAL_RCC_GetSysClockFreq>
 800309e:	4602      	mov	r2, r0
 80030a0:	4b0b      	ldr	r3, [pc, #44]	@ (80030d0 <HAL_RCC_ClockConfig+0x1c8>)
 80030a2:	689b      	ldr	r3, [r3, #8]
 80030a4:	091b      	lsrs	r3, r3, #4
 80030a6:	f003 030f 	and.w	r3, r3, #15
 80030aa:	490a      	ldr	r1, [pc, #40]	@ (80030d4 <HAL_RCC_ClockConfig+0x1cc>)
 80030ac:	5ccb      	ldrb	r3, [r1, r3]
 80030ae:	fa22 f303 	lsr.w	r3, r2, r3
 80030b2:	4a09      	ldr	r2, [pc, #36]	@ (80030d8 <HAL_RCC_ClockConfig+0x1d0>)
 80030b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80030b6:	4b09      	ldr	r3, [pc, #36]	@ (80030dc <HAL_RCC_ClockConfig+0x1d4>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4618      	mov	r0, r3
 80030bc:	f7fe f846 	bl	800114c <HAL_InitTick>

  return HAL_OK;
 80030c0:	2300      	movs	r3, #0
}
 80030c2:	4618      	mov	r0, r3
 80030c4:	3710      	adds	r7, #16
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}
 80030ca:	bf00      	nop
 80030cc:	40023c00 	.word	0x40023c00
 80030d0:	40023800 	.word	0x40023800
 80030d4:	08009fbc 	.word	0x08009fbc
 80030d8:	20000004 	.word	0x20000004
 80030dc:	20000008 	.word	0x20000008

080030e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80030e4:	b094      	sub	sp, #80	@ 0x50
 80030e6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80030e8:	2300      	movs	r3, #0
 80030ea:	647b      	str	r3, [r7, #68]	@ 0x44
 80030ec:	2300      	movs	r3, #0
 80030ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80030f0:	2300      	movs	r3, #0
 80030f2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 80030f4:	2300      	movs	r3, #0
 80030f6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80030f8:	4b79      	ldr	r3, [pc, #484]	@ (80032e0 <HAL_RCC_GetSysClockFreq+0x200>)
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	f003 030c 	and.w	r3, r3, #12
 8003100:	2b08      	cmp	r3, #8
 8003102:	d00d      	beq.n	8003120 <HAL_RCC_GetSysClockFreq+0x40>
 8003104:	2b08      	cmp	r3, #8
 8003106:	f200 80e1 	bhi.w	80032cc <HAL_RCC_GetSysClockFreq+0x1ec>
 800310a:	2b00      	cmp	r3, #0
 800310c:	d002      	beq.n	8003114 <HAL_RCC_GetSysClockFreq+0x34>
 800310e:	2b04      	cmp	r3, #4
 8003110:	d003      	beq.n	800311a <HAL_RCC_GetSysClockFreq+0x3a>
 8003112:	e0db      	b.n	80032cc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003114:	4b73      	ldr	r3, [pc, #460]	@ (80032e4 <HAL_RCC_GetSysClockFreq+0x204>)
 8003116:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003118:	e0db      	b.n	80032d2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800311a:	4b73      	ldr	r3, [pc, #460]	@ (80032e8 <HAL_RCC_GetSysClockFreq+0x208>)
 800311c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800311e:	e0d8      	b.n	80032d2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003120:	4b6f      	ldr	r3, [pc, #444]	@ (80032e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003128:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800312a:	4b6d      	ldr	r3, [pc, #436]	@ (80032e0 <HAL_RCC_GetSysClockFreq+0x200>)
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003132:	2b00      	cmp	r3, #0
 8003134:	d063      	beq.n	80031fe <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003136:	4b6a      	ldr	r3, [pc, #424]	@ (80032e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	099b      	lsrs	r3, r3, #6
 800313c:	2200      	movs	r2, #0
 800313e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003140:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003142:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003144:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003148:	633b      	str	r3, [r7, #48]	@ 0x30
 800314a:	2300      	movs	r3, #0
 800314c:	637b      	str	r3, [r7, #52]	@ 0x34
 800314e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003152:	4622      	mov	r2, r4
 8003154:	462b      	mov	r3, r5
 8003156:	f04f 0000 	mov.w	r0, #0
 800315a:	f04f 0100 	mov.w	r1, #0
 800315e:	0159      	lsls	r1, r3, #5
 8003160:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003164:	0150      	lsls	r0, r2, #5
 8003166:	4602      	mov	r2, r0
 8003168:	460b      	mov	r3, r1
 800316a:	4621      	mov	r1, r4
 800316c:	1a51      	subs	r1, r2, r1
 800316e:	6139      	str	r1, [r7, #16]
 8003170:	4629      	mov	r1, r5
 8003172:	eb63 0301 	sbc.w	r3, r3, r1
 8003176:	617b      	str	r3, [r7, #20]
 8003178:	f04f 0200 	mov.w	r2, #0
 800317c:	f04f 0300 	mov.w	r3, #0
 8003180:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003184:	4659      	mov	r1, fp
 8003186:	018b      	lsls	r3, r1, #6
 8003188:	4651      	mov	r1, sl
 800318a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800318e:	4651      	mov	r1, sl
 8003190:	018a      	lsls	r2, r1, #6
 8003192:	4651      	mov	r1, sl
 8003194:	ebb2 0801 	subs.w	r8, r2, r1
 8003198:	4659      	mov	r1, fp
 800319a:	eb63 0901 	sbc.w	r9, r3, r1
 800319e:	f04f 0200 	mov.w	r2, #0
 80031a2:	f04f 0300 	mov.w	r3, #0
 80031a6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80031aa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80031ae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80031b2:	4690      	mov	r8, r2
 80031b4:	4699      	mov	r9, r3
 80031b6:	4623      	mov	r3, r4
 80031b8:	eb18 0303 	adds.w	r3, r8, r3
 80031bc:	60bb      	str	r3, [r7, #8]
 80031be:	462b      	mov	r3, r5
 80031c0:	eb49 0303 	adc.w	r3, r9, r3
 80031c4:	60fb      	str	r3, [r7, #12]
 80031c6:	f04f 0200 	mov.w	r2, #0
 80031ca:	f04f 0300 	mov.w	r3, #0
 80031ce:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80031d2:	4629      	mov	r1, r5
 80031d4:	024b      	lsls	r3, r1, #9
 80031d6:	4621      	mov	r1, r4
 80031d8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80031dc:	4621      	mov	r1, r4
 80031de:	024a      	lsls	r2, r1, #9
 80031e0:	4610      	mov	r0, r2
 80031e2:	4619      	mov	r1, r3
 80031e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80031e6:	2200      	movs	r2, #0
 80031e8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80031ea:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80031ec:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80031f0:	f7fd f87e 	bl	80002f0 <__aeabi_uldivmod>
 80031f4:	4602      	mov	r2, r0
 80031f6:	460b      	mov	r3, r1
 80031f8:	4613      	mov	r3, r2
 80031fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80031fc:	e058      	b.n	80032b0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031fe:	4b38      	ldr	r3, [pc, #224]	@ (80032e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	099b      	lsrs	r3, r3, #6
 8003204:	2200      	movs	r2, #0
 8003206:	4618      	mov	r0, r3
 8003208:	4611      	mov	r1, r2
 800320a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800320e:	623b      	str	r3, [r7, #32]
 8003210:	2300      	movs	r3, #0
 8003212:	627b      	str	r3, [r7, #36]	@ 0x24
 8003214:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003218:	4642      	mov	r2, r8
 800321a:	464b      	mov	r3, r9
 800321c:	f04f 0000 	mov.w	r0, #0
 8003220:	f04f 0100 	mov.w	r1, #0
 8003224:	0159      	lsls	r1, r3, #5
 8003226:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800322a:	0150      	lsls	r0, r2, #5
 800322c:	4602      	mov	r2, r0
 800322e:	460b      	mov	r3, r1
 8003230:	4641      	mov	r1, r8
 8003232:	ebb2 0a01 	subs.w	sl, r2, r1
 8003236:	4649      	mov	r1, r9
 8003238:	eb63 0b01 	sbc.w	fp, r3, r1
 800323c:	f04f 0200 	mov.w	r2, #0
 8003240:	f04f 0300 	mov.w	r3, #0
 8003244:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003248:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800324c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003250:	ebb2 040a 	subs.w	r4, r2, sl
 8003254:	eb63 050b 	sbc.w	r5, r3, fp
 8003258:	f04f 0200 	mov.w	r2, #0
 800325c:	f04f 0300 	mov.w	r3, #0
 8003260:	00eb      	lsls	r3, r5, #3
 8003262:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003266:	00e2      	lsls	r2, r4, #3
 8003268:	4614      	mov	r4, r2
 800326a:	461d      	mov	r5, r3
 800326c:	4643      	mov	r3, r8
 800326e:	18e3      	adds	r3, r4, r3
 8003270:	603b      	str	r3, [r7, #0]
 8003272:	464b      	mov	r3, r9
 8003274:	eb45 0303 	adc.w	r3, r5, r3
 8003278:	607b      	str	r3, [r7, #4]
 800327a:	f04f 0200 	mov.w	r2, #0
 800327e:	f04f 0300 	mov.w	r3, #0
 8003282:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003286:	4629      	mov	r1, r5
 8003288:	028b      	lsls	r3, r1, #10
 800328a:	4621      	mov	r1, r4
 800328c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003290:	4621      	mov	r1, r4
 8003292:	028a      	lsls	r2, r1, #10
 8003294:	4610      	mov	r0, r2
 8003296:	4619      	mov	r1, r3
 8003298:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800329a:	2200      	movs	r2, #0
 800329c:	61bb      	str	r3, [r7, #24]
 800329e:	61fa      	str	r2, [r7, #28]
 80032a0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80032a4:	f7fd f824 	bl	80002f0 <__aeabi_uldivmod>
 80032a8:	4602      	mov	r2, r0
 80032aa:	460b      	mov	r3, r1
 80032ac:	4613      	mov	r3, r2
 80032ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80032b0:	4b0b      	ldr	r3, [pc, #44]	@ (80032e0 <HAL_RCC_GetSysClockFreq+0x200>)
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	0c1b      	lsrs	r3, r3, #16
 80032b6:	f003 0303 	and.w	r3, r3, #3
 80032ba:	3301      	adds	r3, #1
 80032bc:	005b      	lsls	r3, r3, #1
 80032be:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80032c0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80032c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80032c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80032c8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80032ca:	e002      	b.n	80032d2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80032cc:	4b05      	ldr	r3, [pc, #20]	@ (80032e4 <HAL_RCC_GetSysClockFreq+0x204>)
 80032ce:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80032d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80032d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80032d4:	4618      	mov	r0, r3
 80032d6:	3750      	adds	r7, #80	@ 0x50
 80032d8:	46bd      	mov	sp, r7
 80032da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80032de:	bf00      	nop
 80032e0:	40023800 	.word	0x40023800
 80032e4:	00f42400 	.word	0x00f42400
 80032e8:	007a1200 	.word	0x007a1200

080032ec <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032ec:	b480      	push	{r7}
 80032ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80032f0:	4b03      	ldr	r3, [pc, #12]	@ (8003300 <HAL_RCC_GetHCLKFreq+0x14>)
 80032f2:	681b      	ldr	r3, [r3, #0]
}
 80032f4:	4618      	mov	r0, r3
 80032f6:	46bd      	mov	sp, r7
 80032f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fc:	4770      	bx	lr
 80032fe:	bf00      	nop
 8003300:	20000004 	.word	0x20000004

08003304 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003308:	f7ff fff0 	bl	80032ec <HAL_RCC_GetHCLKFreq>
 800330c:	4602      	mov	r2, r0
 800330e:	4b05      	ldr	r3, [pc, #20]	@ (8003324 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003310:	689b      	ldr	r3, [r3, #8]
 8003312:	0a9b      	lsrs	r3, r3, #10
 8003314:	f003 0307 	and.w	r3, r3, #7
 8003318:	4903      	ldr	r1, [pc, #12]	@ (8003328 <HAL_RCC_GetPCLK1Freq+0x24>)
 800331a:	5ccb      	ldrb	r3, [r1, r3]
 800331c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003320:	4618      	mov	r0, r3
 8003322:	bd80      	pop	{r7, pc}
 8003324:	40023800 	.word	0x40023800
 8003328:	08009fcc 	.word	0x08009fcc

0800332c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003330:	f7ff ffdc 	bl	80032ec <HAL_RCC_GetHCLKFreq>
 8003334:	4602      	mov	r2, r0
 8003336:	4b05      	ldr	r3, [pc, #20]	@ (800334c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003338:	689b      	ldr	r3, [r3, #8]
 800333a:	0b5b      	lsrs	r3, r3, #13
 800333c:	f003 0307 	and.w	r3, r3, #7
 8003340:	4903      	ldr	r1, [pc, #12]	@ (8003350 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003342:	5ccb      	ldrb	r3, [r1, r3]
 8003344:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003348:	4618      	mov	r0, r3
 800334a:	bd80      	pop	{r7, pc}
 800334c:	40023800 	.word	0x40023800
 8003350:	08009fcc 	.word	0x08009fcc

08003354 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003354:	b480      	push	{r7}
 8003356:	b083      	sub	sp, #12
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
 800335c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	220f      	movs	r2, #15
 8003362:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003364:	4b12      	ldr	r3, [pc, #72]	@ (80033b0 <HAL_RCC_GetClockConfig+0x5c>)
 8003366:	689b      	ldr	r3, [r3, #8]
 8003368:	f003 0203 	and.w	r2, r3, #3
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003370:	4b0f      	ldr	r3, [pc, #60]	@ (80033b0 <HAL_RCC_GetClockConfig+0x5c>)
 8003372:	689b      	ldr	r3, [r3, #8]
 8003374:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800337c:	4b0c      	ldr	r3, [pc, #48]	@ (80033b0 <HAL_RCC_GetClockConfig+0x5c>)
 800337e:	689b      	ldr	r3, [r3, #8]
 8003380:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003388:	4b09      	ldr	r3, [pc, #36]	@ (80033b0 <HAL_RCC_GetClockConfig+0x5c>)
 800338a:	689b      	ldr	r3, [r3, #8]
 800338c:	08db      	lsrs	r3, r3, #3
 800338e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003396:	4b07      	ldr	r3, [pc, #28]	@ (80033b4 <HAL_RCC_GetClockConfig+0x60>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f003 020f 	and.w	r2, r3, #15
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	601a      	str	r2, [r3, #0]
}
 80033a2:	bf00      	nop
 80033a4:	370c      	adds	r7, #12
 80033a6:	46bd      	mov	sp, r7
 80033a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ac:	4770      	bx	lr
 80033ae:	bf00      	nop
 80033b0:	40023800 	.word	0x40023800
 80033b4:	40023c00 	.word	0x40023c00

080033b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b088      	sub	sp, #32
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80033c0:	2300      	movs	r3, #0
 80033c2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80033c4:	2300      	movs	r3, #0
 80033c6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80033c8:	2300      	movs	r3, #0
 80033ca:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80033cc:	2300      	movs	r3, #0
 80033ce:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80033d0:	2300      	movs	r3, #0
 80033d2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f003 0301 	and.w	r3, r3, #1
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d012      	beq.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80033e0:	4b69      	ldr	r3, [pc, #420]	@ (8003588 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033e2:	689b      	ldr	r3, [r3, #8]
 80033e4:	4a68      	ldr	r2, [pc, #416]	@ (8003588 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033e6:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80033ea:	6093      	str	r3, [r2, #8]
 80033ec:	4b66      	ldr	r3, [pc, #408]	@ (8003588 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033ee:	689a      	ldr	r2, [r3, #8]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033f4:	4964      	ldr	r1, [pc, #400]	@ (8003588 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033f6:	4313      	orrs	r3, r2
 80033f8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d101      	bne.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003402:	2301      	movs	r3, #1
 8003404:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800340e:	2b00      	cmp	r3, #0
 8003410:	d017      	beq.n	8003442 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003412:	4b5d      	ldr	r3, [pc, #372]	@ (8003588 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003414:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003418:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003420:	4959      	ldr	r1, [pc, #356]	@ (8003588 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003422:	4313      	orrs	r3, r2
 8003424:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800342c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003430:	d101      	bne.n	8003436 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003432:	2301      	movs	r3, #1
 8003434:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800343a:	2b00      	cmp	r3, #0
 800343c:	d101      	bne.n	8003442 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800343e:	2301      	movs	r3, #1
 8003440:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800344a:	2b00      	cmp	r3, #0
 800344c:	d017      	beq.n	800347e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800344e:	4b4e      	ldr	r3, [pc, #312]	@ (8003588 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003450:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003454:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800345c:	494a      	ldr	r1, [pc, #296]	@ (8003588 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800345e:	4313      	orrs	r3, r2
 8003460:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003468:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800346c:	d101      	bne.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800346e:	2301      	movs	r3, #1
 8003470:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003476:	2b00      	cmp	r3, #0
 8003478:	d101      	bne.n	800347e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800347a:	2301      	movs	r3, #1
 800347c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003486:	2b00      	cmp	r3, #0
 8003488:	d001      	beq.n	800348e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800348a:	2301      	movs	r3, #1
 800348c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f003 0320 	and.w	r3, r3, #32
 8003496:	2b00      	cmp	r3, #0
 8003498:	f000 808b 	beq.w	80035b2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800349c:	4b3a      	ldr	r3, [pc, #232]	@ (8003588 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800349e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034a0:	4a39      	ldr	r2, [pc, #228]	@ (8003588 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80034a6:	6413      	str	r3, [r2, #64]	@ 0x40
 80034a8:	4b37      	ldr	r3, [pc, #220]	@ (8003588 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034b0:	60bb      	str	r3, [r7, #8]
 80034b2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80034b4:	4b35      	ldr	r3, [pc, #212]	@ (800358c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a34      	ldr	r2, [pc, #208]	@ (800358c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80034ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80034be:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034c0:	f7fe f804 	bl	80014cc <HAL_GetTick>
 80034c4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80034c6:	e008      	b.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034c8:	f7fe f800 	bl	80014cc <HAL_GetTick>
 80034cc:	4602      	mov	r2, r0
 80034ce:	697b      	ldr	r3, [r7, #20]
 80034d0:	1ad3      	subs	r3, r2, r3
 80034d2:	2b64      	cmp	r3, #100	@ 0x64
 80034d4:	d901      	bls.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80034d6:	2303      	movs	r3, #3
 80034d8:	e38f      	b.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80034da:	4b2c      	ldr	r3, [pc, #176]	@ (800358c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d0f0      	beq.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80034e6:	4b28      	ldr	r3, [pc, #160]	@ (8003588 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80034ee:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80034f0:	693b      	ldr	r3, [r7, #16]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d035      	beq.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80034fe:	693a      	ldr	r2, [r7, #16]
 8003500:	429a      	cmp	r2, r3
 8003502:	d02e      	beq.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003504:	4b20      	ldr	r3, [pc, #128]	@ (8003588 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003506:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003508:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800350c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800350e:	4b1e      	ldr	r3, [pc, #120]	@ (8003588 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003510:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003512:	4a1d      	ldr	r2, [pc, #116]	@ (8003588 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003514:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003518:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800351a:	4b1b      	ldr	r3, [pc, #108]	@ (8003588 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800351c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800351e:	4a1a      	ldr	r2, [pc, #104]	@ (8003588 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003520:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003524:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003526:	4a18      	ldr	r2, [pc, #96]	@ (8003588 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003528:	693b      	ldr	r3, [r7, #16]
 800352a:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800352c:	4b16      	ldr	r3, [pc, #88]	@ (8003588 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800352e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003530:	f003 0301 	and.w	r3, r3, #1
 8003534:	2b01      	cmp	r3, #1
 8003536:	d114      	bne.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003538:	f7fd ffc8 	bl	80014cc <HAL_GetTick>
 800353c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800353e:	e00a      	b.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003540:	f7fd ffc4 	bl	80014cc <HAL_GetTick>
 8003544:	4602      	mov	r2, r0
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	1ad3      	subs	r3, r2, r3
 800354a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800354e:	4293      	cmp	r3, r2
 8003550:	d901      	bls.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003552:	2303      	movs	r3, #3
 8003554:	e351      	b.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003556:	4b0c      	ldr	r3, [pc, #48]	@ (8003588 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003558:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800355a:	f003 0302 	and.w	r3, r3, #2
 800355e:	2b00      	cmp	r3, #0
 8003560:	d0ee      	beq.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003566:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800356a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800356e:	d111      	bne.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003570:	4b05      	ldr	r3, [pc, #20]	@ (8003588 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800357c:	4b04      	ldr	r3, [pc, #16]	@ (8003590 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800357e:	400b      	ands	r3, r1
 8003580:	4901      	ldr	r1, [pc, #4]	@ (8003588 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003582:	4313      	orrs	r3, r2
 8003584:	608b      	str	r3, [r1, #8]
 8003586:	e00b      	b.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003588:	40023800 	.word	0x40023800
 800358c:	40007000 	.word	0x40007000
 8003590:	0ffffcff 	.word	0x0ffffcff
 8003594:	4bac      	ldr	r3, [pc, #688]	@ (8003848 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003596:	689b      	ldr	r3, [r3, #8]
 8003598:	4aab      	ldr	r2, [pc, #684]	@ (8003848 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800359a:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800359e:	6093      	str	r3, [r2, #8]
 80035a0:	4ba9      	ldr	r3, [pc, #676]	@ (8003848 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035a2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035ac:	49a6      	ldr	r1, [pc, #664]	@ (8003848 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035ae:	4313      	orrs	r3, r2
 80035b0:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f003 0310 	and.w	r3, r3, #16
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d010      	beq.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80035be:	4ba2      	ldr	r3, [pc, #648]	@ (8003848 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80035c4:	4aa0      	ldr	r2, [pc, #640]	@ (8003848 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035c6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80035ca:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80035ce:	4b9e      	ldr	r3, [pc, #632]	@ (8003848 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035d0:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035d8:	499b      	ldr	r1, [pc, #620]	@ (8003848 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035da:	4313      	orrs	r3, r2
 80035dc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d00a      	beq.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80035ec:	4b96      	ldr	r3, [pc, #600]	@ (8003848 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035f2:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80035fa:	4993      	ldr	r1, [pc, #588]	@ (8003848 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035fc:	4313      	orrs	r3, r2
 80035fe:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800360a:	2b00      	cmp	r3, #0
 800360c:	d00a      	beq.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800360e:	4b8e      	ldr	r3, [pc, #568]	@ (8003848 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003610:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003614:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800361c:	498a      	ldr	r1, [pc, #552]	@ (8003848 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800361e:	4313      	orrs	r3, r2
 8003620:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800362c:	2b00      	cmp	r3, #0
 800362e:	d00a      	beq.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003630:	4b85      	ldr	r3, [pc, #532]	@ (8003848 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003632:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003636:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800363e:	4982      	ldr	r1, [pc, #520]	@ (8003848 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003640:	4313      	orrs	r3, r2
 8003642:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800364e:	2b00      	cmp	r3, #0
 8003650:	d00a      	beq.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003652:	4b7d      	ldr	r3, [pc, #500]	@ (8003848 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003654:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003658:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003660:	4979      	ldr	r1, [pc, #484]	@ (8003848 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003662:	4313      	orrs	r3, r2
 8003664:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003670:	2b00      	cmp	r3, #0
 8003672:	d00a      	beq.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003674:	4b74      	ldr	r3, [pc, #464]	@ (8003848 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003676:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800367a:	f023 0203 	bic.w	r2, r3, #3
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003682:	4971      	ldr	r1, [pc, #452]	@ (8003848 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003684:	4313      	orrs	r3, r2
 8003686:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003692:	2b00      	cmp	r3, #0
 8003694:	d00a      	beq.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003696:	4b6c      	ldr	r3, [pc, #432]	@ (8003848 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003698:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800369c:	f023 020c 	bic.w	r2, r3, #12
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80036a4:	4968      	ldr	r1, [pc, #416]	@ (8003848 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036a6:	4313      	orrs	r3, r2
 80036a8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d00a      	beq.n	80036ce <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80036b8:	4b63      	ldr	r3, [pc, #396]	@ (8003848 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036be:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036c6:	4960      	ldr	r1, [pc, #384]	@ (8003848 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036c8:	4313      	orrs	r3, r2
 80036ca:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d00a      	beq.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80036da:	4b5b      	ldr	r3, [pc, #364]	@ (8003848 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036e0:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036e8:	4957      	ldr	r1, [pc, #348]	@ (8003848 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036ea:	4313      	orrs	r3, r2
 80036ec:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d00a      	beq.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80036fc:	4b52      	ldr	r3, [pc, #328]	@ (8003848 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003702:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800370a:	494f      	ldr	r1, [pc, #316]	@ (8003848 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800370c:	4313      	orrs	r3, r2
 800370e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800371a:	2b00      	cmp	r3, #0
 800371c:	d00a      	beq.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800371e:	4b4a      	ldr	r3, [pc, #296]	@ (8003848 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003720:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003724:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800372c:	4946      	ldr	r1, [pc, #280]	@ (8003848 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800372e:	4313      	orrs	r3, r2
 8003730:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800373c:	2b00      	cmp	r3, #0
 800373e:	d00a      	beq.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003740:	4b41      	ldr	r3, [pc, #260]	@ (8003848 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003742:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003746:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800374e:	493e      	ldr	r1, [pc, #248]	@ (8003848 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003750:	4313      	orrs	r3, r2
 8003752:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800375e:	2b00      	cmp	r3, #0
 8003760:	d00a      	beq.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003762:	4b39      	ldr	r3, [pc, #228]	@ (8003848 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003764:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003768:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003770:	4935      	ldr	r1, [pc, #212]	@ (8003848 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003772:	4313      	orrs	r3, r2
 8003774:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003780:	2b00      	cmp	r3, #0
 8003782:	d00a      	beq.n	800379a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003784:	4b30      	ldr	r3, [pc, #192]	@ (8003848 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003786:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800378a:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003792:	492d      	ldr	r1, [pc, #180]	@ (8003848 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003794:	4313      	orrs	r3, r2
 8003796:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d011      	beq.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80037a6:	4b28      	ldr	r3, [pc, #160]	@ (8003848 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80037a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037ac:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80037b4:	4924      	ldr	r1, [pc, #144]	@ (8003848 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80037b6:	4313      	orrs	r3, r2
 80037b8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80037c0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80037c4:	d101      	bne.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80037c6:	2301      	movs	r3, #1
 80037c8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f003 0308 	and.w	r3, r3, #8
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d001      	beq.n	80037da <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80037d6:	2301      	movs	r3, #1
 80037d8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d00a      	beq.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80037e6:	4b18      	ldr	r3, [pc, #96]	@ (8003848 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80037e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037ec:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80037f4:	4914      	ldr	r1, [pc, #80]	@ (8003848 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80037f6:	4313      	orrs	r3, r2
 80037f8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003804:	2b00      	cmp	r3, #0
 8003806:	d00b      	beq.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003808:	4b0f      	ldr	r3, [pc, #60]	@ (8003848 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800380a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800380e:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003818:	490b      	ldr	r1, [pc, #44]	@ (8003848 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800381a:	4313      	orrs	r3, r2
 800381c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003828:	2b00      	cmp	r3, #0
 800382a:	d00f      	beq.n	800384c <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800382c:	4b06      	ldr	r3, [pc, #24]	@ (8003848 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800382e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003832:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800383c:	4902      	ldr	r1, [pc, #8]	@ (8003848 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800383e:	4313      	orrs	r3, r2
 8003840:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003844:	e002      	b.n	800384c <HAL_RCCEx_PeriphCLKConfig+0x494>
 8003846:	bf00      	nop
 8003848:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003854:	2b00      	cmp	r3, #0
 8003856:	d00b      	beq.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003858:	4b8a      	ldr	r3, [pc, #552]	@ (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800385a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800385e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003868:	4986      	ldr	r1, [pc, #536]	@ (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800386a:	4313      	orrs	r3, r2
 800386c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003878:	2b00      	cmp	r3, #0
 800387a:	d00b      	beq.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800387c:	4b81      	ldr	r3, [pc, #516]	@ (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800387e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003882:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800388c:	497d      	ldr	r1, [pc, #500]	@ (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800388e:	4313      	orrs	r3, r2
 8003890:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003894:	69fb      	ldr	r3, [r7, #28]
 8003896:	2b01      	cmp	r3, #1
 8003898:	d006      	beq.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	f000 80d6 	beq.w	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80038a8:	4b76      	ldr	r3, [pc, #472]	@ (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a75      	ldr	r2, [pc, #468]	@ (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80038ae:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80038b2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038b4:	f7fd fe0a 	bl	80014cc <HAL_GetTick>
 80038b8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80038ba:	e008      	b.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80038bc:	f7fd fe06 	bl	80014cc <HAL_GetTick>
 80038c0:	4602      	mov	r2, r0
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	1ad3      	subs	r3, r2, r3
 80038c6:	2b64      	cmp	r3, #100	@ 0x64
 80038c8:	d901      	bls.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80038ca:	2303      	movs	r3, #3
 80038cc:	e195      	b.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80038ce:	4b6d      	ldr	r3, [pc, #436]	@ (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d1f0      	bne.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f003 0301 	and.w	r3, r3, #1
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d021      	beq.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x572>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d11d      	bne.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80038ee:	4b65      	ldr	r3, [pc, #404]	@ (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80038f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80038f4:	0c1b      	lsrs	r3, r3, #16
 80038f6:	f003 0303 	and.w	r3, r3, #3
 80038fa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80038fc:	4b61      	ldr	r3, [pc, #388]	@ (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80038fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003902:	0e1b      	lsrs	r3, r3, #24
 8003904:	f003 030f 	and.w	r3, r3, #15
 8003908:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	019a      	lsls	r2, r3, #6
 8003910:	693b      	ldr	r3, [r7, #16]
 8003912:	041b      	lsls	r3, r3, #16
 8003914:	431a      	orrs	r2, r3
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	061b      	lsls	r3, r3, #24
 800391a:	431a      	orrs	r2, r3
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	689b      	ldr	r3, [r3, #8]
 8003920:	071b      	lsls	r3, r3, #28
 8003922:	4958      	ldr	r1, [pc, #352]	@ (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003924:	4313      	orrs	r3, r2
 8003926:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003932:	2b00      	cmp	r3, #0
 8003934:	d004      	beq.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800393a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800393e:	d00a      	beq.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003948:	2b00      	cmp	r3, #0
 800394a:	d02e      	beq.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003950:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003954:	d129      	bne.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003956:	4b4b      	ldr	r3, [pc, #300]	@ (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003958:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800395c:	0c1b      	lsrs	r3, r3, #16
 800395e:	f003 0303 	and.w	r3, r3, #3
 8003962:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003964:	4b47      	ldr	r3, [pc, #284]	@ (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003966:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800396a:	0f1b      	lsrs	r3, r3, #28
 800396c:	f003 0307 	and.w	r3, r3, #7
 8003970:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	019a      	lsls	r2, r3, #6
 8003978:	693b      	ldr	r3, [r7, #16]
 800397a:	041b      	lsls	r3, r3, #16
 800397c:	431a      	orrs	r2, r3
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	68db      	ldr	r3, [r3, #12]
 8003982:	061b      	lsls	r3, r3, #24
 8003984:	431a      	orrs	r2, r3
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	071b      	lsls	r3, r3, #28
 800398a:	493e      	ldr	r1, [pc, #248]	@ (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800398c:	4313      	orrs	r3, r2
 800398e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003992:	4b3c      	ldr	r3, [pc, #240]	@ (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003994:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003998:	f023 021f 	bic.w	r2, r3, #31
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039a0:	3b01      	subs	r3, #1
 80039a2:	4938      	ldr	r1, [pc, #224]	@ (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039a4:	4313      	orrs	r3, r2
 80039a6:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d01d      	beq.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80039b6:	4b33      	ldr	r3, [pc, #204]	@ (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80039bc:	0e1b      	lsrs	r3, r3, #24
 80039be:	f003 030f 	and.w	r3, r3, #15
 80039c2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80039c4:	4b2f      	ldr	r3, [pc, #188]	@ (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80039ca:	0f1b      	lsrs	r3, r3, #28
 80039cc:	f003 0307 	and.w	r3, r3, #7
 80039d0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	019a      	lsls	r2, r3, #6
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	691b      	ldr	r3, [r3, #16]
 80039dc:	041b      	lsls	r3, r3, #16
 80039de:	431a      	orrs	r2, r3
 80039e0:	693b      	ldr	r3, [r7, #16]
 80039e2:	061b      	lsls	r3, r3, #24
 80039e4:	431a      	orrs	r2, r3
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	071b      	lsls	r3, r3, #28
 80039ea:	4926      	ldr	r1, [pc, #152]	@ (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039ec:	4313      	orrs	r3, r2
 80039ee:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d011      	beq.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	019a      	lsls	r2, r3, #6
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	691b      	ldr	r3, [r3, #16]
 8003a08:	041b      	lsls	r3, r3, #16
 8003a0a:	431a      	orrs	r2, r3
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	68db      	ldr	r3, [r3, #12]
 8003a10:	061b      	lsls	r3, r3, #24
 8003a12:	431a      	orrs	r2, r3
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	689b      	ldr	r3, [r3, #8]
 8003a18:	071b      	lsls	r3, r3, #28
 8003a1a:	491a      	ldr	r1, [pc, #104]	@ (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003a22:	4b18      	ldr	r3, [pc, #96]	@ (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4a17      	ldr	r2, [pc, #92]	@ (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a28:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003a2c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a2e:	f7fd fd4d 	bl	80014cc <HAL_GetTick>
 8003a32:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003a34:	e008      	b.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003a36:	f7fd fd49 	bl	80014cc <HAL_GetTick>
 8003a3a:	4602      	mov	r2, r0
 8003a3c:	697b      	ldr	r3, [r7, #20]
 8003a3e:	1ad3      	subs	r3, r2, r3
 8003a40:	2b64      	cmp	r3, #100	@ 0x64
 8003a42:	d901      	bls.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003a44:	2303      	movs	r3, #3
 8003a46:	e0d8      	b.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003a48:	4b0e      	ldr	r3, [pc, #56]	@ (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d0f0      	beq.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003a54:	69bb      	ldr	r3, [r7, #24]
 8003a56:	2b01      	cmp	r3, #1
 8003a58:	f040 80ce 	bne.w	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003a5c:	4b09      	ldr	r3, [pc, #36]	@ (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a08      	ldr	r2, [pc, #32]	@ (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a62:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003a66:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a68:	f7fd fd30 	bl	80014cc <HAL_GetTick>
 8003a6c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003a6e:	e00b      	b.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003a70:	f7fd fd2c 	bl	80014cc <HAL_GetTick>
 8003a74:	4602      	mov	r2, r0
 8003a76:	697b      	ldr	r3, [r7, #20]
 8003a78:	1ad3      	subs	r3, r2, r3
 8003a7a:	2b64      	cmp	r3, #100	@ 0x64
 8003a7c:	d904      	bls.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003a7e:	2303      	movs	r3, #3
 8003a80:	e0bb      	b.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003a82:	bf00      	nop
 8003a84:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003a88:	4b5e      	ldr	r3, [pc, #376]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003a90:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003a94:	d0ec      	beq.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d003      	beq.n	8003aaa <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d009      	beq.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d02e      	beq.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d12a      	bne.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003abe:	4b51      	ldr	r3, [pc, #324]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ac0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ac4:	0c1b      	lsrs	r3, r3, #16
 8003ac6:	f003 0303 	and.w	r3, r3, #3
 8003aca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003acc:	4b4d      	ldr	r3, [pc, #308]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ace:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ad2:	0f1b      	lsrs	r3, r3, #28
 8003ad4:	f003 0307 	and.w	r3, r3, #7
 8003ad8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	695b      	ldr	r3, [r3, #20]
 8003ade:	019a      	lsls	r2, r3, #6
 8003ae0:	693b      	ldr	r3, [r7, #16]
 8003ae2:	041b      	lsls	r3, r3, #16
 8003ae4:	431a      	orrs	r2, r3
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	699b      	ldr	r3, [r3, #24]
 8003aea:	061b      	lsls	r3, r3, #24
 8003aec:	431a      	orrs	r2, r3
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	071b      	lsls	r3, r3, #28
 8003af2:	4944      	ldr	r1, [pc, #272]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003af4:	4313      	orrs	r3, r2
 8003af6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003afa:	4b42      	ldr	r3, [pc, #264]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003afc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003b00:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b08:	3b01      	subs	r3, #1
 8003b0a:	021b      	lsls	r3, r3, #8
 8003b0c:	493d      	ldr	r1, [pc, #244]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d022      	beq.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003b24:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003b28:	d11d      	bne.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003b2a:	4b36      	ldr	r3, [pc, #216]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b30:	0e1b      	lsrs	r3, r3, #24
 8003b32:	f003 030f 	and.w	r3, r3, #15
 8003b36:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003b38:	4b32      	ldr	r3, [pc, #200]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b3e:	0f1b      	lsrs	r3, r3, #28
 8003b40:	f003 0307 	and.w	r3, r3, #7
 8003b44:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	695b      	ldr	r3, [r3, #20]
 8003b4a:	019a      	lsls	r2, r3, #6
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6a1b      	ldr	r3, [r3, #32]
 8003b50:	041b      	lsls	r3, r3, #16
 8003b52:	431a      	orrs	r2, r3
 8003b54:	693b      	ldr	r3, [r7, #16]
 8003b56:	061b      	lsls	r3, r3, #24
 8003b58:	431a      	orrs	r2, r3
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	071b      	lsls	r3, r3, #28
 8003b5e:	4929      	ldr	r1, [pc, #164]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b60:	4313      	orrs	r3, r2
 8003b62:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f003 0308 	and.w	r3, r3, #8
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d028      	beq.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003b72:	4b24      	ldr	r3, [pc, #144]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b78:	0e1b      	lsrs	r3, r3, #24
 8003b7a:	f003 030f 	and.w	r3, r3, #15
 8003b7e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003b80:	4b20      	ldr	r3, [pc, #128]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b86:	0c1b      	lsrs	r3, r3, #16
 8003b88:	f003 0303 	and.w	r3, r3, #3
 8003b8c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	695b      	ldr	r3, [r3, #20]
 8003b92:	019a      	lsls	r2, r3, #6
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	041b      	lsls	r3, r3, #16
 8003b98:	431a      	orrs	r2, r3
 8003b9a:	693b      	ldr	r3, [r7, #16]
 8003b9c:	061b      	lsls	r3, r3, #24
 8003b9e:	431a      	orrs	r2, r3
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	69db      	ldr	r3, [r3, #28]
 8003ba4:	071b      	lsls	r3, r3, #28
 8003ba6:	4917      	ldr	r1, [pc, #92]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003bae:	4b15      	ldr	r3, [pc, #84]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003bb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003bb4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bbc:	4911      	ldr	r1, [pc, #68]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003bc4:	4b0f      	ldr	r3, [pc, #60]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a0e      	ldr	r2, [pc, #56]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003bca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003bce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003bd0:	f7fd fc7c 	bl	80014cc <HAL_GetTick>
 8003bd4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003bd6:	e008      	b.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003bd8:	f7fd fc78 	bl	80014cc <HAL_GetTick>
 8003bdc:	4602      	mov	r2, r0
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	1ad3      	subs	r3, r2, r3
 8003be2:	2b64      	cmp	r3, #100	@ 0x64
 8003be4:	d901      	bls.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003be6:	2303      	movs	r3, #3
 8003be8:	e007      	b.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003bea:	4b06      	ldr	r3, [pc, #24]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003bf2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003bf6:	d1ef      	bne.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003bf8:	2300      	movs	r3, #0
}
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	3720      	adds	r7, #32
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}
 8003c02:	bf00      	nop
 8003c04:	40023800 	.word	0x40023800

08003c08 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b082      	sub	sp, #8
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d101      	bne.n	8003c1a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	e049      	b.n	8003cae <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c20:	b2db      	uxtb	r3, r3
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d106      	bne.n	8003c34 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003c2e:	6878      	ldr	r0, [r7, #4]
 8003c30:	f000 f841 	bl	8003cb6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2202      	movs	r2, #2
 8003c38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681a      	ldr	r2, [r3, #0]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	3304      	adds	r3, #4
 8003c44:	4619      	mov	r1, r3
 8003c46:	4610      	mov	r0, r2
 8003c48:	f000 f9e8 	bl	800401c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2201      	movs	r2, #1
 8003c50:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2201      	movs	r2, #1
 8003c58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2201      	movs	r2, #1
 8003c60:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2201      	movs	r2, #1
 8003c68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2201      	movs	r2, #1
 8003c70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2201      	movs	r2, #1
 8003c78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2201      	movs	r2, #1
 8003c80:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2201      	movs	r2, #1
 8003c88:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2201      	movs	r2, #1
 8003c90:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2201      	movs	r2, #1
 8003c98:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2201      	movs	r2, #1
 8003ca0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003cac:	2300      	movs	r3, #0
}
 8003cae:	4618      	mov	r0, r3
 8003cb0:	3708      	adds	r7, #8
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bd80      	pop	{r7, pc}

08003cb6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003cb6:	b480      	push	{r7}
 8003cb8:	b083      	sub	sp, #12
 8003cba:	af00      	add	r7, sp, #0
 8003cbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003cbe:	bf00      	nop
 8003cc0:	370c      	adds	r7, #12
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc8:	4770      	bx	lr
	...

08003ccc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b085      	sub	sp, #20
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003cda:	b2db      	uxtb	r3, r3
 8003cdc:	2b01      	cmp	r3, #1
 8003cde:	d001      	beq.n	8003ce4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	e054      	b.n	8003d8e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2202      	movs	r2, #2
 8003ce8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	68da      	ldr	r2, [r3, #12]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f042 0201 	orr.w	r2, r2, #1
 8003cfa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a26      	ldr	r2, [pc, #152]	@ (8003d9c <HAL_TIM_Base_Start_IT+0xd0>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d022      	beq.n	8003d4c <HAL_TIM_Base_Start_IT+0x80>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d0e:	d01d      	beq.n	8003d4c <HAL_TIM_Base_Start_IT+0x80>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a22      	ldr	r2, [pc, #136]	@ (8003da0 <HAL_TIM_Base_Start_IT+0xd4>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d018      	beq.n	8003d4c <HAL_TIM_Base_Start_IT+0x80>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a21      	ldr	r2, [pc, #132]	@ (8003da4 <HAL_TIM_Base_Start_IT+0xd8>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d013      	beq.n	8003d4c <HAL_TIM_Base_Start_IT+0x80>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a1f      	ldr	r2, [pc, #124]	@ (8003da8 <HAL_TIM_Base_Start_IT+0xdc>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d00e      	beq.n	8003d4c <HAL_TIM_Base_Start_IT+0x80>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4a1e      	ldr	r2, [pc, #120]	@ (8003dac <HAL_TIM_Base_Start_IT+0xe0>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d009      	beq.n	8003d4c <HAL_TIM_Base_Start_IT+0x80>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4a1c      	ldr	r2, [pc, #112]	@ (8003db0 <HAL_TIM_Base_Start_IT+0xe4>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d004      	beq.n	8003d4c <HAL_TIM_Base_Start_IT+0x80>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a1b      	ldr	r2, [pc, #108]	@ (8003db4 <HAL_TIM_Base_Start_IT+0xe8>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d115      	bne.n	8003d78 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	689a      	ldr	r2, [r3, #8]
 8003d52:	4b19      	ldr	r3, [pc, #100]	@ (8003db8 <HAL_TIM_Base_Start_IT+0xec>)
 8003d54:	4013      	ands	r3, r2
 8003d56:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	2b06      	cmp	r3, #6
 8003d5c:	d015      	beq.n	8003d8a <HAL_TIM_Base_Start_IT+0xbe>
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d64:	d011      	beq.n	8003d8a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	681a      	ldr	r2, [r3, #0]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f042 0201 	orr.w	r2, r2, #1
 8003d74:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d76:	e008      	b.n	8003d8a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	681a      	ldr	r2, [r3, #0]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f042 0201 	orr.w	r2, r2, #1
 8003d86:	601a      	str	r2, [r3, #0]
 8003d88:	e000      	b.n	8003d8c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d8a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003d8c:	2300      	movs	r3, #0
}
 8003d8e:	4618      	mov	r0, r3
 8003d90:	3714      	adds	r7, #20
 8003d92:	46bd      	mov	sp, r7
 8003d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d98:	4770      	bx	lr
 8003d9a:	bf00      	nop
 8003d9c:	40010000 	.word	0x40010000
 8003da0:	40000400 	.word	0x40000400
 8003da4:	40000800 	.word	0x40000800
 8003da8:	40000c00 	.word	0x40000c00
 8003dac:	40010400 	.word	0x40010400
 8003db0:	40014000 	.word	0x40014000
 8003db4:	40001800 	.word	0x40001800
 8003db8:	00010007 	.word	0x00010007

08003dbc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b084      	sub	sp, #16
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	68db      	ldr	r3, [r3, #12]
 8003dca:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	691b      	ldr	r3, [r3, #16]
 8003dd2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	f003 0302 	and.w	r3, r3, #2
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d020      	beq.n	8003e20 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	f003 0302 	and.w	r3, r3, #2
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d01b      	beq.n	8003e20 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f06f 0202 	mvn.w	r2, #2
 8003df0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2201      	movs	r2, #1
 8003df6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	699b      	ldr	r3, [r3, #24]
 8003dfe:	f003 0303 	and.w	r3, r3, #3
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d003      	beq.n	8003e0e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003e06:	6878      	ldr	r0, [r7, #4]
 8003e08:	f000 f8e9 	bl	8003fde <HAL_TIM_IC_CaptureCallback>
 8003e0c:	e005      	b.n	8003e1a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e0e:	6878      	ldr	r0, [r7, #4]
 8003e10:	f000 f8db 	bl	8003fca <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e14:	6878      	ldr	r0, [r7, #4]
 8003e16:	f000 f8ec 	bl	8003ff2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	f003 0304 	and.w	r3, r3, #4
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d020      	beq.n	8003e6c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	f003 0304 	and.w	r3, r3, #4
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d01b      	beq.n	8003e6c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f06f 0204 	mvn.w	r2, #4
 8003e3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2202      	movs	r2, #2
 8003e42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	699b      	ldr	r3, [r3, #24]
 8003e4a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d003      	beq.n	8003e5a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e52:	6878      	ldr	r0, [r7, #4]
 8003e54:	f000 f8c3 	bl	8003fde <HAL_TIM_IC_CaptureCallback>
 8003e58:	e005      	b.n	8003e66 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e5a:	6878      	ldr	r0, [r7, #4]
 8003e5c:	f000 f8b5 	bl	8003fca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e60:	6878      	ldr	r0, [r7, #4]
 8003e62:	f000 f8c6 	bl	8003ff2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	f003 0308 	and.w	r3, r3, #8
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d020      	beq.n	8003eb8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	f003 0308 	and.w	r3, r3, #8
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d01b      	beq.n	8003eb8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f06f 0208 	mvn.w	r2, #8
 8003e88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2204      	movs	r2, #4
 8003e8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	69db      	ldr	r3, [r3, #28]
 8003e96:	f003 0303 	and.w	r3, r3, #3
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d003      	beq.n	8003ea6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e9e:	6878      	ldr	r0, [r7, #4]
 8003ea0:	f000 f89d 	bl	8003fde <HAL_TIM_IC_CaptureCallback>
 8003ea4:	e005      	b.n	8003eb2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ea6:	6878      	ldr	r0, [r7, #4]
 8003ea8:	f000 f88f 	bl	8003fca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003eac:	6878      	ldr	r0, [r7, #4]
 8003eae:	f000 f8a0 	bl	8003ff2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	f003 0310 	and.w	r3, r3, #16
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d020      	beq.n	8003f04 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	f003 0310 	and.w	r3, r3, #16
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d01b      	beq.n	8003f04 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f06f 0210 	mvn.w	r2, #16
 8003ed4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2208      	movs	r2, #8
 8003eda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	69db      	ldr	r3, [r3, #28]
 8003ee2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d003      	beq.n	8003ef2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003eea:	6878      	ldr	r0, [r7, #4]
 8003eec:	f000 f877 	bl	8003fde <HAL_TIM_IC_CaptureCallback>
 8003ef0:	e005      	b.n	8003efe <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ef2:	6878      	ldr	r0, [r7, #4]
 8003ef4:	f000 f869 	bl	8003fca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ef8:	6878      	ldr	r0, [r7, #4]
 8003efa:	f000 f87a 	bl	8003ff2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2200      	movs	r2, #0
 8003f02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	f003 0301 	and.w	r3, r3, #1
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d00c      	beq.n	8003f28 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	f003 0301 	and.w	r3, r3, #1
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d007      	beq.n	8003f28 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f06f 0201 	mvn.w	r2, #1
 8003f20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003f22:	6878      	ldr	r0, [r7, #4]
 8003f24:	f7fc ff00 	bl	8000d28 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d104      	bne.n	8003f3c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8003f32:	68bb      	ldr	r3, [r7, #8]
 8003f34:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d00c      	beq.n	8003f56 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d007      	beq.n	8003f56 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8003f4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003f50:	6878      	ldr	r0, [r7, #4]
 8003f52:	f000 f913 	bl	800417c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003f56:	68bb      	ldr	r3, [r7, #8]
 8003f58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d00c      	beq.n	8003f7a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d007      	beq.n	8003f7a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003f72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003f74:	6878      	ldr	r0, [r7, #4]
 8003f76:	f000 f90b 	bl	8004190 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d00c      	beq.n	8003f9e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d007      	beq.n	8003f9e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003f96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003f98:	6878      	ldr	r0, [r7, #4]
 8003f9a:	f000 f834 	bl	8004006 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003f9e:	68bb      	ldr	r3, [r7, #8]
 8003fa0:	f003 0320 	and.w	r3, r3, #32
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d00c      	beq.n	8003fc2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	f003 0320 	and.w	r3, r3, #32
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d007      	beq.n	8003fc2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f06f 0220 	mvn.w	r2, #32
 8003fba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003fbc:	6878      	ldr	r0, [r7, #4]
 8003fbe:	f000 f8d3 	bl	8004168 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003fc2:	bf00      	nop
 8003fc4:	3710      	adds	r7, #16
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bd80      	pop	{r7, pc}

08003fca <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003fca:	b480      	push	{r7}
 8003fcc:	b083      	sub	sp, #12
 8003fce:	af00      	add	r7, sp, #0
 8003fd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003fd2:	bf00      	nop
 8003fd4:	370c      	adds	r7, #12
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fdc:	4770      	bx	lr

08003fde <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003fde:	b480      	push	{r7}
 8003fe0:	b083      	sub	sp, #12
 8003fe2:	af00      	add	r7, sp, #0
 8003fe4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003fe6:	bf00      	nop
 8003fe8:	370c      	adds	r7, #12
 8003fea:	46bd      	mov	sp, r7
 8003fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff0:	4770      	bx	lr

08003ff2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003ff2:	b480      	push	{r7}
 8003ff4:	b083      	sub	sp, #12
 8003ff6:	af00      	add	r7, sp, #0
 8003ff8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003ffa:	bf00      	nop
 8003ffc:	370c      	adds	r7, #12
 8003ffe:	46bd      	mov	sp, r7
 8004000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004004:	4770      	bx	lr

08004006 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004006:	b480      	push	{r7}
 8004008:	b083      	sub	sp, #12
 800400a:	af00      	add	r7, sp, #0
 800400c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800400e:	bf00      	nop
 8004010:	370c      	adds	r7, #12
 8004012:	46bd      	mov	sp, r7
 8004014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004018:	4770      	bx	lr
	...

0800401c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800401c:	b480      	push	{r7}
 800401e:	b085      	sub	sp, #20
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
 8004024:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	4a43      	ldr	r2, [pc, #268]	@ (800413c <TIM_Base_SetConfig+0x120>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d013      	beq.n	800405c <TIM_Base_SetConfig+0x40>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800403a:	d00f      	beq.n	800405c <TIM_Base_SetConfig+0x40>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	4a40      	ldr	r2, [pc, #256]	@ (8004140 <TIM_Base_SetConfig+0x124>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d00b      	beq.n	800405c <TIM_Base_SetConfig+0x40>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	4a3f      	ldr	r2, [pc, #252]	@ (8004144 <TIM_Base_SetConfig+0x128>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d007      	beq.n	800405c <TIM_Base_SetConfig+0x40>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	4a3e      	ldr	r2, [pc, #248]	@ (8004148 <TIM_Base_SetConfig+0x12c>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d003      	beq.n	800405c <TIM_Base_SetConfig+0x40>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	4a3d      	ldr	r2, [pc, #244]	@ (800414c <TIM_Base_SetConfig+0x130>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d108      	bne.n	800406e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004062:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	68fa      	ldr	r2, [r7, #12]
 800406a:	4313      	orrs	r3, r2
 800406c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	4a32      	ldr	r2, [pc, #200]	@ (800413c <TIM_Base_SetConfig+0x120>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d02b      	beq.n	80040ce <TIM_Base_SetConfig+0xb2>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800407c:	d027      	beq.n	80040ce <TIM_Base_SetConfig+0xb2>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	4a2f      	ldr	r2, [pc, #188]	@ (8004140 <TIM_Base_SetConfig+0x124>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d023      	beq.n	80040ce <TIM_Base_SetConfig+0xb2>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	4a2e      	ldr	r2, [pc, #184]	@ (8004144 <TIM_Base_SetConfig+0x128>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d01f      	beq.n	80040ce <TIM_Base_SetConfig+0xb2>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	4a2d      	ldr	r2, [pc, #180]	@ (8004148 <TIM_Base_SetConfig+0x12c>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d01b      	beq.n	80040ce <TIM_Base_SetConfig+0xb2>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	4a2c      	ldr	r2, [pc, #176]	@ (800414c <TIM_Base_SetConfig+0x130>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d017      	beq.n	80040ce <TIM_Base_SetConfig+0xb2>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	4a2b      	ldr	r2, [pc, #172]	@ (8004150 <TIM_Base_SetConfig+0x134>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d013      	beq.n	80040ce <TIM_Base_SetConfig+0xb2>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	4a2a      	ldr	r2, [pc, #168]	@ (8004154 <TIM_Base_SetConfig+0x138>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d00f      	beq.n	80040ce <TIM_Base_SetConfig+0xb2>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	4a29      	ldr	r2, [pc, #164]	@ (8004158 <TIM_Base_SetConfig+0x13c>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d00b      	beq.n	80040ce <TIM_Base_SetConfig+0xb2>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	4a28      	ldr	r2, [pc, #160]	@ (800415c <TIM_Base_SetConfig+0x140>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d007      	beq.n	80040ce <TIM_Base_SetConfig+0xb2>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	4a27      	ldr	r2, [pc, #156]	@ (8004160 <TIM_Base_SetConfig+0x144>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d003      	beq.n	80040ce <TIM_Base_SetConfig+0xb2>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	4a26      	ldr	r2, [pc, #152]	@ (8004164 <TIM_Base_SetConfig+0x148>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d108      	bne.n	80040e0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80040d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	68db      	ldr	r3, [r3, #12]
 80040da:	68fa      	ldr	r2, [r7, #12]
 80040dc:	4313      	orrs	r3, r2
 80040de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	695b      	ldr	r3, [r3, #20]
 80040ea:	4313      	orrs	r3, r2
 80040ec:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	689a      	ldr	r2, [r3, #8]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	681a      	ldr	r2, [r3, #0]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	4a0e      	ldr	r2, [pc, #56]	@ (800413c <TIM_Base_SetConfig+0x120>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d003      	beq.n	800410e <TIM_Base_SetConfig+0xf2>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	4a10      	ldr	r2, [pc, #64]	@ (800414c <TIM_Base_SetConfig+0x130>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d103      	bne.n	8004116 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	691a      	ldr	r2, [r3, #16]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f043 0204 	orr.w	r2, r3, #4
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2201      	movs	r2, #1
 8004126:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	68fa      	ldr	r2, [r7, #12]
 800412c:	601a      	str	r2, [r3, #0]
}
 800412e:	bf00      	nop
 8004130:	3714      	adds	r7, #20
 8004132:	46bd      	mov	sp, r7
 8004134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004138:	4770      	bx	lr
 800413a:	bf00      	nop
 800413c:	40010000 	.word	0x40010000
 8004140:	40000400 	.word	0x40000400
 8004144:	40000800 	.word	0x40000800
 8004148:	40000c00 	.word	0x40000c00
 800414c:	40010400 	.word	0x40010400
 8004150:	40014000 	.word	0x40014000
 8004154:	40014400 	.word	0x40014400
 8004158:	40014800 	.word	0x40014800
 800415c:	40001800 	.word	0x40001800
 8004160:	40001c00 	.word	0x40001c00
 8004164:	40002000 	.word	0x40002000

08004168 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004168:	b480      	push	{r7}
 800416a:	b083      	sub	sp, #12
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004170:	bf00      	nop
 8004172:	370c      	adds	r7, #12
 8004174:	46bd      	mov	sp, r7
 8004176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417a:	4770      	bx	lr

0800417c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800417c:	b480      	push	{r7}
 800417e:	b083      	sub	sp, #12
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004184:	bf00      	nop
 8004186:	370c      	adds	r7, #12
 8004188:	46bd      	mov	sp, r7
 800418a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418e:	4770      	bx	lr

08004190 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004190:	b480      	push	{r7}
 8004192:	b083      	sub	sp, #12
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004198:	bf00      	nop
 800419a:	370c      	adds	r7, #12
 800419c:	46bd      	mov	sp, r7
 800419e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a2:	4770      	bx	lr

080041a4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b082      	sub	sp, #8
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d101      	bne.n	80041b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80041b2:	2301      	movs	r3, #1
 80041b4:	e040      	b.n	8004238 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d106      	bne.n	80041cc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2200      	movs	r2, #0
 80041c2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80041c6:	6878      	ldr	r0, [r7, #4]
 80041c8:	f7fc fee6 	bl	8000f98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2224      	movs	r2, #36	@ 0x24
 80041d0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	681a      	ldr	r2, [r3, #0]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f022 0201 	bic.w	r2, r2, #1
 80041e0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d002      	beq.n	80041f0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80041ea:	6878      	ldr	r0, [r7, #4]
 80041ec:	f000 fb16 	bl	800481c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80041f0:	6878      	ldr	r0, [r7, #4]
 80041f2:	f000 f8af 	bl	8004354 <UART_SetConfig>
 80041f6:	4603      	mov	r3, r0
 80041f8:	2b01      	cmp	r3, #1
 80041fa:	d101      	bne.n	8004200 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80041fc:	2301      	movs	r3, #1
 80041fe:	e01b      	b.n	8004238 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	685a      	ldr	r2, [r3, #4]
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800420e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	689a      	ldr	r2, [r3, #8]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800421e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	681a      	ldr	r2, [r3, #0]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f042 0201 	orr.w	r2, r2, #1
 800422e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004230:	6878      	ldr	r0, [r7, #4]
 8004232:	f000 fb95 	bl	8004960 <UART_CheckIdleState>
 8004236:	4603      	mov	r3, r0
}
 8004238:	4618      	mov	r0, r3
 800423a:	3708      	adds	r7, #8
 800423c:	46bd      	mov	sp, r7
 800423e:	bd80      	pop	{r7, pc}

08004240 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b08a      	sub	sp, #40	@ 0x28
 8004244:	af02      	add	r7, sp, #8
 8004246:	60f8      	str	r0, [r7, #12]
 8004248:	60b9      	str	r1, [r7, #8]
 800424a:	603b      	str	r3, [r7, #0]
 800424c:	4613      	mov	r3, r2
 800424e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004254:	2b20      	cmp	r3, #32
 8004256:	d177      	bne.n	8004348 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d002      	beq.n	8004264 <HAL_UART_Transmit+0x24>
 800425e:	88fb      	ldrh	r3, [r7, #6]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d101      	bne.n	8004268 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004264:	2301      	movs	r3, #1
 8004266:	e070      	b.n	800434a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	2200      	movs	r2, #0
 800426c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	2221      	movs	r2, #33	@ 0x21
 8004274:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004276:	f7fd f929 	bl	80014cc <HAL_GetTick>
 800427a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	88fa      	ldrh	r2, [r7, #6]
 8004280:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	88fa      	ldrh	r2, [r7, #6]
 8004288:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	689b      	ldr	r3, [r3, #8]
 8004290:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004294:	d108      	bne.n	80042a8 <HAL_UART_Transmit+0x68>
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	691b      	ldr	r3, [r3, #16]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d104      	bne.n	80042a8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800429e:	2300      	movs	r3, #0
 80042a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80042a2:	68bb      	ldr	r3, [r7, #8]
 80042a4:	61bb      	str	r3, [r7, #24]
 80042a6:	e003      	b.n	80042b0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80042ac:	2300      	movs	r3, #0
 80042ae:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80042b0:	e02f      	b.n	8004312 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	9300      	str	r3, [sp, #0]
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	2200      	movs	r2, #0
 80042ba:	2180      	movs	r1, #128	@ 0x80
 80042bc:	68f8      	ldr	r0, [r7, #12]
 80042be:	f000 fbf7 	bl	8004ab0 <UART_WaitOnFlagUntilTimeout>
 80042c2:	4603      	mov	r3, r0
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d004      	beq.n	80042d2 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	2220      	movs	r2, #32
 80042cc:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80042ce:	2303      	movs	r3, #3
 80042d0:	e03b      	b.n	800434a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80042d2:	69fb      	ldr	r3, [r7, #28]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d10b      	bne.n	80042f0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80042d8:	69bb      	ldr	r3, [r7, #24]
 80042da:	881b      	ldrh	r3, [r3, #0]
 80042dc:	461a      	mov	r2, r3
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80042e6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80042e8:	69bb      	ldr	r3, [r7, #24]
 80042ea:	3302      	adds	r3, #2
 80042ec:	61bb      	str	r3, [r7, #24]
 80042ee:	e007      	b.n	8004300 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80042f0:	69fb      	ldr	r3, [r7, #28]
 80042f2:	781a      	ldrb	r2, [r3, #0]
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80042fa:	69fb      	ldr	r3, [r7, #28]
 80042fc:	3301      	adds	r3, #1
 80042fe:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004306:	b29b      	uxth	r3, r3
 8004308:	3b01      	subs	r3, #1
 800430a:	b29a      	uxth	r2, r3
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004318:	b29b      	uxth	r3, r3
 800431a:	2b00      	cmp	r3, #0
 800431c:	d1c9      	bne.n	80042b2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	9300      	str	r3, [sp, #0]
 8004322:	697b      	ldr	r3, [r7, #20]
 8004324:	2200      	movs	r2, #0
 8004326:	2140      	movs	r1, #64	@ 0x40
 8004328:	68f8      	ldr	r0, [r7, #12]
 800432a:	f000 fbc1 	bl	8004ab0 <UART_WaitOnFlagUntilTimeout>
 800432e:	4603      	mov	r3, r0
 8004330:	2b00      	cmp	r3, #0
 8004332:	d004      	beq.n	800433e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	2220      	movs	r2, #32
 8004338:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800433a:	2303      	movs	r3, #3
 800433c:	e005      	b.n	800434a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	2220      	movs	r2, #32
 8004342:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004344:	2300      	movs	r3, #0
 8004346:	e000      	b.n	800434a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8004348:	2302      	movs	r3, #2
  }
}
 800434a:	4618      	mov	r0, r3
 800434c:	3720      	adds	r7, #32
 800434e:	46bd      	mov	sp, r7
 8004350:	bd80      	pop	{r7, pc}
	...

08004354 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b088      	sub	sp, #32
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800435c:	2300      	movs	r3, #0
 800435e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	689a      	ldr	r2, [r3, #8]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	691b      	ldr	r3, [r3, #16]
 8004368:	431a      	orrs	r2, r3
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	695b      	ldr	r3, [r3, #20]
 800436e:	431a      	orrs	r2, r3
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	69db      	ldr	r3, [r3, #28]
 8004374:	4313      	orrs	r3, r2
 8004376:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	681a      	ldr	r2, [r3, #0]
 800437e:	4ba6      	ldr	r3, [pc, #664]	@ (8004618 <UART_SetConfig+0x2c4>)
 8004380:	4013      	ands	r3, r2
 8004382:	687a      	ldr	r2, [r7, #4]
 8004384:	6812      	ldr	r2, [r2, #0]
 8004386:	6979      	ldr	r1, [r7, #20]
 8004388:	430b      	orrs	r3, r1
 800438a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	68da      	ldr	r2, [r3, #12]
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	430a      	orrs	r2, r1
 80043a0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	699b      	ldr	r3, [r3, #24]
 80043a6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6a1b      	ldr	r3, [r3, #32]
 80043ac:	697a      	ldr	r2, [r7, #20]
 80043ae:	4313      	orrs	r3, r2
 80043b0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	689b      	ldr	r3, [r3, #8]
 80043b8:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	697a      	ldr	r2, [r7, #20]
 80043c2:	430a      	orrs	r2, r1
 80043c4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a94      	ldr	r2, [pc, #592]	@ (800461c <UART_SetConfig+0x2c8>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d120      	bne.n	8004412 <UART_SetConfig+0xbe>
 80043d0:	4b93      	ldr	r3, [pc, #588]	@ (8004620 <UART_SetConfig+0x2cc>)
 80043d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043d6:	f003 0303 	and.w	r3, r3, #3
 80043da:	2b03      	cmp	r3, #3
 80043dc:	d816      	bhi.n	800440c <UART_SetConfig+0xb8>
 80043de:	a201      	add	r2, pc, #4	@ (adr r2, 80043e4 <UART_SetConfig+0x90>)
 80043e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043e4:	080043f5 	.word	0x080043f5
 80043e8:	08004401 	.word	0x08004401
 80043ec:	080043fb 	.word	0x080043fb
 80043f0:	08004407 	.word	0x08004407
 80043f4:	2301      	movs	r3, #1
 80043f6:	77fb      	strb	r3, [r7, #31]
 80043f8:	e150      	b.n	800469c <UART_SetConfig+0x348>
 80043fa:	2302      	movs	r3, #2
 80043fc:	77fb      	strb	r3, [r7, #31]
 80043fe:	e14d      	b.n	800469c <UART_SetConfig+0x348>
 8004400:	2304      	movs	r3, #4
 8004402:	77fb      	strb	r3, [r7, #31]
 8004404:	e14a      	b.n	800469c <UART_SetConfig+0x348>
 8004406:	2308      	movs	r3, #8
 8004408:	77fb      	strb	r3, [r7, #31]
 800440a:	e147      	b.n	800469c <UART_SetConfig+0x348>
 800440c:	2310      	movs	r3, #16
 800440e:	77fb      	strb	r3, [r7, #31]
 8004410:	e144      	b.n	800469c <UART_SetConfig+0x348>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4a83      	ldr	r2, [pc, #524]	@ (8004624 <UART_SetConfig+0x2d0>)
 8004418:	4293      	cmp	r3, r2
 800441a:	d132      	bne.n	8004482 <UART_SetConfig+0x12e>
 800441c:	4b80      	ldr	r3, [pc, #512]	@ (8004620 <UART_SetConfig+0x2cc>)
 800441e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004422:	f003 030c 	and.w	r3, r3, #12
 8004426:	2b0c      	cmp	r3, #12
 8004428:	d828      	bhi.n	800447c <UART_SetConfig+0x128>
 800442a:	a201      	add	r2, pc, #4	@ (adr r2, 8004430 <UART_SetConfig+0xdc>)
 800442c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004430:	08004465 	.word	0x08004465
 8004434:	0800447d 	.word	0x0800447d
 8004438:	0800447d 	.word	0x0800447d
 800443c:	0800447d 	.word	0x0800447d
 8004440:	08004471 	.word	0x08004471
 8004444:	0800447d 	.word	0x0800447d
 8004448:	0800447d 	.word	0x0800447d
 800444c:	0800447d 	.word	0x0800447d
 8004450:	0800446b 	.word	0x0800446b
 8004454:	0800447d 	.word	0x0800447d
 8004458:	0800447d 	.word	0x0800447d
 800445c:	0800447d 	.word	0x0800447d
 8004460:	08004477 	.word	0x08004477
 8004464:	2300      	movs	r3, #0
 8004466:	77fb      	strb	r3, [r7, #31]
 8004468:	e118      	b.n	800469c <UART_SetConfig+0x348>
 800446a:	2302      	movs	r3, #2
 800446c:	77fb      	strb	r3, [r7, #31]
 800446e:	e115      	b.n	800469c <UART_SetConfig+0x348>
 8004470:	2304      	movs	r3, #4
 8004472:	77fb      	strb	r3, [r7, #31]
 8004474:	e112      	b.n	800469c <UART_SetConfig+0x348>
 8004476:	2308      	movs	r3, #8
 8004478:	77fb      	strb	r3, [r7, #31]
 800447a:	e10f      	b.n	800469c <UART_SetConfig+0x348>
 800447c:	2310      	movs	r3, #16
 800447e:	77fb      	strb	r3, [r7, #31]
 8004480:	e10c      	b.n	800469c <UART_SetConfig+0x348>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a68      	ldr	r2, [pc, #416]	@ (8004628 <UART_SetConfig+0x2d4>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d120      	bne.n	80044ce <UART_SetConfig+0x17a>
 800448c:	4b64      	ldr	r3, [pc, #400]	@ (8004620 <UART_SetConfig+0x2cc>)
 800448e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004492:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004496:	2b30      	cmp	r3, #48	@ 0x30
 8004498:	d013      	beq.n	80044c2 <UART_SetConfig+0x16e>
 800449a:	2b30      	cmp	r3, #48	@ 0x30
 800449c:	d814      	bhi.n	80044c8 <UART_SetConfig+0x174>
 800449e:	2b20      	cmp	r3, #32
 80044a0:	d009      	beq.n	80044b6 <UART_SetConfig+0x162>
 80044a2:	2b20      	cmp	r3, #32
 80044a4:	d810      	bhi.n	80044c8 <UART_SetConfig+0x174>
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d002      	beq.n	80044b0 <UART_SetConfig+0x15c>
 80044aa:	2b10      	cmp	r3, #16
 80044ac:	d006      	beq.n	80044bc <UART_SetConfig+0x168>
 80044ae:	e00b      	b.n	80044c8 <UART_SetConfig+0x174>
 80044b0:	2300      	movs	r3, #0
 80044b2:	77fb      	strb	r3, [r7, #31]
 80044b4:	e0f2      	b.n	800469c <UART_SetConfig+0x348>
 80044b6:	2302      	movs	r3, #2
 80044b8:	77fb      	strb	r3, [r7, #31]
 80044ba:	e0ef      	b.n	800469c <UART_SetConfig+0x348>
 80044bc:	2304      	movs	r3, #4
 80044be:	77fb      	strb	r3, [r7, #31]
 80044c0:	e0ec      	b.n	800469c <UART_SetConfig+0x348>
 80044c2:	2308      	movs	r3, #8
 80044c4:	77fb      	strb	r3, [r7, #31]
 80044c6:	e0e9      	b.n	800469c <UART_SetConfig+0x348>
 80044c8:	2310      	movs	r3, #16
 80044ca:	77fb      	strb	r3, [r7, #31]
 80044cc:	e0e6      	b.n	800469c <UART_SetConfig+0x348>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4a56      	ldr	r2, [pc, #344]	@ (800462c <UART_SetConfig+0x2d8>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d120      	bne.n	800451a <UART_SetConfig+0x1c6>
 80044d8:	4b51      	ldr	r3, [pc, #324]	@ (8004620 <UART_SetConfig+0x2cc>)
 80044da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044de:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80044e2:	2bc0      	cmp	r3, #192	@ 0xc0
 80044e4:	d013      	beq.n	800450e <UART_SetConfig+0x1ba>
 80044e6:	2bc0      	cmp	r3, #192	@ 0xc0
 80044e8:	d814      	bhi.n	8004514 <UART_SetConfig+0x1c0>
 80044ea:	2b80      	cmp	r3, #128	@ 0x80
 80044ec:	d009      	beq.n	8004502 <UART_SetConfig+0x1ae>
 80044ee:	2b80      	cmp	r3, #128	@ 0x80
 80044f0:	d810      	bhi.n	8004514 <UART_SetConfig+0x1c0>
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d002      	beq.n	80044fc <UART_SetConfig+0x1a8>
 80044f6:	2b40      	cmp	r3, #64	@ 0x40
 80044f8:	d006      	beq.n	8004508 <UART_SetConfig+0x1b4>
 80044fa:	e00b      	b.n	8004514 <UART_SetConfig+0x1c0>
 80044fc:	2300      	movs	r3, #0
 80044fe:	77fb      	strb	r3, [r7, #31]
 8004500:	e0cc      	b.n	800469c <UART_SetConfig+0x348>
 8004502:	2302      	movs	r3, #2
 8004504:	77fb      	strb	r3, [r7, #31]
 8004506:	e0c9      	b.n	800469c <UART_SetConfig+0x348>
 8004508:	2304      	movs	r3, #4
 800450a:	77fb      	strb	r3, [r7, #31]
 800450c:	e0c6      	b.n	800469c <UART_SetConfig+0x348>
 800450e:	2308      	movs	r3, #8
 8004510:	77fb      	strb	r3, [r7, #31]
 8004512:	e0c3      	b.n	800469c <UART_SetConfig+0x348>
 8004514:	2310      	movs	r3, #16
 8004516:	77fb      	strb	r3, [r7, #31]
 8004518:	e0c0      	b.n	800469c <UART_SetConfig+0x348>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4a44      	ldr	r2, [pc, #272]	@ (8004630 <UART_SetConfig+0x2dc>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d125      	bne.n	8004570 <UART_SetConfig+0x21c>
 8004524:	4b3e      	ldr	r3, [pc, #248]	@ (8004620 <UART_SetConfig+0x2cc>)
 8004526:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800452a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800452e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004532:	d017      	beq.n	8004564 <UART_SetConfig+0x210>
 8004534:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004538:	d817      	bhi.n	800456a <UART_SetConfig+0x216>
 800453a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800453e:	d00b      	beq.n	8004558 <UART_SetConfig+0x204>
 8004540:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004544:	d811      	bhi.n	800456a <UART_SetConfig+0x216>
 8004546:	2b00      	cmp	r3, #0
 8004548:	d003      	beq.n	8004552 <UART_SetConfig+0x1fe>
 800454a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800454e:	d006      	beq.n	800455e <UART_SetConfig+0x20a>
 8004550:	e00b      	b.n	800456a <UART_SetConfig+0x216>
 8004552:	2300      	movs	r3, #0
 8004554:	77fb      	strb	r3, [r7, #31]
 8004556:	e0a1      	b.n	800469c <UART_SetConfig+0x348>
 8004558:	2302      	movs	r3, #2
 800455a:	77fb      	strb	r3, [r7, #31]
 800455c:	e09e      	b.n	800469c <UART_SetConfig+0x348>
 800455e:	2304      	movs	r3, #4
 8004560:	77fb      	strb	r3, [r7, #31]
 8004562:	e09b      	b.n	800469c <UART_SetConfig+0x348>
 8004564:	2308      	movs	r3, #8
 8004566:	77fb      	strb	r3, [r7, #31]
 8004568:	e098      	b.n	800469c <UART_SetConfig+0x348>
 800456a:	2310      	movs	r3, #16
 800456c:	77fb      	strb	r3, [r7, #31]
 800456e:	e095      	b.n	800469c <UART_SetConfig+0x348>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4a2f      	ldr	r2, [pc, #188]	@ (8004634 <UART_SetConfig+0x2e0>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d125      	bne.n	80045c6 <UART_SetConfig+0x272>
 800457a:	4b29      	ldr	r3, [pc, #164]	@ (8004620 <UART_SetConfig+0x2cc>)
 800457c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004580:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004584:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004588:	d017      	beq.n	80045ba <UART_SetConfig+0x266>
 800458a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800458e:	d817      	bhi.n	80045c0 <UART_SetConfig+0x26c>
 8004590:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004594:	d00b      	beq.n	80045ae <UART_SetConfig+0x25a>
 8004596:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800459a:	d811      	bhi.n	80045c0 <UART_SetConfig+0x26c>
 800459c:	2b00      	cmp	r3, #0
 800459e:	d003      	beq.n	80045a8 <UART_SetConfig+0x254>
 80045a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80045a4:	d006      	beq.n	80045b4 <UART_SetConfig+0x260>
 80045a6:	e00b      	b.n	80045c0 <UART_SetConfig+0x26c>
 80045a8:	2301      	movs	r3, #1
 80045aa:	77fb      	strb	r3, [r7, #31]
 80045ac:	e076      	b.n	800469c <UART_SetConfig+0x348>
 80045ae:	2302      	movs	r3, #2
 80045b0:	77fb      	strb	r3, [r7, #31]
 80045b2:	e073      	b.n	800469c <UART_SetConfig+0x348>
 80045b4:	2304      	movs	r3, #4
 80045b6:	77fb      	strb	r3, [r7, #31]
 80045b8:	e070      	b.n	800469c <UART_SetConfig+0x348>
 80045ba:	2308      	movs	r3, #8
 80045bc:	77fb      	strb	r3, [r7, #31]
 80045be:	e06d      	b.n	800469c <UART_SetConfig+0x348>
 80045c0:	2310      	movs	r3, #16
 80045c2:	77fb      	strb	r3, [r7, #31]
 80045c4:	e06a      	b.n	800469c <UART_SetConfig+0x348>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4a1b      	ldr	r2, [pc, #108]	@ (8004638 <UART_SetConfig+0x2e4>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d138      	bne.n	8004642 <UART_SetConfig+0x2ee>
 80045d0:	4b13      	ldr	r3, [pc, #76]	@ (8004620 <UART_SetConfig+0x2cc>)
 80045d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045d6:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80045da:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80045de:	d017      	beq.n	8004610 <UART_SetConfig+0x2bc>
 80045e0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80045e4:	d82a      	bhi.n	800463c <UART_SetConfig+0x2e8>
 80045e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80045ea:	d00b      	beq.n	8004604 <UART_SetConfig+0x2b0>
 80045ec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80045f0:	d824      	bhi.n	800463c <UART_SetConfig+0x2e8>
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d003      	beq.n	80045fe <UART_SetConfig+0x2aa>
 80045f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80045fa:	d006      	beq.n	800460a <UART_SetConfig+0x2b6>
 80045fc:	e01e      	b.n	800463c <UART_SetConfig+0x2e8>
 80045fe:	2300      	movs	r3, #0
 8004600:	77fb      	strb	r3, [r7, #31]
 8004602:	e04b      	b.n	800469c <UART_SetConfig+0x348>
 8004604:	2302      	movs	r3, #2
 8004606:	77fb      	strb	r3, [r7, #31]
 8004608:	e048      	b.n	800469c <UART_SetConfig+0x348>
 800460a:	2304      	movs	r3, #4
 800460c:	77fb      	strb	r3, [r7, #31]
 800460e:	e045      	b.n	800469c <UART_SetConfig+0x348>
 8004610:	2308      	movs	r3, #8
 8004612:	77fb      	strb	r3, [r7, #31]
 8004614:	e042      	b.n	800469c <UART_SetConfig+0x348>
 8004616:	bf00      	nop
 8004618:	efff69f3 	.word	0xefff69f3
 800461c:	40011000 	.word	0x40011000
 8004620:	40023800 	.word	0x40023800
 8004624:	40004400 	.word	0x40004400
 8004628:	40004800 	.word	0x40004800
 800462c:	40004c00 	.word	0x40004c00
 8004630:	40005000 	.word	0x40005000
 8004634:	40011400 	.word	0x40011400
 8004638:	40007800 	.word	0x40007800
 800463c:	2310      	movs	r3, #16
 800463e:	77fb      	strb	r3, [r7, #31]
 8004640:	e02c      	b.n	800469c <UART_SetConfig+0x348>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4a72      	ldr	r2, [pc, #456]	@ (8004810 <UART_SetConfig+0x4bc>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d125      	bne.n	8004698 <UART_SetConfig+0x344>
 800464c:	4b71      	ldr	r3, [pc, #452]	@ (8004814 <UART_SetConfig+0x4c0>)
 800464e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004652:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8004656:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800465a:	d017      	beq.n	800468c <UART_SetConfig+0x338>
 800465c:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004660:	d817      	bhi.n	8004692 <UART_SetConfig+0x33e>
 8004662:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004666:	d00b      	beq.n	8004680 <UART_SetConfig+0x32c>
 8004668:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800466c:	d811      	bhi.n	8004692 <UART_SetConfig+0x33e>
 800466e:	2b00      	cmp	r3, #0
 8004670:	d003      	beq.n	800467a <UART_SetConfig+0x326>
 8004672:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004676:	d006      	beq.n	8004686 <UART_SetConfig+0x332>
 8004678:	e00b      	b.n	8004692 <UART_SetConfig+0x33e>
 800467a:	2300      	movs	r3, #0
 800467c:	77fb      	strb	r3, [r7, #31]
 800467e:	e00d      	b.n	800469c <UART_SetConfig+0x348>
 8004680:	2302      	movs	r3, #2
 8004682:	77fb      	strb	r3, [r7, #31]
 8004684:	e00a      	b.n	800469c <UART_SetConfig+0x348>
 8004686:	2304      	movs	r3, #4
 8004688:	77fb      	strb	r3, [r7, #31]
 800468a:	e007      	b.n	800469c <UART_SetConfig+0x348>
 800468c:	2308      	movs	r3, #8
 800468e:	77fb      	strb	r3, [r7, #31]
 8004690:	e004      	b.n	800469c <UART_SetConfig+0x348>
 8004692:	2310      	movs	r3, #16
 8004694:	77fb      	strb	r3, [r7, #31]
 8004696:	e001      	b.n	800469c <UART_SetConfig+0x348>
 8004698:	2310      	movs	r3, #16
 800469a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	69db      	ldr	r3, [r3, #28]
 80046a0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80046a4:	d15b      	bne.n	800475e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80046a6:	7ffb      	ldrb	r3, [r7, #31]
 80046a8:	2b08      	cmp	r3, #8
 80046aa:	d828      	bhi.n	80046fe <UART_SetConfig+0x3aa>
 80046ac:	a201      	add	r2, pc, #4	@ (adr r2, 80046b4 <UART_SetConfig+0x360>)
 80046ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046b2:	bf00      	nop
 80046b4:	080046d9 	.word	0x080046d9
 80046b8:	080046e1 	.word	0x080046e1
 80046bc:	080046e9 	.word	0x080046e9
 80046c0:	080046ff 	.word	0x080046ff
 80046c4:	080046ef 	.word	0x080046ef
 80046c8:	080046ff 	.word	0x080046ff
 80046cc:	080046ff 	.word	0x080046ff
 80046d0:	080046ff 	.word	0x080046ff
 80046d4:	080046f7 	.word	0x080046f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80046d8:	f7fe fe14 	bl	8003304 <HAL_RCC_GetPCLK1Freq>
 80046dc:	61b8      	str	r0, [r7, #24]
        break;
 80046de:	e013      	b.n	8004708 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80046e0:	f7fe fe24 	bl	800332c <HAL_RCC_GetPCLK2Freq>
 80046e4:	61b8      	str	r0, [r7, #24]
        break;
 80046e6:	e00f      	b.n	8004708 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80046e8:	4b4b      	ldr	r3, [pc, #300]	@ (8004818 <UART_SetConfig+0x4c4>)
 80046ea:	61bb      	str	r3, [r7, #24]
        break;
 80046ec:	e00c      	b.n	8004708 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80046ee:	f7fe fcf7 	bl	80030e0 <HAL_RCC_GetSysClockFreq>
 80046f2:	61b8      	str	r0, [r7, #24]
        break;
 80046f4:	e008      	b.n	8004708 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80046f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80046fa:	61bb      	str	r3, [r7, #24]
        break;
 80046fc:	e004      	b.n	8004708 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80046fe:	2300      	movs	r3, #0
 8004700:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004702:	2301      	movs	r3, #1
 8004704:	77bb      	strb	r3, [r7, #30]
        break;
 8004706:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004708:	69bb      	ldr	r3, [r7, #24]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d074      	beq.n	80047f8 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800470e:	69bb      	ldr	r3, [r7, #24]
 8004710:	005a      	lsls	r2, r3, #1
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	085b      	lsrs	r3, r3, #1
 8004718:	441a      	add	r2, r3
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004722:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004724:	693b      	ldr	r3, [r7, #16]
 8004726:	2b0f      	cmp	r3, #15
 8004728:	d916      	bls.n	8004758 <UART_SetConfig+0x404>
 800472a:	693b      	ldr	r3, [r7, #16]
 800472c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004730:	d212      	bcs.n	8004758 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004732:	693b      	ldr	r3, [r7, #16]
 8004734:	b29b      	uxth	r3, r3
 8004736:	f023 030f 	bic.w	r3, r3, #15
 800473a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800473c:	693b      	ldr	r3, [r7, #16]
 800473e:	085b      	lsrs	r3, r3, #1
 8004740:	b29b      	uxth	r3, r3
 8004742:	f003 0307 	and.w	r3, r3, #7
 8004746:	b29a      	uxth	r2, r3
 8004748:	89fb      	ldrh	r3, [r7, #14]
 800474a:	4313      	orrs	r3, r2
 800474c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	89fa      	ldrh	r2, [r7, #14]
 8004754:	60da      	str	r2, [r3, #12]
 8004756:	e04f      	b.n	80047f8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004758:	2301      	movs	r3, #1
 800475a:	77bb      	strb	r3, [r7, #30]
 800475c:	e04c      	b.n	80047f8 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800475e:	7ffb      	ldrb	r3, [r7, #31]
 8004760:	2b08      	cmp	r3, #8
 8004762:	d828      	bhi.n	80047b6 <UART_SetConfig+0x462>
 8004764:	a201      	add	r2, pc, #4	@ (adr r2, 800476c <UART_SetConfig+0x418>)
 8004766:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800476a:	bf00      	nop
 800476c:	08004791 	.word	0x08004791
 8004770:	08004799 	.word	0x08004799
 8004774:	080047a1 	.word	0x080047a1
 8004778:	080047b7 	.word	0x080047b7
 800477c:	080047a7 	.word	0x080047a7
 8004780:	080047b7 	.word	0x080047b7
 8004784:	080047b7 	.word	0x080047b7
 8004788:	080047b7 	.word	0x080047b7
 800478c:	080047af 	.word	0x080047af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004790:	f7fe fdb8 	bl	8003304 <HAL_RCC_GetPCLK1Freq>
 8004794:	61b8      	str	r0, [r7, #24]
        break;
 8004796:	e013      	b.n	80047c0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004798:	f7fe fdc8 	bl	800332c <HAL_RCC_GetPCLK2Freq>
 800479c:	61b8      	str	r0, [r7, #24]
        break;
 800479e:	e00f      	b.n	80047c0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80047a0:	4b1d      	ldr	r3, [pc, #116]	@ (8004818 <UART_SetConfig+0x4c4>)
 80047a2:	61bb      	str	r3, [r7, #24]
        break;
 80047a4:	e00c      	b.n	80047c0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80047a6:	f7fe fc9b 	bl	80030e0 <HAL_RCC_GetSysClockFreq>
 80047aa:	61b8      	str	r0, [r7, #24]
        break;
 80047ac:	e008      	b.n	80047c0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80047ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80047b2:	61bb      	str	r3, [r7, #24]
        break;
 80047b4:	e004      	b.n	80047c0 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80047b6:	2300      	movs	r3, #0
 80047b8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80047ba:	2301      	movs	r3, #1
 80047bc:	77bb      	strb	r3, [r7, #30]
        break;
 80047be:	bf00      	nop
    }

    if (pclk != 0U)
 80047c0:	69bb      	ldr	r3, [r7, #24]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d018      	beq.n	80047f8 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	085a      	lsrs	r2, r3, #1
 80047cc:	69bb      	ldr	r3, [r7, #24]
 80047ce:	441a      	add	r2, r3
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80047d8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80047da:	693b      	ldr	r3, [r7, #16]
 80047dc:	2b0f      	cmp	r3, #15
 80047de:	d909      	bls.n	80047f4 <UART_SetConfig+0x4a0>
 80047e0:	693b      	ldr	r3, [r7, #16]
 80047e2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80047e6:	d205      	bcs.n	80047f4 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80047e8:	693b      	ldr	r3, [r7, #16]
 80047ea:	b29a      	uxth	r2, r3
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	60da      	str	r2, [r3, #12]
 80047f2:	e001      	b.n	80047f8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80047f4:	2301      	movs	r3, #1
 80047f6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2200      	movs	r2, #0
 80047fc:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2200      	movs	r2, #0
 8004802:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004804:	7fbb      	ldrb	r3, [r7, #30]
}
 8004806:	4618      	mov	r0, r3
 8004808:	3720      	adds	r7, #32
 800480a:	46bd      	mov	sp, r7
 800480c:	bd80      	pop	{r7, pc}
 800480e:	bf00      	nop
 8004810:	40007c00 	.word	0x40007c00
 8004814:	40023800 	.word	0x40023800
 8004818:	00f42400 	.word	0x00f42400

0800481c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800481c:	b480      	push	{r7}
 800481e:	b083      	sub	sp, #12
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004828:	f003 0308 	and.w	r3, r3, #8
 800482c:	2b00      	cmp	r3, #0
 800482e:	d00a      	beq.n	8004846 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	430a      	orrs	r2, r1
 8004844:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800484a:	f003 0301 	and.w	r3, r3, #1
 800484e:	2b00      	cmp	r3, #0
 8004850:	d00a      	beq.n	8004868 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	685b      	ldr	r3, [r3, #4]
 8004858:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	430a      	orrs	r2, r1
 8004866:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800486c:	f003 0302 	and.w	r3, r3, #2
 8004870:	2b00      	cmp	r3, #0
 8004872:	d00a      	beq.n	800488a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	430a      	orrs	r2, r1
 8004888:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800488e:	f003 0304 	and.w	r3, r3, #4
 8004892:	2b00      	cmp	r3, #0
 8004894:	d00a      	beq.n	80048ac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	430a      	orrs	r2, r1
 80048aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048b0:	f003 0310 	and.w	r3, r3, #16
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d00a      	beq.n	80048ce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	689b      	ldr	r3, [r3, #8]
 80048be:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	430a      	orrs	r2, r1
 80048cc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048d2:	f003 0320 	and.w	r3, r3, #32
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d00a      	beq.n	80048f0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	689b      	ldr	r3, [r3, #8]
 80048e0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	430a      	orrs	r2, r1
 80048ee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d01a      	beq.n	8004932 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	430a      	orrs	r2, r1
 8004910:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004916:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800491a:	d10a      	bne.n	8004932 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	430a      	orrs	r2, r1
 8004930:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004936:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800493a:	2b00      	cmp	r3, #0
 800493c:	d00a      	beq.n	8004954 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	685b      	ldr	r3, [r3, #4]
 8004944:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	430a      	orrs	r2, r1
 8004952:	605a      	str	r2, [r3, #4]
  }
}
 8004954:	bf00      	nop
 8004956:	370c      	adds	r7, #12
 8004958:	46bd      	mov	sp, r7
 800495a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495e:	4770      	bx	lr

08004960 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b098      	sub	sp, #96	@ 0x60
 8004964:	af02      	add	r7, sp, #8
 8004966:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2200      	movs	r2, #0
 800496c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004970:	f7fc fdac 	bl	80014cc <HAL_GetTick>
 8004974:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f003 0308 	and.w	r3, r3, #8
 8004980:	2b08      	cmp	r3, #8
 8004982:	d12e      	bne.n	80049e2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004984:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004988:	9300      	str	r3, [sp, #0]
 800498a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800498c:	2200      	movs	r2, #0
 800498e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004992:	6878      	ldr	r0, [r7, #4]
 8004994:	f000 f88c 	bl	8004ab0 <UART_WaitOnFlagUntilTimeout>
 8004998:	4603      	mov	r3, r0
 800499a:	2b00      	cmp	r3, #0
 800499c:	d021      	beq.n	80049e2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049a6:	e853 3f00 	ldrex	r3, [r3]
 80049aa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80049ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049ae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80049b2:	653b      	str	r3, [r7, #80]	@ 0x50
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	461a      	mov	r2, r3
 80049ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80049bc:	647b      	str	r3, [r7, #68]	@ 0x44
 80049be:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049c0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80049c2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80049c4:	e841 2300 	strex	r3, r2, [r1]
 80049c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80049ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d1e6      	bne.n	800499e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2220      	movs	r2, #32
 80049d4:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2200      	movs	r2, #0
 80049da:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80049de:	2303      	movs	r3, #3
 80049e0:	e062      	b.n	8004aa8 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f003 0304 	and.w	r3, r3, #4
 80049ec:	2b04      	cmp	r3, #4
 80049ee:	d149      	bne.n	8004a84 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80049f0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80049f4:	9300      	str	r3, [sp, #0]
 80049f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80049f8:	2200      	movs	r2, #0
 80049fa:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80049fe:	6878      	ldr	r0, [r7, #4]
 8004a00:	f000 f856 	bl	8004ab0 <UART_WaitOnFlagUntilTimeout>
 8004a04:	4603      	mov	r3, r0
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d03c      	beq.n	8004a84 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a12:	e853 3f00 	ldrex	r3, [r3]
 8004a16:	623b      	str	r3, [r7, #32]
   return(result);
 8004a18:	6a3b      	ldr	r3, [r7, #32]
 8004a1a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004a1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	461a      	mov	r2, r3
 8004a26:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004a28:	633b      	str	r3, [r7, #48]	@ 0x30
 8004a2a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a2c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004a2e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004a30:	e841 2300 	strex	r3, r2, [r1]
 8004a34:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004a36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d1e6      	bne.n	8004a0a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	3308      	adds	r3, #8
 8004a42:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a44:	693b      	ldr	r3, [r7, #16]
 8004a46:	e853 3f00 	ldrex	r3, [r3]
 8004a4a:	60fb      	str	r3, [r7, #12]
   return(result);
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	f023 0301 	bic.w	r3, r3, #1
 8004a52:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	3308      	adds	r3, #8
 8004a5a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004a5c:	61fa      	str	r2, [r7, #28]
 8004a5e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a60:	69b9      	ldr	r1, [r7, #24]
 8004a62:	69fa      	ldr	r2, [r7, #28]
 8004a64:	e841 2300 	strex	r3, r2, [r1]
 8004a68:	617b      	str	r3, [r7, #20]
   return(result);
 8004a6a:	697b      	ldr	r3, [r7, #20]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d1e5      	bne.n	8004a3c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2220      	movs	r2, #32
 8004a74:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004a80:	2303      	movs	r3, #3
 8004a82:	e011      	b.n	8004aa8 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2220      	movs	r2, #32
 8004a88:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2220      	movs	r2, #32
 8004a8e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2200      	movs	r2, #0
 8004a96:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004aa6:	2300      	movs	r3, #0
}
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	3758      	adds	r7, #88	@ 0x58
 8004aac:	46bd      	mov	sp, r7
 8004aae:	bd80      	pop	{r7, pc}

08004ab0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b084      	sub	sp, #16
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	60f8      	str	r0, [r7, #12]
 8004ab8:	60b9      	str	r1, [r7, #8]
 8004aba:	603b      	str	r3, [r7, #0]
 8004abc:	4613      	mov	r3, r2
 8004abe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ac0:	e04f      	b.n	8004b62 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ac2:	69bb      	ldr	r3, [r7, #24]
 8004ac4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ac8:	d04b      	beq.n	8004b62 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004aca:	f7fc fcff 	bl	80014cc <HAL_GetTick>
 8004ace:	4602      	mov	r2, r0
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	1ad3      	subs	r3, r2, r3
 8004ad4:	69ba      	ldr	r2, [r7, #24]
 8004ad6:	429a      	cmp	r2, r3
 8004ad8:	d302      	bcc.n	8004ae0 <UART_WaitOnFlagUntilTimeout+0x30>
 8004ada:	69bb      	ldr	r3, [r7, #24]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d101      	bne.n	8004ae4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004ae0:	2303      	movs	r3, #3
 8004ae2:	e04e      	b.n	8004b82 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f003 0304 	and.w	r3, r3, #4
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d037      	beq.n	8004b62 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004af2:	68bb      	ldr	r3, [r7, #8]
 8004af4:	2b80      	cmp	r3, #128	@ 0x80
 8004af6:	d034      	beq.n	8004b62 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	2b40      	cmp	r3, #64	@ 0x40
 8004afc:	d031      	beq.n	8004b62 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	69db      	ldr	r3, [r3, #28]
 8004b04:	f003 0308 	and.w	r3, r3, #8
 8004b08:	2b08      	cmp	r3, #8
 8004b0a:	d110      	bne.n	8004b2e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	2208      	movs	r2, #8
 8004b12:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004b14:	68f8      	ldr	r0, [r7, #12]
 8004b16:	f000 f838 	bl	8004b8a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	2208      	movs	r2, #8
 8004b1e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	2200      	movs	r2, #0
 8004b26:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	e029      	b.n	8004b82 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	69db      	ldr	r3, [r3, #28]
 8004b34:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004b38:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004b3c:	d111      	bne.n	8004b62 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004b46:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004b48:	68f8      	ldr	r0, [r7, #12]
 8004b4a:	f000 f81e 	bl	8004b8a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	2220      	movs	r2, #32
 8004b52:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	2200      	movs	r2, #0
 8004b5a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004b5e:	2303      	movs	r3, #3
 8004b60:	e00f      	b.n	8004b82 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	69da      	ldr	r2, [r3, #28]
 8004b68:	68bb      	ldr	r3, [r7, #8]
 8004b6a:	4013      	ands	r3, r2
 8004b6c:	68ba      	ldr	r2, [r7, #8]
 8004b6e:	429a      	cmp	r2, r3
 8004b70:	bf0c      	ite	eq
 8004b72:	2301      	moveq	r3, #1
 8004b74:	2300      	movne	r3, #0
 8004b76:	b2db      	uxtb	r3, r3
 8004b78:	461a      	mov	r2, r3
 8004b7a:	79fb      	ldrb	r3, [r7, #7]
 8004b7c:	429a      	cmp	r2, r3
 8004b7e:	d0a0      	beq.n	8004ac2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004b80:	2300      	movs	r3, #0
}
 8004b82:	4618      	mov	r0, r3
 8004b84:	3710      	adds	r7, #16
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bd80      	pop	{r7, pc}

08004b8a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004b8a:	b480      	push	{r7}
 8004b8c:	b095      	sub	sp, #84	@ 0x54
 8004b8e:	af00      	add	r7, sp, #0
 8004b90:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b9a:	e853 3f00 	ldrex	r3, [r3]
 8004b9e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004ba0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ba2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004ba6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	461a      	mov	r2, r3
 8004bae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004bb0:	643b      	str	r3, [r7, #64]	@ 0x40
 8004bb2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bb4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004bb6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004bb8:	e841 2300 	strex	r3, r2, [r1]
 8004bbc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004bbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d1e6      	bne.n	8004b92 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	3308      	adds	r3, #8
 8004bca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bcc:	6a3b      	ldr	r3, [r7, #32]
 8004bce:	e853 3f00 	ldrex	r3, [r3]
 8004bd2:	61fb      	str	r3, [r7, #28]
   return(result);
 8004bd4:	69fb      	ldr	r3, [r7, #28]
 8004bd6:	f023 0301 	bic.w	r3, r3, #1
 8004bda:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	3308      	adds	r3, #8
 8004be2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004be4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004be6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004be8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004bea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004bec:	e841 2300 	strex	r3, r2, [r1]
 8004bf0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004bf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d1e5      	bne.n	8004bc4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004bfc:	2b01      	cmp	r3, #1
 8004bfe:	d118      	bne.n	8004c32 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	e853 3f00 	ldrex	r3, [r3]
 8004c0c:	60bb      	str	r3, [r7, #8]
   return(result);
 8004c0e:	68bb      	ldr	r3, [r7, #8]
 8004c10:	f023 0310 	bic.w	r3, r3, #16
 8004c14:	647b      	str	r3, [r7, #68]	@ 0x44
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	461a      	mov	r2, r3
 8004c1c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004c1e:	61bb      	str	r3, [r7, #24]
 8004c20:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c22:	6979      	ldr	r1, [r7, #20]
 8004c24:	69ba      	ldr	r2, [r7, #24]
 8004c26:	e841 2300 	strex	r3, r2, [r1]
 8004c2a:	613b      	str	r3, [r7, #16]
   return(result);
 8004c2c:	693b      	ldr	r3, [r7, #16]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d1e6      	bne.n	8004c00 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2220      	movs	r2, #32
 8004c36:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2200      	movs	r2, #0
 8004c44:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004c46:	bf00      	nop
 8004c48:	3754      	adds	r7, #84	@ 0x54
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c50:	4770      	bx	lr
	...

08004c54 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004c54:	b084      	sub	sp, #16
 8004c56:	b580      	push	{r7, lr}
 8004c58:	b084      	sub	sp, #16
 8004c5a:	af00      	add	r7, sp, #0
 8004c5c:	6078      	str	r0, [r7, #4]
 8004c5e:	f107 001c 	add.w	r0, r7, #28
 8004c62:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004c66:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8004c6a:	2b01      	cmp	r3, #1
 8004c6c:	d121      	bne.n	8004cb2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c72:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	68da      	ldr	r2, [r3, #12]
 8004c7e:	4b21      	ldr	r3, [pc, #132]	@ (8004d04 <USB_CoreInit+0xb0>)
 8004c80:	4013      	ands	r3, r2
 8004c82:	687a      	ldr	r2, [r7, #4]
 8004c84:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	68db      	ldr	r3, [r3, #12]
 8004c8a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004c92:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004c96:	2b01      	cmp	r3, #1
 8004c98:	d105      	bne.n	8004ca6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	68db      	ldr	r3, [r3, #12]
 8004c9e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004ca6:	6878      	ldr	r0, [r7, #4]
 8004ca8:	f000 fa92 	bl	80051d0 <USB_CoreReset>
 8004cac:	4603      	mov	r3, r0
 8004cae:	73fb      	strb	r3, [r7, #15]
 8004cb0:	e010      	b.n	8004cd4 <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	68db      	ldr	r3, [r3, #12]
 8004cb6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004cbe:	6878      	ldr	r0, [r7, #4]
 8004cc0:	f000 fa86 	bl	80051d0 <USB_CoreReset>
 8004cc4:	4603      	mov	r3, r0
 8004cc6:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ccc:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 8004cd4:	7fbb      	ldrb	r3, [r7, #30]
 8004cd6:	2b01      	cmp	r3, #1
 8004cd8:	d10b      	bne.n	8004cf2 <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	689b      	ldr	r3, [r3, #8]
 8004cde:	f043 0206 	orr.w	r2, r3, #6
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	689b      	ldr	r3, [r3, #8]
 8004cea:	f043 0220 	orr.w	r2, r3, #32
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004cf2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	3710      	adds	r7, #16
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004cfe:	b004      	add	sp, #16
 8004d00:	4770      	bx	lr
 8004d02:	bf00      	nop
 8004d04:	ffbdffbf 	.word	0xffbdffbf

08004d08 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004d08:	b480      	push	{r7}
 8004d0a:	b083      	sub	sp, #12
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	689b      	ldr	r3, [r3, #8]
 8004d14:	f023 0201 	bic.w	r2, r3, #1
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004d1c:	2300      	movs	r3, #0
}
 8004d1e:	4618      	mov	r0, r3
 8004d20:	370c      	adds	r7, #12
 8004d22:	46bd      	mov	sp, r7
 8004d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d28:	4770      	bx	lr

08004d2a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004d2a:	b580      	push	{r7, lr}
 8004d2c:	b084      	sub	sp, #16
 8004d2e:	af00      	add	r7, sp, #0
 8004d30:	6078      	str	r0, [r7, #4]
 8004d32:	460b      	mov	r3, r1
 8004d34:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004d36:	2300      	movs	r3, #0
 8004d38:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	68db      	ldr	r3, [r3, #12]
 8004d3e:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004d46:	78fb      	ldrb	r3, [r7, #3]
 8004d48:	2b01      	cmp	r3, #1
 8004d4a:	d115      	bne.n	8004d78 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	68db      	ldr	r3, [r3, #12]
 8004d50:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004d58:	200a      	movs	r0, #10
 8004d5a:	f7fc fbc3 	bl	80014e4 <HAL_Delay>
      ms += 10U;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	330a      	adds	r3, #10
 8004d62:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004d64:	6878      	ldr	r0, [r7, #4]
 8004d66:	f000 fa25 	bl	80051b4 <USB_GetMode>
 8004d6a:	4603      	mov	r3, r0
 8004d6c:	2b01      	cmp	r3, #1
 8004d6e:	d01e      	beq.n	8004dae <USB_SetCurrentMode+0x84>
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	2bc7      	cmp	r3, #199	@ 0xc7
 8004d74:	d9f0      	bls.n	8004d58 <USB_SetCurrentMode+0x2e>
 8004d76:	e01a      	b.n	8004dae <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004d78:	78fb      	ldrb	r3, [r7, #3]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d115      	bne.n	8004daa <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	68db      	ldr	r3, [r3, #12]
 8004d82:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004d8a:	200a      	movs	r0, #10
 8004d8c:	f7fc fbaa 	bl	80014e4 <HAL_Delay>
      ms += 10U;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	330a      	adds	r3, #10
 8004d94:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004d96:	6878      	ldr	r0, [r7, #4]
 8004d98:	f000 fa0c 	bl	80051b4 <USB_GetMode>
 8004d9c:	4603      	mov	r3, r0
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d005      	beq.n	8004dae <USB_SetCurrentMode+0x84>
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	2bc7      	cmp	r3, #199	@ 0xc7
 8004da6:	d9f0      	bls.n	8004d8a <USB_SetCurrentMode+0x60>
 8004da8:	e001      	b.n	8004dae <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004daa:	2301      	movs	r3, #1
 8004dac:	e005      	b.n	8004dba <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	2bc8      	cmp	r3, #200	@ 0xc8
 8004db2:	d101      	bne.n	8004db8 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004db4:	2301      	movs	r3, #1
 8004db6:	e000      	b.n	8004dba <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004db8:	2300      	movs	r3, #0
}
 8004dba:	4618      	mov	r0, r3
 8004dbc:	3710      	adds	r7, #16
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bd80      	pop	{r7, pc}
	...

08004dc4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004dc4:	b084      	sub	sp, #16
 8004dc6:	b580      	push	{r7, lr}
 8004dc8:	b086      	sub	sp, #24
 8004dca:	af00      	add	r7, sp, #0
 8004dcc:	6078      	str	r0, [r7, #4]
 8004dce:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8004dd2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004dde:	2300      	movs	r3, #0
 8004de0:	613b      	str	r3, [r7, #16]
 8004de2:	e009      	b.n	8004df8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004de4:	687a      	ldr	r2, [r7, #4]
 8004de6:	693b      	ldr	r3, [r7, #16]
 8004de8:	3340      	adds	r3, #64	@ 0x40
 8004dea:	009b      	lsls	r3, r3, #2
 8004dec:	4413      	add	r3, r2
 8004dee:	2200      	movs	r2, #0
 8004df0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004df2:	693b      	ldr	r3, [r7, #16]
 8004df4:	3301      	adds	r3, #1
 8004df6:	613b      	str	r3, [r7, #16]
 8004df8:	693b      	ldr	r3, [r7, #16]
 8004dfa:	2b0e      	cmp	r3, #14
 8004dfc:	d9f2      	bls.n	8004de4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004dfe:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d11c      	bne.n	8004e40 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e0c:	685b      	ldr	r3, [r3, #4]
 8004e0e:	68fa      	ldr	r2, [r7, #12]
 8004e10:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004e14:	f043 0302 	orr.w	r3, r3, #2
 8004e18:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e1e:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	601a      	str	r2, [r3, #0]
 8004e3e:	e005      	b.n	8004e4c <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e44:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004e52:	461a      	mov	r2, r3
 8004e54:	2300      	movs	r3, #0
 8004e56:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004e58:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8004e5c:	2b01      	cmp	r3, #1
 8004e5e:	d10d      	bne.n	8004e7c <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004e60:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d104      	bne.n	8004e72 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004e68:	2100      	movs	r1, #0
 8004e6a:	6878      	ldr	r0, [r7, #4]
 8004e6c:	f000 f968 	bl	8005140 <USB_SetDevSpeed>
 8004e70:	e008      	b.n	8004e84 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004e72:	2101      	movs	r1, #1
 8004e74:	6878      	ldr	r0, [r7, #4]
 8004e76:	f000 f963 	bl	8005140 <USB_SetDevSpeed>
 8004e7a:	e003      	b.n	8004e84 <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004e7c:	2103      	movs	r1, #3
 8004e7e:	6878      	ldr	r0, [r7, #4]
 8004e80:	f000 f95e 	bl	8005140 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004e84:	2110      	movs	r1, #16
 8004e86:	6878      	ldr	r0, [r7, #4]
 8004e88:	f000 f8fa 	bl	8005080 <USB_FlushTxFifo>
 8004e8c:	4603      	mov	r3, r0
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d001      	beq.n	8004e96 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8004e92:	2301      	movs	r3, #1
 8004e94:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004e96:	6878      	ldr	r0, [r7, #4]
 8004e98:	f000 f924 	bl	80050e4 <USB_FlushRxFifo>
 8004e9c:	4603      	mov	r3, r0
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d001      	beq.n	8004ea6 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004eac:	461a      	mov	r2, r3
 8004eae:	2300      	movs	r3, #0
 8004eb0:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004eb8:	461a      	mov	r2, r3
 8004eba:	2300      	movs	r3, #0
 8004ebc:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ec4:	461a      	mov	r2, r3
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004eca:	2300      	movs	r3, #0
 8004ecc:	613b      	str	r3, [r7, #16]
 8004ece:	e043      	b.n	8004f58 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004ed0:	693b      	ldr	r3, [r7, #16]
 8004ed2:	015a      	lsls	r2, r3, #5
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	4413      	add	r3, r2
 8004ed8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004ee2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004ee6:	d118      	bne.n	8004f1a <USB_DevInit+0x156>
    {
      if (i == 0U)
 8004ee8:	693b      	ldr	r3, [r7, #16]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d10a      	bne.n	8004f04 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004eee:	693b      	ldr	r3, [r7, #16]
 8004ef0:	015a      	lsls	r2, r3, #5
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	4413      	add	r3, r2
 8004ef6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004efa:	461a      	mov	r2, r3
 8004efc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004f00:	6013      	str	r3, [r2, #0]
 8004f02:	e013      	b.n	8004f2c <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004f04:	693b      	ldr	r3, [r7, #16]
 8004f06:	015a      	lsls	r2, r3, #5
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	4413      	add	r3, r2
 8004f0c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f10:	461a      	mov	r2, r3
 8004f12:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004f16:	6013      	str	r3, [r2, #0]
 8004f18:	e008      	b.n	8004f2c <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004f1a:	693b      	ldr	r3, [r7, #16]
 8004f1c:	015a      	lsls	r2, r3, #5
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	4413      	add	r3, r2
 8004f22:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f26:	461a      	mov	r2, r3
 8004f28:	2300      	movs	r3, #0
 8004f2a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004f2c:	693b      	ldr	r3, [r7, #16]
 8004f2e:	015a      	lsls	r2, r3, #5
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	4413      	add	r3, r2
 8004f34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f38:	461a      	mov	r2, r3
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004f3e:	693b      	ldr	r3, [r7, #16]
 8004f40:	015a      	lsls	r2, r3, #5
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	4413      	add	r3, r2
 8004f46:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f4a:	461a      	mov	r2, r3
 8004f4c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004f50:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004f52:	693b      	ldr	r3, [r7, #16]
 8004f54:	3301      	adds	r3, #1
 8004f56:	613b      	str	r3, [r7, #16]
 8004f58:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004f5c:	461a      	mov	r2, r3
 8004f5e:	693b      	ldr	r3, [r7, #16]
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d3b5      	bcc.n	8004ed0 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004f64:	2300      	movs	r3, #0
 8004f66:	613b      	str	r3, [r7, #16]
 8004f68:	e043      	b.n	8004ff2 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004f6a:	693b      	ldr	r3, [r7, #16]
 8004f6c:	015a      	lsls	r2, r3, #5
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	4413      	add	r3, r2
 8004f72:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004f7c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004f80:	d118      	bne.n	8004fb4 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8004f82:	693b      	ldr	r3, [r7, #16]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d10a      	bne.n	8004f9e <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004f88:	693b      	ldr	r3, [r7, #16]
 8004f8a:	015a      	lsls	r2, r3, #5
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	4413      	add	r3, r2
 8004f90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f94:	461a      	mov	r2, r3
 8004f96:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004f9a:	6013      	str	r3, [r2, #0]
 8004f9c:	e013      	b.n	8004fc6 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004f9e:	693b      	ldr	r3, [r7, #16]
 8004fa0:	015a      	lsls	r2, r3, #5
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	4413      	add	r3, r2
 8004fa6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004faa:	461a      	mov	r2, r3
 8004fac:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004fb0:	6013      	str	r3, [r2, #0]
 8004fb2:	e008      	b.n	8004fc6 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004fb4:	693b      	ldr	r3, [r7, #16]
 8004fb6:	015a      	lsls	r2, r3, #5
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	4413      	add	r3, r2
 8004fbc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004fc0:	461a      	mov	r2, r3
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004fc6:	693b      	ldr	r3, [r7, #16]
 8004fc8:	015a      	lsls	r2, r3, #5
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	4413      	add	r3, r2
 8004fce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004fd2:	461a      	mov	r2, r3
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004fd8:	693b      	ldr	r3, [r7, #16]
 8004fda:	015a      	lsls	r2, r3, #5
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	4413      	add	r3, r2
 8004fe0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004fe4:	461a      	mov	r2, r3
 8004fe6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004fea:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004fec:	693b      	ldr	r3, [r7, #16]
 8004fee:	3301      	adds	r3, #1
 8004ff0:	613b      	str	r3, [r7, #16]
 8004ff2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004ff6:	461a      	mov	r2, r3
 8004ff8:	693b      	ldr	r3, [r7, #16]
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d3b5      	bcc.n	8004f6a <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005004:	691b      	ldr	r3, [r3, #16]
 8005006:	68fa      	ldr	r2, [r7, #12]
 8005008:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800500c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005010:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2200      	movs	r2, #0
 8005016:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800501e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005020:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005024:	2b00      	cmp	r3, #0
 8005026:	d105      	bne.n	8005034 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	699b      	ldr	r3, [r3, #24]
 800502c:	f043 0210 	orr.w	r2, r3, #16
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	699a      	ldr	r2, [r3, #24]
 8005038:	4b0f      	ldr	r3, [pc, #60]	@ (8005078 <USB_DevInit+0x2b4>)
 800503a:	4313      	orrs	r3, r2
 800503c:	687a      	ldr	r2, [r7, #4]
 800503e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005040:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8005044:	2b00      	cmp	r3, #0
 8005046:	d005      	beq.n	8005054 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	699b      	ldr	r3, [r3, #24]
 800504c:	f043 0208 	orr.w	r2, r3, #8
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005054:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005058:	2b01      	cmp	r3, #1
 800505a:	d105      	bne.n	8005068 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	699a      	ldr	r2, [r3, #24]
 8005060:	4b06      	ldr	r3, [pc, #24]	@ (800507c <USB_DevInit+0x2b8>)
 8005062:	4313      	orrs	r3, r2
 8005064:	687a      	ldr	r2, [r7, #4]
 8005066:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005068:	7dfb      	ldrb	r3, [r7, #23]
}
 800506a:	4618      	mov	r0, r3
 800506c:	3718      	adds	r7, #24
 800506e:	46bd      	mov	sp, r7
 8005070:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005074:	b004      	add	sp, #16
 8005076:	4770      	bx	lr
 8005078:	803c3800 	.word	0x803c3800
 800507c:	40000004 	.word	0x40000004

08005080 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005080:	b480      	push	{r7}
 8005082:	b085      	sub	sp, #20
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
 8005088:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800508a:	2300      	movs	r3, #0
 800508c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	3301      	adds	r3, #1
 8005092:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800509a:	d901      	bls.n	80050a0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800509c:	2303      	movs	r3, #3
 800509e:	e01b      	b.n	80050d8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	691b      	ldr	r3, [r3, #16]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	daf2      	bge.n	800508e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80050a8:	2300      	movs	r3, #0
 80050aa:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	019b      	lsls	r3, r3, #6
 80050b0:	f043 0220 	orr.w	r2, r3, #32
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	3301      	adds	r3, #1
 80050bc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80050c4:	d901      	bls.n	80050ca <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80050c6:	2303      	movs	r3, #3
 80050c8:	e006      	b.n	80050d8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	691b      	ldr	r3, [r3, #16]
 80050ce:	f003 0320 	and.w	r3, r3, #32
 80050d2:	2b20      	cmp	r3, #32
 80050d4:	d0f0      	beq.n	80050b8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80050d6:	2300      	movs	r3, #0
}
 80050d8:	4618      	mov	r0, r3
 80050da:	3714      	adds	r7, #20
 80050dc:	46bd      	mov	sp, r7
 80050de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e2:	4770      	bx	lr

080050e4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80050e4:	b480      	push	{r7}
 80050e6:	b085      	sub	sp, #20
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80050ec:	2300      	movs	r3, #0
 80050ee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	3301      	adds	r3, #1
 80050f4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80050fc:	d901      	bls.n	8005102 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80050fe:	2303      	movs	r3, #3
 8005100:	e018      	b.n	8005134 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	691b      	ldr	r3, [r3, #16]
 8005106:	2b00      	cmp	r3, #0
 8005108:	daf2      	bge.n	80050f0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800510a:	2300      	movs	r3, #0
 800510c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2210      	movs	r2, #16
 8005112:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	3301      	adds	r3, #1
 8005118:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005120:	d901      	bls.n	8005126 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005122:	2303      	movs	r3, #3
 8005124:	e006      	b.n	8005134 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	691b      	ldr	r3, [r3, #16]
 800512a:	f003 0310 	and.w	r3, r3, #16
 800512e:	2b10      	cmp	r3, #16
 8005130:	d0f0      	beq.n	8005114 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005132:	2300      	movs	r3, #0
}
 8005134:	4618      	mov	r0, r3
 8005136:	3714      	adds	r7, #20
 8005138:	46bd      	mov	sp, r7
 800513a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513e:	4770      	bx	lr

08005140 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005140:	b480      	push	{r7}
 8005142:	b085      	sub	sp, #20
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
 8005148:	460b      	mov	r3, r1
 800514a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005156:	681a      	ldr	r2, [r3, #0]
 8005158:	78fb      	ldrb	r3, [r7, #3]
 800515a:	68f9      	ldr	r1, [r7, #12]
 800515c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005160:	4313      	orrs	r3, r2
 8005162:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005164:	2300      	movs	r3, #0
}
 8005166:	4618      	mov	r0, r3
 8005168:	3714      	adds	r7, #20
 800516a:	46bd      	mov	sp, r7
 800516c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005170:	4770      	bx	lr

08005172 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005172:	b480      	push	{r7}
 8005174:	b085      	sub	sp, #20
 8005176:	af00      	add	r7, sp, #0
 8005178:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	68fa      	ldr	r2, [r7, #12]
 8005188:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800518c:	f023 0303 	bic.w	r3, r3, #3
 8005190:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005198:	685b      	ldr	r3, [r3, #4]
 800519a:	68fa      	ldr	r2, [r7, #12]
 800519c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80051a0:	f043 0302 	orr.w	r3, r3, #2
 80051a4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80051a6:	2300      	movs	r3, #0
}
 80051a8:	4618      	mov	r0, r3
 80051aa:	3714      	adds	r7, #20
 80051ac:	46bd      	mov	sp, r7
 80051ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b2:	4770      	bx	lr

080051b4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80051b4:	b480      	push	{r7}
 80051b6:	b083      	sub	sp, #12
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	695b      	ldr	r3, [r3, #20]
 80051c0:	f003 0301 	and.w	r3, r3, #1
}
 80051c4:	4618      	mov	r0, r3
 80051c6:	370c      	adds	r7, #12
 80051c8:	46bd      	mov	sp, r7
 80051ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ce:	4770      	bx	lr

080051d0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80051d0:	b480      	push	{r7}
 80051d2:	b085      	sub	sp, #20
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80051d8:	2300      	movs	r3, #0
 80051da:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	3301      	adds	r3, #1
 80051e0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80051e8:	d901      	bls.n	80051ee <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80051ea:	2303      	movs	r3, #3
 80051ec:	e022      	b.n	8005234 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	691b      	ldr	r3, [r3, #16]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	daf2      	bge.n	80051dc <USB_CoreReset+0xc>

  count = 10U;
 80051f6:	230a      	movs	r3, #10
 80051f8:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 80051fa:	e002      	b.n	8005202 <USB_CoreReset+0x32>
  {
    count--;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	3b01      	subs	r3, #1
 8005200:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d1f9      	bne.n	80051fc <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	691b      	ldr	r3, [r3, #16]
 800520c:	f043 0201 	orr.w	r2, r3, #1
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	3301      	adds	r3, #1
 8005218:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005220:	d901      	bls.n	8005226 <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 8005222:	2303      	movs	r3, #3
 8005224:	e006      	b.n	8005234 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	691b      	ldr	r3, [r3, #16]
 800522a:	f003 0301 	and.w	r3, r3, #1
 800522e:	2b01      	cmp	r3, #1
 8005230:	d0f0      	beq.n	8005214 <USB_CoreReset+0x44>

  return HAL_OK;
 8005232:	2300      	movs	r3, #0
}
 8005234:	4618      	mov	r0, r3
 8005236:	3714      	adds	r7, #20
 8005238:	46bd      	mov	sp, r7
 800523a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523e:	4770      	bx	lr

08005240 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005240:	b480      	push	{r7}
 8005242:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8005244:	bf00      	nop
 8005246:	46bd      	mov	sp, r7
 8005248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524c:	4770      	bx	lr
	...

08005250 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005250:	b480      	push	{r7}
 8005252:	b085      	sub	sp, #20
 8005254:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005256:	f3ef 8305 	mrs	r3, IPSR
 800525a:	60bb      	str	r3, [r7, #8]
  return(result);
 800525c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800525e:	2b00      	cmp	r3, #0
 8005260:	d10f      	bne.n	8005282 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005262:	f3ef 8310 	mrs	r3, PRIMASK
 8005266:	607b      	str	r3, [r7, #4]
  return(result);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d105      	bne.n	800527a <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800526e:	f3ef 8311 	mrs	r3, BASEPRI
 8005272:	603b      	str	r3, [r7, #0]
  return(result);
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d007      	beq.n	800528a <osKernelInitialize+0x3a>
 800527a:	4b0e      	ldr	r3, [pc, #56]	@ (80052b4 <osKernelInitialize+0x64>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	2b02      	cmp	r3, #2
 8005280:	d103      	bne.n	800528a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8005282:	f06f 0305 	mvn.w	r3, #5
 8005286:	60fb      	str	r3, [r7, #12]
 8005288:	e00c      	b.n	80052a4 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800528a:	4b0a      	ldr	r3, [pc, #40]	@ (80052b4 <osKernelInitialize+0x64>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d105      	bne.n	800529e <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005292:	4b08      	ldr	r3, [pc, #32]	@ (80052b4 <osKernelInitialize+0x64>)
 8005294:	2201      	movs	r2, #1
 8005296:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005298:	2300      	movs	r3, #0
 800529a:	60fb      	str	r3, [r7, #12]
 800529c:	e002      	b.n	80052a4 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800529e:	f04f 33ff 	mov.w	r3, #4294967295
 80052a2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80052a4:	68fb      	ldr	r3, [r7, #12]
}
 80052a6:	4618      	mov	r0, r3
 80052a8:	3714      	adds	r7, #20
 80052aa:	46bd      	mov	sp, r7
 80052ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b0:	4770      	bx	lr
 80052b2:	bf00      	nop
 80052b4:	200009a8 	.word	0x200009a8

080052b8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b084      	sub	sp, #16
 80052bc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80052be:	f3ef 8305 	mrs	r3, IPSR
 80052c2:	60bb      	str	r3, [r7, #8]
  return(result);
 80052c4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d10f      	bne.n	80052ea <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80052ca:	f3ef 8310 	mrs	r3, PRIMASK
 80052ce:	607b      	str	r3, [r7, #4]
  return(result);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d105      	bne.n	80052e2 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80052d6:	f3ef 8311 	mrs	r3, BASEPRI
 80052da:	603b      	str	r3, [r7, #0]
  return(result);
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d007      	beq.n	80052f2 <osKernelStart+0x3a>
 80052e2:	4b0f      	ldr	r3, [pc, #60]	@ (8005320 <osKernelStart+0x68>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	2b02      	cmp	r3, #2
 80052e8:	d103      	bne.n	80052f2 <osKernelStart+0x3a>
    stat = osErrorISR;
 80052ea:	f06f 0305 	mvn.w	r3, #5
 80052ee:	60fb      	str	r3, [r7, #12]
 80052f0:	e010      	b.n	8005314 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 80052f2:	4b0b      	ldr	r3, [pc, #44]	@ (8005320 <osKernelStart+0x68>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	2b01      	cmp	r3, #1
 80052f8:	d109      	bne.n	800530e <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80052fa:	f7ff ffa1 	bl	8005240 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80052fe:	4b08      	ldr	r3, [pc, #32]	@ (8005320 <osKernelStart+0x68>)
 8005300:	2202      	movs	r2, #2
 8005302:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005304:	f001 fd96 	bl	8006e34 <vTaskStartScheduler>
      stat = osOK;
 8005308:	2300      	movs	r3, #0
 800530a:	60fb      	str	r3, [r7, #12]
 800530c:	e002      	b.n	8005314 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800530e:	f04f 33ff 	mov.w	r3, #4294967295
 8005312:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005314:	68fb      	ldr	r3, [r7, #12]
}
 8005316:	4618      	mov	r0, r3
 8005318:	3710      	adds	r7, #16
 800531a:	46bd      	mov	sp, r7
 800531c:	bd80      	pop	{r7, pc}
 800531e:	bf00      	nop
 8005320:	200009a8 	.word	0x200009a8

08005324 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005324:	b580      	push	{r7, lr}
 8005326:	b090      	sub	sp, #64	@ 0x40
 8005328:	af04      	add	r7, sp, #16
 800532a:	60f8      	str	r0, [r7, #12]
 800532c:	60b9      	str	r1, [r7, #8]
 800532e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005330:	2300      	movs	r3, #0
 8005332:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005334:	f3ef 8305 	mrs	r3, IPSR
 8005338:	61fb      	str	r3, [r7, #28]
  return(result);
 800533a:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800533c:	2b00      	cmp	r3, #0
 800533e:	f040 808f 	bne.w	8005460 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005342:	f3ef 8310 	mrs	r3, PRIMASK
 8005346:	61bb      	str	r3, [r7, #24]
  return(result);
 8005348:	69bb      	ldr	r3, [r7, #24]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d105      	bne.n	800535a <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800534e:	f3ef 8311 	mrs	r3, BASEPRI
 8005352:	617b      	str	r3, [r7, #20]
  return(result);
 8005354:	697b      	ldr	r3, [r7, #20]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d003      	beq.n	8005362 <osThreadNew+0x3e>
 800535a:	4b44      	ldr	r3, [pc, #272]	@ (800546c <osThreadNew+0x148>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	2b02      	cmp	r3, #2
 8005360:	d07e      	beq.n	8005460 <osThreadNew+0x13c>
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d07b      	beq.n	8005460 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8005368:	2380      	movs	r3, #128	@ 0x80
 800536a:	62bb      	str	r3, [r7, #40]	@ 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800536c:	2318      	movs	r3, #24
 800536e:	627b      	str	r3, [r7, #36]	@ 0x24

    name = NULL;
 8005370:	2300      	movs	r3, #0
 8005372:	62fb      	str	r3, [r7, #44]	@ 0x2c
    mem  = -1;
 8005374:	f04f 33ff 	mov.w	r3, #4294967295
 8005378:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d045      	beq.n	800540c <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d002      	beq.n	800538e <osThreadNew+0x6a>
        name = attr->name;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	699b      	ldr	r3, [r3, #24]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d002      	beq.n	800539c <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	699b      	ldr	r3, [r3, #24]
 800539a:	627b      	str	r3, [r7, #36]	@ 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800539c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d008      	beq.n	80053b4 <osThreadNew+0x90>
 80053a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053a4:	2b38      	cmp	r3, #56	@ 0x38
 80053a6:	d805      	bhi.n	80053b4 <osThreadNew+0x90>
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	685b      	ldr	r3, [r3, #4]
 80053ac:	f003 0301 	and.w	r3, r3, #1
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d001      	beq.n	80053b8 <osThreadNew+0x94>
        return (NULL);
 80053b4:	2300      	movs	r3, #0
 80053b6:	e054      	b.n	8005462 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	695b      	ldr	r3, [r3, #20]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d003      	beq.n	80053c8 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	695b      	ldr	r3, [r3, #20]
 80053c4:	089b      	lsrs	r3, r3, #2
 80053c6:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	689b      	ldr	r3, [r3, #8]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d00e      	beq.n	80053ee <osThreadNew+0xca>
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	68db      	ldr	r3, [r3, #12]
 80053d4:	2ba7      	cmp	r3, #167	@ 0xa7
 80053d6:	d90a      	bls.n	80053ee <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d006      	beq.n	80053ee <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	695b      	ldr	r3, [r3, #20]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d002      	beq.n	80053ee <osThreadNew+0xca>
        mem = 1;
 80053e8:	2301      	movs	r3, #1
 80053ea:	623b      	str	r3, [r7, #32]
 80053ec:	e010      	b.n	8005410 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	689b      	ldr	r3, [r3, #8]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d10c      	bne.n	8005410 <osThreadNew+0xec>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	68db      	ldr	r3, [r3, #12]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d108      	bne.n	8005410 <osThreadNew+0xec>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	691b      	ldr	r3, [r3, #16]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d104      	bne.n	8005410 <osThreadNew+0xec>
          mem = 0;
 8005406:	2300      	movs	r3, #0
 8005408:	623b      	str	r3, [r7, #32]
 800540a:	e001      	b.n	8005410 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 800540c:	2300      	movs	r3, #0
 800540e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8005410:	6a3b      	ldr	r3, [r7, #32]
 8005412:	2b01      	cmp	r3, #1
 8005414:	d110      	bne.n	8005438 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800541a:	687a      	ldr	r2, [r7, #4]
 800541c:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800541e:	9202      	str	r2, [sp, #8]
 8005420:	9301      	str	r3, [sp, #4]
 8005422:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005424:	9300      	str	r3, [sp, #0]
 8005426:	68bb      	ldr	r3, [r7, #8]
 8005428:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800542a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800542c:	68f8      	ldr	r0, [r7, #12]
 800542e:	f001 fb03 	bl	8006a38 <xTaskCreateStatic>
 8005432:	4603      	mov	r3, r0
 8005434:	613b      	str	r3, [r7, #16]
 8005436:	e013      	b.n	8005460 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8005438:	6a3b      	ldr	r3, [r7, #32]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d110      	bne.n	8005460 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800543e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005440:	b29a      	uxth	r2, r3
 8005442:	f107 0310 	add.w	r3, r7, #16
 8005446:	9301      	str	r3, [sp, #4]
 8005448:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800544a:	9300      	str	r3, [sp, #0]
 800544c:	68bb      	ldr	r3, [r7, #8]
 800544e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005450:	68f8      	ldr	r0, [r7, #12]
 8005452:	f001 fb57 	bl	8006b04 <xTaskCreate>
 8005456:	4603      	mov	r3, r0
 8005458:	2b01      	cmp	r3, #1
 800545a:	d001      	beq.n	8005460 <osThreadNew+0x13c>
          hTask = NULL;
 800545c:	2300      	movs	r3, #0
 800545e:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005460:	693b      	ldr	r3, [r7, #16]
}
 8005462:	4618      	mov	r0, r3
 8005464:	3730      	adds	r7, #48	@ 0x30
 8005466:	46bd      	mov	sp, r7
 8005468:	bd80      	pop	{r7, pc}
 800546a:	bf00      	nop
 800546c:	200009a8 	.word	0x200009a8

08005470 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8005470:	b580      	push	{r7, lr}
 8005472:	b086      	sub	sp, #24
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005478:	f3ef 8305 	mrs	r3, IPSR
 800547c:	613b      	str	r3, [r7, #16]
  return(result);
 800547e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005480:	2b00      	cmp	r3, #0
 8005482:	d10f      	bne.n	80054a4 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005484:	f3ef 8310 	mrs	r3, PRIMASK
 8005488:	60fb      	str	r3, [r7, #12]
  return(result);
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d105      	bne.n	800549c <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005490:	f3ef 8311 	mrs	r3, BASEPRI
 8005494:	60bb      	str	r3, [r7, #8]
  return(result);
 8005496:	68bb      	ldr	r3, [r7, #8]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d007      	beq.n	80054ac <osDelay+0x3c>
 800549c:	4b0a      	ldr	r3, [pc, #40]	@ (80054c8 <osDelay+0x58>)
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	2b02      	cmp	r3, #2
 80054a2:	d103      	bne.n	80054ac <osDelay+0x3c>
    stat = osErrorISR;
 80054a4:	f06f 0305 	mvn.w	r3, #5
 80054a8:	617b      	str	r3, [r7, #20]
 80054aa:	e007      	b.n	80054bc <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80054ac:	2300      	movs	r3, #0
 80054ae:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d002      	beq.n	80054bc <osDelay+0x4c>
      vTaskDelay(ticks);
 80054b6:	6878      	ldr	r0, [r7, #4]
 80054b8:	f001 fc84 	bl	8006dc4 <vTaskDelay>
    }
  }

  return (stat);
 80054bc:	697b      	ldr	r3, [r7, #20]
}
 80054be:	4618      	mov	r0, r3
 80054c0:	3718      	adds	r7, #24
 80054c2:	46bd      	mov	sp, r7
 80054c4:	bd80      	pop	{r7, pc}
 80054c6:	bf00      	nop
 80054c8:	200009a8 	.word	0x200009a8

080054cc <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b08c      	sub	sp, #48	@ 0x30
 80054d0:	af02      	add	r7, sp, #8
 80054d2:	60f8      	str	r0, [r7, #12]
 80054d4:	60b9      	str	r1, [r7, #8]
 80054d6:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80054d8:	2300      	movs	r3, #0
 80054da:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80054dc:	f3ef 8305 	mrs	r3, IPSR
 80054e0:	61bb      	str	r3, [r7, #24]
  return(result);
 80054e2:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	f040 8086 	bne.w	80055f6 <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80054ea:	f3ef 8310 	mrs	r3, PRIMASK
 80054ee:	617b      	str	r3, [r7, #20]
  return(result);
 80054f0:	697b      	ldr	r3, [r7, #20]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d105      	bne.n	8005502 <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80054f6:	f3ef 8311 	mrs	r3, BASEPRI
 80054fa:	613b      	str	r3, [r7, #16]
  return(result);
 80054fc:	693b      	ldr	r3, [r7, #16]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d003      	beq.n	800550a <osSemaphoreNew+0x3e>
 8005502:	4b3f      	ldr	r3, [pc, #252]	@ (8005600 <osSemaphoreNew+0x134>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	2b02      	cmp	r3, #2
 8005508:	d075      	beq.n	80055f6 <osSemaphoreNew+0x12a>
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d072      	beq.n	80055f6 <osSemaphoreNew+0x12a>
 8005510:	68ba      	ldr	r2, [r7, #8]
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	429a      	cmp	r2, r3
 8005516:	d86e      	bhi.n	80055f6 <osSemaphoreNew+0x12a>
    mem = -1;
 8005518:	f04f 33ff 	mov.w	r3, #4294967295
 800551c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d015      	beq.n	8005550 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	689b      	ldr	r3, [r3, #8]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d006      	beq.n	800553a <osSemaphoreNew+0x6e>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	68db      	ldr	r3, [r3, #12]
 8005530:	2b4f      	cmp	r3, #79	@ 0x4f
 8005532:	d902      	bls.n	800553a <osSemaphoreNew+0x6e>
        mem = 1;
 8005534:	2301      	movs	r3, #1
 8005536:	623b      	str	r3, [r7, #32]
 8005538:	e00c      	b.n	8005554 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	689b      	ldr	r3, [r3, #8]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d108      	bne.n	8005554 <osSemaphoreNew+0x88>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	68db      	ldr	r3, [r3, #12]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d104      	bne.n	8005554 <osSemaphoreNew+0x88>
          mem = 0;
 800554a:	2300      	movs	r3, #0
 800554c:	623b      	str	r3, [r7, #32]
 800554e:	e001      	b.n	8005554 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 8005550:	2300      	movs	r3, #0
 8005552:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8005554:	6a3b      	ldr	r3, [r7, #32]
 8005556:	f1b3 3fff 	cmp.w	r3, #4294967295
 800555a:	d04c      	beq.n	80055f6 <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	2b01      	cmp	r3, #1
 8005560:	d128      	bne.n	80055b4 <osSemaphoreNew+0xe8>
        if (mem == 1) {
 8005562:	6a3b      	ldr	r3, [r7, #32]
 8005564:	2b01      	cmp	r3, #1
 8005566:	d10a      	bne.n	800557e <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	689b      	ldr	r3, [r3, #8]
 800556c:	2203      	movs	r2, #3
 800556e:	9200      	str	r2, [sp, #0]
 8005570:	2200      	movs	r2, #0
 8005572:	2100      	movs	r1, #0
 8005574:	2001      	movs	r0, #1
 8005576:	f000 fa57 	bl	8005a28 <xQueueGenericCreateStatic>
 800557a:	6278      	str	r0, [r7, #36]	@ 0x24
 800557c:	e005      	b.n	800558a <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 800557e:	2203      	movs	r2, #3
 8005580:	2100      	movs	r1, #0
 8005582:	2001      	movs	r0, #1
 8005584:	f000 fad7 	bl	8005b36 <xQueueGenericCreate>
 8005588:	6278      	str	r0, [r7, #36]	@ 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800558a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800558c:	2b00      	cmp	r3, #0
 800558e:	d022      	beq.n	80055d6 <osSemaphoreNew+0x10a>
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d01f      	beq.n	80055d6 <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8005596:	2300      	movs	r3, #0
 8005598:	2200      	movs	r2, #0
 800559a:	2100      	movs	r1, #0
 800559c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800559e:	f000 fba7 	bl	8005cf0 <xQueueGenericSend>
 80055a2:	4603      	mov	r3, r0
 80055a4:	2b01      	cmp	r3, #1
 80055a6:	d016      	beq.n	80055d6 <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 80055a8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80055aa:	f001 f86f 	bl	800668c <vQueueDelete>
            hSemaphore = NULL;
 80055ae:	2300      	movs	r3, #0
 80055b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80055b2:	e010      	b.n	80055d6 <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 80055b4:	6a3b      	ldr	r3, [r7, #32]
 80055b6:	2b01      	cmp	r3, #1
 80055b8:	d108      	bne.n	80055cc <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	689b      	ldr	r3, [r3, #8]
 80055be:	461a      	mov	r2, r3
 80055c0:	68b9      	ldr	r1, [r7, #8]
 80055c2:	68f8      	ldr	r0, [r7, #12]
 80055c4:	f000 fb1d 	bl	8005c02 <xQueueCreateCountingSemaphoreStatic>
 80055c8:	6278      	str	r0, [r7, #36]	@ 0x24
 80055ca:	e004      	b.n	80055d6 <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80055cc:	68b9      	ldr	r1, [r7, #8]
 80055ce:	68f8      	ldr	r0, [r7, #12]
 80055d0:	f000 fb54 	bl	8005c7c <xQueueCreateCountingSemaphore>
 80055d4:	6278      	str	r0, [r7, #36]	@ 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80055d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d00c      	beq.n	80055f6 <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d003      	beq.n	80055ea <osSemaphoreNew+0x11e>
          name = attr->name;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	61fb      	str	r3, [r7, #28]
 80055e8:	e001      	b.n	80055ee <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 80055ea:	2300      	movs	r3, #0
 80055ec:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80055ee:	69f9      	ldr	r1, [r7, #28]
 80055f0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80055f2:	f001 f999 	bl	8006928 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80055f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80055f8:	4618      	mov	r0, r3
 80055fa:	3728      	adds	r7, #40	@ 0x28
 80055fc:	46bd      	mov	sp, r7
 80055fe:	bd80      	pop	{r7, pc}
 8005600:	200009a8 	.word	0x200009a8

08005604 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8005604:	b580      	push	{r7, lr}
 8005606:	b088      	sub	sp, #32
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
 800560c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8005612:	2300      	movs	r3, #0
 8005614:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8005616:	69bb      	ldr	r3, [r7, #24]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d103      	bne.n	8005624 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800561c:	f06f 0303 	mvn.w	r3, #3
 8005620:	61fb      	str	r3, [r7, #28]
 8005622:	e04b      	b.n	80056bc <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005624:	f3ef 8305 	mrs	r3, IPSR
 8005628:	617b      	str	r3, [r7, #20]
  return(result);
 800562a:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800562c:	2b00      	cmp	r3, #0
 800562e:	d10f      	bne.n	8005650 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005630:	f3ef 8310 	mrs	r3, PRIMASK
 8005634:	613b      	str	r3, [r7, #16]
  return(result);
 8005636:	693b      	ldr	r3, [r7, #16]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d105      	bne.n	8005648 <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800563c:	f3ef 8311 	mrs	r3, BASEPRI
 8005640:	60fb      	str	r3, [r7, #12]
  return(result);
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d026      	beq.n	8005696 <osSemaphoreAcquire+0x92>
 8005648:	4b1f      	ldr	r3, [pc, #124]	@ (80056c8 <osSemaphoreAcquire+0xc4>)
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	2b02      	cmp	r3, #2
 800564e:	d122      	bne.n	8005696 <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d003      	beq.n	800565e <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 8005656:	f06f 0303 	mvn.w	r3, #3
 800565a:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800565c:	e02d      	b.n	80056ba <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 800565e:	2300      	movs	r3, #0
 8005660:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8005662:	f107 0308 	add.w	r3, r7, #8
 8005666:	461a      	mov	r2, r3
 8005668:	2100      	movs	r1, #0
 800566a:	69b8      	ldr	r0, [r7, #24]
 800566c:	f000 ff86 	bl	800657c <xQueueReceiveFromISR>
 8005670:	4603      	mov	r3, r0
 8005672:	2b01      	cmp	r3, #1
 8005674:	d003      	beq.n	800567e <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 8005676:	f06f 0302 	mvn.w	r3, #2
 800567a:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800567c:	e01d      	b.n	80056ba <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 800567e:	68bb      	ldr	r3, [r7, #8]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d01a      	beq.n	80056ba <osSemaphoreAcquire+0xb6>
 8005684:	4b11      	ldr	r3, [pc, #68]	@ (80056cc <osSemaphoreAcquire+0xc8>)
 8005686:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800568a:	601a      	str	r2, [r3, #0]
 800568c:	f3bf 8f4f 	dsb	sy
 8005690:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 8005694:	e011      	b.n	80056ba <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8005696:	6839      	ldr	r1, [r7, #0]
 8005698:	69b8      	ldr	r0, [r7, #24]
 800569a:	f000 fe57 	bl	800634c <xQueueSemaphoreTake>
 800569e:	4603      	mov	r3, r0
 80056a0:	2b01      	cmp	r3, #1
 80056a2:	d00b      	beq.n	80056bc <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d003      	beq.n	80056b2 <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 80056aa:	f06f 0301 	mvn.w	r3, #1
 80056ae:	61fb      	str	r3, [r7, #28]
 80056b0:	e004      	b.n	80056bc <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 80056b2:	f06f 0302 	mvn.w	r3, #2
 80056b6:	61fb      	str	r3, [r7, #28]
 80056b8:	e000      	b.n	80056bc <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 80056ba:	bf00      	nop
      }
    }
  }

  return (stat);
 80056bc:	69fb      	ldr	r3, [r7, #28]
}
 80056be:	4618      	mov	r0, r3
 80056c0:	3720      	adds	r7, #32
 80056c2:	46bd      	mov	sp, r7
 80056c4:	bd80      	pop	{r7, pc}
 80056c6:	bf00      	nop
 80056c8:	200009a8 	.word	0x200009a8
 80056cc:	e000ed04 	.word	0xe000ed04

080056d0 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b088      	sub	sp, #32
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80056dc:	2300      	movs	r3, #0
 80056de:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 80056e0:	69bb      	ldr	r3, [r7, #24]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d103      	bne.n	80056ee <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 80056e6:	f06f 0303 	mvn.w	r3, #3
 80056ea:	61fb      	str	r3, [r7, #28]
 80056ec:	e03e      	b.n	800576c <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80056ee:	f3ef 8305 	mrs	r3, IPSR
 80056f2:	617b      	str	r3, [r7, #20]
  return(result);
 80056f4:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d10f      	bne.n	800571a <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80056fa:	f3ef 8310 	mrs	r3, PRIMASK
 80056fe:	613b      	str	r3, [r7, #16]
  return(result);
 8005700:	693b      	ldr	r3, [r7, #16]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d105      	bne.n	8005712 <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005706:	f3ef 8311 	mrs	r3, BASEPRI
 800570a:	60fb      	str	r3, [r7, #12]
  return(result);
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d01e      	beq.n	8005750 <osSemaphoreRelease+0x80>
 8005712:	4b19      	ldr	r3, [pc, #100]	@ (8005778 <osSemaphoreRelease+0xa8>)
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	2b02      	cmp	r3, #2
 8005718:	d11a      	bne.n	8005750 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 800571a:	2300      	movs	r3, #0
 800571c:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800571e:	f107 0308 	add.w	r3, r7, #8
 8005722:	4619      	mov	r1, r3
 8005724:	69b8      	ldr	r0, [r7, #24]
 8005726:	f000 fc90 	bl	800604a <xQueueGiveFromISR>
 800572a:	4603      	mov	r3, r0
 800572c:	2b01      	cmp	r3, #1
 800572e:	d003      	beq.n	8005738 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 8005730:	f06f 0302 	mvn.w	r3, #2
 8005734:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8005736:	e018      	b.n	800576a <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d015      	beq.n	800576a <osSemaphoreRelease+0x9a>
 800573e:	4b0f      	ldr	r3, [pc, #60]	@ (800577c <osSemaphoreRelease+0xac>)
 8005740:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005744:	601a      	str	r2, [r3, #0]
 8005746:	f3bf 8f4f 	dsb	sy
 800574a:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800574e:	e00c      	b.n	800576a <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8005750:	2300      	movs	r3, #0
 8005752:	2200      	movs	r2, #0
 8005754:	2100      	movs	r1, #0
 8005756:	69b8      	ldr	r0, [r7, #24]
 8005758:	f000 faca 	bl	8005cf0 <xQueueGenericSend>
 800575c:	4603      	mov	r3, r0
 800575e:	2b01      	cmp	r3, #1
 8005760:	d004      	beq.n	800576c <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 8005762:	f06f 0302 	mvn.w	r3, #2
 8005766:	61fb      	str	r3, [r7, #28]
 8005768:	e000      	b.n	800576c <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800576a:	bf00      	nop
    }
  }

  return (stat);
 800576c:	69fb      	ldr	r3, [r7, #28]
}
 800576e:	4618      	mov	r0, r3
 8005770:	3720      	adds	r7, #32
 8005772:	46bd      	mov	sp, r7
 8005774:	bd80      	pop	{r7, pc}
 8005776:	bf00      	nop
 8005778:	200009a8 	.word	0x200009a8
 800577c:	e000ed04 	.word	0xe000ed04

08005780 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005780:	b480      	push	{r7}
 8005782:	b085      	sub	sp, #20
 8005784:	af00      	add	r7, sp, #0
 8005786:	60f8      	str	r0, [r7, #12]
 8005788:	60b9      	str	r1, [r7, #8]
 800578a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	4a07      	ldr	r2, [pc, #28]	@ (80057ac <vApplicationGetIdleTaskMemory+0x2c>)
 8005790:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005792:	68bb      	ldr	r3, [r7, #8]
 8005794:	4a06      	ldr	r2, [pc, #24]	@ (80057b0 <vApplicationGetIdleTaskMemory+0x30>)
 8005796:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2280      	movs	r2, #128	@ 0x80
 800579c:	601a      	str	r2, [r3, #0]
}
 800579e:	bf00      	nop
 80057a0:	3714      	adds	r7, #20
 80057a2:	46bd      	mov	sp, r7
 80057a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a8:	4770      	bx	lr
 80057aa:	bf00      	nop
 80057ac:	200009ac 	.word	0x200009ac
 80057b0:	20000a54 	.word	0x20000a54

080057b4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80057b4:	b480      	push	{r7}
 80057b6:	b085      	sub	sp, #20
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	60f8      	str	r0, [r7, #12]
 80057bc:	60b9      	str	r1, [r7, #8]
 80057be:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	4a07      	ldr	r2, [pc, #28]	@ (80057e0 <vApplicationGetTimerTaskMemory+0x2c>)
 80057c4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80057c6:	68bb      	ldr	r3, [r7, #8]
 80057c8:	4a06      	ldr	r2, [pc, #24]	@ (80057e4 <vApplicationGetTimerTaskMemory+0x30>)
 80057ca:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80057d2:	601a      	str	r2, [r3, #0]
}
 80057d4:	bf00      	nop
 80057d6:	3714      	adds	r7, #20
 80057d8:	46bd      	mov	sp, r7
 80057da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057de:	4770      	bx	lr
 80057e0:	20000c54 	.word	0x20000c54
 80057e4:	20000cfc 	.word	0x20000cfc

080057e8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80057e8:	b480      	push	{r7}
 80057ea:	b083      	sub	sp, #12
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	f103 0208 	add.w	r2, r3, #8
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	f04f 32ff 	mov.w	r2, #4294967295
 8005800:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	f103 0208 	add.w	r2, r3, #8
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	f103 0208 	add.w	r2, r3, #8
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2200      	movs	r2, #0
 800581a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800581c:	bf00      	nop
 800581e:	370c      	adds	r7, #12
 8005820:	46bd      	mov	sp, r7
 8005822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005826:	4770      	bx	lr

08005828 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005828:	b480      	push	{r7}
 800582a:	b083      	sub	sp, #12
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2200      	movs	r2, #0
 8005834:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005836:	bf00      	nop
 8005838:	370c      	adds	r7, #12
 800583a:	46bd      	mov	sp, r7
 800583c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005840:	4770      	bx	lr

08005842 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005842:	b480      	push	{r7}
 8005844:	b085      	sub	sp, #20
 8005846:	af00      	add	r7, sp, #0
 8005848:	6078      	str	r0, [r7, #4]
 800584a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	685b      	ldr	r3, [r3, #4]
 8005850:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	68fa      	ldr	r2, [r7, #12]
 8005856:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	689a      	ldr	r2, [r3, #8]
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	689b      	ldr	r3, [r3, #8]
 8005864:	683a      	ldr	r2, [r7, #0]
 8005866:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	683a      	ldr	r2, [r7, #0]
 800586c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	687a      	ldr	r2, [r7, #4]
 8005872:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	1c5a      	adds	r2, r3, #1
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	601a      	str	r2, [r3, #0]
}
 800587e:	bf00      	nop
 8005880:	3714      	adds	r7, #20
 8005882:	46bd      	mov	sp, r7
 8005884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005888:	4770      	bx	lr

0800588a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800588a:	b480      	push	{r7}
 800588c:	b085      	sub	sp, #20
 800588e:	af00      	add	r7, sp, #0
 8005890:	6078      	str	r0, [r7, #4]
 8005892:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058a0:	d103      	bne.n	80058aa <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	691b      	ldr	r3, [r3, #16]
 80058a6:	60fb      	str	r3, [r7, #12]
 80058a8:	e00c      	b.n	80058c4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	3308      	adds	r3, #8
 80058ae:	60fb      	str	r3, [r7, #12]
 80058b0:	e002      	b.n	80058b8 <vListInsert+0x2e>
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	685b      	ldr	r3, [r3, #4]
 80058b6:	60fb      	str	r3, [r7, #12]
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	685b      	ldr	r3, [r3, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	68ba      	ldr	r2, [r7, #8]
 80058c0:	429a      	cmp	r2, r3
 80058c2:	d2f6      	bcs.n	80058b2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	685a      	ldr	r2, [r3, #4]
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	685b      	ldr	r3, [r3, #4]
 80058d0:	683a      	ldr	r2, [r7, #0]
 80058d2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	68fa      	ldr	r2, [r7, #12]
 80058d8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	683a      	ldr	r2, [r7, #0]
 80058de:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	687a      	ldr	r2, [r7, #4]
 80058e4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	1c5a      	adds	r2, r3, #1
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	601a      	str	r2, [r3, #0]
}
 80058f0:	bf00      	nop
 80058f2:	3714      	adds	r7, #20
 80058f4:	46bd      	mov	sp, r7
 80058f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fa:	4770      	bx	lr

080058fc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80058fc:	b480      	push	{r7}
 80058fe:	b085      	sub	sp, #20
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	691b      	ldr	r3, [r3, #16]
 8005908:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	685b      	ldr	r3, [r3, #4]
 800590e:	687a      	ldr	r2, [r7, #4]
 8005910:	6892      	ldr	r2, [r2, #8]
 8005912:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	689b      	ldr	r3, [r3, #8]
 8005918:	687a      	ldr	r2, [r7, #4]
 800591a:	6852      	ldr	r2, [r2, #4]
 800591c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	685b      	ldr	r3, [r3, #4]
 8005922:	687a      	ldr	r2, [r7, #4]
 8005924:	429a      	cmp	r2, r3
 8005926:	d103      	bne.n	8005930 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	689a      	ldr	r2, [r3, #8]
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2200      	movs	r2, #0
 8005934:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	1e5a      	subs	r2, r3, #1
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681b      	ldr	r3, [r3, #0]
}
 8005944:	4618      	mov	r0, r3
 8005946:	3714      	adds	r7, #20
 8005948:	46bd      	mov	sp, r7
 800594a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594e:	4770      	bx	lr

08005950 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005950:	b580      	push	{r7, lr}
 8005952:	b084      	sub	sp, #16
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
 8005958:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d10d      	bne.n	8005980 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005964:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005968:	b672      	cpsid	i
 800596a:	f383 8811 	msr	BASEPRI, r3
 800596e:	f3bf 8f6f 	isb	sy
 8005972:	f3bf 8f4f 	dsb	sy
 8005976:	b662      	cpsie	i
 8005978:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800597a:	bf00      	nop
 800597c:	bf00      	nop
 800597e:	e7fd      	b.n	800597c <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8005980:	f002 fd34 	bl	80083ec <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681a      	ldr	r2, [r3, #0]
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800598c:	68f9      	ldr	r1, [r7, #12]
 800598e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005990:	fb01 f303 	mul.w	r3, r1, r3
 8005994:	441a      	add	r2, r3
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	2200      	movs	r2, #0
 800599e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681a      	ldr	r2, [r3, #0]
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	681a      	ldr	r2, [r3, #0]
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059b0:	3b01      	subs	r3, #1
 80059b2:	68f9      	ldr	r1, [r7, #12]
 80059b4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80059b6:	fb01 f303 	mul.w	r3, r1, r3
 80059ba:	441a      	add	r2, r3
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	22ff      	movs	r2, #255	@ 0xff
 80059c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	22ff      	movs	r2, #255	@ 0xff
 80059cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d114      	bne.n	8005a00 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	691b      	ldr	r3, [r3, #16]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d01a      	beq.n	8005a14 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	3310      	adds	r3, #16
 80059e2:	4618      	mov	r0, r3
 80059e4:	f001 fcd2 	bl	800738c <xTaskRemoveFromEventList>
 80059e8:	4603      	mov	r3, r0
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d012      	beq.n	8005a14 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80059ee:	4b0d      	ldr	r3, [pc, #52]	@ (8005a24 <xQueueGenericReset+0xd4>)
 80059f0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80059f4:	601a      	str	r2, [r3, #0]
 80059f6:	f3bf 8f4f 	dsb	sy
 80059fa:	f3bf 8f6f 	isb	sy
 80059fe:	e009      	b.n	8005a14 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	3310      	adds	r3, #16
 8005a04:	4618      	mov	r0, r3
 8005a06:	f7ff feef 	bl	80057e8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	3324      	adds	r3, #36	@ 0x24
 8005a0e:	4618      	mov	r0, r3
 8005a10:	f7ff feea 	bl	80057e8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005a14:	f002 fd20 	bl	8008458 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005a18:	2301      	movs	r3, #1
}
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	3710      	adds	r7, #16
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	bd80      	pop	{r7, pc}
 8005a22:	bf00      	nop
 8005a24:	e000ed04 	.word	0xe000ed04

08005a28 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b08e      	sub	sp, #56	@ 0x38
 8005a2c:	af02      	add	r7, sp, #8
 8005a2e:	60f8      	str	r0, [r7, #12]
 8005a30:	60b9      	str	r1, [r7, #8]
 8005a32:	607a      	str	r2, [r7, #4]
 8005a34:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d10d      	bne.n	8005a58 <xQueueGenericCreateStatic+0x30>
	__asm volatile
 8005a3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a40:	b672      	cpsid	i
 8005a42:	f383 8811 	msr	BASEPRI, r3
 8005a46:	f3bf 8f6f 	isb	sy
 8005a4a:	f3bf 8f4f 	dsb	sy
 8005a4e:	b662      	cpsie	i
 8005a50:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005a52:	bf00      	nop
 8005a54:	bf00      	nop
 8005a56:	e7fd      	b.n	8005a54 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d10d      	bne.n	8005a7a <xQueueGenericCreateStatic+0x52>
	__asm volatile
 8005a5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a62:	b672      	cpsid	i
 8005a64:	f383 8811 	msr	BASEPRI, r3
 8005a68:	f3bf 8f6f 	isb	sy
 8005a6c:	f3bf 8f4f 	dsb	sy
 8005a70:	b662      	cpsie	i
 8005a72:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005a74:	bf00      	nop
 8005a76:	bf00      	nop
 8005a78:	e7fd      	b.n	8005a76 <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d002      	beq.n	8005a86 <xQueueGenericCreateStatic+0x5e>
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d001      	beq.n	8005a8a <xQueueGenericCreateStatic+0x62>
 8005a86:	2301      	movs	r3, #1
 8005a88:	e000      	b.n	8005a8c <xQueueGenericCreateStatic+0x64>
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d10d      	bne.n	8005aac <xQueueGenericCreateStatic+0x84>
	__asm volatile
 8005a90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a94:	b672      	cpsid	i
 8005a96:	f383 8811 	msr	BASEPRI, r3
 8005a9a:	f3bf 8f6f 	isb	sy
 8005a9e:	f3bf 8f4f 	dsb	sy
 8005aa2:	b662      	cpsie	i
 8005aa4:	623b      	str	r3, [r7, #32]
}
 8005aa6:	bf00      	nop
 8005aa8:	bf00      	nop
 8005aaa:	e7fd      	b.n	8005aa8 <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d102      	bne.n	8005ab8 <xQueueGenericCreateStatic+0x90>
 8005ab2:	68bb      	ldr	r3, [r7, #8]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d101      	bne.n	8005abc <xQueueGenericCreateStatic+0x94>
 8005ab8:	2301      	movs	r3, #1
 8005aba:	e000      	b.n	8005abe <xQueueGenericCreateStatic+0x96>
 8005abc:	2300      	movs	r3, #0
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d10d      	bne.n	8005ade <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 8005ac2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ac6:	b672      	cpsid	i
 8005ac8:	f383 8811 	msr	BASEPRI, r3
 8005acc:	f3bf 8f6f 	isb	sy
 8005ad0:	f3bf 8f4f 	dsb	sy
 8005ad4:	b662      	cpsie	i
 8005ad6:	61fb      	str	r3, [r7, #28]
}
 8005ad8:	bf00      	nop
 8005ada:	bf00      	nop
 8005adc:	e7fd      	b.n	8005ada <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005ade:	2350      	movs	r3, #80	@ 0x50
 8005ae0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005ae2:	697b      	ldr	r3, [r7, #20]
 8005ae4:	2b50      	cmp	r3, #80	@ 0x50
 8005ae6:	d00d      	beq.n	8005b04 <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 8005ae8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005aec:	b672      	cpsid	i
 8005aee:	f383 8811 	msr	BASEPRI, r3
 8005af2:	f3bf 8f6f 	isb	sy
 8005af6:	f3bf 8f4f 	dsb	sy
 8005afa:	b662      	cpsie	i
 8005afc:	61bb      	str	r3, [r7, #24]
}
 8005afe:	bf00      	nop
 8005b00:	bf00      	nop
 8005b02:	e7fd      	b.n	8005b00 <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005b04:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8005b0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d00d      	beq.n	8005b2c <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005b10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b12:	2201      	movs	r2, #1
 8005b14:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005b18:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8005b1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b1e:	9300      	str	r3, [sp, #0]
 8005b20:	4613      	mov	r3, r2
 8005b22:	687a      	ldr	r2, [r7, #4]
 8005b24:	68b9      	ldr	r1, [r7, #8]
 8005b26:	68f8      	ldr	r0, [r7, #12]
 8005b28:	f000 f848 	bl	8005bbc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005b2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8005b2e:	4618      	mov	r0, r3
 8005b30:	3730      	adds	r7, #48	@ 0x30
 8005b32:	46bd      	mov	sp, r7
 8005b34:	bd80      	pop	{r7, pc}

08005b36 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005b36:	b580      	push	{r7, lr}
 8005b38:	b08a      	sub	sp, #40	@ 0x28
 8005b3a:	af02      	add	r7, sp, #8
 8005b3c:	60f8      	str	r0, [r7, #12]
 8005b3e:	60b9      	str	r1, [r7, #8]
 8005b40:	4613      	mov	r3, r2
 8005b42:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d10d      	bne.n	8005b66 <xQueueGenericCreate+0x30>
	__asm volatile
 8005b4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b4e:	b672      	cpsid	i
 8005b50:	f383 8811 	msr	BASEPRI, r3
 8005b54:	f3bf 8f6f 	isb	sy
 8005b58:	f3bf 8f4f 	dsb	sy
 8005b5c:	b662      	cpsie	i
 8005b5e:	613b      	str	r3, [r7, #16]
}
 8005b60:	bf00      	nop
 8005b62:	bf00      	nop
 8005b64:	e7fd      	b.n	8005b62 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8005b66:	68bb      	ldr	r3, [r7, #8]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d102      	bne.n	8005b72 <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	61fb      	str	r3, [r7, #28]
 8005b70:	e004      	b.n	8005b7c <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	68ba      	ldr	r2, [r7, #8]
 8005b76:	fb02 f303 	mul.w	r3, r2, r3
 8005b7a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005b7c:	69fb      	ldr	r3, [r7, #28]
 8005b7e:	3350      	adds	r3, #80	@ 0x50
 8005b80:	4618      	mov	r0, r3
 8005b82:	f002 fd61 	bl	8008648 <pvPortMalloc>
 8005b86:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005b88:	69bb      	ldr	r3, [r7, #24]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d011      	beq.n	8005bb2 <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005b8e:	69bb      	ldr	r3, [r7, #24]
 8005b90:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005b92:	697b      	ldr	r3, [r7, #20]
 8005b94:	3350      	adds	r3, #80	@ 0x50
 8005b96:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005b98:	69bb      	ldr	r3, [r7, #24]
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005ba0:	79fa      	ldrb	r2, [r7, #7]
 8005ba2:	69bb      	ldr	r3, [r7, #24]
 8005ba4:	9300      	str	r3, [sp, #0]
 8005ba6:	4613      	mov	r3, r2
 8005ba8:	697a      	ldr	r2, [r7, #20]
 8005baa:	68b9      	ldr	r1, [r7, #8]
 8005bac:	68f8      	ldr	r0, [r7, #12]
 8005bae:	f000 f805 	bl	8005bbc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005bb2:	69bb      	ldr	r3, [r7, #24]
	}
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	3720      	adds	r7, #32
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	bd80      	pop	{r7, pc}

08005bbc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b084      	sub	sp, #16
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	60f8      	str	r0, [r7, #12]
 8005bc4:	60b9      	str	r1, [r7, #8]
 8005bc6:	607a      	str	r2, [r7, #4]
 8005bc8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005bca:	68bb      	ldr	r3, [r7, #8]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d103      	bne.n	8005bd8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005bd0:	69bb      	ldr	r3, [r7, #24]
 8005bd2:	69ba      	ldr	r2, [r7, #24]
 8005bd4:	601a      	str	r2, [r3, #0]
 8005bd6:	e002      	b.n	8005bde <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005bd8:	69bb      	ldr	r3, [r7, #24]
 8005bda:	687a      	ldr	r2, [r7, #4]
 8005bdc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005bde:	69bb      	ldr	r3, [r7, #24]
 8005be0:	68fa      	ldr	r2, [r7, #12]
 8005be2:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005be4:	69bb      	ldr	r3, [r7, #24]
 8005be6:	68ba      	ldr	r2, [r7, #8]
 8005be8:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005bea:	2101      	movs	r1, #1
 8005bec:	69b8      	ldr	r0, [r7, #24]
 8005bee:	f7ff feaf 	bl	8005950 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005bf2:	69bb      	ldr	r3, [r7, #24]
 8005bf4:	78fa      	ldrb	r2, [r7, #3]
 8005bf6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005bfa:	bf00      	nop
 8005bfc:	3710      	adds	r7, #16
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	bd80      	pop	{r7, pc}

08005c02 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8005c02:	b580      	push	{r7, lr}
 8005c04:	b08a      	sub	sp, #40	@ 0x28
 8005c06:	af02      	add	r7, sp, #8
 8005c08:	60f8      	str	r0, [r7, #12]
 8005c0a:	60b9      	str	r1, [r7, #8]
 8005c0c:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d10d      	bne.n	8005c30 <xQueueCreateCountingSemaphoreStatic+0x2e>
	__asm volatile
 8005c14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c18:	b672      	cpsid	i
 8005c1a:	f383 8811 	msr	BASEPRI, r3
 8005c1e:	f3bf 8f6f 	isb	sy
 8005c22:	f3bf 8f4f 	dsb	sy
 8005c26:	b662      	cpsie	i
 8005c28:	61bb      	str	r3, [r7, #24]
}
 8005c2a:	bf00      	nop
 8005c2c:	bf00      	nop
 8005c2e:	e7fd      	b.n	8005c2c <xQueueCreateCountingSemaphoreStatic+0x2a>
		configASSERT( uxInitialCount <= uxMaxCount );
 8005c30:	68ba      	ldr	r2, [r7, #8]
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	429a      	cmp	r2, r3
 8005c36:	d90d      	bls.n	8005c54 <xQueueCreateCountingSemaphoreStatic+0x52>
	__asm volatile
 8005c38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c3c:	b672      	cpsid	i
 8005c3e:	f383 8811 	msr	BASEPRI, r3
 8005c42:	f3bf 8f6f 	isb	sy
 8005c46:	f3bf 8f4f 	dsb	sy
 8005c4a:	b662      	cpsie	i
 8005c4c:	617b      	str	r3, [r7, #20]
}
 8005c4e:	bf00      	nop
 8005c50:	bf00      	nop
 8005c52:	e7fd      	b.n	8005c50 <xQueueCreateCountingSemaphoreStatic+0x4e>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8005c54:	2302      	movs	r3, #2
 8005c56:	9300      	str	r3, [sp, #0]
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	2100      	movs	r1, #0
 8005c5e:	68f8      	ldr	r0, [r7, #12]
 8005c60:	f7ff fee2 	bl	8005a28 <xQueueGenericCreateStatic>
 8005c64:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8005c66:	69fb      	ldr	r3, [r7, #28]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d002      	beq.n	8005c72 <xQueueCreateCountingSemaphoreStatic+0x70>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8005c6c:	69fb      	ldr	r3, [r7, #28]
 8005c6e:	68ba      	ldr	r2, [r7, #8]
 8005c70:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8005c72:	69fb      	ldr	r3, [r7, #28]
	}
 8005c74:	4618      	mov	r0, r3
 8005c76:	3720      	adds	r7, #32
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	bd80      	pop	{r7, pc}

08005c7c <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b086      	sub	sp, #24
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
 8005c84:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d10d      	bne.n	8005ca8 <xQueueCreateCountingSemaphore+0x2c>
	__asm volatile
 8005c8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c90:	b672      	cpsid	i
 8005c92:	f383 8811 	msr	BASEPRI, r3
 8005c96:	f3bf 8f6f 	isb	sy
 8005c9a:	f3bf 8f4f 	dsb	sy
 8005c9e:	b662      	cpsie	i
 8005ca0:	613b      	str	r3, [r7, #16]
}
 8005ca2:	bf00      	nop
 8005ca4:	bf00      	nop
 8005ca6:	e7fd      	b.n	8005ca4 <xQueueCreateCountingSemaphore+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 8005ca8:	683a      	ldr	r2, [r7, #0]
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	429a      	cmp	r2, r3
 8005cae:	d90d      	bls.n	8005ccc <xQueueCreateCountingSemaphore+0x50>
	__asm volatile
 8005cb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cb4:	b672      	cpsid	i
 8005cb6:	f383 8811 	msr	BASEPRI, r3
 8005cba:	f3bf 8f6f 	isb	sy
 8005cbe:	f3bf 8f4f 	dsb	sy
 8005cc2:	b662      	cpsie	i
 8005cc4:	60fb      	str	r3, [r7, #12]
}
 8005cc6:	bf00      	nop
 8005cc8:	bf00      	nop
 8005cca:	e7fd      	b.n	8005cc8 <xQueueCreateCountingSemaphore+0x4c>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8005ccc:	2202      	movs	r2, #2
 8005cce:	2100      	movs	r1, #0
 8005cd0:	6878      	ldr	r0, [r7, #4]
 8005cd2:	f7ff ff30 	bl	8005b36 <xQueueGenericCreate>
 8005cd6:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8005cd8:	697b      	ldr	r3, [r7, #20]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d002      	beq.n	8005ce4 <xQueueCreateCountingSemaphore+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8005cde:	697b      	ldr	r3, [r7, #20]
 8005ce0:	683a      	ldr	r2, [r7, #0]
 8005ce2:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8005ce4:	697b      	ldr	r3, [r7, #20]
	}
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	3718      	adds	r7, #24
 8005cea:	46bd      	mov	sp, r7
 8005cec:	bd80      	pop	{r7, pc}
	...

08005cf0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b08e      	sub	sp, #56	@ 0x38
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	60f8      	str	r0, [r7, #12]
 8005cf8:	60b9      	str	r1, [r7, #8]
 8005cfa:	607a      	str	r2, [r7, #4]
 8005cfc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005cfe:	2300      	movs	r3, #0
 8005d00:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005d06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d10d      	bne.n	8005d28 <xQueueGenericSend+0x38>
	__asm volatile
 8005d0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d10:	b672      	cpsid	i
 8005d12:	f383 8811 	msr	BASEPRI, r3
 8005d16:	f3bf 8f6f 	isb	sy
 8005d1a:	f3bf 8f4f 	dsb	sy
 8005d1e:	b662      	cpsie	i
 8005d20:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005d22:	bf00      	nop
 8005d24:	bf00      	nop
 8005d26:	e7fd      	b.n	8005d24 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005d28:	68bb      	ldr	r3, [r7, #8]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d103      	bne.n	8005d36 <xQueueGenericSend+0x46>
 8005d2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d101      	bne.n	8005d3a <xQueueGenericSend+0x4a>
 8005d36:	2301      	movs	r3, #1
 8005d38:	e000      	b.n	8005d3c <xQueueGenericSend+0x4c>
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d10d      	bne.n	8005d5c <xQueueGenericSend+0x6c>
	__asm volatile
 8005d40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d44:	b672      	cpsid	i
 8005d46:	f383 8811 	msr	BASEPRI, r3
 8005d4a:	f3bf 8f6f 	isb	sy
 8005d4e:	f3bf 8f4f 	dsb	sy
 8005d52:	b662      	cpsie	i
 8005d54:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005d56:	bf00      	nop
 8005d58:	bf00      	nop
 8005d5a:	e7fd      	b.n	8005d58 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	2b02      	cmp	r3, #2
 8005d60:	d103      	bne.n	8005d6a <xQueueGenericSend+0x7a>
 8005d62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d66:	2b01      	cmp	r3, #1
 8005d68:	d101      	bne.n	8005d6e <xQueueGenericSend+0x7e>
 8005d6a:	2301      	movs	r3, #1
 8005d6c:	e000      	b.n	8005d70 <xQueueGenericSend+0x80>
 8005d6e:	2300      	movs	r3, #0
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d10d      	bne.n	8005d90 <xQueueGenericSend+0xa0>
	__asm volatile
 8005d74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d78:	b672      	cpsid	i
 8005d7a:	f383 8811 	msr	BASEPRI, r3
 8005d7e:	f3bf 8f6f 	isb	sy
 8005d82:	f3bf 8f4f 	dsb	sy
 8005d86:	b662      	cpsie	i
 8005d88:	623b      	str	r3, [r7, #32]
}
 8005d8a:	bf00      	nop
 8005d8c:	bf00      	nop
 8005d8e:	e7fd      	b.n	8005d8c <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005d90:	f001 fcca 	bl	8007728 <xTaskGetSchedulerState>
 8005d94:	4603      	mov	r3, r0
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d102      	bne.n	8005da0 <xQueueGenericSend+0xb0>
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d101      	bne.n	8005da4 <xQueueGenericSend+0xb4>
 8005da0:	2301      	movs	r3, #1
 8005da2:	e000      	b.n	8005da6 <xQueueGenericSend+0xb6>
 8005da4:	2300      	movs	r3, #0
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d10d      	bne.n	8005dc6 <xQueueGenericSend+0xd6>
	__asm volatile
 8005daa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dae:	b672      	cpsid	i
 8005db0:	f383 8811 	msr	BASEPRI, r3
 8005db4:	f3bf 8f6f 	isb	sy
 8005db8:	f3bf 8f4f 	dsb	sy
 8005dbc:	b662      	cpsie	i
 8005dbe:	61fb      	str	r3, [r7, #28]
}
 8005dc0:	bf00      	nop
 8005dc2:	bf00      	nop
 8005dc4:	e7fd      	b.n	8005dc2 <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005dc6:	f002 fb11 	bl	80083ec <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005dca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dcc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005dce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dd0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005dd2:	429a      	cmp	r2, r3
 8005dd4:	d302      	bcc.n	8005ddc <xQueueGenericSend+0xec>
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	2b02      	cmp	r3, #2
 8005dda:	d129      	bne.n	8005e30 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005ddc:	683a      	ldr	r2, [r7, #0]
 8005dde:	68b9      	ldr	r1, [r7, #8]
 8005de0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005de2:	f000 fc91 	bl	8006708 <prvCopyDataToQueue>
 8005de6:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005de8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d010      	beq.n	8005e12 <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005df0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005df2:	3324      	adds	r3, #36	@ 0x24
 8005df4:	4618      	mov	r0, r3
 8005df6:	f001 fac9 	bl	800738c <xTaskRemoveFromEventList>
 8005dfa:	4603      	mov	r3, r0
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d013      	beq.n	8005e28 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005e00:	4b3f      	ldr	r3, [pc, #252]	@ (8005f00 <xQueueGenericSend+0x210>)
 8005e02:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005e06:	601a      	str	r2, [r3, #0]
 8005e08:	f3bf 8f4f 	dsb	sy
 8005e0c:	f3bf 8f6f 	isb	sy
 8005e10:	e00a      	b.n	8005e28 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005e12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d007      	beq.n	8005e28 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005e18:	4b39      	ldr	r3, [pc, #228]	@ (8005f00 <xQueueGenericSend+0x210>)
 8005e1a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005e1e:	601a      	str	r2, [r3, #0]
 8005e20:	f3bf 8f4f 	dsb	sy
 8005e24:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005e28:	f002 fb16 	bl	8008458 <vPortExitCritical>
				return pdPASS;
 8005e2c:	2301      	movs	r3, #1
 8005e2e:	e063      	b.n	8005ef8 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d103      	bne.n	8005e3e <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005e36:	f002 fb0f 	bl	8008458 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	e05c      	b.n	8005ef8 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005e3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d106      	bne.n	8005e52 <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005e44:	f107 0314 	add.w	r3, r7, #20
 8005e48:	4618      	mov	r0, r3
 8005e4a:	f001 fb05 	bl	8007458 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005e4e:	2301      	movs	r3, #1
 8005e50:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005e52:	f002 fb01 	bl	8008458 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005e56:	f001 f861 	bl	8006f1c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005e5a:	f002 fac7 	bl	80083ec <vPortEnterCritical>
 8005e5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e60:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005e64:	b25b      	sxtb	r3, r3
 8005e66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e6a:	d103      	bne.n	8005e74 <xQueueGenericSend+0x184>
 8005e6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e6e:	2200      	movs	r2, #0
 8005e70:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005e74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e76:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005e7a:	b25b      	sxtb	r3, r3
 8005e7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e80:	d103      	bne.n	8005e8a <xQueueGenericSend+0x19a>
 8005e82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e84:	2200      	movs	r2, #0
 8005e86:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005e8a:	f002 fae5 	bl	8008458 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005e8e:	1d3a      	adds	r2, r7, #4
 8005e90:	f107 0314 	add.w	r3, r7, #20
 8005e94:	4611      	mov	r1, r2
 8005e96:	4618      	mov	r0, r3
 8005e98:	f001 faf4 	bl	8007484 <xTaskCheckForTimeOut>
 8005e9c:	4603      	mov	r3, r0
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d124      	bne.n	8005eec <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005ea2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005ea4:	f000 fd28 	bl	80068f8 <prvIsQueueFull>
 8005ea8:	4603      	mov	r3, r0
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d018      	beq.n	8005ee0 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005eae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005eb0:	3310      	adds	r3, #16
 8005eb2:	687a      	ldr	r2, [r7, #4]
 8005eb4:	4611      	mov	r1, r2
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	f001 fa12 	bl	80072e0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005ebc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005ebe:	f000 fcb3 	bl	8006828 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005ec2:	f001 f839 	bl	8006f38 <xTaskResumeAll>
 8005ec6:	4603      	mov	r3, r0
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	f47f af7c 	bne.w	8005dc6 <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 8005ece:	4b0c      	ldr	r3, [pc, #48]	@ (8005f00 <xQueueGenericSend+0x210>)
 8005ed0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005ed4:	601a      	str	r2, [r3, #0]
 8005ed6:	f3bf 8f4f 	dsb	sy
 8005eda:	f3bf 8f6f 	isb	sy
 8005ede:	e772      	b.n	8005dc6 <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005ee0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005ee2:	f000 fca1 	bl	8006828 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005ee6:	f001 f827 	bl	8006f38 <xTaskResumeAll>
 8005eea:	e76c      	b.n	8005dc6 <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005eec:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005eee:	f000 fc9b 	bl	8006828 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005ef2:	f001 f821 	bl	8006f38 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005ef6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005ef8:	4618      	mov	r0, r3
 8005efa:	3738      	adds	r7, #56	@ 0x38
 8005efc:	46bd      	mov	sp, r7
 8005efe:	bd80      	pop	{r7, pc}
 8005f00:	e000ed04 	.word	0xe000ed04

08005f04 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b08e      	sub	sp, #56	@ 0x38
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	60f8      	str	r0, [r7, #12]
 8005f0c:	60b9      	str	r1, [r7, #8]
 8005f0e:	607a      	str	r2, [r7, #4]
 8005f10:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005f16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d10d      	bne.n	8005f38 <xQueueGenericSendFromISR+0x34>
	__asm volatile
 8005f1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f20:	b672      	cpsid	i
 8005f22:	f383 8811 	msr	BASEPRI, r3
 8005f26:	f3bf 8f6f 	isb	sy
 8005f2a:	f3bf 8f4f 	dsb	sy
 8005f2e:	b662      	cpsie	i
 8005f30:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005f32:	bf00      	nop
 8005f34:	bf00      	nop
 8005f36:	e7fd      	b.n	8005f34 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005f38:	68bb      	ldr	r3, [r7, #8]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d103      	bne.n	8005f46 <xQueueGenericSendFromISR+0x42>
 8005f3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d101      	bne.n	8005f4a <xQueueGenericSendFromISR+0x46>
 8005f46:	2301      	movs	r3, #1
 8005f48:	e000      	b.n	8005f4c <xQueueGenericSendFromISR+0x48>
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d10d      	bne.n	8005f6c <xQueueGenericSendFromISR+0x68>
	__asm volatile
 8005f50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f54:	b672      	cpsid	i
 8005f56:	f383 8811 	msr	BASEPRI, r3
 8005f5a:	f3bf 8f6f 	isb	sy
 8005f5e:	f3bf 8f4f 	dsb	sy
 8005f62:	b662      	cpsie	i
 8005f64:	623b      	str	r3, [r7, #32]
}
 8005f66:	bf00      	nop
 8005f68:	bf00      	nop
 8005f6a:	e7fd      	b.n	8005f68 <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	2b02      	cmp	r3, #2
 8005f70:	d103      	bne.n	8005f7a <xQueueGenericSendFromISR+0x76>
 8005f72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f76:	2b01      	cmp	r3, #1
 8005f78:	d101      	bne.n	8005f7e <xQueueGenericSendFromISR+0x7a>
 8005f7a:	2301      	movs	r3, #1
 8005f7c:	e000      	b.n	8005f80 <xQueueGenericSendFromISR+0x7c>
 8005f7e:	2300      	movs	r3, #0
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d10d      	bne.n	8005fa0 <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 8005f84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f88:	b672      	cpsid	i
 8005f8a:	f383 8811 	msr	BASEPRI, r3
 8005f8e:	f3bf 8f6f 	isb	sy
 8005f92:	f3bf 8f4f 	dsb	sy
 8005f96:	b662      	cpsie	i
 8005f98:	61fb      	str	r3, [r7, #28]
}
 8005f9a:	bf00      	nop
 8005f9c:	bf00      	nop
 8005f9e:	e7fd      	b.n	8005f9c <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005fa0:	f002 fb0c 	bl	80085bc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005fa4:	f3ef 8211 	mrs	r2, BASEPRI
 8005fa8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fac:	b672      	cpsid	i
 8005fae:	f383 8811 	msr	BASEPRI, r3
 8005fb2:	f3bf 8f6f 	isb	sy
 8005fb6:	f3bf 8f4f 	dsb	sy
 8005fba:	b662      	cpsie	i
 8005fbc:	61ba      	str	r2, [r7, #24]
 8005fbe:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005fc0:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005fc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005fc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fc6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005fc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005fcc:	429a      	cmp	r2, r3
 8005fce:	d302      	bcc.n	8005fd6 <xQueueGenericSendFromISR+0xd2>
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	2b02      	cmp	r3, #2
 8005fd4:	d12c      	bne.n	8006030 <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005fd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fd8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005fdc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005fe0:	683a      	ldr	r2, [r7, #0]
 8005fe2:	68b9      	ldr	r1, [r7, #8]
 8005fe4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005fe6:	f000 fb8f 	bl	8006708 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005fea:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8005fee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ff2:	d112      	bne.n	800601a <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005ff4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ff6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d016      	beq.n	800602a <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005ffc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ffe:	3324      	adds	r3, #36	@ 0x24
 8006000:	4618      	mov	r0, r3
 8006002:	f001 f9c3 	bl	800738c <xTaskRemoveFromEventList>
 8006006:	4603      	mov	r3, r0
 8006008:	2b00      	cmp	r3, #0
 800600a:	d00e      	beq.n	800602a <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d00b      	beq.n	800602a <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2201      	movs	r2, #1
 8006016:	601a      	str	r2, [r3, #0]
 8006018:	e007      	b.n	800602a <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800601a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800601e:	3301      	adds	r3, #1
 8006020:	b2db      	uxtb	r3, r3
 8006022:	b25a      	sxtb	r2, r3
 8006024:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006026:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800602a:	2301      	movs	r3, #1
 800602c:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 800602e:	e001      	b.n	8006034 <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006030:	2300      	movs	r3, #0
 8006032:	637b      	str	r3, [r7, #52]	@ 0x34
 8006034:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006036:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006038:	693b      	ldr	r3, [r7, #16]
 800603a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800603e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006040:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8006042:	4618      	mov	r0, r3
 8006044:	3738      	adds	r7, #56	@ 0x38
 8006046:	46bd      	mov	sp, r7
 8006048:	bd80      	pop	{r7, pc}

0800604a <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800604a:	b580      	push	{r7, lr}
 800604c:	b08e      	sub	sp, #56	@ 0x38
 800604e:	af00      	add	r7, sp, #0
 8006050:	6078      	str	r0, [r7, #4]
 8006052:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8006058:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800605a:	2b00      	cmp	r3, #0
 800605c:	d10d      	bne.n	800607a <xQueueGiveFromISR+0x30>
	__asm volatile
 800605e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006062:	b672      	cpsid	i
 8006064:	f383 8811 	msr	BASEPRI, r3
 8006068:	f3bf 8f6f 	isb	sy
 800606c:	f3bf 8f4f 	dsb	sy
 8006070:	b662      	cpsie	i
 8006072:	623b      	str	r3, [r7, #32]
}
 8006074:	bf00      	nop
 8006076:	bf00      	nop
 8006078:	e7fd      	b.n	8006076 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800607a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800607c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800607e:	2b00      	cmp	r3, #0
 8006080:	d00d      	beq.n	800609e <xQueueGiveFromISR+0x54>
	__asm volatile
 8006082:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006086:	b672      	cpsid	i
 8006088:	f383 8811 	msr	BASEPRI, r3
 800608c:	f3bf 8f6f 	isb	sy
 8006090:	f3bf 8f4f 	dsb	sy
 8006094:	b662      	cpsie	i
 8006096:	61fb      	str	r3, [r7, #28]
}
 8006098:	bf00      	nop
 800609a:	bf00      	nop
 800609c:	e7fd      	b.n	800609a <xQueueGiveFromISR+0x50>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800609e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d103      	bne.n	80060ae <xQueueGiveFromISR+0x64>
 80060a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060a8:	689b      	ldr	r3, [r3, #8]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d101      	bne.n	80060b2 <xQueueGiveFromISR+0x68>
 80060ae:	2301      	movs	r3, #1
 80060b0:	e000      	b.n	80060b4 <xQueueGiveFromISR+0x6a>
 80060b2:	2300      	movs	r3, #0
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d10d      	bne.n	80060d4 <xQueueGiveFromISR+0x8a>
	__asm volatile
 80060b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060bc:	b672      	cpsid	i
 80060be:	f383 8811 	msr	BASEPRI, r3
 80060c2:	f3bf 8f6f 	isb	sy
 80060c6:	f3bf 8f4f 	dsb	sy
 80060ca:	b662      	cpsie	i
 80060cc:	61bb      	str	r3, [r7, #24]
}
 80060ce:	bf00      	nop
 80060d0:	bf00      	nop
 80060d2:	e7fd      	b.n	80060d0 <xQueueGiveFromISR+0x86>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80060d4:	f002 fa72 	bl	80085bc <vPortValidateInterruptPriority>
	__asm volatile
 80060d8:	f3ef 8211 	mrs	r2, BASEPRI
 80060dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060e0:	b672      	cpsid	i
 80060e2:	f383 8811 	msr	BASEPRI, r3
 80060e6:	f3bf 8f6f 	isb	sy
 80060ea:	f3bf 8f4f 	dsb	sy
 80060ee:	b662      	cpsie	i
 80060f0:	617a      	str	r2, [r7, #20]
 80060f2:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80060f4:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80060f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80060f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060fc:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80060fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006100:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006102:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006104:	429a      	cmp	r2, r3
 8006106:	d22b      	bcs.n	8006160 <xQueueGiveFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006108:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800610a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800610e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006112:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006114:	1c5a      	adds	r2, r3, #1
 8006116:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006118:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800611a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800611e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006122:	d112      	bne.n	800614a <xQueueGiveFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006124:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006126:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006128:	2b00      	cmp	r3, #0
 800612a:	d016      	beq.n	800615a <xQueueGiveFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800612c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800612e:	3324      	adds	r3, #36	@ 0x24
 8006130:	4618      	mov	r0, r3
 8006132:	f001 f92b 	bl	800738c <xTaskRemoveFromEventList>
 8006136:	4603      	mov	r3, r0
 8006138:	2b00      	cmp	r3, #0
 800613a:	d00e      	beq.n	800615a <xQueueGiveFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d00b      	beq.n	800615a <xQueueGiveFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	2201      	movs	r2, #1
 8006146:	601a      	str	r2, [r3, #0]
 8006148:	e007      	b.n	800615a <xQueueGiveFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800614a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800614e:	3301      	adds	r3, #1
 8006150:	b2db      	uxtb	r3, r3
 8006152:	b25a      	sxtb	r2, r3
 8006154:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006156:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800615a:	2301      	movs	r3, #1
 800615c:	637b      	str	r3, [r7, #52]	@ 0x34
 800615e:	e001      	b.n	8006164 <xQueueGiveFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006160:	2300      	movs	r3, #0
 8006162:	637b      	str	r3, [r7, #52]	@ 0x34
 8006164:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006166:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	f383 8811 	msr	BASEPRI, r3
}
 800616e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006170:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8006172:	4618      	mov	r0, r3
 8006174:	3738      	adds	r7, #56	@ 0x38
 8006176:	46bd      	mov	sp, r7
 8006178:	bd80      	pop	{r7, pc}
	...

0800617c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800617c:	b580      	push	{r7, lr}
 800617e:	b08c      	sub	sp, #48	@ 0x30
 8006180:	af00      	add	r7, sp, #0
 8006182:	60f8      	str	r0, [r7, #12]
 8006184:	60b9      	str	r1, [r7, #8]
 8006186:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006188:	2300      	movs	r3, #0
 800618a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006190:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006192:	2b00      	cmp	r3, #0
 8006194:	d10d      	bne.n	80061b2 <xQueueReceive+0x36>
	__asm volatile
 8006196:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800619a:	b672      	cpsid	i
 800619c:	f383 8811 	msr	BASEPRI, r3
 80061a0:	f3bf 8f6f 	isb	sy
 80061a4:	f3bf 8f4f 	dsb	sy
 80061a8:	b662      	cpsie	i
 80061aa:	623b      	str	r3, [r7, #32]
}
 80061ac:	bf00      	nop
 80061ae:	bf00      	nop
 80061b0:	e7fd      	b.n	80061ae <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80061b2:	68bb      	ldr	r3, [r7, #8]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d103      	bne.n	80061c0 <xQueueReceive+0x44>
 80061b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d101      	bne.n	80061c4 <xQueueReceive+0x48>
 80061c0:	2301      	movs	r3, #1
 80061c2:	e000      	b.n	80061c6 <xQueueReceive+0x4a>
 80061c4:	2300      	movs	r3, #0
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d10d      	bne.n	80061e6 <xQueueReceive+0x6a>
	__asm volatile
 80061ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061ce:	b672      	cpsid	i
 80061d0:	f383 8811 	msr	BASEPRI, r3
 80061d4:	f3bf 8f6f 	isb	sy
 80061d8:	f3bf 8f4f 	dsb	sy
 80061dc:	b662      	cpsie	i
 80061de:	61fb      	str	r3, [r7, #28]
}
 80061e0:	bf00      	nop
 80061e2:	bf00      	nop
 80061e4:	e7fd      	b.n	80061e2 <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80061e6:	f001 fa9f 	bl	8007728 <xTaskGetSchedulerState>
 80061ea:	4603      	mov	r3, r0
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d102      	bne.n	80061f6 <xQueueReceive+0x7a>
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d101      	bne.n	80061fa <xQueueReceive+0x7e>
 80061f6:	2301      	movs	r3, #1
 80061f8:	e000      	b.n	80061fc <xQueueReceive+0x80>
 80061fa:	2300      	movs	r3, #0
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d10d      	bne.n	800621c <xQueueReceive+0xa0>
	__asm volatile
 8006200:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006204:	b672      	cpsid	i
 8006206:	f383 8811 	msr	BASEPRI, r3
 800620a:	f3bf 8f6f 	isb	sy
 800620e:	f3bf 8f4f 	dsb	sy
 8006212:	b662      	cpsie	i
 8006214:	61bb      	str	r3, [r7, #24]
}
 8006216:	bf00      	nop
 8006218:	bf00      	nop
 800621a:	e7fd      	b.n	8006218 <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800621c:	f002 f8e6 	bl	80083ec <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006220:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006222:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006224:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006228:	2b00      	cmp	r3, #0
 800622a:	d01f      	beq.n	800626c <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800622c:	68b9      	ldr	r1, [r7, #8]
 800622e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006230:	f000 fad4 	bl	80067dc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006234:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006236:	1e5a      	subs	r2, r3, #1
 8006238:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800623a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800623c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800623e:	691b      	ldr	r3, [r3, #16]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d00f      	beq.n	8006264 <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006244:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006246:	3310      	adds	r3, #16
 8006248:	4618      	mov	r0, r3
 800624a:	f001 f89f 	bl	800738c <xTaskRemoveFromEventList>
 800624e:	4603      	mov	r3, r0
 8006250:	2b00      	cmp	r3, #0
 8006252:	d007      	beq.n	8006264 <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006254:	4b3c      	ldr	r3, [pc, #240]	@ (8006348 <xQueueReceive+0x1cc>)
 8006256:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800625a:	601a      	str	r2, [r3, #0]
 800625c:	f3bf 8f4f 	dsb	sy
 8006260:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006264:	f002 f8f8 	bl	8008458 <vPortExitCritical>
				return pdPASS;
 8006268:	2301      	movs	r3, #1
 800626a:	e069      	b.n	8006340 <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d103      	bne.n	800627a <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006272:	f002 f8f1 	bl	8008458 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006276:	2300      	movs	r3, #0
 8006278:	e062      	b.n	8006340 <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 800627a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800627c:	2b00      	cmp	r3, #0
 800627e:	d106      	bne.n	800628e <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006280:	f107 0310 	add.w	r3, r7, #16
 8006284:	4618      	mov	r0, r3
 8006286:	f001 f8e7 	bl	8007458 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800628a:	2301      	movs	r3, #1
 800628c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800628e:	f002 f8e3 	bl	8008458 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006292:	f000 fe43 	bl	8006f1c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006296:	f002 f8a9 	bl	80083ec <vPortEnterCritical>
 800629a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800629c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80062a0:	b25b      	sxtb	r3, r3
 80062a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062a6:	d103      	bne.n	80062b0 <xQueueReceive+0x134>
 80062a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062aa:	2200      	movs	r2, #0
 80062ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80062b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062b2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80062b6:	b25b      	sxtb	r3, r3
 80062b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062bc:	d103      	bne.n	80062c6 <xQueueReceive+0x14a>
 80062be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062c0:	2200      	movs	r2, #0
 80062c2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80062c6:	f002 f8c7 	bl	8008458 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80062ca:	1d3a      	adds	r2, r7, #4
 80062cc:	f107 0310 	add.w	r3, r7, #16
 80062d0:	4611      	mov	r1, r2
 80062d2:	4618      	mov	r0, r3
 80062d4:	f001 f8d6 	bl	8007484 <xTaskCheckForTimeOut>
 80062d8:	4603      	mov	r3, r0
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d123      	bne.n	8006326 <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80062de:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80062e0:	f000 faf4 	bl	80068cc <prvIsQueueEmpty>
 80062e4:	4603      	mov	r3, r0
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d017      	beq.n	800631a <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80062ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062ec:	3324      	adds	r3, #36	@ 0x24
 80062ee:	687a      	ldr	r2, [r7, #4]
 80062f0:	4611      	mov	r1, r2
 80062f2:	4618      	mov	r0, r3
 80062f4:	f000 fff4 	bl	80072e0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80062f8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80062fa:	f000 fa95 	bl	8006828 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80062fe:	f000 fe1b 	bl	8006f38 <xTaskResumeAll>
 8006302:	4603      	mov	r3, r0
 8006304:	2b00      	cmp	r3, #0
 8006306:	d189      	bne.n	800621c <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 8006308:	4b0f      	ldr	r3, [pc, #60]	@ (8006348 <xQueueReceive+0x1cc>)
 800630a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800630e:	601a      	str	r2, [r3, #0]
 8006310:	f3bf 8f4f 	dsb	sy
 8006314:	f3bf 8f6f 	isb	sy
 8006318:	e780      	b.n	800621c <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800631a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800631c:	f000 fa84 	bl	8006828 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006320:	f000 fe0a 	bl	8006f38 <xTaskResumeAll>
 8006324:	e77a      	b.n	800621c <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006326:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006328:	f000 fa7e 	bl	8006828 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800632c:	f000 fe04 	bl	8006f38 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006330:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006332:	f000 facb 	bl	80068cc <prvIsQueueEmpty>
 8006336:	4603      	mov	r3, r0
 8006338:	2b00      	cmp	r3, #0
 800633a:	f43f af6f 	beq.w	800621c <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800633e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006340:	4618      	mov	r0, r3
 8006342:	3730      	adds	r7, #48	@ 0x30
 8006344:	46bd      	mov	sp, r7
 8006346:	bd80      	pop	{r7, pc}
 8006348:	e000ed04 	.word	0xe000ed04

0800634c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800634c:	b580      	push	{r7, lr}
 800634e:	b08e      	sub	sp, #56	@ 0x38
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
 8006354:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8006356:	2300      	movs	r3, #0
 8006358:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800635e:	2300      	movs	r3, #0
 8006360:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006362:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006364:	2b00      	cmp	r3, #0
 8006366:	d10d      	bne.n	8006384 <xQueueSemaphoreTake+0x38>
	__asm volatile
 8006368:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800636c:	b672      	cpsid	i
 800636e:	f383 8811 	msr	BASEPRI, r3
 8006372:	f3bf 8f6f 	isb	sy
 8006376:	f3bf 8f4f 	dsb	sy
 800637a:	b662      	cpsie	i
 800637c:	623b      	str	r3, [r7, #32]
}
 800637e:	bf00      	nop
 8006380:	bf00      	nop
 8006382:	e7fd      	b.n	8006380 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006384:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006386:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006388:	2b00      	cmp	r3, #0
 800638a:	d00d      	beq.n	80063a8 <xQueueSemaphoreTake+0x5c>
	__asm volatile
 800638c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006390:	b672      	cpsid	i
 8006392:	f383 8811 	msr	BASEPRI, r3
 8006396:	f3bf 8f6f 	isb	sy
 800639a:	f3bf 8f4f 	dsb	sy
 800639e:	b662      	cpsie	i
 80063a0:	61fb      	str	r3, [r7, #28]
}
 80063a2:	bf00      	nop
 80063a4:	bf00      	nop
 80063a6:	e7fd      	b.n	80063a4 <xQueueSemaphoreTake+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80063a8:	f001 f9be 	bl	8007728 <xTaskGetSchedulerState>
 80063ac:	4603      	mov	r3, r0
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d102      	bne.n	80063b8 <xQueueSemaphoreTake+0x6c>
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d101      	bne.n	80063bc <xQueueSemaphoreTake+0x70>
 80063b8:	2301      	movs	r3, #1
 80063ba:	e000      	b.n	80063be <xQueueSemaphoreTake+0x72>
 80063bc:	2300      	movs	r3, #0
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d10d      	bne.n	80063de <xQueueSemaphoreTake+0x92>
	__asm volatile
 80063c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063c6:	b672      	cpsid	i
 80063c8:	f383 8811 	msr	BASEPRI, r3
 80063cc:	f3bf 8f6f 	isb	sy
 80063d0:	f3bf 8f4f 	dsb	sy
 80063d4:	b662      	cpsie	i
 80063d6:	61bb      	str	r3, [r7, #24]
}
 80063d8:	bf00      	nop
 80063da:	bf00      	nop
 80063dc:	e7fd      	b.n	80063da <xQueueSemaphoreTake+0x8e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80063de:	f002 f805 	bl	80083ec <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80063e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063e6:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80063e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d024      	beq.n	8006438 <xQueueSemaphoreTake+0xec>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80063ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063f0:	1e5a      	subs	r2, r3, #1
 80063f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063f4:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80063f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d104      	bne.n	8006408 <xQueueSemaphoreTake+0xbc>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80063fe:	f001 fb15 	bl	8007a2c <pvTaskIncrementMutexHeldCount>
 8006402:	4602      	mov	r2, r0
 8006404:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006406:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006408:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800640a:	691b      	ldr	r3, [r3, #16]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d00f      	beq.n	8006430 <xQueueSemaphoreTake+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006410:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006412:	3310      	adds	r3, #16
 8006414:	4618      	mov	r0, r3
 8006416:	f000 ffb9 	bl	800738c <xTaskRemoveFromEventList>
 800641a:	4603      	mov	r3, r0
 800641c:	2b00      	cmp	r3, #0
 800641e:	d007      	beq.n	8006430 <xQueueSemaphoreTake+0xe4>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006420:	4b55      	ldr	r3, [pc, #340]	@ (8006578 <xQueueSemaphoreTake+0x22c>)
 8006422:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006426:	601a      	str	r2, [r3, #0]
 8006428:	f3bf 8f4f 	dsb	sy
 800642c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006430:	f002 f812 	bl	8008458 <vPortExitCritical>
				return pdPASS;
 8006434:	2301      	movs	r3, #1
 8006436:	e09a      	b.n	800656e <xQueueSemaphoreTake+0x222>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	2b00      	cmp	r3, #0
 800643c:	d114      	bne.n	8006468 <xQueueSemaphoreTake+0x11c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800643e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006440:	2b00      	cmp	r3, #0
 8006442:	d00d      	beq.n	8006460 <xQueueSemaphoreTake+0x114>
	__asm volatile
 8006444:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006448:	b672      	cpsid	i
 800644a:	f383 8811 	msr	BASEPRI, r3
 800644e:	f3bf 8f6f 	isb	sy
 8006452:	f3bf 8f4f 	dsb	sy
 8006456:	b662      	cpsie	i
 8006458:	617b      	str	r3, [r7, #20]
}
 800645a:	bf00      	nop
 800645c:	bf00      	nop
 800645e:	e7fd      	b.n	800645c <xQueueSemaphoreTake+0x110>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006460:	f001 fffa 	bl	8008458 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006464:	2300      	movs	r3, #0
 8006466:	e082      	b.n	800656e <xQueueSemaphoreTake+0x222>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006468:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800646a:	2b00      	cmp	r3, #0
 800646c:	d106      	bne.n	800647c <xQueueSemaphoreTake+0x130>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800646e:	f107 030c 	add.w	r3, r7, #12
 8006472:	4618      	mov	r0, r3
 8006474:	f000 fff0 	bl	8007458 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006478:	2301      	movs	r3, #1
 800647a:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800647c:	f001 ffec 	bl	8008458 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006480:	f000 fd4c 	bl	8006f1c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006484:	f001 ffb2 	bl	80083ec <vPortEnterCritical>
 8006488:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800648a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800648e:	b25b      	sxtb	r3, r3
 8006490:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006494:	d103      	bne.n	800649e <xQueueSemaphoreTake+0x152>
 8006496:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006498:	2200      	movs	r2, #0
 800649a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800649e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064a0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80064a4:	b25b      	sxtb	r3, r3
 80064a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064aa:	d103      	bne.n	80064b4 <xQueueSemaphoreTake+0x168>
 80064ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064ae:	2200      	movs	r2, #0
 80064b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80064b4:	f001 ffd0 	bl	8008458 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80064b8:	463a      	mov	r2, r7
 80064ba:	f107 030c 	add.w	r3, r7, #12
 80064be:	4611      	mov	r1, r2
 80064c0:	4618      	mov	r0, r3
 80064c2:	f000 ffdf 	bl	8007484 <xTaskCheckForTimeOut>
 80064c6:	4603      	mov	r3, r0
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d132      	bne.n	8006532 <xQueueSemaphoreTake+0x1e6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80064cc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80064ce:	f000 f9fd 	bl	80068cc <prvIsQueueEmpty>
 80064d2:	4603      	mov	r3, r0
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d026      	beq.n	8006526 <xQueueSemaphoreTake+0x1da>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80064d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d109      	bne.n	80064f4 <xQueueSemaphoreTake+0x1a8>
					{
						taskENTER_CRITICAL();
 80064e0:	f001 ff84 	bl	80083ec <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80064e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064e6:	689b      	ldr	r3, [r3, #8]
 80064e8:	4618      	mov	r0, r3
 80064ea:	f001 f93b 	bl	8007764 <xTaskPriorityInherit>
 80064ee:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 80064f0:	f001 ffb2 	bl	8008458 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80064f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064f6:	3324      	adds	r3, #36	@ 0x24
 80064f8:	683a      	ldr	r2, [r7, #0]
 80064fa:	4611      	mov	r1, r2
 80064fc:	4618      	mov	r0, r3
 80064fe:	f000 feef 	bl	80072e0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006502:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006504:	f000 f990 	bl	8006828 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006508:	f000 fd16 	bl	8006f38 <xTaskResumeAll>
 800650c:	4603      	mov	r3, r0
 800650e:	2b00      	cmp	r3, #0
 8006510:	f47f af65 	bne.w	80063de <xQueueSemaphoreTake+0x92>
				{
					portYIELD_WITHIN_API();
 8006514:	4b18      	ldr	r3, [pc, #96]	@ (8006578 <xQueueSemaphoreTake+0x22c>)
 8006516:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800651a:	601a      	str	r2, [r3, #0]
 800651c:	f3bf 8f4f 	dsb	sy
 8006520:	f3bf 8f6f 	isb	sy
 8006524:	e75b      	b.n	80063de <xQueueSemaphoreTake+0x92>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8006526:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006528:	f000 f97e 	bl	8006828 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800652c:	f000 fd04 	bl	8006f38 <xTaskResumeAll>
 8006530:	e755      	b.n	80063de <xQueueSemaphoreTake+0x92>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8006532:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006534:	f000 f978 	bl	8006828 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006538:	f000 fcfe 	bl	8006f38 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800653c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800653e:	f000 f9c5 	bl	80068cc <prvIsQueueEmpty>
 8006542:	4603      	mov	r3, r0
 8006544:	2b00      	cmp	r3, #0
 8006546:	f43f af4a 	beq.w	80063de <xQueueSemaphoreTake+0x92>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800654a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800654c:	2b00      	cmp	r3, #0
 800654e:	d00d      	beq.n	800656c <xQueueSemaphoreTake+0x220>
					{
						taskENTER_CRITICAL();
 8006550:	f001 ff4c 	bl	80083ec <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006554:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006556:	f000 f8bf 	bl	80066d8 <prvGetDisinheritPriorityAfterTimeout>
 800655a:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800655c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800655e:	689b      	ldr	r3, [r3, #8]
 8006560:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006562:	4618      	mov	r0, r3
 8006564:	f001 f9da 	bl	800791c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006568:	f001 ff76 	bl	8008458 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800656c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800656e:	4618      	mov	r0, r3
 8006570:	3738      	adds	r7, #56	@ 0x38
 8006572:	46bd      	mov	sp, r7
 8006574:	bd80      	pop	{r7, pc}
 8006576:	bf00      	nop
 8006578:	e000ed04 	.word	0xe000ed04

0800657c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800657c:	b580      	push	{r7, lr}
 800657e:	b08e      	sub	sp, #56	@ 0x38
 8006580:	af00      	add	r7, sp, #0
 8006582:	60f8      	str	r0, [r7, #12]
 8006584:	60b9      	str	r1, [r7, #8]
 8006586:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800658c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800658e:	2b00      	cmp	r3, #0
 8006590:	d10d      	bne.n	80065ae <xQueueReceiveFromISR+0x32>
	__asm volatile
 8006592:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006596:	b672      	cpsid	i
 8006598:	f383 8811 	msr	BASEPRI, r3
 800659c:	f3bf 8f6f 	isb	sy
 80065a0:	f3bf 8f4f 	dsb	sy
 80065a4:	b662      	cpsie	i
 80065a6:	623b      	str	r3, [r7, #32]
}
 80065a8:	bf00      	nop
 80065aa:	bf00      	nop
 80065ac:	e7fd      	b.n	80065aa <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80065ae:	68bb      	ldr	r3, [r7, #8]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d103      	bne.n	80065bc <xQueueReceiveFromISR+0x40>
 80065b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d101      	bne.n	80065c0 <xQueueReceiveFromISR+0x44>
 80065bc:	2301      	movs	r3, #1
 80065be:	e000      	b.n	80065c2 <xQueueReceiveFromISR+0x46>
 80065c0:	2300      	movs	r3, #0
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d10d      	bne.n	80065e2 <xQueueReceiveFromISR+0x66>
	__asm volatile
 80065c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065ca:	b672      	cpsid	i
 80065cc:	f383 8811 	msr	BASEPRI, r3
 80065d0:	f3bf 8f6f 	isb	sy
 80065d4:	f3bf 8f4f 	dsb	sy
 80065d8:	b662      	cpsie	i
 80065da:	61fb      	str	r3, [r7, #28]
}
 80065dc:	bf00      	nop
 80065de:	bf00      	nop
 80065e0:	e7fd      	b.n	80065de <xQueueReceiveFromISR+0x62>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80065e2:	f001 ffeb 	bl	80085bc <vPortValidateInterruptPriority>
	__asm volatile
 80065e6:	f3ef 8211 	mrs	r2, BASEPRI
 80065ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065ee:	b672      	cpsid	i
 80065f0:	f383 8811 	msr	BASEPRI, r3
 80065f4:	f3bf 8f6f 	isb	sy
 80065f8:	f3bf 8f4f 	dsb	sy
 80065fc:	b662      	cpsie	i
 80065fe:	61ba      	str	r2, [r7, #24]
 8006600:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8006602:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006604:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006606:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006608:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800660a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800660c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800660e:	2b00      	cmp	r3, #0
 8006610:	d02f      	beq.n	8006672 <xQueueReceiveFromISR+0xf6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8006612:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006614:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006618:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800661c:	68b9      	ldr	r1, [r7, #8]
 800661e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006620:	f000 f8dc 	bl	80067dc <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006624:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006626:	1e5a      	subs	r2, r3, #1
 8006628:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800662a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800662c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006630:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006634:	d112      	bne.n	800665c <xQueueReceiveFromISR+0xe0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006636:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006638:	691b      	ldr	r3, [r3, #16]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d016      	beq.n	800666c <xQueueReceiveFromISR+0xf0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800663e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006640:	3310      	adds	r3, #16
 8006642:	4618      	mov	r0, r3
 8006644:	f000 fea2 	bl	800738c <xTaskRemoveFromEventList>
 8006648:	4603      	mov	r3, r0
 800664a:	2b00      	cmp	r3, #0
 800664c:	d00e      	beq.n	800666c <xQueueReceiveFromISR+0xf0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	2b00      	cmp	r3, #0
 8006652:	d00b      	beq.n	800666c <xQueueReceiveFromISR+0xf0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2201      	movs	r2, #1
 8006658:	601a      	str	r2, [r3, #0]
 800665a:	e007      	b.n	800666c <xQueueReceiveFromISR+0xf0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800665c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006660:	3301      	adds	r3, #1
 8006662:	b2db      	uxtb	r3, r3
 8006664:	b25a      	sxtb	r2, r3
 8006666:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006668:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800666c:	2301      	movs	r3, #1
 800666e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006670:	e001      	b.n	8006676 <xQueueReceiveFromISR+0xfa>
		}
		else
		{
			xReturn = pdFAIL;
 8006672:	2300      	movs	r3, #0
 8006674:	637b      	str	r3, [r7, #52]	@ 0x34
 8006676:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006678:	613b      	str	r3, [r7, #16]
	__asm volatile
 800667a:	693b      	ldr	r3, [r7, #16]
 800667c:	f383 8811 	msr	BASEPRI, r3
}
 8006680:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006682:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8006684:	4618      	mov	r0, r3
 8006686:	3738      	adds	r7, #56	@ 0x38
 8006688:	46bd      	mov	sp, r7
 800668a:	bd80      	pop	{r7, pc}

0800668c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800668c:	b580      	push	{r7, lr}
 800668e:	b084      	sub	sp, #16
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d10d      	bne.n	80066ba <vQueueDelete+0x2e>
	__asm volatile
 800669e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066a2:	b672      	cpsid	i
 80066a4:	f383 8811 	msr	BASEPRI, r3
 80066a8:	f3bf 8f6f 	isb	sy
 80066ac:	f3bf 8f4f 	dsb	sy
 80066b0:	b662      	cpsie	i
 80066b2:	60bb      	str	r3, [r7, #8]
}
 80066b4:	bf00      	nop
 80066b6:	bf00      	nop
 80066b8:	e7fd      	b.n	80066b6 <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80066ba:	68f8      	ldr	r0, [r7, #12]
 80066bc:	f000 f95e 	bl	800697c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d102      	bne.n	80066d0 <vQueueDelete+0x44>
		{
			vPortFree( pxQueue );
 80066ca:	68f8      	ldr	r0, [r7, #12]
 80066cc:	f002 f88a 	bl	80087e4 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80066d0:	bf00      	nop
 80066d2:	3710      	adds	r7, #16
 80066d4:	46bd      	mov	sp, r7
 80066d6:	bd80      	pop	{r7, pc}

080066d8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80066d8:	b480      	push	{r7}
 80066da:	b085      	sub	sp, #20
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d006      	beq.n	80066f6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 80066f2:	60fb      	str	r3, [r7, #12]
 80066f4:	e001      	b.n	80066fa <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80066f6:	2300      	movs	r3, #0
 80066f8:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80066fa:	68fb      	ldr	r3, [r7, #12]
	}
 80066fc:	4618      	mov	r0, r3
 80066fe:	3714      	adds	r7, #20
 8006700:	46bd      	mov	sp, r7
 8006702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006706:	4770      	bx	lr

08006708 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006708:	b580      	push	{r7, lr}
 800670a:	b086      	sub	sp, #24
 800670c:	af00      	add	r7, sp, #0
 800670e:	60f8      	str	r0, [r7, #12]
 8006710:	60b9      	str	r1, [r7, #8]
 8006712:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006714:	2300      	movs	r3, #0
 8006716:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800671c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006722:	2b00      	cmp	r3, #0
 8006724:	d10d      	bne.n	8006742 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d14d      	bne.n	80067ca <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	689b      	ldr	r3, [r3, #8]
 8006732:	4618      	mov	r0, r3
 8006734:	f001 f87e 	bl	8007834 <xTaskPriorityDisinherit>
 8006738:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	2200      	movs	r2, #0
 800673e:	609a      	str	r2, [r3, #8]
 8006740:	e043      	b.n	80067ca <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d119      	bne.n	800677c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	6858      	ldr	r0, [r3, #4]
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006750:	461a      	mov	r2, r3
 8006752:	68b9      	ldr	r1, [r7, #8]
 8006754:	f002 fba1 	bl	8008e9a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	685a      	ldr	r2, [r3, #4]
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006760:	441a      	add	r2, r3
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	685a      	ldr	r2, [r3, #4]
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	689b      	ldr	r3, [r3, #8]
 800676e:	429a      	cmp	r2, r3
 8006770:	d32b      	bcc.n	80067ca <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	681a      	ldr	r2, [r3, #0]
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	605a      	str	r2, [r3, #4]
 800677a:	e026      	b.n	80067ca <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	68d8      	ldr	r0, [r3, #12]
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006784:	461a      	mov	r2, r3
 8006786:	68b9      	ldr	r1, [r7, #8]
 8006788:	f002 fb87 	bl	8008e9a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	68da      	ldr	r2, [r3, #12]
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006794:	425b      	negs	r3, r3
 8006796:	441a      	add	r2, r3
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	68da      	ldr	r2, [r3, #12]
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	429a      	cmp	r2, r3
 80067a6:	d207      	bcs.n	80067b8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	689a      	ldr	r2, [r3, #8]
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067b0:	425b      	negs	r3, r3
 80067b2:	441a      	add	r2, r3
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2b02      	cmp	r3, #2
 80067bc:	d105      	bne.n	80067ca <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80067be:	693b      	ldr	r3, [r7, #16]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d002      	beq.n	80067ca <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80067c4:	693b      	ldr	r3, [r7, #16]
 80067c6:	3b01      	subs	r3, #1
 80067c8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80067ca:	693b      	ldr	r3, [r7, #16]
 80067cc:	1c5a      	adds	r2, r3, #1
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80067d2:	697b      	ldr	r3, [r7, #20]
}
 80067d4:	4618      	mov	r0, r3
 80067d6:	3718      	adds	r7, #24
 80067d8:	46bd      	mov	sp, r7
 80067da:	bd80      	pop	{r7, pc}

080067dc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	b082      	sub	sp, #8
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
 80067e4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d018      	beq.n	8006820 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	68da      	ldr	r2, [r3, #12]
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067f6:	441a      	add	r2, r3
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	68da      	ldr	r2, [r3, #12]
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	689b      	ldr	r3, [r3, #8]
 8006804:	429a      	cmp	r2, r3
 8006806:	d303      	bcc.n	8006810 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681a      	ldr	r2, [r3, #0]
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	68d9      	ldr	r1, [r3, #12]
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006818:	461a      	mov	r2, r3
 800681a:	6838      	ldr	r0, [r7, #0]
 800681c:	f002 fb3d 	bl	8008e9a <memcpy>
	}
}
 8006820:	bf00      	nop
 8006822:	3708      	adds	r7, #8
 8006824:	46bd      	mov	sp, r7
 8006826:	bd80      	pop	{r7, pc}

08006828 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b084      	sub	sp, #16
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006830:	f001 fddc 	bl	80083ec <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800683a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800683c:	e011      	b.n	8006862 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006842:	2b00      	cmp	r3, #0
 8006844:	d012      	beq.n	800686c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	3324      	adds	r3, #36	@ 0x24
 800684a:	4618      	mov	r0, r3
 800684c:	f000 fd9e 	bl	800738c <xTaskRemoveFromEventList>
 8006850:	4603      	mov	r3, r0
 8006852:	2b00      	cmp	r3, #0
 8006854:	d001      	beq.n	800685a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006856:	f000 fe7d 	bl	8007554 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800685a:	7bfb      	ldrb	r3, [r7, #15]
 800685c:	3b01      	subs	r3, #1
 800685e:	b2db      	uxtb	r3, r3
 8006860:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006862:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006866:	2b00      	cmp	r3, #0
 8006868:	dce9      	bgt.n	800683e <prvUnlockQueue+0x16>
 800686a:	e000      	b.n	800686e <prvUnlockQueue+0x46>
					break;
 800686c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	22ff      	movs	r2, #255	@ 0xff
 8006872:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8006876:	f001 fdef 	bl	8008458 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800687a:	f001 fdb7 	bl	80083ec <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006884:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006886:	e011      	b.n	80068ac <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	691b      	ldr	r3, [r3, #16]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d012      	beq.n	80068b6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	3310      	adds	r3, #16
 8006894:	4618      	mov	r0, r3
 8006896:	f000 fd79 	bl	800738c <xTaskRemoveFromEventList>
 800689a:	4603      	mov	r3, r0
 800689c:	2b00      	cmp	r3, #0
 800689e:	d001      	beq.n	80068a4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80068a0:	f000 fe58 	bl	8007554 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80068a4:	7bbb      	ldrb	r3, [r7, #14]
 80068a6:	3b01      	subs	r3, #1
 80068a8:	b2db      	uxtb	r3, r3
 80068aa:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80068ac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	dce9      	bgt.n	8006888 <prvUnlockQueue+0x60>
 80068b4:	e000      	b.n	80068b8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80068b6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	22ff      	movs	r2, #255	@ 0xff
 80068bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80068c0:	f001 fdca 	bl	8008458 <vPortExitCritical>
}
 80068c4:	bf00      	nop
 80068c6:	3710      	adds	r7, #16
 80068c8:	46bd      	mov	sp, r7
 80068ca:	bd80      	pop	{r7, pc}

080068cc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b084      	sub	sp, #16
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80068d4:	f001 fd8a 	bl	80083ec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d102      	bne.n	80068e6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80068e0:	2301      	movs	r3, #1
 80068e2:	60fb      	str	r3, [r7, #12]
 80068e4:	e001      	b.n	80068ea <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80068e6:	2300      	movs	r3, #0
 80068e8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80068ea:	f001 fdb5 	bl	8008458 <vPortExitCritical>

	return xReturn;
 80068ee:	68fb      	ldr	r3, [r7, #12]
}
 80068f0:	4618      	mov	r0, r3
 80068f2:	3710      	adds	r7, #16
 80068f4:	46bd      	mov	sp, r7
 80068f6:	bd80      	pop	{r7, pc}

080068f8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b084      	sub	sp, #16
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006900:	f001 fd74 	bl	80083ec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800690c:	429a      	cmp	r2, r3
 800690e:	d102      	bne.n	8006916 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006910:	2301      	movs	r3, #1
 8006912:	60fb      	str	r3, [r7, #12]
 8006914:	e001      	b.n	800691a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006916:	2300      	movs	r3, #0
 8006918:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800691a:	f001 fd9d 	bl	8008458 <vPortExitCritical>

	return xReturn;
 800691e:	68fb      	ldr	r3, [r7, #12]
}
 8006920:	4618      	mov	r0, r3
 8006922:	3710      	adds	r7, #16
 8006924:	46bd      	mov	sp, r7
 8006926:	bd80      	pop	{r7, pc}

08006928 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006928:	b480      	push	{r7}
 800692a:	b085      	sub	sp, #20
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
 8006930:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006932:	2300      	movs	r3, #0
 8006934:	60fb      	str	r3, [r7, #12]
 8006936:	e014      	b.n	8006962 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006938:	4a0f      	ldr	r2, [pc, #60]	@ (8006978 <vQueueAddToRegistry+0x50>)
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d10b      	bne.n	800695c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006944:	490c      	ldr	r1, [pc, #48]	@ (8006978 <vQueueAddToRegistry+0x50>)
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	683a      	ldr	r2, [r7, #0]
 800694a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800694e:	4a0a      	ldr	r2, [pc, #40]	@ (8006978 <vQueueAddToRegistry+0x50>)
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	00db      	lsls	r3, r3, #3
 8006954:	4413      	add	r3, r2
 8006956:	687a      	ldr	r2, [r7, #4]
 8006958:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800695a:	e006      	b.n	800696a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	3301      	adds	r3, #1
 8006960:	60fb      	str	r3, [r7, #12]
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	2b07      	cmp	r3, #7
 8006966:	d9e7      	bls.n	8006938 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006968:	bf00      	nop
 800696a:	bf00      	nop
 800696c:	3714      	adds	r7, #20
 800696e:	46bd      	mov	sp, r7
 8006970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006974:	4770      	bx	lr
 8006976:	bf00      	nop
 8006978:	200010fc 	.word	0x200010fc

0800697c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800697c:	b480      	push	{r7}
 800697e:	b085      	sub	sp, #20
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006984:	2300      	movs	r3, #0
 8006986:	60fb      	str	r3, [r7, #12]
 8006988:	e016      	b.n	80069b8 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800698a:	4a10      	ldr	r2, [pc, #64]	@ (80069cc <vQueueUnregisterQueue+0x50>)
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	00db      	lsls	r3, r3, #3
 8006990:	4413      	add	r3, r2
 8006992:	685b      	ldr	r3, [r3, #4]
 8006994:	687a      	ldr	r2, [r7, #4]
 8006996:	429a      	cmp	r2, r3
 8006998:	d10b      	bne.n	80069b2 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800699a:	4a0c      	ldr	r2, [pc, #48]	@ (80069cc <vQueueUnregisterQueue+0x50>)
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	2100      	movs	r1, #0
 80069a0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80069a4:	4a09      	ldr	r2, [pc, #36]	@ (80069cc <vQueueUnregisterQueue+0x50>)
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	00db      	lsls	r3, r3, #3
 80069aa:	4413      	add	r3, r2
 80069ac:	2200      	movs	r2, #0
 80069ae:	605a      	str	r2, [r3, #4]
				break;
 80069b0:	e006      	b.n	80069c0 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	3301      	adds	r3, #1
 80069b6:	60fb      	str	r3, [r7, #12]
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	2b07      	cmp	r3, #7
 80069bc:	d9e5      	bls.n	800698a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80069be:	bf00      	nop
 80069c0:	bf00      	nop
 80069c2:	3714      	adds	r7, #20
 80069c4:	46bd      	mov	sp, r7
 80069c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ca:	4770      	bx	lr
 80069cc:	200010fc 	.word	0x200010fc

080069d0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b086      	sub	sp, #24
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	60f8      	str	r0, [r7, #12]
 80069d8:	60b9      	str	r1, [r7, #8]
 80069da:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80069e0:	f001 fd04 	bl	80083ec <vPortEnterCritical>
 80069e4:	697b      	ldr	r3, [r7, #20]
 80069e6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80069ea:	b25b      	sxtb	r3, r3
 80069ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069f0:	d103      	bne.n	80069fa <vQueueWaitForMessageRestricted+0x2a>
 80069f2:	697b      	ldr	r3, [r7, #20]
 80069f4:	2200      	movs	r2, #0
 80069f6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80069fa:	697b      	ldr	r3, [r7, #20]
 80069fc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006a00:	b25b      	sxtb	r3, r3
 8006a02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a06:	d103      	bne.n	8006a10 <vQueueWaitForMessageRestricted+0x40>
 8006a08:	697b      	ldr	r3, [r7, #20]
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006a10:	f001 fd22 	bl	8008458 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006a14:	697b      	ldr	r3, [r7, #20]
 8006a16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d106      	bne.n	8006a2a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006a1c:	697b      	ldr	r3, [r7, #20]
 8006a1e:	3324      	adds	r3, #36	@ 0x24
 8006a20:	687a      	ldr	r2, [r7, #4]
 8006a22:	68b9      	ldr	r1, [r7, #8]
 8006a24:	4618      	mov	r0, r3
 8006a26:	f000 fc83 	bl	8007330 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006a2a:	6978      	ldr	r0, [r7, #20]
 8006a2c:	f7ff fefc 	bl	8006828 <prvUnlockQueue>
	}
 8006a30:	bf00      	nop
 8006a32:	3718      	adds	r7, #24
 8006a34:	46bd      	mov	sp, r7
 8006a36:	bd80      	pop	{r7, pc}

08006a38 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b08e      	sub	sp, #56	@ 0x38
 8006a3c:	af04      	add	r7, sp, #16
 8006a3e:	60f8      	str	r0, [r7, #12]
 8006a40:	60b9      	str	r1, [r7, #8]
 8006a42:	607a      	str	r2, [r7, #4]
 8006a44:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006a46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d10d      	bne.n	8006a68 <xTaskCreateStatic+0x30>
	__asm volatile
 8006a4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a50:	b672      	cpsid	i
 8006a52:	f383 8811 	msr	BASEPRI, r3
 8006a56:	f3bf 8f6f 	isb	sy
 8006a5a:	f3bf 8f4f 	dsb	sy
 8006a5e:	b662      	cpsie	i
 8006a60:	623b      	str	r3, [r7, #32]
}
 8006a62:	bf00      	nop
 8006a64:	bf00      	nop
 8006a66:	e7fd      	b.n	8006a64 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8006a68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d10d      	bne.n	8006a8a <xTaskCreateStatic+0x52>
	__asm volatile
 8006a6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a72:	b672      	cpsid	i
 8006a74:	f383 8811 	msr	BASEPRI, r3
 8006a78:	f3bf 8f6f 	isb	sy
 8006a7c:	f3bf 8f4f 	dsb	sy
 8006a80:	b662      	cpsie	i
 8006a82:	61fb      	str	r3, [r7, #28]
}
 8006a84:	bf00      	nop
 8006a86:	bf00      	nop
 8006a88:	e7fd      	b.n	8006a86 <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006a8a:	23a8      	movs	r3, #168	@ 0xa8
 8006a8c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006a8e:	693b      	ldr	r3, [r7, #16]
 8006a90:	2ba8      	cmp	r3, #168	@ 0xa8
 8006a92:	d00d      	beq.n	8006ab0 <xTaskCreateStatic+0x78>
	__asm volatile
 8006a94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a98:	b672      	cpsid	i
 8006a9a:	f383 8811 	msr	BASEPRI, r3
 8006a9e:	f3bf 8f6f 	isb	sy
 8006aa2:	f3bf 8f4f 	dsb	sy
 8006aa6:	b662      	cpsie	i
 8006aa8:	61bb      	str	r3, [r7, #24]
}
 8006aaa:	bf00      	nop
 8006aac:	bf00      	nop
 8006aae:	e7fd      	b.n	8006aac <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006ab0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006ab2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d01e      	beq.n	8006af6 <xTaskCreateStatic+0xbe>
 8006ab8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d01b      	beq.n	8006af6 <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006abe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ac0:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006ac2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ac4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006ac6:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006ac8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006aca:	2202      	movs	r2, #2
 8006acc:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	9303      	str	r3, [sp, #12]
 8006ad4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ad6:	9302      	str	r3, [sp, #8]
 8006ad8:	f107 0314 	add.w	r3, r7, #20
 8006adc:	9301      	str	r3, [sp, #4]
 8006ade:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ae0:	9300      	str	r3, [sp, #0]
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	687a      	ldr	r2, [r7, #4]
 8006ae6:	68b9      	ldr	r1, [r7, #8]
 8006ae8:	68f8      	ldr	r0, [r7, #12]
 8006aea:	f000 f851 	bl	8006b90 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006aee:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006af0:	f000 f8f8 	bl	8006ce4 <prvAddNewTaskToReadyList>
 8006af4:	e001      	b.n	8006afa <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 8006af6:	2300      	movs	r3, #0
 8006af8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006afa:	697b      	ldr	r3, [r7, #20]
	}
 8006afc:	4618      	mov	r0, r3
 8006afe:	3728      	adds	r7, #40	@ 0x28
 8006b00:	46bd      	mov	sp, r7
 8006b02:	bd80      	pop	{r7, pc}

08006b04 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b08c      	sub	sp, #48	@ 0x30
 8006b08:	af04      	add	r7, sp, #16
 8006b0a:	60f8      	str	r0, [r7, #12]
 8006b0c:	60b9      	str	r1, [r7, #8]
 8006b0e:	603b      	str	r3, [r7, #0]
 8006b10:	4613      	mov	r3, r2
 8006b12:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006b14:	88fb      	ldrh	r3, [r7, #6]
 8006b16:	009b      	lsls	r3, r3, #2
 8006b18:	4618      	mov	r0, r3
 8006b1a:	f001 fd95 	bl	8008648 <pvPortMalloc>
 8006b1e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006b20:	697b      	ldr	r3, [r7, #20]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d00e      	beq.n	8006b44 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006b26:	20a8      	movs	r0, #168	@ 0xa8
 8006b28:	f001 fd8e 	bl	8008648 <pvPortMalloc>
 8006b2c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006b2e:	69fb      	ldr	r3, [r7, #28]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d003      	beq.n	8006b3c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006b34:	69fb      	ldr	r3, [r7, #28]
 8006b36:	697a      	ldr	r2, [r7, #20]
 8006b38:	631a      	str	r2, [r3, #48]	@ 0x30
 8006b3a:	e005      	b.n	8006b48 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006b3c:	6978      	ldr	r0, [r7, #20]
 8006b3e:	f001 fe51 	bl	80087e4 <vPortFree>
 8006b42:	e001      	b.n	8006b48 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006b44:	2300      	movs	r3, #0
 8006b46:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006b48:	69fb      	ldr	r3, [r7, #28]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d017      	beq.n	8006b7e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006b4e:	69fb      	ldr	r3, [r7, #28]
 8006b50:	2200      	movs	r2, #0
 8006b52:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006b56:	88fa      	ldrh	r2, [r7, #6]
 8006b58:	2300      	movs	r3, #0
 8006b5a:	9303      	str	r3, [sp, #12]
 8006b5c:	69fb      	ldr	r3, [r7, #28]
 8006b5e:	9302      	str	r3, [sp, #8]
 8006b60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b62:	9301      	str	r3, [sp, #4]
 8006b64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b66:	9300      	str	r3, [sp, #0]
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	68b9      	ldr	r1, [r7, #8]
 8006b6c:	68f8      	ldr	r0, [r7, #12]
 8006b6e:	f000 f80f 	bl	8006b90 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006b72:	69f8      	ldr	r0, [r7, #28]
 8006b74:	f000 f8b6 	bl	8006ce4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006b78:	2301      	movs	r3, #1
 8006b7a:	61bb      	str	r3, [r7, #24]
 8006b7c:	e002      	b.n	8006b84 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006b7e:	f04f 33ff 	mov.w	r3, #4294967295
 8006b82:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006b84:	69bb      	ldr	r3, [r7, #24]
	}
 8006b86:	4618      	mov	r0, r3
 8006b88:	3720      	adds	r7, #32
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	bd80      	pop	{r7, pc}
	...

08006b90 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006b90:	b580      	push	{r7, lr}
 8006b92:	b088      	sub	sp, #32
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	60f8      	str	r0, [r7, #12]
 8006b98:	60b9      	str	r1, [r7, #8]
 8006b9a:	607a      	str	r2, [r7, #4]
 8006b9c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006b9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ba0:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	009b      	lsls	r3, r3, #2
 8006ba6:	461a      	mov	r2, r3
 8006ba8:	21a5      	movs	r1, #165	@ 0xa5
 8006baa:	f002 f89c 	bl	8008ce6 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006bae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bb0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006bb2:	6879      	ldr	r1, [r7, #4]
 8006bb4:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8006bb8:	440b      	add	r3, r1
 8006bba:	009b      	lsls	r3, r3, #2
 8006bbc:	4413      	add	r3, r2
 8006bbe:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006bc0:	69bb      	ldr	r3, [r7, #24]
 8006bc2:	f023 0307 	bic.w	r3, r3, #7
 8006bc6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006bc8:	69bb      	ldr	r3, [r7, #24]
 8006bca:	f003 0307 	and.w	r3, r3, #7
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d00d      	beq.n	8006bee <prvInitialiseNewTask+0x5e>
	__asm volatile
 8006bd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bd6:	b672      	cpsid	i
 8006bd8:	f383 8811 	msr	BASEPRI, r3
 8006bdc:	f3bf 8f6f 	isb	sy
 8006be0:	f3bf 8f4f 	dsb	sy
 8006be4:	b662      	cpsie	i
 8006be6:	617b      	str	r3, [r7, #20]
}
 8006be8:	bf00      	nop
 8006bea:	bf00      	nop
 8006bec:	e7fd      	b.n	8006bea <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006bee:	68bb      	ldr	r3, [r7, #8]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d01f      	beq.n	8006c34 <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	61fb      	str	r3, [r7, #28]
 8006bf8:	e012      	b.n	8006c20 <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006bfa:	68ba      	ldr	r2, [r7, #8]
 8006bfc:	69fb      	ldr	r3, [r7, #28]
 8006bfe:	4413      	add	r3, r2
 8006c00:	7819      	ldrb	r1, [r3, #0]
 8006c02:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006c04:	69fb      	ldr	r3, [r7, #28]
 8006c06:	4413      	add	r3, r2
 8006c08:	3334      	adds	r3, #52	@ 0x34
 8006c0a:	460a      	mov	r2, r1
 8006c0c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006c0e:	68ba      	ldr	r2, [r7, #8]
 8006c10:	69fb      	ldr	r3, [r7, #28]
 8006c12:	4413      	add	r3, r2
 8006c14:	781b      	ldrb	r3, [r3, #0]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d006      	beq.n	8006c28 <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006c1a:	69fb      	ldr	r3, [r7, #28]
 8006c1c:	3301      	adds	r3, #1
 8006c1e:	61fb      	str	r3, [r7, #28]
 8006c20:	69fb      	ldr	r3, [r7, #28]
 8006c22:	2b0f      	cmp	r3, #15
 8006c24:	d9e9      	bls.n	8006bfa <prvInitialiseNewTask+0x6a>
 8006c26:	e000      	b.n	8006c2a <prvInitialiseNewTask+0x9a>
			{
				break;
 8006c28:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006c2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006c32:	e003      	b.n	8006c3c <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006c34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c36:	2200      	movs	r2, #0
 8006c38:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006c3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c3e:	2b37      	cmp	r3, #55	@ 0x37
 8006c40:	d901      	bls.n	8006c46 <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006c42:	2337      	movs	r3, #55	@ 0x37
 8006c44:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006c46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c48:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006c4a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006c4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c4e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006c50:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006c52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c54:	2200      	movs	r2, #0
 8006c56:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006c58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c5a:	3304      	adds	r3, #4
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	f7fe fde3 	bl	8005828 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006c62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c64:	3318      	adds	r3, #24
 8006c66:	4618      	mov	r0, r3
 8006c68:	f7fe fdde 	bl	8005828 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006c6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c6e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006c70:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c74:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006c78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c7a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006c7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c7e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006c80:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006c82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c84:	2200      	movs	r2, #0
 8006c86:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006c8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006c92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c94:	3354      	adds	r3, #84	@ 0x54
 8006c96:	224c      	movs	r2, #76	@ 0x4c
 8006c98:	2100      	movs	r1, #0
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	f002 f823 	bl	8008ce6 <memset>
 8006ca0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ca2:	4a0d      	ldr	r2, [pc, #52]	@ (8006cd8 <prvInitialiseNewTask+0x148>)
 8006ca4:	659a      	str	r2, [r3, #88]	@ 0x58
 8006ca6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ca8:	4a0c      	ldr	r2, [pc, #48]	@ (8006cdc <prvInitialiseNewTask+0x14c>)
 8006caa:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006cac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cae:	4a0c      	ldr	r2, [pc, #48]	@ (8006ce0 <prvInitialiseNewTask+0x150>)
 8006cb0:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006cb2:	683a      	ldr	r2, [r7, #0]
 8006cb4:	68f9      	ldr	r1, [r7, #12]
 8006cb6:	69b8      	ldr	r0, [r7, #24]
 8006cb8:	f001 fa88 	bl	80081cc <pxPortInitialiseStack>
 8006cbc:	4602      	mov	r2, r0
 8006cbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cc0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006cc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d002      	beq.n	8006cce <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006cc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006ccc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006cce:	bf00      	nop
 8006cd0:	3720      	adds	r7, #32
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	bd80      	pop	{r7, pc}
 8006cd6:	bf00      	nop
 8006cd8:	20005388 	.word	0x20005388
 8006cdc:	200053f0 	.word	0x200053f0
 8006ce0:	20005458 	.word	0x20005458

08006ce4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	b082      	sub	sp, #8
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006cec:	f001 fb7e 	bl	80083ec <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006cf0:	4b2d      	ldr	r3, [pc, #180]	@ (8006da8 <prvAddNewTaskToReadyList+0xc4>)
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	3301      	adds	r3, #1
 8006cf6:	4a2c      	ldr	r2, [pc, #176]	@ (8006da8 <prvAddNewTaskToReadyList+0xc4>)
 8006cf8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006cfa:	4b2c      	ldr	r3, [pc, #176]	@ (8006dac <prvAddNewTaskToReadyList+0xc8>)
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d109      	bne.n	8006d16 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006d02:	4a2a      	ldr	r2, [pc, #168]	@ (8006dac <prvAddNewTaskToReadyList+0xc8>)
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006d08:	4b27      	ldr	r3, [pc, #156]	@ (8006da8 <prvAddNewTaskToReadyList+0xc4>)
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	2b01      	cmp	r3, #1
 8006d0e:	d110      	bne.n	8006d32 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006d10:	f000 fc44 	bl	800759c <prvInitialiseTaskLists>
 8006d14:	e00d      	b.n	8006d32 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006d16:	4b26      	ldr	r3, [pc, #152]	@ (8006db0 <prvAddNewTaskToReadyList+0xcc>)
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d109      	bne.n	8006d32 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006d1e:	4b23      	ldr	r3, [pc, #140]	@ (8006dac <prvAddNewTaskToReadyList+0xc8>)
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d28:	429a      	cmp	r2, r3
 8006d2a:	d802      	bhi.n	8006d32 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006d2c:	4a1f      	ldr	r2, [pc, #124]	@ (8006dac <prvAddNewTaskToReadyList+0xc8>)
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006d32:	4b20      	ldr	r3, [pc, #128]	@ (8006db4 <prvAddNewTaskToReadyList+0xd0>)
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	3301      	adds	r3, #1
 8006d38:	4a1e      	ldr	r2, [pc, #120]	@ (8006db4 <prvAddNewTaskToReadyList+0xd0>)
 8006d3a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006d3c:	4b1d      	ldr	r3, [pc, #116]	@ (8006db4 <prvAddNewTaskToReadyList+0xd0>)
 8006d3e:	681a      	ldr	r2, [r3, #0]
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d48:	4b1b      	ldr	r3, [pc, #108]	@ (8006db8 <prvAddNewTaskToReadyList+0xd4>)
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	429a      	cmp	r2, r3
 8006d4e:	d903      	bls.n	8006d58 <prvAddNewTaskToReadyList+0x74>
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d54:	4a18      	ldr	r2, [pc, #96]	@ (8006db8 <prvAddNewTaskToReadyList+0xd4>)
 8006d56:	6013      	str	r3, [r2, #0]
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d5c:	4613      	mov	r3, r2
 8006d5e:	009b      	lsls	r3, r3, #2
 8006d60:	4413      	add	r3, r2
 8006d62:	009b      	lsls	r3, r3, #2
 8006d64:	4a15      	ldr	r2, [pc, #84]	@ (8006dbc <prvAddNewTaskToReadyList+0xd8>)
 8006d66:	441a      	add	r2, r3
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	3304      	adds	r3, #4
 8006d6c:	4619      	mov	r1, r3
 8006d6e:	4610      	mov	r0, r2
 8006d70:	f7fe fd67 	bl	8005842 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006d74:	f001 fb70 	bl	8008458 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006d78:	4b0d      	ldr	r3, [pc, #52]	@ (8006db0 <prvAddNewTaskToReadyList+0xcc>)
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d00e      	beq.n	8006d9e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006d80:	4b0a      	ldr	r3, [pc, #40]	@ (8006dac <prvAddNewTaskToReadyList+0xc8>)
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d8a:	429a      	cmp	r2, r3
 8006d8c:	d207      	bcs.n	8006d9e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006d8e:	4b0c      	ldr	r3, [pc, #48]	@ (8006dc0 <prvAddNewTaskToReadyList+0xdc>)
 8006d90:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006d94:	601a      	str	r2, [r3, #0]
 8006d96:	f3bf 8f4f 	dsb	sy
 8006d9a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006d9e:	bf00      	nop
 8006da0:	3708      	adds	r7, #8
 8006da2:	46bd      	mov	sp, r7
 8006da4:	bd80      	pop	{r7, pc}
 8006da6:	bf00      	nop
 8006da8:	20001610 	.word	0x20001610
 8006dac:	2000113c 	.word	0x2000113c
 8006db0:	2000161c 	.word	0x2000161c
 8006db4:	2000162c 	.word	0x2000162c
 8006db8:	20001618 	.word	0x20001618
 8006dbc:	20001140 	.word	0x20001140
 8006dc0:	e000ed04 	.word	0xe000ed04

08006dc4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006dc4:	b580      	push	{r7, lr}
 8006dc6:	b084      	sub	sp, #16
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006dcc:	2300      	movs	r3, #0
 8006dce:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d01a      	beq.n	8006e0c <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006dd6:	4b15      	ldr	r3, [pc, #84]	@ (8006e2c <vTaskDelay+0x68>)
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d00d      	beq.n	8006dfa <vTaskDelay+0x36>
	__asm volatile
 8006dde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006de2:	b672      	cpsid	i
 8006de4:	f383 8811 	msr	BASEPRI, r3
 8006de8:	f3bf 8f6f 	isb	sy
 8006dec:	f3bf 8f4f 	dsb	sy
 8006df0:	b662      	cpsie	i
 8006df2:	60bb      	str	r3, [r7, #8]
}
 8006df4:	bf00      	nop
 8006df6:	bf00      	nop
 8006df8:	e7fd      	b.n	8006df6 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8006dfa:	f000 f88f 	bl	8006f1c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006dfe:	2100      	movs	r1, #0
 8006e00:	6878      	ldr	r0, [r7, #4]
 8006e02:	f000 fe27 	bl	8007a54 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006e06:	f000 f897 	bl	8006f38 <xTaskResumeAll>
 8006e0a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d107      	bne.n	8006e22 <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 8006e12:	4b07      	ldr	r3, [pc, #28]	@ (8006e30 <vTaskDelay+0x6c>)
 8006e14:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006e18:	601a      	str	r2, [r3, #0]
 8006e1a:	f3bf 8f4f 	dsb	sy
 8006e1e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006e22:	bf00      	nop
 8006e24:	3710      	adds	r7, #16
 8006e26:	46bd      	mov	sp, r7
 8006e28:	bd80      	pop	{r7, pc}
 8006e2a:	bf00      	nop
 8006e2c:	20001638 	.word	0x20001638
 8006e30:	e000ed04 	.word	0xe000ed04

08006e34 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006e34:	b580      	push	{r7, lr}
 8006e36:	b08a      	sub	sp, #40	@ 0x28
 8006e38:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006e3e:	2300      	movs	r3, #0
 8006e40:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006e42:	463a      	mov	r2, r7
 8006e44:	1d39      	adds	r1, r7, #4
 8006e46:	f107 0308 	add.w	r3, r7, #8
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	f7fe fc98 	bl	8005780 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006e50:	6839      	ldr	r1, [r7, #0]
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	68ba      	ldr	r2, [r7, #8]
 8006e56:	9202      	str	r2, [sp, #8]
 8006e58:	9301      	str	r3, [sp, #4]
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	9300      	str	r3, [sp, #0]
 8006e5e:	2300      	movs	r3, #0
 8006e60:	460a      	mov	r2, r1
 8006e62:	4926      	ldr	r1, [pc, #152]	@ (8006efc <vTaskStartScheduler+0xc8>)
 8006e64:	4826      	ldr	r0, [pc, #152]	@ (8006f00 <vTaskStartScheduler+0xcc>)
 8006e66:	f7ff fde7 	bl	8006a38 <xTaskCreateStatic>
 8006e6a:	4603      	mov	r3, r0
 8006e6c:	4a25      	ldr	r2, [pc, #148]	@ (8006f04 <vTaskStartScheduler+0xd0>)
 8006e6e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006e70:	4b24      	ldr	r3, [pc, #144]	@ (8006f04 <vTaskStartScheduler+0xd0>)
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d002      	beq.n	8006e7e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006e78:	2301      	movs	r3, #1
 8006e7a:	617b      	str	r3, [r7, #20]
 8006e7c:	e001      	b.n	8006e82 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006e7e:	2300      	movs	r3, #0
 8006e80:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006e82:	697b      	ldr	r3, [r7, #20]
 8006e84:	2b01      	cmp	r3, #1
 8006e86:	d102      	bne.n	8006e8e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006e88:	f000 fe38 	bl	8007afc <xTimerCreateTimerTask>
 8006e8c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006e8e:	697b      	ldr	r3, [r7, #20]
 8006e90:	2b01      	cmp	r3, #1
 8006e92:	d11d      	bne.n	8006ed0 <vTaskStartScheduler+0x9c>
	__asm volatile
 8006e94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e98:	b672      	cpsid	i
 8006e9a:	f383 8811 	msr	BASEPRI, r3
 8006e9e:	f3bf 8f6f 	isb	sy
 8006ea2:	f3bf 8f4f 	dsb	sy
 8006ea6:	b662      	cpsie	i
 8006ea8:	613b      	str	r3, [r7, #16]
}
 8006eaa:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006eac:	4b16      	ldr	r3, [pc, #88]	@ (8006f08 <vTaskStartScheduler+0xd4>)
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	3354      	adds	r3, #84	@ 0x54
 8006eb2:	4a16      	ldr	r2, [pc, #88]	@ (8006f0c <vTaskStartScheduler+0xd8>)
 8006eb4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006eb6:	4b16      	ldr	r3, [pc, #88]	@ (8006f10 <vTaskStartScheduler+0xdc>)
 8006eb8:	f04f 32ff 	mov.w	r2, #4294967295
 8006ebc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006ebe:	4b15      	ldr	r3, [pc, #84]	@ (8006f14 <vTaskStartScheduler+0xe0>)
 8006ec0:	2201      	movs	r2, #1
 8006ec2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006ec4:	4b14      	ldr	r3, [pc, #80]	@ (8006f18 <vTaskStartScheduler+0xe4>)
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006eca:	f001 fa11 	bl	80082f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006ece:	e011      	b.n	8006ef4 <vTaskStartScheduler+0xc0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006ed0:	697b      	ldr	r3, [r7, #20]
 8006ed2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ed6:	d10d      	bne.n	8006ef4 <vTaskStartScheduler+0xc0>
	__asm volatile
 8006ed8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006edc:	b672      	cpsid	i
 8006ede:	f383 8811 	msr	BASEPRI, r3
 8006ee2:	f3bf 8f6f 	isb	sy
 8006ee6:	f3bf 8f4f 	dsb	sy
 8006eea:	b662      	cpsie	i
 8006eec:	60fb      	str	r3, [r7, #12]
}
 8006eee:	bf00      	nop
 8006ef0:	bf00      	nop
 8006ef2:	e7fd      	b.n	8006ef0 <vTaskStartScheduler+0xbc>
}
 8006ef4:	bf00      	nop
 8006ef6:	3718      	adds	r7, #24
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	bd80      	pop	{r7, pc}
 8006efc:	08009f08 	.word	0x08009f08
 8006f00:	0800756d 	.word	0x0800756d
 8006f04:	20001634 	.word	0x20001634
 8006f08:	2000113c 	.word	0x2000113c
 8006f0c:	20000020 	.word	0x20000020
 8006f10:	20001630 	.word	0x20001630
 8006f14:	2000161c 	.word	0x2000161c
 8006f18:	20001614 	.word	0x20001614

08006f1c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006f1c:	b480      	push	{r7}
 8006f1e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006f20:	4b04      	ldr	r3, [pc, #16]	@ (8006f34 <vTaskSuspendAll+0x18>)
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	3301      	adds	r3, #1
 8006f26:	4a03      	ldr	r2, [pc, #12]	@ (8006f34 <vTaskSuspendAll+0x18>)
 8006f28:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8006f2a:	bf00      	nop
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f32:	4770      	bx	lr
 8006f34:	20001638 	.word	0x20001638

08006f38 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006f38:	b580      	push	{r7, lr}
 8006f3a:	b084      	sub	sp, #16
 8006f3c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006f3e:	2300      	movs	r3, #0
 8006f40:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006f42:	2300      	movs	r3, #0
 8006f44:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006f46:	4b43      	ldr	r3, [pc, #268]	@ (8007054 <xTaskResumeAll+0x11c>)
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d10d      	bne.n	8006f6a <xTaskResumeAll+0x32>
	__asm volatile
 8006f4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f52:	b672      	cpsid	i
 8006f54:	f383 8811 	msr	BASEPRI, r3
 8006f58:	f3bf 8f6f 	isb	sy
 8006f5c:	f3bf 8f4f 	dsb	sy
 8006f60:	b662      	cpsie	i
 8006f62:	603b      	str	r3, [r7, #0]
}
 8006f64:	bf00      	nop
 8006f66:	bf00      	nop
 8006f68:	e7fd      	b.n	8006f66 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006f6a:	f001 fa3f 	bl	80083ec <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006f6e:	4b39      	ldr	r3, [pc, #228]	@ (8007054 <xTaskResumeAll+0x11c>)
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	3b01      	subs	r3, #1
 8006f74:	4a37      	ldr	r2, [pc, #220]	@ (8007054 <xTaskResumeAll+0x11c>)
 8006f76:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006f78:	4b36      	ldr	r3, [pc, #216]	@ (8007054 <xTaskResumeAll+0x11c>)
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d162      	bne.n	8007046 <xTaskResumeAll+0x10e>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006f80:	4b35      	ldr	r3, [pc, #212]	@ (8007058 <xTaskResumeAll+0x120>)
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d05e      	beq.n	8007046 <xTaskResumeAll+0x10e>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006f88:	e02f      	b.n	8006fea <xTaskResumeAll+0xb2>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f8a:	4b34      	ldr	r3, [pc, #208]	@ (800705c <xTaskResumeAll+0x124>)
 8006f8c:	68db      	ldr	r3, [r3, #12]
 8006f8e:	68db      	ldr	r3, [r3, #12]
 8006f90:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	3318      	adds	r3, #24
 8006f96:	4618      	mov	r0, r3
 8006f98:	f7fe fcb0 	bl	80058fc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	3304      	adds	r3, #4
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	f7fe fcab 	bl	80058fc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006faa:	4b2d      	ldr	r3, [pc, #180]	@ (8007060 <xTaskResumeAll+0x128>)
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	429a      	cmp	r2, r3
 8006fb0:	d903      	bls.n	8006fba <xTaskResumeAll+0x82>
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fb6:	4a2a      	ldr	r2, [pc, #168]	@ (8007060 <xTaskResumeAll+0x128>)
 8006fb8:	6013      	str	r3, [r2, #0]
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006fbe:	4613      	mov	r3, r2
 8006fc0:	009b      	lsls	r3, r3, #2
 8006fc2:	4413      	add	r3, r2
 8006fc4:	009b      	lsls	r3, r3, #2
 8006fc6:	4a27      	ldr	r2, [pc, #156]	@ (8007064 <xTaskResumeAll+0x12c>)
 8006fc8:	441a      	add	r2, r3
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	3304      	adds	r3, #4
 8006fce:	4619      	mov	r1, r3
 8006fd0:	4610      	mov	r0, r2
 8006fd2:	f7fe fc36 	bl	8005842 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006fda:	4b23      	ldr	r3, [pc, #140]	@ (8007068 <xTaskResumeAll+0x130>)
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fe0:	429a      	cmp	r2, r3
 8006fe2:	d302      	bcc.n	8006fea <xTaskResumeAll+0xb2>
					{
						xYieldPending = pdTRUE;
 8006fe4:	4b21      	ldr	r3, [pc, #132]	@ (800706c <xTaskResumeAll+0x134>)
 8006fe6:	2201      	movs	r2, #1
 8006fe8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006fea:	4b1c      	ldr	r3, [pc, #112]	@ (800705c <xTaskResumeAll+0x124>)
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d1cb      	bne.n	8006f8a <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d001      	beq.n	8006ffc <xTaskResumeAll+0xc4>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006ff8:	f000 fb76 	bl	80076e8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006ffc:	4b1c      	ldr	r3, [pc, #112]	@ (8007070 <xTaskResumeAll+0x138>)
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	2b00      	cmp	r3, #0
 8007006:	d010      	beq.n	800702a <xTaskResumeAll+0xf2>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007008:	f000 f846 	bl	8007098 <xTaskIncrementTick>
 800700c:	4603      	mov	r3, r0
 800700e:	2b00      	cmp	r3, #0
 8007010:	d002      	beq.n	8007018 <xTaskResumeAll+0xe0>
							{
								xYieldPending = pdTRUE;
 8007012:	4b16      	ldr	r3, [pc, #88]	@ (800706c <xTaskResumeAll+0x134>)
 8007014:	2201      	movs	r2, #1
 8007016:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	3b01      	subs	r3, #1
 800701c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	2b00      	cmp	r3, #0
 8007022:	d1f1      	bne.n	8007008 <xTaskResumeAll+0xd0>

						uxPendedTicks = 0;
 8007024:	4b12      	ldr	r3, [pc, #72]	@ (8007070 <xTaskResumeAll+0x138>)
 8007026:	2200      	movs	r2, #0
 8007028:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800702a:	4b10      	ldr	r3, [pc, #64]	@ (800706c <xTaskResumeAll+0x134>)
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d009      	beq.n	8007046 <xTaskResumeAll+0x10e>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007032:	2301      	movs	r3, #1
 8007034:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007036:	4b0f      	ldr	r3, [pc, #60]	@ (8007074 <xTaskResumeAll+0x13c>)
 8007038:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800703c:	601a      	str	r2, [r3, #0]
 800703e:	f3bf 8f4f 	dsb	sy
 8007042:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007046:	f001 fa07 	bl	8008458 <vPortExitCritical>

	return xAlreadyYielded;
 800704a:	68bb      	ldr	r3, [r7, #8]
}
 800704c:	4618      	mov	r0, r3
 800704e:	3710      	adds	r7, #16
 8007050:	46bd      	mov	sp, r7
 8007052:	bd80      	pop	{r7, pc}
 8007054:	20001638 	.word	0x20001638
 8007058:	20001610 	.word	0x20001610
 800705c:	200015d0 	.word	0x200015d0
 8007060:	20001618 	.word	0x20001618
 8007064:	20001140 	.word	0x20001140
 8007068:	2000113c 	.word	0x2000113c
 800706c:	20001624 	.word	0x20001624
 8007070:	20001620 	.word	0x20001620
 8007074:	e000ed04 	.word	0xe000ed04

08007078 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007078:	b480      	push	{r7}
 800707a:	b083      	sub	sp, #12
 800707c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800707e:	4b05      	ldr	r3, [pc, #20]	@ (8007094 <xTaskGetTickCount+0x1c>)
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007084:	687b      	ldr	r3, [r7, #4]
}
 8007086:	4618      	mov	r0, r3
 8007088:	370c      	adds	r7, #12
 800708a:	46bd      	mov	sp, r7
 800708c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007090:	4770      	bx	lr
 8007092:	bf00      	nop
 8007094:	20001614 	.word	0x20001614

08007098 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007098:	b580      	push	{r7, lr}
 800709a:	b086      	sub	sp, #24
 800709c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800709e:	2300      	movs	r3, #0
 80070a0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80070a2:	4b50      	ldr	r3, [pc, #320]	@ (80071e4 <xTaskIncrementTick+0x14c>)
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	f040 808c 	bne.w	80071c4 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80070ac:	4b4e      	ldr	r3, [pc, #312]	@ (80071e8 <xTaskIncrementTick+0x150>)
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	3301      	adds	r3, #1
 80070b2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80070b4:	4a4c      	ldr	r2, [pc, #304]	@ (80071e8 <xTaskIncrementTick+0x150>)
 80070b6:	693b      	ldr	r3, [r7, #16]
 80070b8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80070ba:	693b      	ldr	r3, [r7, #16]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d123      	bne.n	8007108 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 80070c0:	4b4a      	ldr	r3, [pc, #296]	@ (80071ec <xTaskIncrementTick+0x154>)
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d00d      	beq.n	80070e6 <xTaskIncrementTick+0x4e>
	__asm volatile
 80070ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070ce:	b672      	cpsid	i
 80070d0:	f383 8811 	msr	BASEPRI, r3
 80070d4:	f3bf 8f6f 	isb	sy
 80070d8:	f3bf 8f4f 	dsb	sy
 80070dc:	b662      	cpsie	i
 80070de:	603b      	str	r3, [r7, #0]
}
 80070e0:	bf00      	nop
 80070e2:	bf00      	nop
 80070e4:	e7fd      	b.n	80070e2 <xTaskIncrementTick+0x4a>
 80070e6:	4b41      	ldr	r3, [pc, #260]	@ (80071ec <xTaskIncrementTick+0x154>)
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	60fb      	str	r3, [r7, #12]
 80070ec:	4b40      	ldr	r3, [pc, #256]	@ (80071f0 <xTaskIncrementTick+0x158>)
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	4a3e      	ldr	r2, [pc, #248]	@ (80071ec <xTaskIncrementTick+0x154>)
 80070f2:	6013      	str	r3, [r2, #0]
 80070f4:	4a3e      	ldr	r2, [pc, #248]	@ (80071f0 <xTaskIncrementTick+0x158>)
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	6013      	str	r3, [r2, #0]
 80070fa:	4b3e      	ldr	r3, [pc, #248]	@ (80071f4 <xTaskIncrementTick+0x15c>)
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	3301      	adds	r3, #1
 8007100:	4a3c      	ldr	r2, [pc, #240]	@ (80071f4 <xTaskIncrementTick+0x15c>)
 8007102:	6013      	str	r3, [r2, #0]
 8007104:	f000 faf0 	bl	80076e8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007108:	4b3b      	ldr	r3, [pc, #236]	@ (80071f8 <xTaskIncrementTick+0x160>)
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	693a      	ldr	r2, [r7, #16]
 800710e:	429a      	cmp	r2, r3
 8007110:	d349      	bcc.n	80071a6 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007112:	4b36      	ldr	r3, [pc, #216]	@ (80071ec <xTaskIncrementTick+0x154>)
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d104      	bne.n	8007126 <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800711c:	4b36      	ldr	r3, [pc, #216]	@ (80071f8 <xTaskIncrementTick+0x160>)
 800711e:	f04f 32ff 	mov.w	r2, #4294967295
 8007122:	601a      	str	r2, [r3, #0]
					break;
 8007124:	e03f      	b.n	80071a6 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007126:	4b31      	ldr	r3, [pc, #196]	@ (80071ec <xTaskIncrementTick+0x154>)
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	68db      	ldr	r3, [r3, #12]
 800712c:	68db      	ldr	r3, [r3, #12]
 800712e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007130:	68bb      	ldr	r3, [r7, #8]
 8007132:	685b      	ldr	r3, [r3, #4]
 8007134:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007136:	693a      	ldr	r2, [r7, #16]
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	429a      	cmp	r2, r3
 800713c:	d203      	bcs.n	8007146 <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800713e:	4a2e      	ldr	r2, [pc, #184]	@ (80071f8 <xTaskIncrementTick+0x160>)
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007144:	e02f      	b.n	80071a6 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007146:	68bb      	ldr	r3, [r7, #8]
 8007148:	3304      	adds	r3, #4
 800714a:	4618      	mov	r0, r3
 800714c:	f7fe fbd6 	bl	80058fc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007150:	68bb      	ldr	r3, [r7, #8]
 8007152:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007154:	2b00      	cmp	r3, #0
 8007156:	d004      	beq.n	8007162 <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007158:	68bb      	ldr	r3, [r7, #8]
 800715a:	3318      	adds	r3, #24
 800715c:	4618      	mov	r0, r3
 800715e:	f7fe fbcd 	bl	80058fc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007162:	68bb      	ldr	r3, [r7, #8]
 8007164:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007166:	4b25      	ldr	r3, [pc, #148]	@ (80071fc <xTaskIncrementTick+0x164>)
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	429a      	cmp	r2, r3
 800716c:	d903      	bls.n	8007176 <xTaskIncrementTick+0xde>
 800716e:	68bb      	ldr	r3, [r7, #8]
 8007170:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007172:	4a22      	ldr	r2, [pc, #136]	@ (80071fc <xTaskIncrementTick+0x164>)
 8007174:	6013      	str	r3, [r2, #0]
 8007176:	68bb      	ldr	r3, [r7, #8]
 8007178:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800717a:	4613      	mov	r3, r2
 800717c:	009b      	lsls	r3, r3, #2
 800717e:	4413      	add	r3, r2
 8007180:	009b      	lsls	r3, r3, #2
 8007182:	4a1f      	ldr	r2, [pc, #124]	@ (8007200 <xTaskIncrementTick+0x168>)
 8007184:	441a      	add	r2, r3
 8007186:	68bb      	ldr	r3, [r7, #8]
 8007188:	3304      	adds	r3, #4
 800718a:	4619      	mov	r1, r3
 800718c:	4610      	mov	r0, r2
 800718e:	f7fe fb58 	bl	8005842 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007192:	68bb      	ldr	r3, [r7, #8]
 8007194:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007196:	4b1b      	ldr	r3, [pc, #108]	@ (8007204 <xTaskIncrementTick+0x16c>)
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800719c:	429a      	cmp	r2, r3
 800719e:	d3b8      	bcc.n	8007112 <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 80071a0:	2301      	movs	r3, #1
 80071a2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80071a4:	e7b5      	b.n	8007112 <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80071a6:	4b17      	ldr	r3, [pc, #92]	@ (8007204 <xTaskIncrementTick+0x16c>)
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80071ac:	4914      	ldr	r1, [pc, #80]	@ (8007200 <xTaskIncrementTick+0x168>)
 80071ae:	4613      	mov	r3, r2
 80071b0:	009b      	lsls	r3, r3, #2
 80071b2:	4413      	add	r3, r2
 80071b4:	009b      	lsls	r3, r3, #2
 80071b6:	440b      	add	r3, r1
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	2b01      	cmp	r3, #1
 80071bc:	d907      	bls.n	80071ce <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 80071be:	2301      	movs	r3, #1
 80071c0:	617b      	str	r3, [r7, #20]
 80071c2:	e004      	b.n	80071ce <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80071c4:	4b10      	ldr	r3, [pc, #64]	@ (8007208 <xTaskIncrementTick+0x170>)
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	3301      	adds	r3, #1
 80071ca:	4a0f      	ldr	r2, [pc, #60]	@ (8007208 <xTaskIncrementTick+0x170>)
 80071cc:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80071ce:	4b0f      	ldr	r3, [pc, #60]	@ (800720c <xTaskIncrementTick+0x174>)
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d001      	beq.n	80071da <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 80071d6:	2301      	movs	r3, #1
 80071d8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80071da:	697b      	ldr	r3, [r7, #20]
}
 80071dc:	4618      	mov	r0, r3
 80071de:	3718      	adds	r7, #24
 80071e0:	46bd      	mov	sp, r7
 80071e2:	bd80      	pop	{r7, pc}
 80071e4:	20001638 	.word	0x20001638
 80071e8:	20001614 	.word	0x20001614
 80071ec:	200015c8 	.word	0x200015c8
 80071f0:	200015cc 	.word	0x200015cc
 80071f4:	20001628 	.word	0x20001628
 80071f8:	20001630 	.word	0x20001630
 80071fc:	20001618 	.word	0x20001618
 8007200:	20001140 	.word	0x20001140
 8007204:	2000113c 	.word	0x2000113c
 8007208:	20001620 	.word	0x20001620
 800720c:	20001624 	.word	0x20001624

08007210 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007210:	b480      	push	{r7}
 8007212:	b085      	sub	sp, #20
 8007214:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007216:	4b2c      	ldr	r3, [pc, #176]	@ (80072c8 <vTaskSwitchContext+0xb8>)
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	2b00      	cmp	r3, #0
 800721c:	d003      	beq.n	8007226 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800721e:	4b2b      	ldr	r3, [pc, #172]	@ (80072cc <vTaskSwitchContext+0xbc>)
 8007220:	2201      	movs	r2, #1
 8007222:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007224:	e049      	b.n	80072ba <vTaskSwitchContext+0xaa>
		xYieldPending = pdFALSE;
 8007226:	4b29      	ldr	r3, [pc, #164]	@ (80072cc <vTaskSwitchContext+0xbc>)
 8007228:	2200      	movs	r2, #0
 800722a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800722c:	4b28      	ldr	r3, [pc, #160]	@ (80072d0 <vTaskSwitchContext+0xc0>)
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	60fb      	str	r3, [r7, #12]
 8007232:	e013      	b.n	800725c <vTaskSwitchContext+0x4c>
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d10d      	bne.n	8007256 <vTaskSwitchContext+0x46>
	__asm volatile
 800723a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800723e:	b672      	cpsid	i
 8007240:	f383 8811 	msr	BASEPRI, r3
 8007244:	f3bf 8f6f 	isb	sy
 8007248:	f3bf 8f4f 	dsb	sy
 800724c:	b662      	cpsie	i
 800724e:	607b      	str	r3, [r7, #4]
}
 8007250:	bf00      	nop
 8007252:	bf00      	nop
 8007254:	e7fd      	b.n	8007252 <vTaskSwitchContext+0x42>
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	3b01      	subs	r3, #1
 800725a:	60fb      	str	r3, [r7, #12]
 800725c:	491d      	ldr	r1, [pc, #116]	@ (80072d4 <vTaskSwitchContext+0xc4>)
 800725e:	68fa      	ldr	r2, [r7, #12]
 8007260:	4613      	mov	r3, r2
 8007262:	009b      	lsls	r3, r3, #2
 8007264:	4413      	add	r3, r2
 8007266:	009b      	lsls	r3, r3, #2
 8007268:	440b      	add	r3, r1
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	2b00      	cmp	r3, #0
 800726e:	d0e1      	beq.n	8007234 <vTaskSwitchContext+0x24>
 8007270:	68fa      	ldr	r2, [r7, #12]
 8007272:	4613      	mov	r3, r2
 8007274:	009b      	lsls	r3, r3, #2
 8007276:	4413      	add	r3, r2
 8007278:	009b      	lsls	r3, r3, #2
 800727a:	4a16      	ldr	r2, [pc, #88]	@ (80072d4 <vTaskSwitchContext+0xc4>)
 800727c:	4413      	add	r3, r2
 800727e:	60bb      	str	r3, [r7, #8]
 8007280:	68bb      	ldr	r3, [r7, #8]
 8007282:	685b      	ldr	r3, [r3, #4]
 8007284:	685a      	ldr	r2, [r3, #4]
 8007286:	68bb      	ldr	r3, [r7, #8]
 8007288:	605a      	str	r2, [r3, #4]
 800728a:	68bb      	ldr	r3, [r7, #8]
 800728c:	685a      	ldr	r2, [r3, #4]
 800728e:	68bb      	ldr	r3, [r7, #8]
 8007290:	3308      	adds	r3, #8
 8007292:	429a      	cmp	r2, r3
 8007294:	d104      	bne.n	80072a0 <vTaskSwitchContext+0x90>
 8007296:	68bb      	ldr	r3, [r7, #8]
 8007298:	685b      	ldr	r3, [r3, #4]
 800729a:	685a      	ldr	r2, [r3, #4]
 800729c:	68bb      	ldr	r3, [r7, #8]
 800729e:	605a      	str	r2, [r3, #4]
 80072a0:	68bb      	ldr	r3, [r7, #8]
 80072a2:	685b      	ldr	r3, [r3, #4]
 80072a4:	68db      	ldr	r3, [r3, #12]
 80072a6:	4a0c      	ldr	r2, [pc, #48]	@ (80072d8 <vTaskSwitchContext+0xc8>)
 80072a8:	6013      	str	r3, [r2, #0]
 80072aa:	4a09      	ldr	r2, [pc, #36]	@ (80072d0 <vTaskSwitchContext+0xc0>)
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80072b0:	4b09      	ldr	r3, [pc, #36]	@ (80072d8 <vTaskSwitchContext+0xc8>)
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	3354      	adds	r3, #84	@ 0x54
 80072b6:	4a09      	ldr	r2, [pc, #36]	@ (80072dc <vTaskSwitchContext+0xcc>)
 80072b8:	6013      	str	r3, [r2, #0]
}
 80072ba:	bf00      	nop
 80072bc:	3714      	adds	r7, #20
 80072be:	46bd      	mov	sp, r7
 80072c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c4:	4770      	bx	lr
 80072c6:	bf00      	nop
 80072c8:	20001638 	.word	0x20001638
 80072cc:	20001624 	.word	0x20001624
 80072d0:	20001618 	.word	0x20001618
 80072d4:	20001140 	.word	0x20001140
 80072d8:	2000113c 	.word	0x2000113c
 80072dc:	20000020 	.word	0x20000020

080072e0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80072e0:	b580      	push	{r7, lr}
 80072e2:	b084      	sub	sp, #16
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
 80072e8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d10d      	bne.n	800730c <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 80072f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072f4:	b672      	cpsid	i
 80072f6:	f383 8811 	msr	BASEPRI, r3
 80072fa:	f3bf 8f6f 	isb	sy
 80072fe:	f3bf 8f4f 	dsb	sy
 8007302:	b662      	cpsie	i
 8007304:	60fb      	str	r3, [r7, #12]
}
 8007306:	bf00      	nop
 8007308:	bf00      	nop
 800730a:	e7fd      	b.n	8007308 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800730c:	4b07      	ldr	r3, [pc, #28]	@ (800732c <vTaskPlaceOnEventList+0x4c>)
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	3318      	adds	r3, #24
 8007312:	4619      	mov	r1, r3
 8007314:	6878      	ldr	r0, [r7, #4]
 8007316:	f7fe fab8 	bl	800588a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800731a:	2101      	movs	r1, #1
 800731c:	6838      	ldr	r0, [r7, #0]
 800731e:	f000 fb99 	bl	8007a54 <prvAddCurrentTaskToDelayedList>
}
 8007322:	bf00      	nop
 8007324:	3710      	adds	r7, #16
 8007326:	46bd      	mov	sp, r7
 8007328:	bd80      	pop	{r7, pc}
 800732a:	bf00      	nop
 800732c:	2000113c 	.word	0x2000113c

08007330 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007330:	b580      	push	{r7, lr}
 8007332:	b086      	sub	sp, #24
 8007334:	af00      	add	r7, sp, #0
 8007336:	60f8      	str	r0, [r7, #12]
 8007338:	60b9      	str	r1, [r7, #8]
 800733a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	2b00      	cmp	r3, #0
 8007340:	d10d      	bne.n	800735e <vTaskPlaceOnEventListRestricted+0x2e>
	__asm volatile
 8007342:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007346:	b672      	cpsid	i
 8007348:	f383 8811 	msr	BASEPRI, r3
 800734c:	f3bf 8f6f 	isb	sy
 8007350:	f3bf 8f4f 	dsb	sy
 8007354:	b662      	cpsie	i
 8007356:	617b      	str	r3, [r7, #20]
}
 8007358:	bf00      	nop
 800735a:	bf00      	nop
 800735c:	e7fd      	b.n	800735a <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800735e:	4b0a      	ldr	r3, [pc, #40]	@ (8007388 <vTaskPlaceOnEventListRestricted+0x58>)
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	3318      	adds	r3, #24
 8007364:	4619      	mov	r1, r3
 8007366:	68f8      	ldr	r0, [r7, #12]
 8007368:	f7fe fa6b 	bl	8005842 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d002      	beq.n	8007378 <vTaskPlaceOnEventListRestricted+0x48>
		{
			xTicksToWait = portMAX_DELAY;
 8007372:	f04f 33ff 	mov.w	r3, #4294967295
 8007376:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007378:	6879      	ldr	r1, [r7, #4]
 800737a:	68b8      	ldr	r0, [r7, #8]
 800737c:	f000 fb6a 	bl	8007a54 <prvAddCurrentTaskToDelayedList>
	}
 8007380:	bf00      	nop
 8007382:	3718      	adds	r7, #24
 8007384:	46bd      	mov	sp, r7
 8007386:	bd80      	pop	{r7, pc}
 8007388:	2000113c 	.word	0x2000113c

0800738c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800738c:	b580      	push	{r7, lr}
 800738e:	b086      	sub	sp, #24
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	68db      	ldr	r3, [r3, #12]
 8007398:	68db      	ldr	r3, [r3, #12]
 800739a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800739c:	693b      	ldr	r3, [r7, #16]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d10d      	bne.n	80073be <xTaskRemoveFromEventList+0x32>
	__asm volatile
 80073a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073a6:	b672      	cpsid	i
 80073a8:	f383 8811 	msr	BASEPRI, r3
 80073ac:	f3bf 8f6f 	isb	sy
 80073b0:	f3bf 8f4f 	dsb	sy
 80073b4:	b662      	cpsie	i
 80073b6:	60fb      	str	r3, [r7, #12]
}
 80073b8:	bf00      	nop
 80073ba:	bf00      	nop
 80073bc:	e7fd      	b.n	80073ba <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80073be:	693b      	ldr	r3, [r7, #16]
 80073c0:	3318      	adds	r3, #24
 80073c2:	4618      	mov	r0, r3
 80073c4:	f7fe fa9a 	bl	80058fc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80073c8:	4b1d      	ldr	r3, [pc, #116]	@ (8007440 <xTaskRemoveFromEventList+0xb4>)
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d11d      	bne.n	800740c <xTaskRemoveFromEventList+0x80>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80073d0:	693b      	ldr	r3, [r7, #16]
 80073d2:	3304      	adds	r3, #4
 80073d4:	4618      	mov	r0, r3
 80073d6:	f7fe fa91 	bl	80058fc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80073da:	693b      	ldr	r3, [r7, #16]
 80073dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80073de:	4b19      	ldr	r3, [pc, #100]	@ (8007444 <xTaskRemoveFromEventList+0xb8>)
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	429a      	cmp	r2, r3
 80073e4:	d903      	bls.n	80073ee <xTaskRemoveFromEventList+0x62>
 80073e6:	693b      	ldr	r3, [r7, #16]
 80073e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073ea:	4a16      	ldr	r2, [pc, #88]	@ (8007444 <xTaskRemoveFromEventList+0xb8>)
 80073ec:	6013      	str	r3, [r2, #0]
 80073ee:	693b      	ldr	r3, [r7, #16]
 80073f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80073f2:	4613      	mov	r3, r2
 80073f4:	009b      	lsls	r3, r3, #2
 80073f6:	4413      	add	r3, r2
 80073f8:	009b      	lsls	r3, r3, #2
 80073fa:	4a13      	ldr	r2, [pc, #76]	@ (8007448 <xTaskRemoveFromEventList+0xbc>)
 80073fc:	441a      	add	r2, r3
 80073fe:	693b      	ldr	r3, [r7, #16]
 8007400:	3304      	adds	r3, #4
 8007402:	4619      	mov	r1, r3
 8007404:	4610      	mov	r0, r2
 8007406:	f7fe fa1c 	bl	8005842 <vListInsertEnd>
 800740a:	e005      	b.n	8007418 <xTaskRemoveFromEventList+0x8c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800740c:	693b      	ldr	r3, [r7, #16]
 800740e:	3318      	adds	r3, #24
 8007410:	4619      	mov	r1, r3
 8007412:	480e      	ldr	r0, [pc, #56]	@ (800744c <xTaskRemoveFromEventList+0xc0>)
 8007414:	f7fe fa15 	bl	8005842 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007418:	693b      	ldr	r3, [r7, #16]
 800741a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800741c:	4b0c      	ldr	r3, [pc, #48]	@ (8007450 <xTaskRemoveFromEventList+0xc4>)
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007422:	429a      	cmp	r2, r3
 8007424:	d905      	bls.n	8007432 <xTaskRemoveFromEventList+0xa6>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007426:	2301      	movs	r3, #1
 8007428:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800742a:	4b0a      	ldr	r3, [pc, #40]	@ (8007454 <xTaskRemoveFromEventList+0xc8>)
 800742c:	2201      	movs	r2, #1
 800742e:	601a      	str	r2, [r3, #0]
 8007430:	e001      	b.n	8007436 <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		xReturn = pdFALSE;
 8007432:	2300      	movs	r3, #0
 8007434:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007436:	697b      	ldr	r3, [r7, #20]
}
 8007438:	4618      	mov	r0, r3
 800743a:	3718      	adds	r7, #24
 800743c:	46bd      	mov	sp, r7
 800743e:	bd80      	pop	{r7, pc}
 8007440:	20001638 	.word	0x20001638
 8007444:	20001618 	.word	0x20001618
 8007448:	20001140 	.word	0x20001140
 800744c:	200015d0 	.word	0x200015d0
 8007450:	2000113c 	.word	0x2000113c
 8007454:	20001624 	.word	0x20001624

08007458 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007458:	b480      	push	{r7}
 800745a:	b083      	sub	sp, #12
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007460:	4b06      	ldr	r3, [pc, #24]	@ (800747c <vTaskInternalSetTimeOutState+0x24>)
 8007462:	681a      	ldr	r2, [r3, #0]
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007468:	4b05      	ldr	r3, [pc, #20]	@ (8007480 <vTaskInternalSetTimeOutState+0x28>)
 800746a:	681a      	ldr	r2, [r3, #0]
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	605a      	str	r2, [r3, #4]
}
 8007470:	bf00      	nop
 8007472:	370c      	adds	r7, #12
 8007474:	46bd      	mov	sp, r7
 8007476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747a:	4770      	bx	lr
 800747c:	20001628 	.word	0x20001628
 8007480:	20001614 	.word	0x20001614

08007484 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007484:	b580      	push	{r7, lr}
 8007486:	b088      	sub	sp, #32
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
 800748c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	2b00      	cmp	r3, #0
 8007492:	d10d      	bne.n	80074b0 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 8007494:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007498:	b672      	cpsid	i
 800749a:	f383 8811 	msr	BASEPRI, r3
 800749e:	f3bf 8f6f 	isb	sy
 80074a2:	f3bf 8f4f 	dsb	sy
 80074a6:	b662      	cpsie	i
 80074a8:	613b      	str	r3, [r7, #16]
}
 80074aa:	bf00      	nop
 80074ac:	bf00      	nop
 80074ae:	e7fd      	b.n	80074ac <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 80074b0:	683b      	ldr	r3, [r7, #0]
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d10d      	bne.n	80074d2 <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 80074b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074ba:	b672      	cpsid	i
 80074bc:	f383 8811 	msr	BASEPRI, r3
 80074c0:	f3bf 8f6f 	isb	sy
 80074c4:	f3bf 8f4f 	dsb	sy
 80074c8:	b662      	cpsie	i
 80074ca:	60fb      	str	r3, [r7, #12]
}
 80074cc:	bf00      	nop
 80074ce:	bf00      	nop
 80074d0:	e7fd      	b.n	80074ce <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 80074d2:	f000 ff8b 	bl	80083ec <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80074d6:	4b1d      	ldr	r3, [pc, #116]	@ (800754c <xTaskCheckForTimeOut+0xc8>)
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	685b      	ldr	r3, [r3, #4]
 80074e0:	69ba      	ldr	r2, [r7, #24]
 80074e2:	1ad3      	subs	r3, r2, r3
 80074e4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80074e6:	683b      	ldr	r3, [r7, #0]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074ee:	d102      	bne.n	80074f6 <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80074f0:	2300      	movs	r3, #0
 80074f2:	61fb      	str	r3, [r7, #28]
 80074f4:	e023      	b.n	800753e <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681a      	ldr	r2, [r3, #0]
 80074fa:	4b15      	ldr	r3, [pc, #84]	@ (8007550 <xTaskCheckForTimeOut+0xcc>)
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	429a      	cmp	r2, r3
 8007500:	d007      	beq.n	8007512 <xTaskCheckForTimeOut+0x8e>
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	685b      	ldr	r3, [r3, #4]
 8007506:	69ba      	ldr	r2, [r7, #24]
 8007508:	429a      	cmp	r2, r3
 800750a:	d302      	bcc.n	8007512 <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800750c:	2301      	movs	r3, #1
 800750e:	61fb      	str	r3, [r7, #28]
 8007510:	e015      	b.n	800753e <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007512:	683b      	ldr	r3, [r7, #0]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	697a      	ldr	r2, [r7, #20]
 8007518:	429a      	cmp	r2, r3
 800751a:	d20b      	bcs.n	8007534 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800751c:	683b      	ldr	r3, [r7, #0]
 800751e:	681a      	ldr	r2, [r3, #0]
 8007520:	697b      	ldr	r3, [r7, #20]
 8007522:	1ad2      	subs	r2, r2, r3
 8007524:	683b      	ldr	r3, [r7, #0]
 8007526:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007528:	6878      	ldr	r0, [r7, #4]
 800752a:	f7ff ff95 	bl	8007458 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800752e:	2300      	movs	r3, #0
 8007530:	61fb      	str	r3, [r7, #28]
 8007532:	e004      	b.n	800753e <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 8007534:	683b      	ldr	r3, [r7, #0]
 8007536:	2200      	movs	r2, #0
 8007538:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800753a:	2301      	movs	r3, #1
 800753c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800753e:	f000 ff8b 	bl	8008458 <vPortExitCritical>

	return xReturn;
 8007542:	69fb      	ldr	r3, [r7, #28]
}
 8007544:	4618      	mov	r0, r3
 8007546:	3720      	adds	r7, #32
 8007548:	46bd      	mov	sp, r7
 800754a:	bd80      	pop	{r7, pc}
 800754c:	20001614 	.word	0x20001614
 8007550:	20001628 	.word	0x20001628

08007554 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007554:	b480      	push	{r7}
 8007556:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007558:	4b03      	ldr	r3, [pc, #12]	@ (8007568 <vTaskMissedYield+0x14>)
 800755a:	2201      	movs	r2, #1
 800755c:	601a      	str	r2, [r3, #0]
}
 800755e:	bf00      	nop
 8007560:	46bd      	mov	sp, r7
 8007562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007566:	4770      	bx	lr
 8007568:	20001624 	.word	0x20001624

0800756c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800756c:	b580      	push	{r7, lr}
 800756e:	b082      	sub	sp, #8
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007574:	f000 f852 	bl	800761c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007578:	4b06      	ldr	r3, [pc, #24]	@ (8007594 <prvIdleTask+0x28>)
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	2b01      	cmp	r3, #1
 800757e:	d9f9      	bls.n	8007574 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007580:	4b05      	ldr	r3, [pc, #20]	@ (8007598 <prvIdleTask+0x2c>)
 8007582:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007586:	601a      	str	r2, [r3, #0]
 8007588:	f3bf 8f4f 	dsb	sy
 800758c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007590:	e7f0      	b.n	8007574 <prvIdleTask+0x8>
 8007592:	bf00      	nop
 8007594:	20001140 	.word	0x20001140
 8007598:	e000ed04 	.word	0xe000ed04

0800759c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800759c:	b580      	push	{r7, lr}
 800759e:	b082      	sub	sp, #8
 80075a0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80075a2:	2300      	movs	r3, #0
 80075a4:	607b      	str	r3, [r7, #4]
 80075a6:	e00c      	b.n	80075c2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80075a8:	687a      	ldr	r2, [r7, #4]
 80075aa:	4613      	mov	r3, r2
 80075ac:	009b      	lsls	r3, r3, #2
 80075ae:	4413      	add	r3, r2
 80075b0:	009b      	lsls	r3, r3, #2
 80075b2:	4a12      	ldr	r2, [pc, #72]	@ (80075fc <prvInitialiseTaskLists+0x60>)
 80075b4:	4413      	add	r3, r2
 80075b6:	4618      	mov	r0, r3
 80075b8:	f7fe f916 	bl	80057e8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	3301      	adds	r3, #1
 80075c0:	607b      	str	r3, [r7, #4]
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	2b37      	cmp	r3, #55	@ 0x37
 80075c6:	d9ef      	bls.n	80075a8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80075c8:	480d      	ldr	r0, [pc, #52]	@ (8007600 <prvInitialiseTaskLists+0x64>)
 80075ca:	f7fe f90d 	bl	80057e8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80075ce:	480d      	ldr	r0, [pc, #52]	@ (8007604 <prvInitialiseTaskLists+0x68>)
 80075d0:	f7fe f90a 	bl	80057e8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80075d4:	480c      	ldr	r0, [pc, #48]	@ (8007608 <prvInitialiseTaskLists+0x6c>)
 80075d6:	f7fe f907 	bl	80057e8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80075da:	480c      	ldr	r0, [pc, #48]	@ (800760c <prvInitialiseTaskLists+0x70>)
 80075dc:	f7fe f904 	bl	80057e8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80075e0:	480b      	ldr	r0, [pc, #44]	@ (8007610 <prvInitialiseTaskLists+0x74>)
 80075e2:	f7fe f901 	bl	80057e8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80075e6:	4b0b      	ldr	r3, [pc, #44]	@ (8007614 <prvInitialiseTaskLists+0x78>)
 80075e8:	4a05      	ldr	r2, [pc, #20]	@ (8007600 <prvInitialiseTaskLists+0x64>)
 80075ea:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80075ec:	4b0a      	ldr	r3, [pc, #40]	@ (8007618 <prvInitialiseTaskLists+0x7c>)
 80075ee:	4a05      	ldr	r2, [pc, #20]	@ (8007604 <prvInitialiseTaskLists+0x68>)
 80075f0:	601a      	str	r2, [r3, #0]
}
 80075f2:	bf00      	nop
 80075f4:	3708      	adds	r7, #8
 80075f6:	46bd      	mov	sp, r7
 80075f8:	bd80      	pop	{r7, pc}
 80075fa:	bf00      	nop
 80075fc:	20001140 	.word	0x20001140
 8007600:	200015a0 	.word	0x200015a0
 8007604:	200015b4 	.word	0x200015b4
 8007608:	200015d0 	.word	0x200015d0
 800760c:	200015e4 	.word	0x200015e4
 8007610:	200015fc 	.word	0x200015fc
 8007614:	200015c8 	.word	0x200015c8
 8007618:	200015cc 	.word	0x200015cc

0800761c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800761c:	b580      	push	{r7, lr}
 800761e:	b082      	sub	sp, #8
 8007620:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007622:	e019      	b.n	8007658 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007624:	f000 fee2 	bl	80083ec <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007628:	4b10      	ldr	r3, [pc, #64]	@ (800766c <prvCheckTasksWaitingTermination+0x50>)
 800762a:	68db      	ldr	r3, [r3, #12]
 800762c:	68db      	ldr	r3, [r3, #12]
 800762e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	3304      	adds	r3, #4
 8007634:	4618      	mov	r0, r3
 8007636:	f7fe f961 	bl	80058fc <uxListRemove>
				--uxCurrentNumberOfTasks;
 800763a:	4b0d      	ldr	r3, [pc, #52]	@ (8007670 <prvCheckTasksWaitingTermination+0x54>)
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	3b01      	subs	r3, #1
 8007640:	4a0b      	ldr	r2, [pc, #44]	@ (8007670 <prvCheckTasksWaitingTermination+0x54>)
 8007642:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007644:	4b0b      	ldr	r3, [pc, #44]	@ (8007674 <prvCheckTasksWaitingTermination+0x58>)
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	3b01      	subs	r3, #1
 800764a:	4a0a      	ldr	r2, [pc, #40]	@ (8007674 <prvCheckTasksWaitingTermination+0x58>)
 800764c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800764e:	f000 ff03 	bl	8008458 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007652:	6878      	ldr	r0, [r7, #4]
 8007654:	f000 f810 	bl	8007678 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007658:	4b06      	ldr	r3, [pc, #24]	@ (8007674 <prvCheckTasksWaitingTermination+0x58>)
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	2b00      	cmp	r3, #0
 800765e:	d1e1      	bne.n	8007624 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007660:	bf00      	nop
 8007662:	bf00      	nop
 8007664:	3708      	adds	r7, #8
 8007666:	46bd      	mov	sp, r7
 8007668:	bd80      	pop	{r7, pc}
 800766a:	bf00      	nop
 800766c:	200015e4 	.word	0x200015e4
 8007670:	20001610 	.word	0x20001610
 8007674:	200015f8 	.word	0x200015f8

08007678 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007678:	b580      	push	{r7, lr}
 800767a:	b084      	sub	sp, #16
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	3354      	adds	r3, #84	@ 0x54
 8007684:	4618      	mov	r0, r3
 8007686:	f001 fb47 	bl	8008d18 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8007690:	2b00      	cmp	r3, #0
 8007692:	d108      	bne.n	80076a6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007698:	4618      	mov	r0, r3
 800769a:	f001 f8a3 	bl	80087e4 <vPortFree>
				vPortFree( pxTCB );
 800769e:	6878      	ldr	r0, [r7, #4]
 80076a0:	f001 f8a0 	bl	80087e4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80076a4:	e01b      	b.n	80076de <prvDeleteTCB+0x66>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80076ac:	2b01      	cmp	r3, #1
 80076ae:	d103      	bne.n	80076b8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80076b0:	6878      	ldr	r0, [r7, #4]
 80076b2:	f001 f897 	bl	80087e4 <vPortFree>
	}
 80076b6:	e012      	b.n	80076de <prvDeleteTCB+0x66>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80076be:	2b02      	cmp	r3, #2
 80076c0:	d00d      	beq.n	80076de <prvDeleteTCB+0x66>
	__asm volatile
 80076c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076c6:	b672      	cpsid	i
 80076c8:	f383 8811 	msr	BASEPRI, r3
 80076cc:	f3bf 8f6f 	isb	sy
 80076d0:	f3bf 8f4f 	dsb	sy
 80076d4:	b662      	cpsie	i
 80076d6:	60fb      	str	r3, [r7, #12]
}
 80076d8:	bf00      	nop
 80076da:	bf00      	nop
 80076dc:	e7fd      	b.n	80076da <prvDeleteTCB+0x62>
	}
 80076de:	bf00      	nop
 80076e0:	3710      	adds	r7, #16
 80076e2:	46bd      	mov	sp, r7
 80076e4:	bd80      	pop	{r7, pc}
	...

080076e8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80076e8:	b480      	push	{r7}
 80076ea:	b083      	sub	sp, #12
 80076ec:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80076ee:	4b0c      	ldr	r3, [pc, #48]	@ (8007720 <prvResetNextTaskUnblockTime+0x38>)
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d104      	bne.n	8007702 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80076f8:	4b0a      	ldr	r3, [pc, #40]	@ (8007724 <prvResetNextTaskUnblockTime+0x3c>)
 80076fa:	f04f 32ff 	mov.w	r2, #4294967295
 80076fe:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007700:	e008      	b.n	8007714 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007702:	4b07      	ldr	r3, [pc, #28]	@ (8007720 <prvResetNextTaskUnblockTime+0x38>)
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	68db      	ldr	r3, [r3, #12]
 8007708:	68db      	ldr	r3, [r3, #12]
 800770a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	685b      	ldr	r3, [r3, #4]
 8007710:	4a04      	ldr	r2, [pc, #16]	@ (8007724 <prvResetNextTaskUnblockTime+0x3c>)
 8007712:	6013      	str	r3, [r2, #0]
}
 8007714:	bf00      	nop
 8007716:	370c      	adds	r7, #12
 8007718:	46bd      	mov	sp, r7
 800771a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771e:	4770      	bx	lr
 8007720:	200015c8 	.word	0x200015c8
 8007724:	20001630 	.word	0x20001630

08007728 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007728:	b480      	push	{r7}
 800772a:	b083      	sub	sp, #12
 800772c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800772e:	4b0b      	ldr	r3, [pc, #44]	@ (800775c <xTaskGetSchedulerState+0x34>)
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	2b00      	cmp	r3, #0
 8007734:	d102      	bne.n	800773c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007736:	2301      	movs	r3, #1
 8007738:	607b      	str	r3, [r7, #4]
 800773a:	e008      	b.n	800774e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800773c:	4b08      	ldr	r3, [pc, #32]	@ (8007760 <xTaskGetSchedulerState+0x38>)
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	2b00      	cmp	r3, #0
 8007742:	d102      	bne.n	800774a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007744:	2302      	movs	r3, #2
 8007746:	607b      	str	r3, [r7, #4]
 8007748:	e001      	b.n	800774e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800774a:	2300      	movs	r3, #0
 800774c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800774e:	687b      	ldr	r3, [r7, #4]
	}
 8007750:	4618      	mov	r0, r3
 8007752:	370c      	adds	r7, #12
 8007754:	46bd      	mov	sp, r7
 8007756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775a:	4770      	bx	lr
 800775c:	2000161c 	.word	0x2000161c
 8007760:	20001638 	.word	0x20001638

08007764 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007764:	b580      	push	{r7, lr}
 8007766:	b084      	sub	sp, #16
 8007768:	af00      	add	r7, sp, #0
 800776a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007770:	2300      	movs	r3, #0
 8007772:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d051      	beq.n	800781e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800777a:	68bb      	ldr	r3, [r7, #8]
 800777c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800777e:	4b2a      	ldr	r3, [pc, #168]	@ (8007828 <xTaskPriorityInherit+0xc4>)
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007784:	429a      	cmp	r2, r3
 8007786:	d241      	bcs.n	800780c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007788:	68bb      	ldr	r3, [r7, #8]
 800778a:	699b      	ldr	r3, [r3, #24]
 800778c:	2b00      	cmp	r3, #0
 800778e:	db06      	blt.n	800779e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007790:	4b25      	ldr	r3, [pc, #148]	@ (8007828 <xTaskPriorityInherit+0xc4>)
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007796:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800779a:	68bb      	ldr	r3, [r7, #8]
 800779c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800779e:	68bb      	ldr	r3, [r7, #8]
 80077a0:	6959      	ldr	r1, [r3, #20]
 80077a2:	68bb      	ldr	r3, [r7, #8]
 80077a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80077a6:	4613      	mov	r3, r2
 80077a8:	009b      	lsls	r3, r3, #2
 80077aa:	4413      	add	r3, r2
 80077ac:	009b      	lsls	r3, r3, #2
 80077ae:	4a1f      	ldr	r2, [pc, #124]	@ (800782c <xTaskPriorityInherit+0xc8>)
 80077b0:	4413      	add	r3, r2
 80077b2:	4299      	cmp	r1, r3
 80077b4:	d122      	bne.n	80077fc <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80077b6:	68bb      	ldr	r3, [r7, #8]
 80077b8:	3304      	adds	r3, #4
 80077ba:	4618      	mov	r0, r3
 80077bc:	f7fe f89e 	bl	80058fc <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80077c0:	4b19      	ldr	r3, [pc, #100]	@ (8007828 <xTaskPriorityInherit+0xc4>)
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80077c6:	68bb      	ldr	r3, [r7, #8]
 80077c8:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80077ca:	68bb      	ldr	r3, [r7, #8]
 80077cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80077ce:	4b18      	ldr	r3, [pc, #96]	@ (8007830 <xTaskPriorityInherit+0xcc>)
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	429a      	cmp	r2, r3
 80077d4:	d903      	bls.n	80077de <xTaskPriorityInherit+0x7a>
 80077d6:	68bb      	ldr	r3, [r7, #8]
 80077d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077da:	4a15      	ldr	r2, [pc, #84]	@ (8007830 <xTaskPriorityInherit+0xcc>)
 80077dc:	6013      	str	r3, [r2, #0]
 80077de:	68bb      	ldr	r3, [r7, #8]
 80077e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80077e2:	4613      	mov	r3, r2
 80077e4:	009b      	lsls	r3, r3, #2
 80077e6:	4413      	add	r3, r2
 80077e8:	009b      	lsls	r3, r3, #2
 80077ea:	4a10      	ldr	r2, [pc, #64]	@ (800782c <xTaskPriorityInherit+0xc8>)
 80077ec:	441a      	add	r2, r3
 80077ee:	68bb      	ldr	r3, [r7, #8]
 80077f0:	3304      	adds	r3, #4
 80077f2:	4619      	mov	r1, r3
 80077f4:	4610      	mov	r0, r2
 80077f6:	f7fe f824 	bl	8005842 <vListInsertEnd>
 80077fa:	e004      	b.n	8007806 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80077fc:	4b0a      	ldr	r3, [pc, #40]	@ (8007828 <xTaskPriorityInherit+0xc4>)
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007802:	68bb      	ldr	r3, [r7, #8]
 8007804:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007806:	2301      	movs	r3, #1
 8007808:	60fb      	str	r3, [r7, #12]
 800780a:	e008      	b.n	800781e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800780c:	68bb      	ldr	r3, [r7, #8]
 800780e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007810:	4b05      	ldr	r3, [pc, #20]	@ (8007828 <xTaskPriorityInherit+0xc4>)
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007816:	429a      	cmp	r2, r3
 8007818:	d201      	bcs.n	800781e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800781a:	2301      	movs	r3, #1
 800781c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800781e:	68fb      	ldr	r3, [r7, #12]
	}
 8007820:	4618      	mov	r0, r3
 8007822:	3710      	adds	r7, #16
 8007824:	46bd      	mov	sp, r7
 8007826:	bd80      	pop	{r7, pc}
 8007828:	2000113c 	.word	0x2000113c
 800782c:	20001140 	.word	0x20001140
 8007830:	20001618 	.word	0x20001618

08007834 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007834:	b580      	push	{r7, lr}
 8007836:	b086      	sub	sp, #24
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007840:	2300      	movs	r3, #0
 8007842:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2b00      	cmp	r3, #0
 8007848:	d05c      	beq.n	8007904 <xTaskPriorityDisinherit+0xd0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800784a:	4b31      	ldr	r3, [pc, #196]	@ (8007910 <xTaskPriorityDisinherit+0xdc>)
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	693a      	ldr	r2, [r7, #16]
 8007850:	429a      	cmp	r2, r3
 8007852:	d00d      	beq.n	8007870 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 8007854:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007858:	b672      	cpsid	i
 800785a:	f383 8811 	msr	BASEPRI, r3
 800785e:	f3bf 8f6f 	isb	sy
 8007862:	f3bf 8f4f 	dsb	sy
 8007866:	b662      	cpsie	i
 8007868:	60fb      	str	r3, [r7, #12]
}
 800786a:	bf00      	nop
 800786c:	bf00      	nop
 800786e:	e7fd      	b.n	800786c <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8007870:	693b      	ldr	r3, [r7, #16]
 8007872:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007874:	2b00      	cmp	r3, #0
 8007876:	d10d      	bne.n	8007894 <xTaskPriorityDisinherit+0x60>
	__asm volatile
 8007878:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800787c:	b672      	cpsid	i
 800787e:	f383 8811 	msr	BASEPRI, r3
 8007882:	f3bf 8f6f 	isb	sy
 8007886:	f3bf 8f4f 	dsb	sy
 800788a:	b662      	cpsie	i
 800788c:	60bb      	str	r3, [r7, #8]
}
 800788e:	bf00      	nop
 8007890:	bf00      	nop
 8007892:	e7fd      	b.n	8007890 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 8007894:	693b      	ldr	r3, [r7, #16]
 8007896:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007898:	1e5a      	subs	r2, r3, #1
 800789a:	693b      	ldr	r3, [r7, #16]
 800789c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800789e:	693b      	ldr	r3, [r7, #16]
 80078a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80078a2:	693b      	ldr	r3, [r7, #16]
 80078a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80078a6:	429a      	cmp	r2, r3
 80078a8:	d02c      	beq.n	8007904 <xTaskPriorityDisinherit+0xd0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80078aa:	693b      	ldr	r3, [r7, #16]
 80078ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d128      	bne.n	8007904 <xTaskPriorityDisinherit+0xd0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80078b2:	693b      	ldr	r3, [r7, #16]
 80078b4:	3304      	adds	r3, #4
 80078b6:	4618      	mov	r0, r3
 80078b8:	f7fe f820 	bl	80058fc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80078bc:	693b      	ldr	r3, [r7, #16]
 80078be:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80078c0:	693b      	ldr	r3, [r7, #16]
 80078c2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80078c4:	693b      	ldr	r3, [r7, #16]
 80078c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078c8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80078cc:	693b      	ldr	r3, [r7, #16]
 80078ce:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80078d0:	693b      	ldr	r3, [r7, #16]
 80078d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80078d4:	4b0f      	ldr	r3, [pc, #60]	@ (8007914 <xTaskPriorityDisinherit+0xe0>)
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	429a      	cmp	r2, r3
 80078da:	d903      	bls.n	80078e4 <xTaskPriorityDisinherit+0xb0>
 80078dc:	693b      	ldr	r3, [r7, #16]
 80078de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078e0:	4a0c      	ldr	r2, [pc, #48]	@ (8007914 <xTaskPriorityDisinherit+0xe0>)
 80078e2:	6013      	str	r3, [r2, #0]
 80078e4:	693b      	ldr	r3, [r7, #16]
 80078e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80078e8:	4613      	mov	r3, r2
 80078ea:	009b      	lsls	r3, r3, #2
 80078ec:	4413      	add	r3, r2
 80078ee:	009b      	lsls	r3, r3, #2
 80078f0:	4a09      	ldr	r2, [pc, #36]	@ (8007918 <xTaskPriorityDisinherit+0xe4>)
 80078f2:	441a      	add	r2, r3
 80078f4:	693b      	ldr	r3, [r7, #16]
 80078f6:	3304      	adds	r3, #4
 80078f8:	4619      	mov	r1, r3
 80078fa:	4610      	mov	r0, r2
 80078fc:	f7fd ffa1 	bl	8005842 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007900:	2301      	movs	r3, #1
 8007902:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007904:	697b      	ldr	r3, [r7, #20]
	}
 8007906:	4618      	mov	r0, r3
 8007908:	3718      	adds	r7, #24
 800790a:	46bd      	mov	sp, r7
 800790c:	bd80      	pop	{r7, pc}
 800790e:	bf00      	nop
 8007910:	2000113c 	.word	0x2000113c
 8007914:	20001618 	.word	0x20001618
 8007918:	20001140 	.word	0x20001140

0800791c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800791c:	b580      	push	{r7, lr}
 800791e:	b088      	sub	sp, #32
 8007920:	af00      	add	r7, sp, #0
 8007922:	6078      	str	r0, [r7, #4]
 8007924:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800792a:	2301      	movs	r3, #1
 800792c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	2b00      	cmp	r3, #0
 8007932:	d070      	beq.n	8007a16 <vTaskPriorityDisinheritAfterTimeout+0xfa>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007934:	69bb      	ldr	r3, [r7, #24]
 8007936:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007938:	2b00      	cmp	r3, #0
 800793a:	d10d      	bne.n	8007958 <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 800793c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007940:	b672      	cpsid	i
 8007942:	f383 8811 	msr	BASEPRI, r3
 8007946:	f3bf 8f6f 	isb	sy
 800794a:	f3bf 8f4f 	dsb	sy
 800794e:	b662      	cpsie	i
 8007950:	60fb      	str	r3, [r7, #12]
}
 8007952:	bf00      	nop
 8007954:	bf00      	nop
 8007956:	e7fd      	b.n	8007954 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007958:	69bb      	ldr	r3, [r7, #24]
 800795a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800795c:	683a      	ldr	r2, [r7, #0]
 800795e:	429a      	cmp	r2, r3
 8007960:	d902      	bls.n	8007968 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007962:	683b      	ldr	r3, [r7, #0]
 8007964:	61fb      	str	r3, [r7, #28]
 8007966:	e002      	b.n	800796e <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007968:	69bb      	ldr	r3, [r7, #24]
 800796a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800796c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800796e:	69bb      	ldr	r3, [r7, #24]
 8007970:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007972:	69fa      	ldr	r2, [r7, #28]
 8007974:	429a      	cmp	r2, r3
 8007976:	d04e      	beq.n	8007a16 <vTaskPriorityDisinheritAfterTimeout+0xfa>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007978:	69bb      	ldr	r3, [r7, #24]
 800797a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800797c:	697a      	ldr	r2, [r7, #20]
 800797e:	429a      	cmp	r2, r3
 8007980:	d149      	bne.n	8007a16 <vTaskPriorityDisinheritAfterTimeout+0xfa>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007982:	4b27      	ldr	r3, [pc, #156]	@ (8007a20 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	69ba      	ldr	r2, [r7, #24]
 8007988:	429a      	cmp	r2, r3
 800798a:	d10d      	bne.n	80079a8 <vTaskPriorityDisinheritAfterTimeout+0x8c>
	__asm volatile
 800798c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007990:	b672      	cpsid	i
 8007992:	f383 8811 	msr	BASEPRI, r3
 8007996:	f3bf 8f6f 	isb	sy
 800799a:	f3bf 8f4f 	dsb	sy
 800799e:	b662      	cpsie	i
 80079a0:	60bb      	str	r3, [r7, #8]
}
 80079a2:	bf00      	nop
 80079a4:	bf00      	nop
 80079a6:	e7fd      	b.n	80079a4 <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80079a8:	69bb      	ldr	r3, [r7, #24]
 80079aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079ac:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80079ae:	69bb      	ldr	r3, [r7, #24]
 80079b0:	69fa      	ldr	r2, [r7, #28]
 80079b2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80079b4:	69bb      	ldr	r3, [r7, #24]
 80079b6:	699b      	ldr	r3, [r3, #24]
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	db04      	blt.n	80079c6 <vTaskPriorityDisinheritAfterTimeout+0xaa>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80079bc:	69fb      	ldr	r3, [r7, #28]
 80079be:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80079c2:	69bb      	ldr	r3, [r7, #24]
 80079c4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80079c6:	69bb      	ldr	r3, [r7, #24]
 80079c8:	6959      	ldr	r1, [r3, #20]
 80079ca:	693a      	ldr	r2, [r7, #16]
 80079cc:	4613      	mov	r3, r2
 80079ce:	009b      	lsls	r3, r3, #2
 80079d0:	4413      	add	r3, r2
 80079d2:	009b      	lsls	r3, r3, #2
 80079d4:	4a13      	ldr	r2, [pc, #76]	@ (8007a24 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 80079d6:	4413      	add	r3, r2
 80079d8:	4299      	cmp	r1, r3
 80079da:	d11c      	bne.n	8007a16 <vTaskPriorityDisinheritAfterTimeout+0xfa>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80079dc:	69bb      	ldr	r3, [r7, #24]
 80079de:	3304      	adds	r3, #4
 80079e0:	4618      	mov	r0, r3
 80079e2:	f7fd ff8b 	bl	80058fc <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80079e6:	69bb      	ldr	r3, [r7, #24]
 80079e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80079ea:	4b0f      	ldr	r3, [pc, #60]	@ (8007a28 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	429a      	cmp	r2, r3
 80079f0:	d903      	bls.n	80079fa <vTaskPriorityDisinheritAfterTimeout+0xde>
 80079f2:	69bb      	ldr	r3, [r7, #24]
 80079f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079f6:	4a0c      	ldr	r2, [pc, #48]	@ (8007a28 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 80079f8:	6013      	str	r3, [r2, #0]
 80079fa:	69bb      	ldr	r3, [r7, #24]
 80079fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80079fe:	4613      	mov	r3, r2
 8007a00:	009b      	lsls	r3, r3, #2
 8007a02:	4413      	add	r3, r2
 8007a04:	009b      	lsls	r3, r3, #2
 8007a06:	4a07      	ldr	r2, [pc, #28]	@ (8007a24 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8007a08:	441a      	add	r2, r3
 8007a0a:	69bb      	ldr	r3, [r7, #24]
 8007a0c:	3304      	adds	r3, #4
 8007a0e:	4619      	mov	r1, r3
 8007a10:	4610      	mov	r0, r2
 8007a12:	f7fd ff16 	bl	8005842 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007a16:	bf00      	nop
 8007a18:	3720      	adds	r7, #32
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	bd80      	pop	{r7, pc}
 8007a1e:	bf00      	nop
 8007a20:	2000113c 	.word	0x2000113c
 8007a24:	20001140 	.word	0x20001140
 8007a28:	20001618 	.word	0x20001618

08007a2c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8007a2c:	b480      	push	{r7}
 8007a2e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007a30:	4b07      	ldr	r3, [pc, #28]	@ (8007a50 <pvTaskIncrementMutexHeldCount+0x24>)
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d004      	beq.n	8007a42 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007a38:	4b05      	ldr	r3, [pc, #20]	@ (8007a50 <pvTaskIncrementMutexHeldCount+0x24>)
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007a3e:	3201      	adds	r2, #1
 8007a40:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8007a42:	4b03      	ldr	r3, [pc, #12]	@ (8007a50 <pvTaskIncrementMutexHeldCount+0x24>)
 8007a44:	681b      	ldr	r3, [r3, #0]
	}
 8007a46:	4618      	mov	r0, r3
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4e:	4770      	bx	lr
 8007a50:	2000113c 	.word	0x2000113c

08007a54 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007a54:	b580      	push	{r7, lr}
 8007a56:	b084      	sub	sp, #16
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]
 8007a5c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007a5e:	4b21      	ldr	r3, [pc, #132]	@ (8007ae4 <prvAddCurrentTaskToDelayedList+0x90>)
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007a64:	4b20      	ldr	r3, [pc, #128]	@ (8007ae8 <prvAddCurrentTaskToDelayedList+0x94>)
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	3304      	adds	r3, #4
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	f7fd ff46 	bl	80058fc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a76:	d10a      	bne.n	8007a8e <prvAddCurrentTaskToDelayedList+0x3a>
 8007a78:	683b      	ldr	r3, [r7, #0]
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d007      	beq.n	8007a8e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007a7e:	4b1a      	ldr	r3, [pc, #104]	@ (8007ae8 <prvAddCurrentTaskToDelayedList+0x94>)
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	3304      	adds	r3, #4
 8007a84:	4619      	mov	r1, r3
 8007a86:	4819      	ldr	r0, [pc, #100]	@ (8007aec <prvAddCurrentTaskToDelayedList+0x98>)
 8007a88:	f7fd fedb 	bl	8005842 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007a8c:	e026      	b.n	8007adc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007a8e:	68fa      	ldr	r2, [r7, #12]
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	4413      	add	r3, r2
 8007a94:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007a96:	4b14      	ldr	r3, [pc, #80]	@ (8007ae8 <prvAddCurrentTaskToDelayedList+0x94>)
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	68ba      	ldr	r2, [r7, #8]
 8007a9c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007a9e:	68ba      	ldr	r2, [r7, #8]
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	429a      	cmp	r2, r3
 8007aa4:	d209      	bcs.n	8007aba <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007aa6:	4b12      	ldr	r3, [pc, #72]	@ (8007af0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007aa8:	681a      	ldr	r2, [r3, #0]
 8007aaa:	4b0f      	ldr	r3, [pc, #60]	@ (8007ae8 <prvAddCurrentTaskToDelayedList+0x94>)
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	3304      	adds	r3, #4
 8007ab0:	4619      	mov	r1, r3
 8007ab2:	4610      	mov	r0, r2
 8007ab4:	f7fd fee9 	bl	800588a <vListInsert>
}
 8007ab8:	e010      	b.n	8007adc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007aba:	4b0e      	ldr	r3, [pc, #56]	@ (8007af4 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007abc:	681a      	ldr	r2, [r3, #0]
 8007abe:	4b0a      	ldr	r3, [pc, #40]	@ (8007ae8 <prvAddCurrentTaskToDelayedList+0x94>)
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	3304      	adds	r3, #4
 8007ac4:	4619      	mov	r1, r3
 8007ac6:	4610      	mov	r0, r2
 8007ac8:	f7fd fedf 	bl	800588a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007acc:	4b0a      	ldr	r3, [pc, #40]	@ (8007af8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	68ba      	ldr	r2, [r7, #8]
 8007ad2:	429a      	cmp	r2, r3
 8007ad4:	d202      	bcs.n	8007adc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007ad6:	4a08      	ldr	r2, [pc, #32]	@ (8007af8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007ad8:	68bb      	ldr	r3, [r7, #8]
 8007ada:	6013      	str	r3, [r2, #0]
}
 8007adc:	bf00      	nop
 8007ade:	3710      	adds	r7, #16
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	bd80      	pop	{r7, pc}
 8007ae4:	20001614 	.word	0x20001614
 8007ae8:	2000113c 	.word	0x2000113c
 8007aec:	200015fc 	.word	0x200015fc
 8007af0:	200015cc 	.word	0x200015cc
 8007af4:	200015c8 	.word	0x200015c8
 8007af8:	20001630 	.word	0x20001630

08007afc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007afc:	b580      	push	{r7, lr}
 8007afe:	b08a      	sub	sp, #40	@ 0x28
 8007b00:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007b02:	2300      	movs	r3, #0
 8007b04:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007b06:	f000 fb21 	bl	800814c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007b0a:	4b1e      	ldr	r3, [pc, #120]	@ (8007b84 <xTimerCreateTimerTask+0x88>)
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d021      	beq.n	8007b56 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007b12:	2300      	movs	r3, #0
 8007b14:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007b16:	2300      	movs	r3, #0
 8007b18:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007b1a:	1d3a      	adds	r2, r7, #4
 8007b1c:	f107 0108 	add.w	r1, r7, #8
 8007b20:	f107 030c 	add.w	r3, r7, #12
 8007b24:	4618      	mov	r0, r3
 8007b26:	f7fd fe45 	bl	80057b4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007b2a:	6879      	ldr	r1, [r7, #4]
 8007b2c:	68bb      	ldr	r3, [r7, #8]
 8007b2e:	68fa      	ldr	r2, [r7, #12]
 8007b30:	9202      	str	r2, [sp, #8]
 8007b32:	9301      	str	r3, [sp, #4]
 8007b34:	2302      	movs	r3, #2
 8007b36:	9300      	str	r3, [sp, #0]
 8007b38:	2300      	movs	r3, #0
 8007b3a:	460a      	mov	r2, r1
 8007b3c:	4912      	ldr	r1, [pc, #72]	@ (8007b88 <xTimerCreateTimerTask+0x8c>)
 8007b3e:	4813      	ldr	r0, [pc, #76]	@ (8007b8c <xTimerCreateTimerTask+0x90>)
 8007b40:	f7fe ff7a 	bl	8006a38 <xTaskCreateStatic>
 8007b44:	4603      	mov	r3, r0
 8007b46:	4a12      	ldr	r2, [pc, #72]	@ (8007b90 <xTimerCreateTimerTask+0x94>)
 8007b48:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007b4a:	4b11      	ldr	r3, [pc, #68]	@ (8007b90 <xTimerCreateTimerTask+0x94>)
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d001      	beq.n	8007b56 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007b52:	2301      	movs	r3, #1
 8007b54:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007b56:	697b      	ldr	r3, [r7, #20]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d10d      	bne.n	8007b78 <xTimerCreateTimerTask+0x7c>
	__asm volatile
 8007b5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b60:	b672      	cpsid	i
 8007b62:	f383 8811 	msr	BASEPRI, r3
 8007b66:	f3bf 8f6f 	isb	sy
 8007b6a:	f3bf 8f4f 	dsb	sy
 8007b6e:	b662      	cpsie	i
 8007b70:	613b      	str	r3, [r7, #16]
}
 8007b72:	bf00      	nop
 8007b74:	bf00      	nop
 8007b76:	e7fd      	b.n	8007b74 <xTimerCreateTimerTask+0x78>
	return xReturn;
 8007b78:	697b      	ldr	r3, [r7, #20]
}
 8007b7a:	4618      	mov	r0, r3
 8007b7c:	3718      	adds	r7, #24
 8007b7e:	46bd      	mov	sp, r7
 8007b80:	bd80      	pop	{r7, pc}
 8007b82:	bf00      	nop
 8007b84:	2000166c 	.word	0x2000166c
 8007b88:	08009f10 	.word	0x08009f10
 8007b8c:	08007cd5 	.word	0x08007cd5
 8007b90:	20001670 	.word	0x20001670

08007b94 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007b94:	b580      	push	{r7, lr}
 8007b96:	b08a      	sub	sp, #40	@ 0x28
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	60f8      	str	r0, [r7, #12]
 8007b9c:	60b9      	str	r1, [r7, #8]
 8007b9e:	607a      	str	r2, [r7, #4]
 8007ba0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007ba2:	2300      	movs	r3, #0
 8007ba4:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d10d      	bne.n	8007bc8 <xTimerGenericCommand+0x34>
	__asm volatile
 8007bac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bb0:	b672      	cpsid	i
 8007bb2:	f383 8811 	msr	BASEPRI, r3
 8007bb6:	f3bf 8f6f 	isb	sy
 8007bba:	f3bf 8f4f 	dsb	sy
 8007bbe:	b662      	cpsie	i
 8007bc0:	623b      	str	r3, [r7, #32]
}
 8007bc2:	bf00      	nop
 8007bc4:	bf00      	nop
 8007bc6:	e7fd      	b.n	8007bc4 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007bc8:	4b19      	ldr	r3, [pc, #100]	@ (8007c30 <xTimerGenericCommand+0x9c>)
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d02a      	beq.n	8007c26 <xTimerGenericCommand+0x92>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007bd0:	68bb      	ldr	r3, [r7, #8]
 8007bd2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007bdc:	68bb      	ldr	r3, [r7, #8]
 8007bde:	2b05      	cmp	r3, #5
 8007be0:	dc18      	bgt.n	8007c14 <xTimerGenericCommand+0x80>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007be2:	f7ff fda1 	bl	8007728 <xTaskGetSchedulerState>
 8007be6:	4603      	mov	r3, r0
 8007be8:	2b02      	cmp	r3, #2
 8007bea:	d109      	bne.n	8007c00 <xTimerGenericCommand+0x6c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007bec:	4b10      	ldr	r3, [pc, #64]	@ (8007c30 <xTimerGenericCommand+0x9c>)
 8007bee:	6818      	ldr	r0, [r3, #0]
 8007bf0:	f107 0110 	add.w	r1, r7, #16
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007bf8:	f7fe f87a 	bl	8005cf0 <xQueueGenericSend>
 8007bfc:	6278      	str	r0, [r7, #36]	@ 0x24
 8007bfe:	e012      	b.n	8007c26 <xTimerGenericCommand+0x92>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007c00:	4b0b      	ldr	r3, [pc, #44]	@ (8007c30 <xTimerGenericCommand+0x9c>)
 8007c02:	6818      	ldr	r0, [r3, #0]
 8007c04:	f107 0110 	add.w	r1, r7, #16
 8007c08:	2300      	movs	r3, #0
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	f7fe f870 	bl	8005cf0 <xQueueGenericSend>
 8007c10:	6278      	str	r0, [r7, #36]	@ 0x24
 8007c12:	e008      	b.n	8007c26 <xTimerGenericCommand+0x92>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007c14:	4b06      	ldr	r3, [pc, #24]	@ (8007c30 <xTimerGenericCommand+0x9c>)
 8007c16:	6818      	ldr	r0, [r3, #0]
 8007c18:	f107 0110 	add.w	r1, r7, #16
 8007c1c:	2300      	movs	r3, #0
 8007c1e:	683a      	ldr	r2, [r7, #0]
 8007c20:	f7fe f970 	bl	8005f04 <xQueueGenericSendFromISR>
 8007c24:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007c26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007c28:	4618      	mov	r0, r3
 8007c2a:	3728      	adds	r7, #40	@ 0x28
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	bd80      	pop	{r7, pc}
 8007c30:	2000166c 	.word	0x2000166c

08007c34 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007c34:	b580      	push	{r7, lr}
 8007c36:	b088      	sub	sp, #32
 8007c38:	af02      	add	r7, sp, #8
 8007c3a:	6078      	str	r0, [r7, #4]
 8007c3c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c3e:	4b24      	ldr	r3, [pc, #144]	@ (8007cd0 <prvProcessExpiredTimer+0x9c>)
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	68db      	ldr	r3, [r3, #12]
 8007c44:	68db      	ldr	r3, [r3, #12]
 8007c46:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007c48:	697b      	ldr	r3, [r7, #20]
 8007c4a:	3304      	adds	r3, #4
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	f7fd fe55 	bl	80058fc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007c52:	697b      	ldr	r3, [r7, #20]
 8007c54:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007c58:	f003 0304 	and.w	r3, r3, #4
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d025      	beq.n	8007cac <prvProcessExpiredTimer+0x78>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007c60:	697b      	ldr	r3, [r7, #20]
 8007c62:	699a      	ldr	r2, [r3, #24]
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	18d1      	adds	r1, r2, r3
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	683a      	ldr	r2, [r7, #0]
 8007c6c:	6978      	ldr	r0, [r7, #20]
 8007c6e:	f000 f8d7 	bl	8007e20 <prvInsertTimerInActiveList>
 8007c72:	4603      	mov	r3, r0
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d022      	beq.n	8007cbe <prvProcessExpiredTimer+0x8a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007c78:	2300      	movs	r3, #0
 8007c7a:	9300      	str	r3, [sp, #0]
 8007c7c:	2300      	movs	r3, #0
 8007c7e:	687a      	ldr	r2, [r7, #4]
 8007c80:	2100      	movs	r1, #0
 8007c82:	6978      	ldr	r0, [r7, #20]
 8007c84:	f7ff ff86 	bl	8007b94 <xTimerGenericCommand>
 8007c88:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007c8a:	693b      	ldr	r3, [r7, #16]
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d116      	bne.n	8007cbe <prvProcessExpiredTimer+0x8a>
	__asm volatile
 8007c90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c94:	b672      	cpsid	i
 8007c96:	f383 8811 	msr	BASEPRI, r3
 8007c9a:	f3bf 8f6f 	isb	sy
 8007c9e:	f3bf 8f4f 	dsb	sy
 8007ca2:	b662      	cpsie	i
 8007ca4:	60fb      	str	r3, [r7, #12]
}
 8007ca6:	bf00      	nop
 8007ca8:	bf00      	nop
 8007caa:	e7fd      	b.n	8007ca8 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007cac:	697b      	ldr	r3, [r7, #20]
 8007cae:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007cb2:	f023 0301 	bic.w	r3, r3, #1
 8007cb6:	b2da      	uxtb	r2, r3
 8007cb8:	697b      	ldr	r3, [r7, #20]
 8007cba:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007cbe:	697b      	ldr	r3, [r7, #20]
 8007cc0:	6a1b      	ldr	r3, [r3, #32]
 8007cc2:	6978      	ldr	r0, [r7, #20]
 8007cc4:	4798      	blx	r3
}
 8007cc6:	bf00      	nop
 8007cc8:	3718      	adds	r7, #24
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	bd80      	pop	{r7, pc}
 8007cce:	bf00      	nop
 8007cd0:	20001664 	.word	0x20001664

08007cd4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007cd4:	b580      	push	{r7, lr}
 8007cd6:	b084      	sub	sp, #16
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007cdc:	f107 0308 	add.w	r3, r7, #8
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	f000 f859 	bl	8007d98 <prvGetNextExpireTime>
 8007ce6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007ce8:	68bb      	ldr	r3, [r7, #8]
 8007cea:	4619      	mov	r1, r3
 8007cec:	68f8      	ldr	r0, [r7, #12]
 8007cee:	f000 f805 	bl	8007cfc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007cf2:	f000 f8d7 	bl	8007ea4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007cf6:	bf00      	nop
 8007cf8:	e7f0      	b.n	8007cdc <prvTimerTask+0x8>
	...

08007cfc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	b084      	sub	sp, #16
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	6078      	str	r0, [r7, #4]
 8007d04:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007d06:	f7ff f909 	bl	8006f1c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007d0a:	f107 0308 	add.w	r3, r7, #8
 8007d0e:	4618      	mov	r0, r3
 8007d10:	f000 f866 	bl	8007de0 <prvSampleTimeNow>
 8007d14:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007d16:	68bb      	ldr	r3, [r7, #8]
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d130      	bne.n	8007d7e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007d1c:	683b      	ldr	r3, [r7, #0]
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d10a      	bne.n	8007d38 <prvProcessTimerOrBlockTask+0x3c>
 8007d22:	687a      	ldr	r2, [r7, #4]
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	429a      	cmp	r2, r3
 8007d28:	d806      	bhi.n	8007d38 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007d2a:	f7ff f905 	bl	8006f38 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007d2e:	68f9      	ldr	r1, [r7, #12]
 8007d30:	6878      	ldr	r0, [r7, #4]
 8007d32:	f7ff ff7f 	bl	8007c34 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007d36:	e024      	b.n	8007d82 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007d38:	683b      	ldr	r3, [r7, #0]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d008      	beq.n	8007d50 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007d3e:	4b13      	ldr	r3, [pc, #76]	@ (8007d8c <prvProcessTimerOrBlockTask+0x90>)
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d101      	bne.n	8007d4c <prvProcessTimerOrBlockTask+0x50>
 8007d48:	2301      	movs	r3, #1
 8007d4a:	e000      	b.n	8007d4e <prvProcessTimerOrBlockTask+0x52>
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007d50:	4b0f      	ldr	r3, [pc, #60]	@ (8007d90 <prvProcessTimerOrBlockTask+0x94>)
 8007d52:	6818      	ldr	r0, [r3, #0]
 8007d54:	687a      	ldr	r2, [r7, #4]
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	1ad3      	subs	r3, r2, r3
 8007d5a:	683a      	ldr	r2, [r7, #0]
 8007d5c:	4619      	mov	r1, r3
 8007d5e:	f7fe fe37 	bl	80069d0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007d62:	f7ff f8e9 	bl	8006f38 <xTaskResumeAll>
 8007d66:	4603      	mov	r3, r0
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d10a      	bne.n	8007d82 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007d6c:	4b09      	ldr	r3, [pc, #36]	@ (8007d94 <prvProcessTimerOrBlockTask+0x98>)
 8007d6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007d72:	601a      	str	r2, [r3, #0]
 8007d74:	f3bf 8f4f 	dsb	sy
 8007d78:	f3bf 8f6f 	isb	sy
}
 8007d7c:	e001      	b.n	8007d82 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007d7e:	f7ff f8db 	bl	8006f38 <xTaskResumeAll>
}
 8007d82:	bf00      	nop
 8007d84:	3710      	adds	r7, #16
 8007d86:	46bd      	mov	sp, r7
 8007d88:	bd80      	pop	{r7, pc}
 8007d8a:	bf00      	nop
 8007d8c:	20001668 	.word	0x20001668
 8007d90:	2000166c 	.word	0x2000166c
 8007d94:	e000ed04 	.word	0xe000ed04

08007d98 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007d98:	b480      	push	{r7}
 8007d9a:	b085      	sub	sp, #20
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007da0:	4b0e      	ldr	r3, [pc, #56]	@ (8007ddc <prvGetNextExpireTime+0x44>)
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d101      	bne.n	8007dae <prvGetNextExpireTime+0x16>
 8007daa:	2201      	movs	r2, #1
 8007dac:	e000      	b.n	8007db0 <prvGetNextExpireTime+0x18>
 8007dae:	2200      	movs	r2, #0
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d105      	bne.n	8007dc8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007dbc:	4b07      	ldr	r3, [pc, #28]	@ (8007ddc <prvGetNextExpireTime+0x44>)
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	68db      	ldr	r3, [r3, #12]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	60fb      	str	r3, [r7, #12]
 8007dc6:	e001      	b.n	8007dcc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007dc8:	2300      	movs	r3, #0
 8007dca:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007dcc:	68fb      	ldr	r3, [r7, #12]
}
 8007dce:	4618      	mov	r0, r3
 8007dd0:	3714      	adds	r7, #20
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd8:	4770      	bx	lr
 8007dda:	bf00      	nop
 8007ddc:	20001664 	.word	0x20001664

08007de0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007de0:	b580      	push	{r7, lr}
 8007de2:	b084      	sub	sp, #16
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007de8:	f7ff f946 	bl	8007078 <xTaskGetTickCount>
 8007dec:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007dee:	4b0b      	ldr	r3, [pc, #44]	@ (8007e1c <prvSampleTimeNow+0x3c>)
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	68fa      	ldr	r2, [r7, #12]
 8007df4:	429a      	cmp	r2, r3
 8007df6:	d205      	bcs.n	8007e04 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007df8:	f000 f940 	bl	800807c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	2201      	movs	r2, #1
 8007e00:	601a      	str	r2, [r3, #0]
 8007e02:	e002      	b.n	8007e0a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	2200      	movs	r2, #0
 8007e08:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007e0a:	4a04      	ldr	r2, [pc, #16]	@ (8007e1c <prvSampleTimeNow+0x3c>)
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007e10:	68fb      	ldr	r3, [r7, #12]
}
 8007e12:	4618      	mov	r0, r3
 8007e14:	3710      	adds	r7, #16
 8007e16:	46bd      	mov	sp, r7
 8007e18:	bd80      	pop	{r7, pc}
 8007e1a:	bf00      	nop
 8007e1c:	20001674 	.word	0x20001674

08007e20 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007e20:	b580      	push	{r7, lr}
 8007e22:	b086      	sub	sp, #24
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	60f8      	str	r0, [r7, #12]
 8007e28:	60b9      	str	r1, [r7, #8]
 8007e2a:	607a      	str	r2, [r7, #4]
 8007e2c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007e2e:	2300      	movs	r3, #0
 8007e30:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	68ba      	ldr	r2, [r7, #8]
 8007e36:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	68fa      	ldr	r2, [r7, #12]
 8007e3c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007e3e:	68ba      	ldr	r2, [r7, #8]
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	429a      	cmp	r2, r3
 8007e44:	d812      	bhi.n	8007e6c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007e46:	687a      	ldr	r2, [r7, #4]
 8007e48:	683b      	ldr	r3, [r7, #0]
 8007e4a:	1ad2      	subs	r2, r2, r3
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	699b      	ldr	r3, [r3, #24]
 8007e50:	429a      	cmp	r2, r3
 8007e52:	d302      	bcc.n	8007e5a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007e54:	2301      	movs	r3, #1
 8007e56:	617b      	str	r3, [r7, #20]
 8007e58:	e01b      	b.n	8007e92 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007e5a:	4b10      	ldr	r3, [pc, #64]	@ (8007e9c <prvInsertTimerInActiveList+0x7c>)
 8007e5c:	681a      	ldr	r2, [r3, #0]
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	3304      	adds	r3, #4
 8007e62:	4619      	mov	r1, r3
 8007e64:	4610      	mov	r0, r2
 8007e66:	f7fd fd10 	bl	800588a <vListInsert>
 8007e6a:	e012      	b.n	8007e92 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007e6c:	687a      	ldr	r2, [r7, #4]
 8007e6e:	683b      	ldr	r3, [r7, #0]
 8007e70:	429a      	cmp	r2, r3
 8007e72:	d206      	bcs.n	8007e82 <prvInsertTimerInActiveList+0x62>
 8007e74:	68ba      	ldr	r2, [r7, #8]
 8007e76:	683b      	ldr	r3, [r7, #0]
 8007e78:	429a      	cmp	r2, r3
 8007e7a:	d302      	bcc.n	8007e82 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007e7c:	2301      	movs	r3, #1
 8007e7e:	617b      	str	r3, [r7, #20]
 8007e80:	e007      	b.n	8007e92 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007e82:	4b07      	ldr	r3, [pc, #28]	@ (8007ea0 <prvInsertTimerInActiveList+0x80>)
 8007e84:	681a      	ldr	r2, [r3, #0]
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	3304      	adds	r3, #4
 8007e8a:	4619      	mov	r1, r3
 8007e8c:	4610      	mov	r0, r2
 8007e8e:	f7fd fcfc 	bl	800588a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007e92:	697b      	ldr	r3, [r7, #20]
}
 8007e94:	4618      	mov	r0, r3
 8007e96:	3718      	adds	r7, #24
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	bd80      	pop	{r7, pc}
 8007e9c:	20001668 	.word	0x20001668
 8007ea0:	20001664 	.word	0x20001664

08007ea4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007ea4:	b580      	push	{r7, lr}
 8007ea6:	b08e      	sub	sp, #56	@ 0x38
 8007ea8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007eaa:	e0d4      	b.n	8008056 <prvProcessReceivedCommands+0x1b2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	da1b      	bge.n	8007eea <prvProcessReceivedCommands+0x46>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007eb2:	1d3b      	adds	r3, r7, #4
 8007eb4:	3304      	adds	r3, #4
 8007eb6:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007eb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d10d      	bne.n	8007eda <prvProcessReceivedCommands+0x36>
	__asm volatile
 8007ebe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ec2:	b672      	cpsid	i
 8007ec4:	f383 8811 	msr	BASEPRI, r3
 8007ec8:	f3bf 8f6f 	isb	sy
 8007ecc:	f3bf 8f4f 	dsb	sy
 8007ed0:	b662      	cpsie	i
 8007ed2:	61fb      	str	r3, [r7, #28]
}
 8007ed4:	bf00      	nop
 8007ed6:	bf00      	nop
 8007ed8:	e7fd      	b.n	8007ed6 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007eda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007ee0:	6850      	ldr	r0, [r2, #4]
 8007ee2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007ee4:	6892      	ldr	r2, [r2, #8]
 8007ee6:	4611      	mov	r1, r2
 8007ee8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	f2c0 80b2 	blt.w	8008056 <prvProcessReceivedCommands+0x1b2>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007ef6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ef8:	695b      	ldr	r3, [r3, #20]
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d004      	beq.n	8007f08 <prvProcessReceivedCommands+0x64>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007efe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f00:	3304      	adds	r3, #4
 8007f02:	4618      	mov	r0, r3
 8007f04:	f7fd fcfa 	bl	80058fc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007f08:	463b      	mov	r3, r7
 8007f0a:	4618      	mov	r0, r3
 8007f0c:	f7ff ff68 	bl	8007de0 <prvSampleTimeNow>
 8007f10:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	2b09      	cmp	r3, #9
 8007f16:	f200 809b 	bhi.w	8008050 <prvProcessReceivedCommands+0x1ac>
 8007f1a:	a201      	add	r2, pc, #4	@ (adr r2, 8007f20 <prvProcessReceivedCommands+0x7c>)
 8007f1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f20:	08007f49 	.word	0x08007f49
 8007f24:	08007f49 	.word	0x08007f49
 8007f28:	08007f49 	.word	0x08007f49
 8007f2c:	08007fc3 	.word	0x08007fc3
 8007f30:	08007fd7 	.word	0x08007fd7
 8007f34:	08008027 	.word	0x08008027
 8007f38:	08007f49 	.word	0x08007f49
 8007f3c:	08007f49 	.word	0x08007f49
 8007f40:	08007fc3 	.word	0x08007fc3
 8007f44:	08007fd7 	.word	0x08007fd7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007f48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f4a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007f4e:	f043 0301 	orr.w	r3, r3, #1
 8007f52:	b2da      	uxtb	r2, r3
 8007f54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f56:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007f5a:	68ba      	ldr	r2, [r7, #8]
 8007f5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f5e:	699b      	ldr	r3, [r3, #24]
 8007f60:	18d1      	adds	r1, r2, r3
 8007f62:	68bb      	ldr	r3, [r7, #8]
 8007f64:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007f66:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007f68:	f7ff ff5a 	bl	8007e20 <prvInsertTimerInActiveList>
 8007f6c:	4603      	mov	r3, r0
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d070      	beq.n	8008054 <prvProcessReceivedCommands+0x1b0>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007f72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f74:	6a1b      	ldr	r3, [r3, #32]
 8007f76:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007f78:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007f7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f7c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007f80:	f003 0304 	and.w	r3, r3, #4
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d065      	beq.n	8008054 <prvProcessReceivedCommands+0x1b0>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007f88:	68ba      	ldr	r2, [r7, #8]
 8007f8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f8c:	699b      	ldr	r3, [r3, #24]
 8007f8e:	441a      	add	r2, r3
 8007f90:	2300      	movs	r3, #0
 8007f92:	9300      	str	r3, [sp, #0]
 8007f94:	2300      	movs	r3, #0
 8007f96:	2100      	movs	r1, #0
 8007f98:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007f9a:	f7ff fdfb 	bl	8007b94 <xTimerGenericCommand>
 8007f9e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007fa0:	6a3b      	ldr	r3, [r7, #32]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d156      	bne.n	8008054 <prvProcessReceivedCommands+0x1b0>
	__asm volatile
 8007fa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007faa:	b672      	cpsid	i
 8007fac:	f383 8811 	msr	BASEPRI, r3
 8007fb0:	f3bf 8f6f 	isb	sy
 8007fb4:	f3bf 8f4f 	dsb	sy
 8007fb8:	b662      	cpsie	i
 8007fba:	61bb      	str	r3, [r7, #24]
}
 8007fbc:	bf00      	nop
 8007fbe:	bf00      	nop
 8007fc0:	e7fd      	b.n	8007fbe <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007fc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fc4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007fc8:	f023 0301 	bic.w	r3, r3, #1
 8007fcc:	b2da      	uxtb	r2, r3
 8007fce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fd0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007fd4:	e03f      	b.n	8008056 <prvProcessReceivedCommands+0x1b2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007fd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fd8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007fdc:	f043 0301 	orr.w	r3, r3, #1
 8007fe0:	b2da      	uxtb	r2, r3
 8007fe2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fe4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007fe8:	68ba      	ldr	r2, [r7, #8]
 8007fea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fec:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007fee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ff0:	699b      	ldr	r3, [r3, #24]
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d10d      	bne.n	8008012 <prvProcessReceivedCommands+0x16e>
	__asm volatile
 8007ff6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ffa:	b672      	cpsid	i
 8007ffc:	f383 8811 	msr	BASEPRI, r3
 8008000:	f3bf 8f6f 	isb	sy
 8008004:	f3bf 8f4f 	dsb	sy
 8008008:	b662      	cpsie	i
 800800a:	617b      	str	r3, [r7, #20]
}
 800800c:	bf00      	nop
 800800e:	bf00      	nop
 8008010:	e7fd      	b.n	800800e <prvProcessReceivedCommands+0x16a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008012:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008014:	699a      	ldr	r2, [r3, #24]
 8008016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008018:	18d1      	adds	r1, r2, r3
 800801a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800801c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800801e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008020:	f7ff fefe 	bl	8007e20 <prvInsertTimerInActiveList>
					break;
 8008024:	e017      	b.n	8008056 <prvProcessReceivedCommands+0x1b2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008026:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008028:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800802c:	f003 0302 	and.w	r3, r3, #2
 8008030:	2b00      	cmp	r3, #0
 8008032:	d103      	bne.n	800803c <prvProcessReceivedCommands+0x198>
						{
							vPortFree( pxTimer );
 8008034:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008036:	f000 fbd5 	bl	80087e4 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800803a:	e00c      	b.n	8008056 <prvProcessReceivedCommands+0x1b2>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800803c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800803e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008042:	f023 0301 	bic.w	r3, r3, #1
 8008046:	b2da      	uxtb	r2, r3
 8008048:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800804a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800804e:	e002      	b.n	8008056 <prvProcessReceivedCommands+0x1b2>

				default	:
					/* Don't expect to get here. */
					break;
 8008050:	bf00      	nop
 8008052:	e000      	b.n	8008056 <prvProcessReceivedCommands+0x1b2>
					break;
 8008054:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008056:	4b08      	ldr	r3, [pc, #32]	@ (8008078 <prvProcessReceivedCommands+0x1d4>)
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	1d39      	adds	r1, r7, #4
 800805c:	2200      	movs	r2, #0
 800805e:	4618      	mov	r0, r3
 8008060:	f7fe f88c 	bl	800617c <xQueueReceive>
 8008064:	4603      	mov	r3, r0
 8008066:	2b00      	cmp	r3, #0
 8008068:	f47f af20 	bne.w	8007eac <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800806c:	bf00      	nop
 800806e:	bf00      	nop
 8008070:	3730      	adds	r7, #48	@ 0x30
 8008072:	46bd      	mov	sp, r7
 8008074:	bd80      	pop	{r7, pc}
 8008076:	bf00      	nop
 8008078:	2000166c 	.word	0x2000166c

0800807c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800807c:	b580      	push	{r7, lr}
 800807e:	b088      	sub	sp, #32
 8008080:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008082:	e04b      	b.n	800811c <prvSwitchTimerLists+0xa0>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008084:	4b2f      	ldr	r3, [pc, #188]	@ (8008144 <prvSwitchTimerLists+0xc8>)
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	68db      	ldr	r3, [r3, #12]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800808e:	4b2d      	ldr	r3, [pc, #180]	@ (8008144 <prvSwitchTimerLists+0xc8>)
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	68db      	ldr	r3, [r3, #12]
 8008094:	68db      	ldr	r3, [r3, #12]
 8008096:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	3304      	adds	r3, #4
 800809c:	4618      	mov	r0, r3
 800809e:	f7fd fc2d 	bl	80058fc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	6a1b      	ldr	r3, [r3, #32]
 80080a6:	68f8      	ldr	r0, [r7, #12]
 80080a8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80080b0:	f003 0304 	and.w	r3, r3, #4
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d031      	beq.n	800811c <prvSwitchTimerLists+0xa0>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	699b      	ldr	r3, [r3, #24]
 80080bc:	693a      	ldr	r2, [r7, #16]
 80080be:	4413      	add	r3, r2
 80080c0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80080c2:	68ba      	ldr	r2, [r7, #8]
 80080c4:	693b      	ldr	r3, [r7, #16]
 80080c6:	429a      	cmp	r2, r3
 80080c8:	d90e      	bls.n	80080e8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	68ba      	ldr	r2, [r7, #8]
 80080ce:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	68fa      	ldr	r2, [r7, #12]
 80080d4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80080d6:	4b1b      	ldr	r3, [pc, #108]	@ (8008144 <prvSwitchTimerLists+0xc8>)
 80080d8:	681a      	ldr	r2, [r3, #0]
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	3304      	adds	r3, #4
 80080de:	4619      	mov	r1, r3
 80080e0:	4610      	mov	r0, r2
 80080e2:	f7fd fbd2 	bl	800588a <vListInsert>
 80080e6:	e019      	b.n	800811c <prvSwitchTimerLists+0xa0>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80080e8:	2300      	movs	r3, #0
 80080ea:	9300      	str	r3, [sp, #0]
 80080ec:	2300      	movs	r3, #0
 80080ee:	693a      	ldr	r2, [r7, #16]
 80080f0:	2100      	movs	r1, #0
 80080f2:	68f8      	ldr	r0, [r7, #12]
 80080f4:	f7ff fd4e 	bl	8007b94 <xTimerGenericCommand>
 80080f8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d10d      	bne.n	800811c <prvSwitchTimerLists+0xa0>
	__asm volatile
 8008100:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008104:	b672      	cpsid	i
 8008106:	f383 8811 	msr	BASEPRI, r3
 800810a:	f3bf 8f6f 	isb	sy
 800810e:	f3bf 8f4f 	dsb	sy
 8008112:	b662      	cpsie	i
 8008114:	603b      	str	r3, [r7, #0]
}
 8008116:	bf00      	nop
 8008118:	bf00      	nop
 800811a:	e7fd      	b.n	8008118 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800811c:	4b09      	ldr	r3, [pc, #36]	@ (8008144 <prvSwitchTimerLists+0xc8>)
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	2b00      	cmp	r3, #0
 8008124:	d1ae      	bne.n	8008084 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008126:	4b07      	ldr	r3, [pc, #28]	@ (8008144 <prvSwitchTimerLists+0xc8>)
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800812c:	4b06      	ldr	r3, [pc, #24]	@ (8008148 <prvSwitchTimerLists+0xcc>)
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	4a04      	ldr	r2, [pc, #16]	@ (8008144 <prvSwitchTimerLists+0xc8>)
 8008132:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008134:	4a04      	ldr	r2, [pc, #16]	@ (8008148 <prvSwitchTimerLists+0xcc>)
 8008136:	697b      	ldr	r3, [r7, #20]
 8008138:	6013      	str	r3, [r2, #0]
}
 800813a:	bf00      	nop
 800813c:	3718      	adds	r7, #24
 800813e:	46bd      	mov	sp, r7
 8008140:	bd80      	pop	{r7, pc}
 8008142:	bf00      	nop
 8008144:	20001664 	.word	0x20001664
 8008148:	20001668 	.word	0x20001668

0800814c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800814c:	b580      	push	{r7, lr}
 800814e:	b082      	sub	sp, #8
 8008150:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008152:	f000 f94b 	bl	80083ec <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008156:	4b15      	ldr	r3, [pc, #84]	@ (80081ac <prvCheckForValidListAndQueue+0x60>)
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	2b00      	cmp	r3, #0
 800815c:	d120      	bne.n	80081a0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800815e:	4814      	ldr	r0, [pc, #80]	@ (80081b0 <prvCheckForValidListAndQueue+0x64>)
 8008160:	f7fd fb42 	bl	80057e8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008164:	4813      	ldr	r0, [pc, #76]	@ (80081b4 <prvCheckForValidListAndQueue+0x68>)
 8008166:	f7fd fb3f 	bl	80057e8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800816a:	4b13      	ldr	r3, [pc, #76]	@ (80081b8 <prvCheckForValidListAndQueue+0x6c>)
 800816c:	4a10      	ldr	r2, [pc, #64]	@ (80081b0 <prvCheckForValidListAndQueue+0x64>)
 800816e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008170:	4b12      	ldr	r3, [pc, #72]	@ (80081bc <prvCheckForValidListAndQueue+0x70>)
 8008172:	4a10      	ldr	r2, [pc, #64]	@ (80081b4 <prvCheckForValidListAndQueue+0x68>)
 8008174:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008176:	2300      	movs	r3, #0
 8008178:	9300      	str	r3, [sp, #0]
 800817a:	4b11      	ldr	r3, [pc, #68]	@ (80081c0 <prvCheckForValidListAndQueue+0x74>)
 800817c:	4a11      	ldr	r2, [pc, #68]	@ (80081c4 <prvCheckForValidListAndQueue+0x78>)
 800817e:	2110      	movs	r1, #16
 8008180:	200a      	movs	r0, #10
 8008182:	f7fd fc51 	bl	8005a28 <xQueueGenericCreateStatic>
 8008186:	4603      	mov	r3, r0
 8008188:	4a08      	ldr	r2, [pc, #32]	@ (80081ac <prvCheckForValidListAndQueue+0x60>)
 800818a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800818c:	4b07      	ldr	r3, [pc, #28]	@ (80081ac <prvCheckForValidListAndQueue+0x60>)
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	2b00      	cmp	r3, #0
 8008192:	d005      	beq.n	80081a0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008194:	4b05      	ldr	r3, [pc, #20]	@ (80081ac <prvCheckForValidListAndQueue+0x60>)
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	490b      	ldr	r1, [pc, #44]	@ (80081c8 <prvCheckForValidListAndQueue+0x7c>)
 800819a:	4618      	mov	r0, r3
 800819c:	f7fe fbc4 	bl	8006928 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80081a0:	f000 f95a 	bl	8008458 <vPortExitCritical>
}
 80081a4:	bf00      	nop
 80081a6:	46bd      	mov	sp, r7
 80081a8:	bd80      	pop	{r7, pc}
 80081aa:	bf00      	nop
 80081ac:	2000166c 	.word	0x2000166c
 80081b0:	2000163c 	.word	0x2000163c
 80081b4:	20001650 	.word	0x20001650
 80081b8:	20001664 	.word	0x20001664
 80081bc:	20001668 	.word	0x20001668
 80081c0:	20001718 	.word	0x20001718
 80081c4:	20001678 	.word	0x20001678
 80081c8:	08009f18 	.word	0x08009f18

080081cc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80081cc:	b480      	push	{r7}
 80081ce:	b085      	sub	sp, #20
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	60f8      	str	r0, [r7, #12]
 80081d4:	60b9      	str	r1, [r7, #8]
 80081d6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	3b04      	subs	r3, #4
 80081dc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80081e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	3b04      	subs	r3, #4
 80081ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80081ec:	68bb      	ldr	r3, [r7, #8]
 80081ee:	f023 0201 	bic.w	r2, r3, #1
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	3b04      	subs	r3, #4
 80081fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80081fc:	4a0c      	ldr	r2, [pc, #48]	@ (8008230 <pxPortInitialiseStack+0x64>)
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	3b14      	subs	r3, #20
 8008206:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008208:	687a      	ldr	r2, [r7, #4]
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	3b04      	subs	r3, #4
 8008212:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	f06f 0202 	mvn.w	r2, #2
 800821a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	3b20      	subs	r3, #32
 8008220:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008222:	68fb      	ldr	r3, [r7, #12]
}
 8008224:	4618      	mov	r0, r3
 8008226:	3714      	adds	r7, #20
 8008228:	46bd      	mov	sp, r7
 800822a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800822e:	4770      	bx	lr
 8008230:	08008235 	.word	0x08008235

08008234 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008234:	b480      	push	{r7}
 8008236:	b085      	sub	sp, #20
 8008238:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800823a:	2300      	movs	r3, #0
 800823c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800823e:	4b15      	ldr	r3, [pc, #84]	@ (8008294 <prvTaskExitError+0x60>)
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008246:	d00d      	beq.n	8008264 <prvTaskExitError+0x30>
	__asm volatile
 8008248:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800824c:	b672      	cpsid	i
 800824e:	f383 8811 	msr	BASEPRI, r3
 8008252:	f3bf 8f6f 	isb	sy
 8008256:	f3bf 8f4f 	dsb	sy
 800825a:	b662      	cpsie	i
 800825c:	60fb      	str	r3, [r7, #12]
}
 800825e:	bf00      	nop
 8008260:	bf00      	nop
 8008262:	e7fd      	b.n	8008260 <prvTaskExitError+0x2c>
	__asm volatile
 8008264:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008268:	b672      	cpsid	i
 800826a:	f383 8811 	msr	BASEPRI, r3
 800826e:	f3bf 8f6f 	isb	sy
 8008272:	f3bf 8f4f 	dsb	sy
 8008276:	b662      	cpsie	i
 8008278:	60bb      	str	r3, [r7, #8]
}
 800827a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800827c:	bf00      	nop
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	2b00      	cmp	r3, #0
 8008282:	d0fc      	beq.n	800827e <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008284:	bf00      	nop
 8008286:	bf00      	nop
 8008288:	3714      	adds	r7, #20
 800828a:	46bd      	mov	sp, r7
 800828c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008290:	4770      	bx	lr
 8008292:	bf00      	nop
 8008294:	20000010 	.word	0x20000010
	...

080082a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80082a0:	4b07      	ldr	r3, [pc, #28]	@ (80082c0 <pxCurrentTCBConst2>)
 80082a2:	6819      	ldr	r1, [r3, #0]
 80082a4:	6808      	ldr	r0, [r1, #0]
 80082a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082aa:	f380 8809 	msr	PSP, r0
 80082ae:	f3bf 8f6f 	isb	sy
 80082b2:	f04f 0000 	mov.w	r0, #0
 80082b6:	f380 8811 	msr	BASEPRI, r0
 80082ba:	4770      	bx	lr
 80082bc:	f3af 8000 	nop.w

080082c0 <pxCurrentTCBConst2>:
 80082c0:	2000113c 	.word	0x2000113c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80082c4:	bf00      	nop
 80082c6:	bf00      	nop

080082c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80082c8:	4808      	ldr	r0, [pc, #32]	@ (80082ec <prvPortStartFirstTask+0x24>)
 80082ca:	6800      	ldr	r0, [r0, #0]
 80082cc:	6800      	ldr	r0, [r0, #0]
 80082ce:	f380 8808 	msr	MSP, r0
 80082d2:	f04f 0000 	mov.w	r0, #0
 80082d6:	f380 8814 	msr	CONTROL, r0
 80082da:	b662      	cpsie	i
 80082dc:	b661      	cpsie	f
 80082de:	f3bf 8f4f 	dsb	sy
 80082e2:	f3bf 8f6f 	isb	sy
 80082e6:	df00      	svc	0
 80082e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80082ea:	bf00      	nop
 80082ec:	e000ed08 	.word	0xe000ed08

080082f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80082f0:	b580      	push	{r7, lr}
 80082f2:	b084      	sub	sp, #16
 80082f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80082f6:	4b37      	ldr	r3, [pc, #220]	@ (80083d4 <xPortStartScheduler+0xe4>)
 80082f8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	781b      	ldrb	r3, [r3, #0]
 80082fe:	b2db      	uxtb	r3, r3
 8008300:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	22ff      	movs	r2, #255	@ 0xff
 8008306:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	781b      	ldrb	r3, [r3, #0]
 800830c:	b2db      	uxtb	r3, r3
 800830e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008310:	78fb      	ldrb	r3, [r7, #3]
 8008312:	b2db      	uxtb	r3, r3
 8008314:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8008318:	b2da      	uxtb	r2, r3
 800831a:	4b2f      	ldr	r3, [pc, #188]	@ (80083d8 <xPortStartScheduler+0xe8>)
 800831c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800831e:	4b2f      	ldr	r3, [pc, #188]	@ (80083dc <xPortStartScheduler+0xec>)
 8008320:	2207      	movs	r2, #7
 8008322:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008324:	e009      	b.n	800833a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8008326:	4b2d      	ldr	r3, [pc, #180]	@ (80083dc <xPortStartScheduler+0xec>)
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	3b01      	subs	r3, #1
 800832c:	4a2b      	ldr	r2, [pc, #172]	@ (80083dc <xPortStartScheduler+0xec>)
 800832e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008330:	78fb      	ldrb	r3, [r7, #3]
 8008332:	b2db      	uxtb	r3, r3
 8008334:	005b      	lsls	r3, r3, #1
 8008336:	b2db      	uxtb	r3, r3
 8008338:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800833a:	78fb      	ldrb	r3, [r7, #3]
 800833c:	b2db      	uxtb	r3, r3
 800833e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008342:	2b80      	cmp	r3, #128	@ 0x80
 8008344:	d0ef      	beq.n	8008326 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008346:	4b25      	ldr	r3, [pc, #148]	@ (80083dc <xPortStartScheduler+0xec>)
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	f1c3 0307 	rsb	r3, r3, #7
 800834e:	2b04      	cmp	r3, #4
 8008350:	d00d      	beq.n	800836e <xPortStartScheduler+0x7e>
	__asm volatile
 8008352:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008356:	b672      	cpsid	i
 8008358:	f383 8811 	msr	BASEPRI, r3
 800835c:	f3bf 8f6f 	isb	sy
 8008360:	f3bf 8f4f 	dsb	sy
 8008364:	b662      	cpsie	i
 8008366:	60bb      	str	r3, [r7, #8]
}
 8008368:	bf00      	nop
 800836a:	bf00      	nop
 800836c:	e7fd      	b.n	800836a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800836e:	4b1b      	ldr	r3, [pc, #108]	@ (80083dc <xPortStartScheduler+0xec>)
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	021b      	lsls	r3, r3, #8
 8008374:	4a19      	ldr	r2, [pc, #100]	@ (80083dc <xPortStartScheduler+0xec>)
 8008376:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008378:	4b18      	ldr	r3, [pc, #96]	@ (80083dc <xPortStartScheduler+0xec>)
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008380:	4a16      	ldr	r2, [pc, #88]	@ (80083dc <xPortStartScheduler+0xec>)
 8008382:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	b2da      	uxtb	r2, r3
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800838c:	4b14      	ldr	r3, [pc, #80]	@ (80083e0 <xPortStartScheduler+0xf0>)
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	4a13      	ldr	r2, [pc, #76]	@ (80083e0 <xPortStartScheduler+0xf0>)
 8008392:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008396:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008398:	4b11      	ldr	r3, [pc, #68]	@ (80083e0 <xPortStartScheduler+0xf0>)
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	4a10      	ldr	r2, [pc, #64]	@ (80083e0 <xPortStartScheduler+0xf0>)
 800839e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80083a2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80083a4:	f000 f8dc 	bl	8008560 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80083a8:	4b0e      	ldr	r3, [pc, #56]	@ (80083e4 <xPortStartScheduler+0xf4>)
 80083aa:	2200      	movs	r2, #0
 80083ac:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80083ae:	f000 f8fb 	bl	80085a8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80083b2:	4b0d      	ldr	r3, [pc, #52]	@ (80083e8 <xPortStartScheduler+0xf8>)
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	4a0c      	ldr	r2, [pc, #48]	@ (80083e8 <xPortStartScheduler+0xf8>)
 80083b8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80083bc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80083be:	f7ff ff83 	bl	80082c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80083c2:	f7fe ff25 	bl	8007210 <vTaskSwitchContext>
	prvTaskExitError();
 80083c6:	f7ff ff35 	bl	8008234 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80083ca:	2300      	movs	r3, #0
}
 80083cc:	4618      	mov	r0, r3
 80083ce:	3710      	adds	r7, #16
 80083d0:	46bd      	mov	sp, r7
 80083d2:	bd80      	pop	{r7, pc}
 80083d4:	e000e400 	.word	0xe000e400
 80083d8:	20001768 	.word	0x20001768
 80083dc:	2000176c 	.word	0x2000176c
 80083e0:	e000ed20 	.word	0xe000ed20
 80083e4:	20000010 	.word	0x20000010
 80083e8:	e000ef34 	.word	0xe000ef34

080083ec <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80083ec:	b480      	push	{r7}
 80083ee:	b083      	sub	sp, #12
 80083f0:	af00      	add	r7, sp, #0
	__asm volatile
 80083f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083f6:	b672      	cpsid	i
 80083f8:	f383 8811 	msr	BASEPRI, r3
 80083fc:	f3bf 8f6f 	isb	sy
 8008400:	f3bf 8f4f 	dsb	sy
 8008404:	b662      	cpsie	i
 8008406:	607b      	str	r3, [r7, #4]
}
 8008408:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800840a:	4b11      	ldr	r3, [pc, #68]	@ (8008450 <vPortEnterCritical+0x64>)
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	3301      	adds	r3, #1
 8008410:	4a0f      	ldr	r2, [pc, #60]	@ (8008450 <vPortEnterCritical+0x64>)
 8008412:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008414:	4b0e      	ldr	r3, [pc, #56]	@ (8008450 <vPortEnterCritical+0x64>)
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	2b01      	cmp	r3, #1
 800841a:	d112      	bne.n	8008442 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800841c:	4b0d      	ldr	r3, [pc, #52]	@ (8008454 <vPortEnterCritical+0x68>)
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	b2db      	uxtb	r3, r3
 8008422:	2b00      	cmp	r3, #0
 8008424:	d00d      	beq.n	8008442 <vPortEnterCritical+0x56>
	__asm volatile
 8008426:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800842a:	b672      	cpsid	i
 800842c:	f383 8811 	msr	BASEPRI, r3
 8008430:	f3bf 8f6f 	isb	sy
 8008434:	f3bf 8f4f 	dsb	sy
 8008438:	b662      	cpsie	i
 800843a:	603b      	str	r3, [r7, #0]
}
 800843c:	bf00      	nop
 800843e:	bf00      	nop
 8008440:	e7fd      	b.n	800843e <vPortEnterCritical+0x52>
	}
}
 8008442:	bf00      	nop
 8008444:	370c      	adds	r7, #12
 8008446:	46bd      	mov	sp, r7
 8008448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800844c:	4770      	bx	lr
 800844e:	bf00      	nop
 8008450:	20000010 	.word	0x20000010
 8008454:	e000ed04 	.word	0xe000ed04

08008458 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008458:	b480      	push	{r7}
 800845a:	b083      	sub	sp, #12
 800845c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800845e:	4b13      	ldr	r3, [pc, #76]	@ (80084ac <vPortExitCritical+0x54>)
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	2b00      	cmp	r3, #0
 8008464:	d10d      	bne.n	8008482 <vPortExitCritical+0x2a>
	__asm volatile
 8008466:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800846a:	b672      	cpsid	i
 800846c:	f383 8811 	msr	BASEPRI, r3
 8008470:	f3bf 8f6f 	isb	sy
 8008474:	f3bf 8f4f 	dsb	sy
 8008478:	b662      	cpsie	i
 800847a:	607b      	str	r3, [r7, #4]
}
 800847c:	bf00      	nop
 800847e:	bf00      	nop
 8008480:	e7fd      	b.n	800847e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8008482:	4b0a      	ldr	r3, [pc, #40]	@ (80084ac <vPortExitCritical+0x54>)
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	3b01      	subs	r3, #1
 8008488:	4a08      	ldr	r2, [pc, #32]	@ (80084ac <vPortExitCritical+0x54>)
 800848a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800848c:	4b07      	ldr	r3, [pc, #28]	@ (80084ac <vPortExitCritical+0x54>)
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	2b00      	cmp	r3, #0
 8008492:	d105      	bne.n	80084a0 <vPortExitCritical+0x48>
 8008494:	2300      	movs	r3, #0
 8008496:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008498:	683b      	ldr	r3, [r7, #0]
 800849a:	f383 8811 	msr	BASEPRI, r3
}
 800849e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80084a0:	bf00      	nop
 80084a2:	370c      	adds	r7, #12
 80084a4:	46bd      	mov	sp, r7
 80084a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084aa:	4770      	bx	lr
 80084ac:	20000010 	.word	0x20000010

080084b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80084b0:	f3ef 8009 	mrs	r0, PSP
 80084b4:	f3bf 8f6f 	isb	sy
 80084b8:	4b15      	ldr	r3, [pc, #84]	@ (8008510 <pxCurrentTCBConst>)
 80084ba:	681a      	ldr	r2, [r3, #0]
 80084bc:	f01e 0f10 	tst.w	lr, #16
 80084c0:	bf08      	it	eq
 80084c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80084c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084ca:	6010      	str	r0, [r2, #0]
 80084cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80084d0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80084d4:	b672      	cpsid	i
 80084d6:	f380 8811 	msr	BASEPRI, r0
 80084da:	f3bf 8f4f 	dsb	sy
 80084de:	f3bf 8f6f 	isb	sy
 80084e2:	b662      	cpsie	i
 80084e4:	f7fe fe94 	bl	8007210 <vTaskSwitchContext>
 80084e8:	f04f 0000 	mov.w	r0, #0
 80084ec:	f380 8811 	msr	BASEPRI, r0
 80084f0:	bc09      	pop	{r0, r3}
 80084f2:	6819      	ldr	r1, [r3, #0]
 80084f4:	6808      	ldr	r0, [r1, #0]
 80084f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084fa:	f01e 0f10 	tst.w	lr, #16
 80084fe:	bf08      	it	eq
 8008500:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008504:	f380 8809 	msr	PSP, r0
 8008508:	f3bf 8f6f 	isb	sy
 800850c:	4770      	bx	lr
 800850e:	bf00      	nop

08008510 <pxCurrentTCBConst>:
 8008510:	2000113c 	.word	0x2000113c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008514:	bf00      	nop
 8008516:	bf00      	nop

08008518 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008518:	b580      	push	{r7, lr}
 800851a:	b082      	sub	sp, #8
 800851c:	af00      	add	r7, sp, #0
	__asm volatile
 800851e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008522:	b672      	cpsid	i
 8008524:	f383 8811 	msr	BASEPRI, r3
 8008528:	f3bf 8f6f 	isb	sy
 800852c:	f3bf 8f4f 	dsb	sy
 8008530:	b662      	cpsie	i
 8008532:	607b      	str	r3, [r7, #4]
}
 8008534:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008536:	f7fe fdaf 	bl	8007098 <xTaskIncrementTick>
 800853a:	4603      	mov	r3, r0
 800853c:	2b00      	cmp	r3, #0
 800853e:	d003      	beq.n	8008548 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008540:	4b06      	ldr	r3, [pc, #24]	@ (800855c <SysTick_Handler+0x44>)
 8008542:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008546:	601a      	str	r2, [r3, #0]
 8008548:	2300      	movs	r3, #0
 800854a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800854c:	683b      	ldr	r3, [r7, #0]
 800854e:	f383 8811 	msr	BASEPRI, r3
}
 8008552:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008554:	bf00      	nop
 8008556:	3708      	adds	r7, #8
 8008558:	46bd      	mov	sp, r7
 800855a:	bd80      	pop	{r7, pc}
 800855c:	e000ed04 	.word	0xe000ed04

08008560 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008560:	b480      	push	{r7}
 8008562:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008564:	4b0b      	ldr	r3, [pc, #44]	@ (8008594 <vPortSetupTimerInterrupt+0x34>)
 8008566:	2200      	movs	r2, #0
 8008568:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800856a:	4b0b      	ldr	r3, [pc, #44]	@ (8008598 <vPortSetupTimerInterrupt+0x38>)
 800856c:	2200      	movs	r2, #0
 800856e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008570:	4b0a      	ldr	r3, [pc, #40]	@ (800859c <vPortSetupTimerInterrupt+0x3c>)
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	4a0a      	ldr	r2, [pc, #40]	@ (80085a0 <vPortSetupTimerInterrupt+0x40>)
 8008576:	fba2 2303 	umull	r2, r3, r2, r3
 800857a:	099b      	lsrs	r3, r3, #6
 800857c:	4a09      	ldr	r2, [pc, #36]	@ (80085a4 <vPortSetupTimerInterrupt+0x44>)
 800857e:	3b01      	subs	r3, #1
 8008580:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008582:	4b04      	ldr	r3, [pc, #16]	@ (8008594 <vPortSetupTimerInterrupt+0x34>)
 8008584:	2207      	movs	r2, #7
 8008586:	601a      	str	r2, [r3, #0]
}
 8008588:	bf00      	nop
 800858a:	46bd      	mov	sp, r7
 800858c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008590:	4770      	bx	lr
 8008592:	bf00      	nop
 8008594:	e000e010 	.word	0xe000e010
 8008598:	e000e018 	.word	0xe000e018
 800859c:	20000004 	.word	0x20000004
 80085a0:	10624dd3 	.word	0x10624dd3
 80085a4:	e000e014 	.word	0xe000e014

080085a8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80085a8:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80085b8 <vPortEnableVFP+0x10>
 80085ac:	6801      	ldr	r1, [r0, #0]
 80085ae:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80085b2:	6001      	str	r1, [r0, #0]
 80085b4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80085b6:	bf00      	nop
 80085b8:	e000ed88 	.word	0xe000ed88

080085bc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80085bc:	b480      	push	{r7}
 80085be:	b085      	sub	sp, #20
 80085c0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80085c2:	f3ef 8305 	mrs	r3, IPSR
 80085c6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	2b0f      	cmp	r3, #15
 80085cc:	d917      	bls.n	80085fe <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80085ce:	4a1a      	ldr	r2, [pc, #104]	@ (8008638 <vPortValidateInterruptPriority+0x7c>)
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	4413      	add	r3, r2
 80085d4:	781b      	ldrb	r3, [r3, #0]
 80085d6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80085d8:	4b18      	ldr	r3, [pc, #96]	@ (800863c <vPortValidateInterruptPriority+0x80>)
 80085da:	781b      	ldrb	r3, [r3, #0]
 80085dc:	7afa      	ldrb	r2, [r7, #11]
 80085de:	429a      	cmp	r2, r3
 80085e0:	d20d      	bcs.n	80085fe <vPortValidateInterruptPriority+0x42>
	__asm volatile
 80085e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085e6:	b672      	cpsid	i
 80085e8:	f383 8811 	msr	BASEPRI, r3
 80085ec:	f3bf 8f6f 	isb	sy
 80085f0:	f3bf 8f4f 	dsb	sy
 80085f4:	b662      	cpsie	i
 80085f6:	607b      	str	r3, [r7, #4]
}
 80085f8:	bf00      	nop
 80085fa:	bf00      	nop
 80085fc:	e7fd      	b.n	80085fa <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80085fe:	4b10      	ldr	r3, [pc, #64]	@ (8008640 <vPortValidateInterruptPriority+0x84>)
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8008606:	4b0f      	ldr	r3, [pc, #60]	@ (8008644 <vPortValidateInterruptPriority+0x88>)
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	429a      	cmp	r2, r3
 800860c:	d90d      	bls.n	800862a <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 800860e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008612:	b672      	cpsid	i
 8008614:	f383 8811 	msr	BASEPRI, r3
 8008618:	f3bf 8f6f 	isb	sy
 800861c:	f3bf 8f4f 	dsb	sy
 8008620:	b662      	cpsie	i
 8008622:	603b      	str	r3, [r7, #0]
}
 8008624:	bf00      	nop
 8008626:	bf00      	nop
 8008628:	e7fd      	b.n	8008626 <vPortValidateInterruptPriority+0x6a>
	}
 800862a:	bf00      	nop
 800862c:	3714      	adds	r7, #20
 800862e:	46bd      	mov	sp, r7
 8008630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008634:	4770      	bx	lr
 8008636:	bf00      	nop
 8008638:	e000e3f0 	.word	0xe000e3f0
 800863c:	20001768 	.word	0x20001768
 8008640:	e000ed0c 	.word	0xe000ed0c
 8008644:	2000176c 	.word	0x2000176c

08008648 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008648:	b580      	push	{r7, lr}
 800864a:	b08a      	sub	sp, #40	@ 0x28
 800864c:	af00      	add	r7, sp, #0
 800864e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008650:	2300      	movs	r3, #0
 8008652:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008654:	f7fe fc62 	bl	8006f1c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008658:	4b5d      	ldr	r3, [pc, #372]	@ (80087d0 <pvPortMalloc+0x188>)
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	2b00      	cmp	r3, #0
 800865e:	d101      	bne.n	8008664 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008660:	f000 f920 	bl	80088a4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008664:	4b5b      	ldr	r3, [pc, #364]	@ (80087d4 <pvPortMalloc+0x18c>)
 8008666:	681a      	ldr	r2, [r3, #0]
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	4013      	ands	r3, r2
 800866c:	2b00      	cmp	r3, #0
 800866e:	f040 8094 	bne.w	800879a <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	2b00      	cmp	r3, #0
 8008676:	d020      	beq.n	80086ba <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 8008678:	2208      	movs	r2, #8
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	4413      	add	r3, r2
 800867e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	f003 0307 	and.w	r3, r3, #7
 8008686:	2b00      	cmp	r3, #0
 8008688:	d017      	beq.n	80086ba <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	f023 0307 	bic.w	r3, r3, #7
 8008690:	3308      	adds	r3, #8
 8008692:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	f003 0307 	and.w	r3, r3, #7
 800869a:	2b00      	cmp	r3, #0
 800869c:	d00d      	beq.n	80086ba <pvPortMalloc+0x72>
	__asm volatile
 800869e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086a2:	b672      	cpsid	i
 80086a4:	f383 8811 	msr	BASEPRI, r3
 80086a8:	f3bf 8f6f 	isb	sy
 80086ac:	f3bf 8f4f 	dsb	sy
 80086b0:	b662      	cpsie	i
 80086b2:	617b      	str	r3, [r7, #20]
}
 80086b4:	bf00      	nop
 80086b6:	bf00      	nop
 80086b8:	e7fd      	b.n	80086b6 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d06c      	beq.n	800879a <pvPortMalloc+0x152>
 80086c0:	4b45      	ldr	r3, [pc, #276]	@ (80087d8 <pvPortMalloc+0x190>)
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	687a      	ldr	r2, [r7, #4]
 80086c6:	429a      	cmp	r2, r3
 80086c8:	d867      	bhi.n	800879a <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80086ca:	4b44      	ldr	r3, [pc, #272]	@ (80087dc <pvPortMalloc+0x194>)
 80086cc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80086ce:	4b43      	ldr	r3, [pc, #268]	@ (80087dc <pvPortMalloc+0x194>)
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80086d4:	e004      	b.n	80086e0 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 80086d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086d8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80086da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80086e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086e2:	685b      	ldr	r3, [r3, #4]
 80086e4:	687a      	ldr	r2, [r7, #4]
 80086e6:	429a      	cmp	r2, r3
 80086e8:	d903      	bls.n	80086f2 <pvPortMalloc+0xaa>
 80086ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d1f1      	bne.n	80086d6 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80086f2:	4b37      	ldr	r3, [pc, #220]	@ (80087d0 <pvPortMalloc+0x188>)
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80086f8:	429a      	cmp	r2, r3
 80086fa:	d04e      	beq.n	800879a <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80086fc:	6a3b      	ldr	r3, [r7, #32]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	2208      	movs	r2, #8
 8008702:	4413      	add	r3, r2
 8008704:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008708:	681a      	ldr	r2, [r3, #0]
 800870a:	6a3b      	ldr	r3, [r7, #32]
 800870c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800870e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008710:	685a      	ldr	r2, [r3, #4]
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	1ad2      	subs	r2, r2, r3
 8008716:	2308      	movs	r3, #8
 8008718:	005b      	lsls	r3, r3, #1
 800871a:	429a      	cmp	r2, r3
 800871c:	d922      	bls.n	8008764 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800871e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	4413      	add	r3, r2
 8008724:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008726:	69bb      	ldr	r3, [r7, #24]
 8008728:	f003 0307 	and.w	r3, r3, #7
 800872c:	2b00      	cmp	r3, #0
 800872e:	d00d      	beq.n	800874c <pvPortMalloc+0x104>
	__asm volatile
 8008730:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008734:	b672      	cpsid	i
 8008736:	f383 8811 	msr	BASEPRI, r3
 800873a:	f3bf 8f6f 	isb	sy
 800873e:	f3bf 8f4f 	dsb	sy
 8008742:	b662      	cpsie	i
 8008744:	613b      	str	r3, [r7, #16]
}
 8008746:	bf00      	nop
 8008748:	bf00      	nop
 800874a:	e7fd      	b.n	8008748 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800874c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800874e:	685a      	ldr	r2, [r3, #4]
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	1ad2      	subs	r2, r2, r3
 8008754:	69bb      	ldr	r3, [r7, #24]
 8008756:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800875a:	687a      	ldr	r2, [r7, #4]
 800875c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800875e:	69b8      	ldr	r0, [r7, #24]
 8008760:	f000 f902 	bl	8008968 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008764:	4b1c      	ldr	r3, [pc, #112]	@ (80087d8 <pvPortMalloc+0x190>)
 8008766:	681a      	ldr	r2, [r3, #0]
 8008768:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800876a:	685b      	ldr	r3, [r3, #4]
 800876c:	1ad3      	subs	r3, r2, r3
 800876e:	4a1a      	ldr	r2, [pc, #104]	@ (80087d8 <pvPortMalloc+0x190>)
 8008770:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008772:	4b19      	ldr	r3, [pc, #100]	@ (80087d8 <pvPortMalloc+0x190>)
 8008774:	681a      	ldr	r2, [r3, #0]
 8008776:	4b1a      	ldr	r3, [pc, #104]	@ (80087e0 <pvPortMalloc+0x198>)
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	429a      	cmp	r2, r3
 800877c:	d203      	bcs.n	8008786 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800877e:	4b16      	ldr	r3, [pc, #88]	@ (80087d8 <pvPortMalloc+0x190>)
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	4a17      	ldr	r2, [pc, #92]	@ (80087e0 <pvPortMalloc+0x198>)
 8008784:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008788:	685a      	ldr	r2, [r3, #4]
 800878a:	4b12      	ldr	r3, [pc, #72]	@ (80087d4 <pvPortMalloc+0x18c>)
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	431a      	orrs	r2, r3
 8008790:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008792:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008794:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008796:	2200      	movs	r2, #0
 8008798:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800879a:	f7fe fbcd 	bl	8006f38 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800879e:	69fb      	ldr	r3, [r7, #28]
 80087a0:	f003 0307 	and.w	r3, r3, #7
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d00d      	beq.n	80087c4 <pvPortMalloc+0x17c>
	__asm volatile
 80087a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087ac:	b672      	cpsid	i
 80087ae:	f383 8811 	msr	BASEPRI, r3
 80087b2:	f3bf 8f6f 	isb	sy
 80087b6:	f3bf 8f4f 	dsb	sy
 80087ba:	b662      	cpsie	i
 80087bc:	60fb      	str	r3, [r7, #12]
}
 80087be:	bf00      	nop
 80087c0:	bf00      	nop
 80087c2:	e7fd      	b.n	80087c0 <pvPortMalloc+0x178>
	return pvReturn;
 80087c4:	69fb      	ldr	r3, [r7, #28]
}
 80087c6:	4618      	mov	r0, r3
 80087c8:	3728      	adds	r7, #40	@ 0x28
 80087ca:	46bd      	mov	sp, r7
 80087cc:	bd80      	pop	{r7, pc}
 80087ce:	bf00      	nop
 80087d0:	20005378 	.word	0x20005378
 80087d4:	20005384 	.word	0x20005384
 80087d8:	2000537c 	.word	0x2000537c
 80087dc:	20005370 	.word	0x20005370
 80087e0:	20005380 	.word	0x20005380

080087e4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80087e4:	b580      	push	{r7, lr}
 80087e6:	b086      	sub	sp, #24
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d04e      	beq.n	8008894 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80087f6:	2308      	movs	r3, #8
 80087f8:	425b      	negs	r3, r3
 80087fa:	697a      	ldr	r2, [r7, #20]
 80087fc:	4413      	add	r3, r2
 80087fe:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008800:	697b      	ldr	r3, [r7, #20]
 8008802:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008804:	693b      	ldr	r3, [r7, #16]
 8008806:	685a      	ldr	r2, [r3, #4]
 8008808:	4b24      	ldr	r3, [pc, #144]	@ (800889c <vPortFree+0xb8>)
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	4013      	ands	r3, r2
 800880e:	2b00      	cmp	r3, #0
 8008810:	d10d      	bne.n	800882e <vPortFree+0x4a>
	__asm volatile
 8008812:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008816:	b672      	cpsid	i
 8008818:	f383 8811 	msr	BASEPRI, r3
 800881c:	f3bf 8f6f 	isb	sy
 8008820:	f3bf 8f4f 	dsb	sy
 8008824:	b662      	cpsie	i
 8008826:	60fb      	str	r3, [r7, #12]
}
 8008828:	bf00      	nop
 800882a:	bf00      	nop
 800882c:	e7fd      	b.n	800882a <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800882e:	693b      	ldr	r3, [r7, #16]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	2b00      	cmp	r3, #0
 8008834:	d00d      	beq.n	8008852 <vPortFree+0x6e>
	__asm volatile
 8008836:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800883a:	b672      	cpsid	i
 800883c:	f383 8811 	msr	BASEPRI, r3
 8008840:	f3bf 8f6f 	isb	sy
 8008844:	f3bf 8f4f 	dsb	sy
 8008848:	b662      	cpsie	i
 800884a:	60bb      	str	r3, [r7, #8]
}
 800884c:	bf00      	nop
 800884e:	bf00      	nop
 8008850:	e7fd      	b.n	800884e <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008852:	693b      	ldr	r3, [r7, #16]
 8008854:	685a      	ldr	r2, [r3, #4]
 8008856:	4b11      	ldr	r3, [pc, #68]	@ (800889c <vPortFree+0xb8>)
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	4013      	ands	r3, r2
 800885c:	2b00      	cmp	r3, #0
 800885e:	d019      	beq.n	8008894 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008860:	693b      	ldr	r3, [r7, #16]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	2b00      	cmp	r3, #0
 8008866:	d115      	bne.n	8008894 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008868:	693b      	ldr	r3, [r7, #16]
 800886a:	685a      	ldr	r2, [r3, #4]
 800886c:	4b0b      	ldr	r3, [pc, #44]	@ (800889c <vPortFree+0xb8>)
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	43db      	mvns	r3, r3
 8008872:	401a      	ands	r2, r3
 8008874:	693b      	ldr	r3, [r7, #16]
 8008876:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008878:	f7fe fb50 	bl	8006f1c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800887c:	693b      	ldr	r3, [r7, #16]
 800887e:	685a      	ldr	r2, [r3, #4]
 8008880:	4b07      	ldr	r3, [pc, #28]	@ (80088a0 <vPortFree+0xbc>)
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	4413      	add	r3, r2
 8008886:	4a06      	ldr	r2, [pc, #24]	@ (80088a0 <vPortFree+0xbc>)
 8008888:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800888a:	6938      	ldr	r0, [r7, #16]
 800888c:	f000 f86c 	bl	8008968 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008890:	f7fe fb52 	bl	8006f38 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008894:	bf00      	nop
 8008896:	3718      	adds	r7, #24
 8008898:	46bd      	mov	sp, r7
 800889a:	bd80      	pop	{r7, pc}
 800889c:	20005384 	.word	0x20005384
 80088a0:	2000537c 	.word	0x2000537c

080088a4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80088a4:	b480      	push	{r7}
 80088a6:	b085      	sub	sp, #20
 80088a8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80088aa:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80088ae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80088b0:	4b27      	ldr	r3, [pc, #156]	@ (8008950 <prvHeapInit+0xac>)
 80088b2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	f003 0307 	and.w	r3, r3, #7
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d00c      	beq.n	80088d8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	3307      	adds	r3, #7
 80088c2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	f023 0307 	bic.w	r3, r3, #7
 80088ca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80088cc:	68ba      	ldr	r2, [r7, #8]
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	1ad3      	subs	r3, r2, r3
 80088d2:	4a1f      	ldr	r2, [pc, #124]	@ (8008950 <prvHeapInit+0xac>)
 80088d4:	4413      	add	r3, r2
 80088d6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80088dc:	4a1d      	ldr	r2, [pc, #116]	@ (8008954 <prvHeapInit+0xb0>)
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80088e2:	4b1c      	ldr	r3, [pc, #112]	@ (8008954 <prvHeapInit+0xb0>)
 80088e4:	2200      	movs	r2, #0
 80088e6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	68ba      	ldr	r2, [r7, #8]
 80088ec:	4413      	add	r3, r2
 80088ee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80088f0:	2208      	movs	r2, #8
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	1a9b      	subs	r3, r3, r2
 80088f6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	f023 0307 	bic.w	r3, r3, #7
 80088fe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	4a15      	ldr	r2, [pc, #84]	@ (8008958 <prvHeapInit+0xb4>)
 8008904:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008906:	4b14      	ldr	r3, [pc, #80]	@ (8008958 <prvHeapInit+0xb4>)
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	2200      	movs	r2, #0
 800890c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800890e:	4b12      	ldr	r3, [pc, #72]	@ (8008958 <prvHeapInit+0xb4>)
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	2200      	movs	r2, #0
 8008914:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800891a:	683b      	ldr	r3, [r7, #0]
 800891c:	68fa      	ldr	r2, [r7, #12]
 800891e:	1ad2      	subs	r2, r2, r3
 8008920:	683b      	ldr	r3, [r7, #0]
 8008922:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008924:	4b0c      	ldr	r3, [pc, #48]	@ (8008958 <prvHeapInit+0xb4>)
 8008926:	681a      	ldr	r2, [r3, #0]
 8008928:	683b      	ldr	r3, [r7, #0]
 800892a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800892c:	683b      	ldr	r3, [r7, #0]
 800892e:	685b      	ldr	r3, [r3, #4]
 8008930:	4a0a      	ldr	r2, [pc, #40]	@ (800895c <prvHeapInit+0xb8>)
 8008932:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008934:	683b      	ldr	r3, [r7, #0]
 8008936:	685b      	ldr	r3, [r3, #4]
 8008938:	4a09      	ldr	r2, [pc, #36]	@ (8008960 <prvHeapInit+0xbc>)
 800893a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800893c:	4b09      	ldr	r3, [pc, #36]	@ (8008964 <prvHeapInit+0xc0>)
 800893e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8008942:	601a      	str	r2, [r3, #0]
}
 8008944:	bf00      	nop
 8008946:	3714      	adds	r7, #20
 8008948:	46bd      	mov	sp, r7
 800894a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800894e:	4770      	bx	lr
 8008950:	20001770 	.word	0x20001770
 8008954:	20005370 	.word	0x20005370
 8008958:	20005378 	.word	0x20005378
 800895c:	20005380 	.word	0x20005380
 8008960:	2000537c 	.word	0x2000537c
 8008964:	20005384 	.word	0x20005384

08008968 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008968:	b480      	push	{r7}
 800896a:	b085      	sub	sp, #20
 800896c:	af00      	add	r7, sp, #0
 800896e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008970:	4b28      	ldr	r3, [pc, #160]	@ (8008a14 <prvInsertBlockIntoFreeList+0xac>)
 8008972:	60fb      	str	r3, [r7, #12]
 8008974:	e002      	b.n	800897c <prvInsertBlockIntoFreeList+0x14>
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	60fb      	str	r3, [r7, #12]
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	687a      	ldr	r2, [r7, #4]
 8008982:	429a      	cmp	r2, r3
 8008984:	d8f7      	bhi.n	8008976 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	685b      	ldr	r3, [r3, #4]
 800898e:	68ba      	ldr	r2, [r7, #8]
 8008990:	4413      	add	r3, r2
 8008992:	687a      	ldr	r2, [r7, #4]
 8008994:	429a      	cmp	r2, r3
 8008996:	d108      	bne.n	80089aa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	685a      	ldr	r2, [r3, #4]
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	685b      	ldr	r3, [r3, #4]
 80089a0:	441a      	add	r2, r3
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	685b      	ldr	r3, [r3, #4]
 80089b2:	68ba      	ldr	r2, [r7, #8]
 80089b4:	441a      	add	r2, r3
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	429a      	cmp	r2, r3
 80089bc:	d118      	bne.n	80089f0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	681a      	ldr	r2, [r3, #0]
 80089c2:	4b15      	ldr	r3, [pc, #84]	@ (8008a18 <prvInsertBlockIntoFreeList+0xb0>)
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	429a      	cmp	r2, r3
 80089c8:	d00d      	beq.n	80089e6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	685a      	ldr	r2, [r3, #4]
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	685b      	ldr	r3, [r3, #4]
 80089d4:	441a      	add	r2, r3
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	681a      	ldr	r2, [r3, #0]
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	601a      	str	r2, [r3, #0]
 80089e4:	e008      	b.n	80089f8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80089e6:	4b0c      	ldr	r3, [pc, #48]	@ (8008a18 <prvInsertBlockIntoFreeList+0xb0>)
 80089e8:	681a      	ldr	r2, [r3, #0]
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	601a      	str	r2, [r3, #0]
 80089ee:	e003      	b.n	80089f8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	681a      	ldr	r2, [r3, #0]
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80089f8:	68fa      	ldr	r2, [r7, #12]
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	429a      	cmp	r2, r3
 80089fe:	d002      	beq.n	8008a06 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	687a      	ldr	r2, [r7, #4]
 8008a04:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008a06:	bf00      	nop
 8008a08:	3714      	adds	r7, #20
 8008a0a:	46bd      	mov	sp, r7
 8008a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a10:	4770      	bx	lr
 8008a12:	bf00      	nop
 8008a14:	20005370 	.word	0x20005370
 8008a18:	20005378 	.word	0x20005378

08008a1c <rand>:
 8008a1c:	4b16      	ldr	r3, [pc, #88]	@ (8008a78 <rand+0x5c>)
 8008a1e:	b510      	push	{r4, lr}
 8008a20:	681c      	ldr	r4, [r3, #0]
 8008a22:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8008a24:	b9b3      	cbnz	r3, 8008a54 <rand+0x38>
 8008a26:	2018      	movs	r0, #24
 8008a28:	f000 faae 	bl	8008f88 <malloc>
 8008a2c:	4602      	mov	r2, r0
 8008a2e:	6320      	str	r0, [r4, #48]	@ 0x30
 8008a30:	b920      	cbnz	r0, 8008a3c <rand+0x20>
 8008a32:	4b12      	ldr	r3, [pc, #72]	@ (8008a7c <rand+0x60>)
 8008a34:	4812      	ldr	r0, [pc, #72]	@ (8008a80 <rand+0x64>)
 8008a36:	2152      	movs	r1, #82	@ 0x52
 8008a38:	f000 fa3e 	bl	8008eb8 <__assert_func>
 8008a3c:	4911      	ldr	r1, [pc, #68]	@ (8008a84 <rand+0x68>)
 8008a3e:	4b12      	ldr	r3, [pc, #72]	@ (8008a88 <rand+0x6c>)
 8008a40:	e9c0 1300 	strd	r1, r3, [r0]
 8008a44:	4b11      	ldr	r3, [pc, #68]	@ (8008a8c <rand+0x70>)
 8008a46:	6083      	str	r3, [r0, #8]
 8008a48:	230b      	movs	r3, #11
 8008a4a:	8183      	strh	r3, [r0, #12]
 8008a4c:	2100      	movs	r1, #0
 8008a4e:	2001      	movs	r0, #1
 8008a50:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8008a54:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8008a56:	480e      	ldr	r0, [pc, #56]	@ (8008a90 <rand+0x74>)
 8008a58:	690b      	ldr	r3, [r1, #16]
 8008a5a:	694c      	ldr	r4, [r1, #20]
 8008a5c:	4a0d      	ldr	r2, [pc, #52]	@ (8008a94 <rand+0x78>)
 8008a5e:	4358      	muls	r0, r3
 8008a60:	fb02 0004 	mla	r0, r2, r4, r0
 8008a64:	fba3 3202 	umull	r3, r2, r3, r2
 8008a68:	3301      	adds	r3, #1
 8008a6a:	eb40 0002 	adc.w	r0, r0, r2
 8008a6e:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8008a72:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8008a76:	bd10      	pop	{r4, pc}
 8008a78:	20000020 	.word	0x20000020
 8008a7c:	08009fd4 	.word	0x08009fd4
 8008a80:	08009feb 	.word	0x08009feb
 8008a84:	abcd330e 	.word	0xabcd330e
 8008a88:	e66d1234 	.word	0xe66d1234
 8008a8c:	0005deec 	.word	0x0005deec
 8008a90:	5851f42d 	.word	0x5851f42d
 8008a94:	4c957f2d 	.word	0x4c957f2d

08008a98 <std>:
 8008a98:	2300      	movs	r3, #0
 8008a9a:	b510      	push	{r4, lr}
 8008a9c:	4604      	mov	r4, r0
 8008a9e:	e9c0 3300 	strd	r3, r3, [r0]
 8008aa2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008aa6:	6083      	str	r3, [r0, #8]
 8008aa8:	8181      	strh	r1, [r0, #12]
 8008aaa:	6643      	str	r3, [r0, #100]	@ 0x64
 8008aac:	81c2      	strh	r2, [r0, #14]
 8008aae:	6183      	str	r3, [r0, #24]
 8008ab0:	4619      	mov	r1, r3
 8008ab2:	2208      	movs	r2, #8
 8008ab4:	305c      	adds	r0, #92	@ 0x5c
 8008ab6:	f000 f916 	bl	8008ce6 <memset>
 8008aba:	4b0d      	ldr	r3, [pc, #52]	@ (8008af0 <std+0x58>)
 8008abc:	6263      	str	r3, [r4, #36]	@ 0x24
 8008abe:	4b0d      	ldr	r3, [pc, #52]	@ (8008af4 <std+0x5c>)
 8008ac0:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008ac2:	4b0d      	ldr	r3, [pc, #52]	@ (8008af8 <std+0x60>)
 8008ac4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008ac6:	4b0d      	ldr	r3, [pc, #52]	@ (8008afc <std+0x64>)
 8008ac8:	6323      	str	r3, [r4, #48]	@ 0x30
 8008aca:	4b0d      	ldr	r3, [pc, #52]	@ (8008b00 <std+0x68>)
 8008acc:	6224      	str	r4, [r4, #32]
 8008ace:	429c      	cmp	r4, r3
 8008ad0:	d006      	beq.n	8008ae0 <std+0x48>
 8008ad2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008ad6:	4294      	cmp	r4, r2
 8008ad8:	d002      	beq.n	8008ae0 <std+0x48>
 8008ada:	33d0      	adds	r3, #208	@ 0xd0
 8008adc:	429c      	cmp	r4, r3
 8008ade:	d105      	bne.n	8008aec <std+0x54>
 8008ae0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008ae4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008ae8:	f000 b9d4 	b.w	8008e94 <__retarget_lock_init_recursive>
 8008aec:	bd10      	pop	{r4, pc}
 8008aee:	bf00      	nop
 8008af0:	08008c61 	.word	0x08008c61
 8008af4:	08008c83 	.word	0x08008c83
 8008af8:	08008cbb 	.word	0x08008cbb
 8008afc:	08008cdf 	.word	0x08008cdf
 8008b00:	20005388 	.word	0x20005388

08008b04 <stdio_exit_handler>:
 8008b04:	4a02      	ldr	r2, [pc, #8]	@ (8008b10 <stdio_exit_handler+0xc>)
 8008b06:	4903      	ldr	r1, [pc, #12]	@ (8008b14 <stdio_exit_handler+0x10>)
 8008b08:	4803      	ldr	r0, [pc, #12]	@ (8008b18 <stdio_exit_handler+0x14>)
 8008b0a:	f000 b869 	b.w	8008be0 <_fwalk_sglue>
 8008b0e:	bf00      	nop
 8008b10:	20000014 	.word	0x20000014
 8008b14:	080097c5 	.word	0x080097c5
 8008b18:	20000024 	.word	0x20000024

08008b1c <cleanup_stdio>:
 8008b1c:	6841      	ldr	r1, [r0, #4]
 8008b1e:	4b0c      	ldr	r3, [pc, #48]	@ (8008b50 <cleanup_stdio+0x34>)
 8008b20:	4299      	cmp	r1, r3
 8008b22:	b510      	push	{r4, lr}
 8008b24:	4604      	mov	r4, r0
 8008b26:	d001      	beq.n	8008b2c <cleanup_stdio+0x10>
 8008b28:	f000 fe4c 	bl	80097c4 <_fflush_r>
 8008b2c:	68a1      	ldr	r1, [r4, #8]
 8008b2e:	4b09      	ldr	r3, [pc, #36]	@ (8008b54 <cleanup_stdio+0x38>)
 8008b30:	4299      	cmp	r1, r3
 8008b32:	d002      	beq.n	8008b3a <cleanup_stdio+0x1e>
 8008b34:	4620      	mov	r0, r4
 8008b36:	f000 fe45 	bl	80097c4 <_fflush_r>
 8008b3a:	68e1      	ldr	r1, [r4, #12]
 8008b3c:	4b06      	ldr	r3, [pc, #24]	@ (8008b58 <cleanup_stdio+0x3c>)
 8008b3e:	4299      	cmp	r1, r3
 8008b40:	d004      	beq.n	8008b4c <cleanup_stdio+0x30>
 8008b42:	4620      	mov	r0, r4
 8008b44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008b48:	f000 be3c 	b.w	80097c4 <_fflush_r>
 8008b4c:	bd10      	pop	{r4, pc}
 8008b4e:	bf00      	nop
 8008b50:	20005388 	.word	0x20005388
 8008b54:	200053f0 	.word	0x200053f0
 8008b58:	20005458 	.word	0x20005458

08008b5c <global_stdio_init.part.0>:
 8008b5c:	b510      	push	{r4, lr}
 8008b5e:	4b0b      	ldr	r3, [pc, #44]	@ (8008b8c <global_stdio_init.part.0+0x30>)
 8008b60:	4c0b      	ldr	r4, [pc, #44]	@ (8008b90 <global_stdio_init.part.0+0x34>)
 8008b62:	4a0c      	ldr	r2, [pc, #48]	@ (8008b94 <global_stdio_init.part.0+0x38>)
 8008b64:	601a      	str	r2, [r3, #0]
 8008b66:	4620      	mov	r0, r4
 8008b68:	2200      	movs	r2, #0
 8008b6a:	2104      	movs	r1, #4
 8008b6c:	f7ff ff94 	bl	8008a98 <std>
 8008b70:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008b74:	2201      	movs	r2, #1
 8008b76:	2109      	movs	r1, #9
 8008b78:	f7ff ff8e 	bl	8008a98 <std>
 8008b7c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008b80:	2202      	movs	r2, #2
 8008b82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008b86:	2112      	movs	r1, #18
 8008b88:	f7ff bf86 	b.w	8008a98 <std>
 8008b8c:	200054c0 	.word	0x200054c0
 8008b90:	20005388 	.word	0x20005388
 8008b94:	08008b05 	.word	0x08008b05

08008b98 <__sfp_lock_acquire>:
 8008b98:	4801      	ldr	r0, [pc, #4]	@ (8008ba0 <__sfp_lock_acquire+0x8>)
 8008b9a:	f000 b97c 	b.w	8008e96 <__retarget_lock_acquire_recursive>
 8008b9e:	bf00      	nop
 8008ba0:	200054c9 	.word	0x200054c9

08008ba4 <__sfp_lock_release>:
 8008ba4:	4801      	ldr	r0, [pc, #4]	@ (8008bac <__sfp_lock_release+0x8>)
 8008ba6:	f000 b977 	b.w	8008e98 <__retarget_lock_release_recursive>
 8008baa:	bf00      	nop
 8008bac:	200054c9 	.word	0x200054c9

08008bb0 <__sinit>:
 8008bb0:	b510      	push	{r4, lr}
 8008bb2:	4604      	mov	r4, r0
 8008bb4:	f7ff fff0 	bl	8008b98 <__sfp_lock_acquire>
 8008bb8:	6a23      	ldr	r3, [r4, #32]
 8008bba:	b11b      	cbz	r3, 8008bc4 <__sinit+0x14>
 8008bbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008bc0:	f7ff bff0 	b.w	8008ba4 <__sfp_lock_release>
 8008bc4:	4b04      	ldr	r3, [pc, #16]	@ (8008bd8 <__sinit+0x28>)
 8008bc6:	6223      	str	r3, [r4, #32]
 8008bc8:	4b04      	ldr	r3, [pc, #16]	@ (8008bdc <__sinit+0x2c>)
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d1f5      	bne.n	8008bbc <__sinit+0xc>
 8008bd0:	f7ff ffc4 	bl	8008b5c <global_stdio_init.part.0>
 8008bd4:	e7f2      	b.n	8008bbc <__sinit+0xc>
 8008bd6:	bf00      	nop
 8008bd8:	08008b1d 	.word	0x08008b1d
 8008bdc:	200054c0 	.word	0x200054c0

08008be0 <_fwalk_sglue>:
 8008be0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008be4:	4607      	mov	r7, r0
 8008be6:	4688      	mov	r8, r1
 8008be8:	4614      	mov	r4, r2
 8008bea:	2600      	movs	r6, #0
 8008bec:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008bf0:	f1b9 0901 	subs.w	r9, r9, #1
 8008bf4:	d505      	bpl.n	8008c02 <_fwalk_sglue+0x22>
 8008bf6:	6824      	ldr	r4, [r4, #0]
 8008bf8:	2c00      	cmp	r4, #0
 8008bfa:	d1f7      	bne.n	8008bec <_fwalk_sglue+0xc>
 8008bfc:	4630      	mov	r0, r6
 8008bfe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008c02:	89ab      	ldrh	r3, [r5, #12]
 8008c04:	2b01      	cmp	r3, #1
 8008c06:	d907      	bls.n	8008c18 <_fwalk_sglue+0x38>
 8008c08:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008c0c:	3301      	adds	r3, #1
 8008c0e:	d003      	beq.n	8008c18 <_fwalk_sglue+0x38>
 8008c10:	4629      	mov	r1, r5
 8008c12:	4638      	mov	r0, r7
 8008c14:	47c0      	blx	r8
 8008c16:	4306      	orrs	r6, r0
 8008c18:	3568      	adds	r5, #104	@ 0x68
 8008c1a:	e7e9      	b.n	8008bf0 <_fwalk_sglue+0x10>

08008c1c <siprintf>:
 8008c1c:	b40e      	push	{r1, r2, r3}
 8008c1e:	b510      	push	{r4, lr}
 8008c20:	b09d      	sub	sp, #116	@ 0x74
 8008c22:	ab1f      	add	r3, sp, #124	@ 0x7c
 8008c24:	9002      	str	r0, [sp, #8]
 8008c26:	9006      	str	r0, [sp, #24]
 8008c28:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008c2c:	480a      	ldr	r0, [pc, #40]	@ (8008c58 <siprintf+0x3c>)
 8008c2e:	9107      	str	r1, [sp, #28]
 8008c30:	9104      	str	r1, [sp, #16]
 8008c32:	490a      	ldr	r1, [pc, #40]	@ (8008c5c <siprintf+0x40>)
 8008c34:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c38:	9105      	str	r1, [sp, #20]
 8008c3a:	2400      	movs	r4, #0
 8008c3c:	a902      	add	r1, sp, #8
 8008c3e:	6800      	ldr	r0, [r0, #0]
 8008c40:	9301      	str	r3, [sp, #4]
 8008c42:	941b      	str	r4, [sp, #108]	@ 0x6c
 8008c44:	f000 fab2 	bl	80091ac <_svfiprintf_r>
 8008c48:	9b02      	ldr	r3, [sp, #8]
 8008c4a:	701c      	strb	r4, [r3, #0]
 8008c4c:	b01d      	add	sp, #116	@ 0x74
 8008c4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008c52:	b003      	add	sp, #12
 8008c54:	4770      	bx	lr
 8008c56:	bf00      	nop
 8008c58:	20000020 	.word	0x20000020
 8008c5c:	ffff0208 	.word	0xffff0208

08008c60 <__sread>:
 8008c60:	b510      	push	{r4, lr}
 8008c62:	460c      	mov	r4, r1
 8008c64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c68:	f000 f8c6 	bl	8008df8 <_read_r>
 8008c6c:	2800      	cmp	r0, #0
 8008c6e:	bfab      	itete	ge
 8008c70:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008c72:	89a3      	ldrhlt	r3, [r4, #12]
 8008c74:	181b      	addge	r3, r3, r0
 8008c76:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008c7a:	bfac      	ite	ge
 8008c7c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008c7e:	81a3      	strhlt	r3, [r4, #12]
 8008c80:	bd10      	pop	{r4, pc}

08008c82 <__swrite>:
 8008c82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c86:	461f      	mov	r7, r3
 8008c88:	898b      	ldrh	r3, [r1, #12]
 8008c8a:	05db      	lsls	r3, r3, #23
 8008c8c:	4605      	mov	r5, r0
 8008c8e:	460c      	mov	r4, r1
 8008c90:	4616      	mov	r6, r2
 8008c92:	d505      	bpl.n	8008ca0 <__swrite+0x1e>
 8008c94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c98:	2302      	movs	r3, #2
 8008c9a:	2200      	movs	r2, #0
 8008c9c:	f000 f89a 	bl	8008dd4 <_lseek_r>
 8008ca0:	89a3      	ldrh	r3, [r4, #12]
 8008ca2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008ca6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008caa:	81a3      	strh	r3, [r4, #12]
 8008cac:	4632      	mov	r2, r6
 8008cae:	463b      	mov	r3, r7
 8008cb0:	4628      	mov	r0, r5
 8008cb2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008cb6:	f000 b8b1 	b.w	8008e1c <_write_r>

08008cba <__sseek>:
 8008cba:	b510      	push	{r4, lr}
 8008cbc:	460c      	mov	r4, r1
 8008cbe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008cc2:	f000 f887 	bl	8008dd4 <_lseek_r>
 8008cc6:	1c43      	adds	r3, r0, #1
 8008cc8:	89a3      	ldrh	r3, [r4, #12]
 8008cca:	bf15      	itete	ne
 8008ccc:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008cce:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008cd2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008cd6:	81a3      	strheq	r3, [r4, #12]
 8008cd8:	bf18      	it	ne
 8008cda:	81a3      	strhne	r3, [r4, #12]
 8008cdc:	bd10      	pop	{r4, pc}

08008cde <__sclose>:
 8008cde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ce2:	f000 b809 	b.w	8008cf8 <_close_r>

08008ce6 <memset>:
 8008ce6:	4402      	add	r2, r0
 8008ce8:	4603      	mov	r3, r0
 8008cea:	4293      	cmp	r3, r2
 8008cec:	d100      	bne.n	8008cf0 <memset+0xa>
 8008cee:	4770      	bx	lr
 8008cf0:	f803 1b01 	strb.w	r1, [r3], #1
 8008cf4:	e7f9      	b.n	8008cea <memset+0x4>
	...

08008cf8 <_close_r>:
 8008cf8:	b538      	push	{r3, r4, r5, lr}
 8008cfa:	4d06      	ldr	r5, [pc, #24]	@ (8008d14 <_close_r+0x1c>)
 8008cfc:	2300      	movs	r3, #0
 8008cfe:	4604      	mov	r4, r0
 8008d00:	4608      	mov	r0, r1
 8008d02:	602b      	str	r3, [r5, #0]
 8008d04:	f7f8 fb1c 	bl	8001340 <_close>
 8008d08:	1c43      	adds	r3, r0, #1
 8008d0a:	d102      	bne.n	8008d12 <_close_r+0x1a>
 8008d0c:	682b      	ldr	r3, [r5, #0]
 8008d0e:	b103      	cbz	r3, 8008d12 <_close_r+0x1a>
 8008d10:	6023      	str	r3, [r4, #0]
 8008d12:	bd38      	pop	{r3, r4, r5, pc}
 8008d14:	200054c4 	.word	0x200054c4

08008d18 <_reclaim_reent>:
 8008d18:	4b2d      	ldr	r3, [pc, #180]	@ (8008dd0 <_reclaim_reent+0xb8>)
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	4283      	cmp	r3, r0
 8008d1e:	b570      	push	{r4, r5, r6, lr}
 8008d20:	4604      	mov	r4, r0
 8008d22:	d053      	beq.n	8008dcc <_reclaim_reent+0xb4>
 8008d24:	69c3      	ldr	r3, [r0, #28]
 8008d26:	b31b      	cbz	r3, 8008d70 <_reclaim_reent+0x58>
 8008d28:	68db      	ldr	r3, [r3, #12]
 8008d2a:	b163      	cbz	r3, 8008d46 <_reclaim_reent+0x2e>
 8008d2c:	2500      	movs	r5, #0
 8008d2e:	69e3      	ldr	r3, [r4, #28]
 8008d30:	68db      	ldr	r3, [r3, #12]
 8008d32:	5959      	ldr	r1, [r3, r5]
 8008d34:	b9b1      	cbnz	r1, 8008d64 <_reclaim_reent+0x4c>
 8008d36:	3504      	adds	r5, #4
 8008d38:	2d80      	cmp	r5, #128	@ 0x80
 8008d3a:	d1f8      	bne.n	8008d2e <_reclaim_reent+0x16>
 8008d3c:	69e3      	ldr	r3, [r4, #28]
 8008d3e:	4620      	mov	r0, r4
 8008d40:	68d9      	ldr	r1, [r3, #12]
 8008d42:	f000 f8d7 	bl	8008ef4 <_free_r>
 8008d46:	69e3      	ldr	r3, [r4, #28]
 8008d48:	6819      	ldr	r1, [r3, #0]
 8008d4a:	b111      	cbz	r1, 8008d52 <_reclaim_reent+0x3a>
 8008d4c:	4620      	mov	r0, r4
 8008d4e:	f000 f8d1 	bl	8008ef4 <_free_r>
 8008d52:	69e3      	ldr	r3, [r4, #28]
 8008d54:	689d      	ldr	r5, [r3, #8]
 8008d56:	b15d      	cbz	r5, 8008d70 <_reclaim_reent+0x58>
 8008d58:	4629      	mov	r1, r5
 8008d5a:	4620      	mov	r0, r4
 8008d5c:	682d      	ldr	r5, [r5, #0]
 8008d5e:	f000 f8c9 	bl	8008ef4 <_free_r>
 8008d62:	e7f8      	b.n	8008d56 <_reclaim_reent+0x3e>
 8008d64:	680e      	ldr	r6, [r1, #0]
 8008d66:	4620      	mov	r0, r4
 8008d68:	f000 f8c4 	bl	8008ef4 <_free_r>
 8008d6c:	4631      	mov	r1, r6
 8008d6e:	e7e1      	b.n	8008d34 <_reclaim_reent+0x1c>
 8008d70:	6961      	ldr	r1, [r4, #20]
 8008d72:	b111      	cbz	r1, 8008d7a <_reclaim_reent+0x62>
 8008d74:	4620      	mov	r0, r4
 8008d76:	f000 f8bd 	bl	8008ef4 <_free_r>
 8008d7a:	69e1      	ldr	r1, [r4, #28]
 8008d7c:	b111      	cbz	r1, 8008d84 <_reclaim_reent+0x6c>
 8008d7e:	4620      	mov	r0, r4
 8008d80:	f000 f8b8 	bl	8008ef4 <_free_r>
 8008d84:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8008d86:	b111      	cbz	r1, 8008d8e <_reclaim_reent+0x76>
 8008d88:	4620      	mov	r0, r4
 8008d8a:	f000 f8b3 	bl	8008ef4 <_free_r>
 8008d8e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008d90:	b111      	cbz	r1, 8008d98 <_reclaim_reent+0x80>
 8008d92:	4620      	mov	r0, r4
 8008d94:	f000 f8ae 	bl	8008ef4 <_free_r>
 8008d98:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8008d9a:	b111      	cbz	r1, 8008da2 <_reclaim_reent+0x8a>
 8008d9c:	4620      	mov	r0, r4
 8008d9e:	f000 f8a9 	bl	8008ef4 <_free_r>
 8008da2:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8008da4:	b111      	cbz	r1, 8008dac <_reclaim_reent+0x94>
 8008da6:	4620      	mov	r0, r4
 8008da8:	f000 f8a4 	bl	8008ef4 <_free_r>
 8008dac:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8008dae:	b111      	cbz	r1, 8008db6 <_reclaim_reent+0x9e>
 8008db0:	4620      	mov	r0, r4
 8008db2:	f000 f89f 	bl	8008ef4 <_free_r>
 8008db6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8008db8:	b111      	cbz	r1, 8008dc0 <_reclaim_reent+0xa8>
 8008dba:	4620      	mov	r0, r4
 8008dbc:	f000 f89a 	bl	8008ef4 <_free_r>
 8008dc0:	6a23      	ldr	r3, [r4, #32]
 8008dc2:	b11b      	cbz	r3, 8008dcc <_reclaim_reent+0xb4>
 8008dc4:	4620      	mov	r0, r4
 8008dc6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008dca:	4718      	bx	r3
 8008dcc:	bd70      	pop	{r4, r5, r6, pc}
 8008dce:	bf00      	nop
 8008dd0:	20000020 	.word	0x20000020

08008dd4 <_lseek_r>:
 8008dd4:	b538      	push	{r3, r4, r5, lr}
 8008dd6:	4d07      	ldr	r5, [pc, #28]	@ (8008df4 <_lseek_r+0x20>)
 8008dd8:	4604      	mov	r4, r0
 8008dda:	4608      	mov	r0, r1
 8008ddc:	4611      	mov	r1, r2
 8008dde:	2200      	movs	r2, #0
 8008de0:	602a      	str	r2, [r5, #0]
 8008de2:	461a      	mov	r2, r3
 8008de4:	f7f8 fad3 	bl	800138e <_lseek>
 8008de8:	1c43      	adds	r3, r0, #1
 8008dea:	d102      	bne.n	8008df2 <_lseek_r+0x1e>
 8008dec:	682b      	ldr	r3, [r5, #0]
 8008dee:	b103      	cbz	r3, 8008df2 <_lseek_r+0x1e>
 8008df0:	6023      	str	r3, [r4, #0]
 8008df2:	bd38      	pop	{r3, r4, r5, pc}
 8008df4:	200054c4 	.word	0x200054c4

08008df8 <_read_r>:
 8008df8:	b538      	push	{r3, r4, r5, lr}
 8008dfa:	4d07      	ldr	r5, [pc, #28]	@ (8008e18 <_read_r+0x20>)
 8008dfc:	4604      	mov	r4, r0
 8008dfe:	4608      	mov	r0, r1
 8008e00:	4611      	mov	r1, r2
 8008e02:	2200      	movs	r2, #0
 8008e04:	602a      	str	r2, [r5, #0]
 8008e06:	461a      	mov	r2, r3
 8008e08:	f7f8 fa61 	bl	80012ce <_read>
 8008e0c:	1c43      	adds	r3, r0, #1
 8008e0e:	d102      	bne.n	8008e16 <_read_r+0x1e>
 8008e10:	682b      	ldr	r3, [r5, #0]
 8008e12:	b103      	cbz	r3, 8008e16 <_read_r+0x1e>
 8008e14:	6023      	str	r3, [r4, #0]
 8008e16:	bd38      	pop	{r3, r4, r5, pc}
 8008e18:	200054c4 	.word	0x200054c4

08008e1c <_write_r>:
 8008e1c:	b538      	push	{r3, r4, r5, lr}
 8008e1e:	4d07      	ldr	r5, [pc, #28]	@ (8008e3c <_write_r+0x20>)
 8008e20:	4604      	mov	r4, r0
 8008e22:	4608      	mov	r0, r1
 8008e24:	4611      	mov	r1, r2
 8008e26:	2200      	movs	r2, #0
 8008e28:	602a      	str	r2, [r5, #0]
 8008e2a:	461a      	mov	r2, r3
 8008e2c:	f7f8 fa6c 	bl	8001308 <_write>
 8008e30:	1c43      	adds	r3, r0, #1
 8008e32:	d102      	bne.n	8008e3a <_write_r+0x1e>
 8008e34:	682b      	ldr	r3, [r5, #0]
 8008e36:	b103      	cbz	r3, 8008e3a <_write_r+0x1e>
 8008e38:	6023      	str	r3, [r4, #0]
 8008e3a:	bd38      	pop	{r3, r4, r5, pc}
 8008e3c:	200054c4 	.word	0x200054c4

08008e40 <__errno>:
 8008e40:	4b01      	ldr	r3, [pc, #4]	@ (8008e48 <__errno+0x8>)
 8008e42:	6818      	ldr	r0, [r3, #0]
 8008e44:	4770      	bx	lr
 8008e46:	bf00      	nop
 8008e48:	20000020 	.word	0x20000020

08008e4c <__libc_init_array>:
 8008e4c:	b570      	push	{r4, r5, r6, lr}
 8008e4e:	4d0d      	ldr	r5, [pc, #52]	@ (8008e84 <__libc_init_array+0x38>)
 8008e50:	4c0d      	ldr	r4, [pc, #52]	@ (8008e88 <__libc_init_array+0x3c>)
 8008e52:	1b64      	subs	r4, r4, r5
 8008e54:	10a4      	asrs	r4, r4, #2
 8008e56:	2600      	movs	r6, #0
 8008e58:	42a6      	cmp	r6, r4
 8008e5a:	d109      	bne.n	8008e70 <__libc_init_array+0x24>
 8008e5c:	4d0b      	ldr	r5, [pc, #44]	@ (8008e8c <__libc_init_array+0x40>)
 8008e5e:	4c0c      	ldr	r4, [pc, #48]	@ (8008e90 <__libc_init_array+0x44>)
 8008e60:	f000 ffee 	bl	8009e40 <_init>
 8008e64:	1b64      	subs	r4, r4, r5
 8008e66:	10a4      	asrs	r4, r4, #2
 8008e68:	2600      	movs	r6, #0
 8008e6a:	42a6      	cmp	r6, r4
 8008e6c:	d105      	bne.n	8008e7a <__libc_init_array+0x2e>
 8008e6e:	bd70      	pop	{r4, r5, r6, pc}
 8008e70:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e74:	4798      	blx	r3
 8008e76:	3601      	adds	r6, #1
 8008e78:	e7ee      	b.n	8008e58 <__libc_init_array+0xc>
 8008e7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e7e:	4798      	blx	r3
 8008e80:	3601      	adds	r6, #1
 8008e82:	e7f2      	b.n	8008e6a <__libc_init_array+0x1e>
 8008e84:	0800a0bc 	.word	0x0800a0bc
 8008e88:	0800a0bc 	.word	0x0800a0bc
 8008e8c:	0800a0bc 	.word	0x0800a0bc
 8008e90:	0800a0c0 	.word	0x0800a0c0

08008e94 <__retarget_lock_init_recursive>:
 8008e94:	4770      	bx	lr

08008e96 <__retarget_lock_acquire_recursive>:
 8008e96:	4770      	bx	lr

08008e98 <__retarget_lock_release_recursive>:
 8008e98:	4770      	bx	lr

08008e9a <memcpy>:
 8008e9a:	440a      	add	r2, r1
 8008e9c:	4291      	cmp	r1, r2
 8008e9e:	f100 33ff 	add.w	r3, r0, #4294967295
 8008ea2:	d100      	bne.n	8008ea6 <memcpy+0xc>
 8008ea4:	4770      	bx	lr
 8008ea6:	b510      	push	{r4, lr}
 8008ea8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008eac:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008eb0:	4291      	cmp	r1, r2
 8008eb2:	d1f9      	bne.n	8008ea8 <memcpy+0xe>
 8008eb4:	bd10      	pop	{r4, pc}
	...

08008eb8 <__assert_func>:
 8008eb8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008eba:	4614      	mov	r4, r2
 8008ebc:	461a      	mov	r2, r3
 8008ebe:	4b09      	ldr	r3, [pc, #36]	@ (8008ee4 <__assert_func+0x2c>)
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	4605      	mov	r5, r0
 8008ec4:	68d8      	ldr	r0, [r3, #12]
 8008ec6:	b14c      	cbz	r4, 8008edc <__assert_func+0x24>
 8008ec8:	4b07      	ldr	r3, [pc, #28]	@ (8008ee8 <__assert_func+0x30>)
 8008eca:	9100      	str	r1, [sp, #0]
 8008ecc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008ed0:	4906      	ldr	r1, [pc, #24]	@ (8008eec <__assert_func+0x34>)
 8008ed2:	462b      	mov	r3, r5
 8008ed4:	f000 fc9e 	bl	8009814 <fiprintf>
 8008ed8:	f000 fcd8 	bl	800988c <abort>
 8008edc:	4b04      	ldr	r3, [pc, #16]	@ (8008ef0 <__assert_func+0x38>)
 8008ede:	461c      	mov	r4, r3
 8008ee0:	e7f3      	b.n	8008eca <__assert_func+0x12>
 8008ee2:	bf00      	nop
 8008ee4:	20000020 	.word	0x20000020
 8008ee8:	0800a043 	.word	0x0800a043
 8008eec:	0800a050 	.word	0x0800a050
 8008ef0:	0800a07e 	.word	0x0800a07e

08008ef4 <_free_r>:
 8008ef4:	b538      	push	{r3, r4, r5, lr}
 8008ef6:	4605      	mov	r5, r0
 8008ef8:	2900      	cmp	r1, #0
 8008efa:	d041      	beq.n	8008f80 <_free_r+0x8c>
 8008efc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008f00:	1f0c      	subs	r4, r1, #4
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	bfb8      	it	lt
 8008f06:	18e4      	addlt	r4, r4, r3
 8008f08:	f000 f8e8 	bl	80090dc <__malloc_lock>
 8008f0c:	4a1d      	ldr	r2, [pc, #116]	@ (8008f84 <_free_r+0x90>)
 8008f0e:	6813      	ldr	r3, [r2, #0]
 8008f10:	b933      	cbnz	r3, 8008f20 <_free_r+0x2c>
 8008f12:	6063      	str	r3, [r4, #4]
 8008f14:	6014      	str	r4, [r2, #0]
 8008f16:	4628      	mov	r0, r5
 8008f18:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008f1c:	f000 b8e4 	b.w	80090e8 <__malloc_unlock>
 8008f20:	42a3      	cmp	r3, r4
 8008f22:	d908      	bls.n	8008f36 <_free_r+0x42>
 8008f24:	6820      	ldr	r0, [r4, #0]
 8008f26:	1821      	adds	r1, r4, r0
 8008f28:	428b      	cmp	r3, r1
 8008f2a:	bf01      	itttt	eq
 8008f2c:	6819      	ldreq	r1, [r3, #0]
 8008f2e:	685b      	ldreq	r3, [r3, #4]
 8008f30:	1809      	addeq	r1, r1, r0
 8008f32:	6021      	streq	r1, [r4, #0]
 8008f34:	e7ed      	b.n	8008f12 <_free_r+0x1e>
 8008f36:	461a      	mov	r2, r3
 8008f38:	685b      	ldr	r3, [r3, #4]
 8008f3a:	b10b      	cbz	r3, 8008f40 <_free_r+0x4c>
 8008f3c:	42a3      	cmp	r3, r4
 8008f3e:	d9fa      	bls.n	8008f36 <_free_r+0x42>
 8008f40:	6811      	ldr	r1, [r2, #0]
 8008f42:	1850      	adds	r0, r2, r1
 8008f44:	42a0      	cmp	r0, r4
 8008f46:	d10b      	bne.n	8008f60 <_free_r+0x6c>
 8008f48:	6820      	ldr	r0, [r4, #0]
 8008f4a:	4401      	add	r1, r0
 8008f4c:	1850      	adds	r0, r2, r1
 8008f4e:	4283      	cmp	r3, r0
 8008f50:	6011      	str	r1, [r2, #0]
 8008f52:	d1e0      	bne.n	8008f16 <_free_r+0x22>
 8008f54:	6818      	ldr	r0, [r3, #0]
 8008f56:	685b      	ldr	r3, [r3, #4]
 8008f58:	6053      	str	r3, [r2, #4]
 8008f5a:	4408      	add	r0, r1
 8008f5c:	6010      	str	r0, [r2, #0]
 8008f5e:	e7da      	b.n	8008f16 <_free_r+0x22>
 8008f60:	d902      	bls.n	8008f68 <_free_r+0x74>
 8008f62:	230c      	movs	r3, #12
 8008f64:	602b      	str	r3, [r5, #0]
 8008f66:	e7d6      	b.n	8008f16 <_free_r+0x22>
 8008f68:	6820      	ldr	r0, [r4, #0]
 8008f6a:	1821      	adds	r1, r4, r0
 8008f6c:	428b      	cmp	r3, r1
 8008f6e:	bf04      	itt	eq
 8008f70:	6819      	ldreq	r1, [r3, #0]
 8008f72:	685b      	ldreq	r3, [r3, #4]
 8008f74:	6063      	str	r3, [r4, #4]
 8008f76:	bf04      	itt	eq
 8008f78:	1809      	addeq	r1, r1, r0
 8008f7a:	6021      	streq	r1, [r4, #0]
 8008f7c:	6054      	str	r4, [r2, #4]
 8008f7e:	e7ca      	b.n	8008f16 <_free_r+0x22>
 8008f80:	bd38      	pop	{r3, r4, r5, pc}
 8008f82:	bf00      	nop
 8008f84:	200054d0 	.word	0x200054d0

08008f88 <malloc>:
 8008f88:	4b02      	ldr	r3, [pc, #8]	@ (8008f94 <malloc+0xc>)
 8008f8a:	4601      	mov	r1, r0
 8008f8c:	6818      	ldr	r0, [r3, #0]
 8008f8e:	f000 b825 	b.w	8008fdc <_malloc_r>
 8008f92:	bf00      	nop
 8008f94:	20000020 	.word	0x20000020

08008f98 <sbrk_aligned>:
 8008f98:	b570      	push	{r4, r5, r6, lr}
 8008f9a:	4e0f      	ldr	r6, [pc, #60]	@ (8008fd8 <sbrk_aligned+0x40>)
 8008f9c:	460c      	mov	r4, r1
 8008f9e:	6831      	ldr	r1, [r6, #0]
 8008fa0:	4605      	mov	r5, r0
 8008fa2:	b911      	cbnz	r1, 8008faa <sbrk_aligned+0x12>
 8008fa4:	f000 fc62 	bl	800986c <_sbrk_r>
 8008fa8:	6030      	str	r0, [r6, #0]
 8008faa:	4621      	mov	r1, r4
 8008fac:	4628      	mov	r0, r5
 8008fae:	f000 fc5d 	bl	800986c <_sbrk_r>
 8008fb2:	1c43      	adds	r3, r0, #1
 8008fb4:	d103      	bne.n	8008fbe <sbrk_aligned+0x26>
 8008fb6:	f04f 34ff 	mov.w	r4, #4294967295
 8008fba:	4620      	mov	r0, r4
 8008fbc:	bd70      	pop	{r4, r5, r6, pc}
 8008fbe:	1cc4      	adds	r4, r0, #3
 8008fc0:	f024 0403 	bic.w	r4, r4, #3
 8008fc4:	42a0      	cmp	r0, r4
 8008fc6:	d0f8      	beq.n	8008fba <sbrk_aligned+0x22>
 8008fc8:	1a21      	subs	r1, r4, r0
 8008fca:	4628      	mov	r0, r5
 8008fcc:	f000 fc4e 	bl	800986c <_sbrk_r>
 8008fd0:	3001      	adds	r0, #1
 8008fd2:	d1f2      	bne.n	8008fba <sbrk_aligned+0x22>
 8008fd4:	e7ef      	b.n	8008fb6 <sbrk_aligned+0x1e>
 8008fd6:	bf00      	nop
 8008fd8:	200054cc 	.word	0x200054cc

08008fdc <_malloc_r>:
 8008fdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008fe0:	1ccd      	adds	r5, r1, #3
 8008fe2:	f025 0503 	bic.w	r5, r5, #3
 8008fe6:	3508      	adds	r5, #8
 8008fe8:	2d0c      	cmp	r5, #12
 8008fea:	bf38      	it	cc
 8008fec:	250c      	movcc	r5, #12
 8008fee:	2d00      	cmp	r5, #0
 8008ff0:	4606      	mov	r6, r0
 8008ff2:	db01      	blt.n	8008ff8 <_malloc_r+0x1c>
 8008ff4:	42a9      	cmp	r1, r5
 8008ff6:	d904      	bls.n	8009002 <_malloc_r+0x26>
 8008ff8:	230c      	movs	r3, #12
 8008ffa:	6033      	str	r3, [r6, #0]
 8008ffc:	2000      	movs	r0, #0
 8008ffe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009002:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80090d8 <_malloc_r+0xfc>
 8009006:	f000 f869 	bl	80090dc <__malloc_lock>
 800900a:	f8d8 3000 	ldr.w	r3, [r8]
 800900e:	461c      	mov	r4, r3
 8009010:	bb44      	cbnz	r4, 8009064 <_malloc_r+0x88>
 8009012:	4629      	mov	r1, r5
 8009014:	4630      	mov	r0, r6
 8009016:	f7ff ffbf 	bl	8008f98 <sbrk_aligned>
 800901a:	1c43      	adds	r3, r0, #1
 800901c:	4604      	mov	r4, r0
 800901e:	d158      	bne.n	80090d2 <_malloc_r+0xf6>
 8009020:	f8d8 4000 	ldr.w	r4, [r8]
 8009024:	4627      	mov	r7, r4
 8009026:	2f00      	cmp	r7, #0
 8009028:	d143      	bne.n	80090b2 <_malloc_r+0xd6>
 800902a:	2c00      	cmp	r4, #0
 800902c:	d04b      	beq.n	80090c6 <_malloc_r+0xea>
 800902e:	6823      	ldr	r3, [r4, #0]
 8009030:	4639      	mov	r1, r7
 8009032:	4630      	mov	r0, r6
 8009034:	eb04 0903 	add.w	r9, r4, r3
 8009038:	f000 fc18 	bl	800986c <_sbrk_r>
 800903c:	4581      	cmp	r9, r0
 800903e:	d142      	bne.n	80090c6 <_malloc_r+0xea>
 8009040:	6821      	ldr	r1, [r4, #0]
 8009042:	1a6d      	subs	r5, r5, r1
 8009044:	4629      	mov	r1, r5
 8009046:	4630      	mov	r0, r6
 8009048:	f7ff ffa6 	bl	8008f98 <sbrk_aligned>
 800904c:	3001      	adds	r0, #1
 800904e:	d03a      	beq.n	80090c6 <_malloc_r+0xea>
 8009050:	6823      	ldr	r3, [r4, #0]
 8009052:	442b      	add	r3, r5
 8009054:	6023      	str	r3, [r4, #0]
 8009056:	f8d8 3000 	ldr.w	r3, [r8]
 800905a:	685a      	ldr	r2, [r3, #4]
 800905c:	bb62      	cbnz	r2, 80090b8 <_malloc_r+0xdc>
 800905e:	f8c8 7000 	str.w	r7, [r8]
 8009062:	e00f      	b.n	8009084 <_malloc_r+0xa8>
 8009064:	6822      	ldr	r2, [r4, #0]
 8009066:	1b52      	subs	r2, r2, r5
 8009068:	d420      	bmi.n	80090ac <_malloc_r+0xd0>
 800906a:	2a0b      	cmp	r2, #11
 800906c:	d917      	bls.n	800909e <_malloc_r+0xc2>
 800906e:	1961      	adds	r1, r4, r5
 8009070:	42a3      	cmp	r3, r4
 8009072:	6025      	str	r5, [r4, #0]
 8009074:	bf18      	it	ne
 8009076:	6059      	strne	r1, [r3, #4]
 8009078:	6863      	ldr	r3, [r4, #4]
 800907a:	bf08      	it	eq
 800907c:	f8c8 1000 	streq.w	r1, [r8]
 8009080:	5162      	str	r2, [r4, r5]
 8009082:	604b      	str	r3, [r1, #4]
 8009084:	4630      	mov	r0, r6
 8009086:	f000 f82f 	bl	80090e8 <__malloc_unlock>
 800908a:	f104 000b 	add.w	r0, r4, #11
 800908e:	1d23      	adds	r3, r4, #4
 8009090:	f020 0007 	bic.w	r0, r0, #7
 8009094:	1ac2      	subs	r2, r0, r3
 8009096:	bf1c      	itt	ne
 8009098:	1a1b      	subne	r3, r3, r0
 800909a:	50a3      	strne	r3, [r4, r2]
 800909c:	e7af      	b.n	8008ffe <_malloc_r+0x22>
 800909e:	6862      	ldr	r2, [r4, #4]
 80090a0:	42a3      	cmp	r3, r4
 80090a2:	bf0c      	ite	eq
 80090a4:	f8c8 2000 	streq.w	r2, [r8]
 80090a8:	605a      	strne	r2, [r3, #4]
 80090aa:	e7eb      	b.n	8009084 <_malloc_r+0xa8>
 80090ac:	4623      	mov	r3, r4
 80090ae:	6864      	ldr	r4, [r4, #4]
 80090b0:	e7ae      	b.n	8009010 <_malloc_r+0x34>
 80090b2:	463c      	mov	r4, r7
 80090b4:	687f      	ldr	r7, [r7, #4]
 80090b6:	e7b6      	b.n	8009026 <_malloc_r+0x4a>
 80090b8:	461a      	mov	r2, r3
 80090ba:	685b      	ldr	r3, [r3, #4]
 80090bc:	42a3      	cmp	r3, r4
 80090be:	d1fb      	bne.n	80090b8 <_malloc_r+0xdc>
 80090c0:	2300      	movs	r3, #0
 80090c2:	6053      	str	r3, [r2, #4]
 80090c4:	e7de      	b.n	8009084 <_malloc_r+0xa8>
 80090c6:	230c      	movs	r3, #12
 80090c8:	6033      	str	r3, [r6, #0]
 80090ca:	4630      	mov	r0, r6
 80090cc:	f000 f80c 	bl	80090e8 <__malloc_unlock>
 80090d0:	e794      	b.n	8008ffc <_malloc_r+0x20>
 80090d2:	6005      	str	r5, [r0, #0]
 80090d4:	e7d6      	b.n	8009084 <_malloc_r+0xa8>
 80090d6:	bf00      	nop
 80090d8:	200054d0 	.word	0x200054d0

080090dc <__malloc_lock>:
 80090dc:	4801      	ldr	r0, [pc, #4]	@ (80090e4 <__malloc_lock+0x8>)
 80090de:	f7ff beda 	b.w	8008e96 <__retarget_lock_acquire_recursive>
 80090e2:	bf00      	nop
 80090e4:	200054c8 	.word	0x200054c8

080090e8 <__malloc_unlock>:
 80090e8:	4801      	ldr	r0, [pc, #4]	@ (80090f0 <__malloc_unlock+0x8>)
 80090ea:	f7ff bed5 	b.w	8008e98 <__retarget_lock_release_recursive>
 80090ee:	bf00      	nop
 80090f0:	200054c8 	.word	0x200054c8

080090f4 <__ssputs_r>:
 80090f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80090f8:	688e      	ldr	r6, [r1, #8]
 80090fa:	461f      	mov	r7, r3
 80090fc:	42be      	cmp	r6, r7
 80090fe:	680b      	ldr	r3, [r1, #0]
 8009100:	4682      	mov	sl, r0
 8009102:	460c      	mov	r4, r1
 8009104:	4690      	mov	r8, r2
 8009106:	d82d      	bhi.n	8009164 <__ssputs_r+0x70>
 8009108:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800910c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009110:	d026      	beq.n	8009160 <__ssputs_r+0x6c>
 8009112:	6965      	ldr	r5, [r4, #20]
 8009114:	6909      	ldr	r1, [r1, #16]
 8009116:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800911a:	eba3 0901 	sub.w	r9, r3, r1
 800911e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009122:	1c7b      	adds	r3, r7, #1
 8009124:	444b      	add	r3, r9
 8009126:	106d      	asrs	r5, r5, #1
 8009128:	429d      	cmp	r5, r3
 800912a:	bf38      	it	cc
 800912c:	461d      	movcc	r5, r3
 800912e:	0553      	lsls	r3, r2, #21
 8009130:	d527      	bpl.n	8009182 <__ssputs_r+0x8e>
 8009132:	4629      	mov	r1, r5
 8009134:	f7ff ff52 	bl	8008fdc <_malloc_r>
 8009138:	4606      	mov	r6, r0
 800913a:	b360      	cbz	r0, 8009196 <__ssputs_r+0xa2>
 800913c:	6921      	ldr	r1, [r4, #16]
 800913e:	464a      	mov	r2, r9
 8009140:	f7ff feab 	bl	8008e9a <memcpy>
 8009144:	89a3      	ldrh	r3, [r4, #12]
 8009146:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800914a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800914e:	81a3      	strh	r3, [r4, #12]
 8009150:	6126      	str	r6, [r4, #16]
 8009152:	6165      	str	r5, [r4, #20]
 8009154:	444e      	add	r6, r9
 8009156:	eba5 0509 	sub.w	r5, r5, r9
 800915a:	6026      	str	r6, [r4, #0]
 800915c:	60a5      	str	r5, [r4, #8]
 800915e:	463e      	mov	r6, r7
 8009160:	42be      	cmp	r6, r7
 8009162:	d900      	bls.n	8009166 <__ssputs_r+0x72>
 8009164:	463e      	mov	r6, r7
 8009166:	6820      	ldr	r0, [r4, #0]
 8009168:	4632      	mov	r2, r6
 800916a:	4641      	mov	r1, r8
 800916c:	f000 fb64 	bl	8009838 <memmove>
 8009170:	68a3      	ldr	r3, [r4, #8]
 8009172:	1b9b      	subs	r3, r3, r6
 8009174:	60a3      	str	r3, [r4, #8]
 8009176:	6823      	ldr	r3, [r4, #0]
 8009178:	4433      	add	r3, r6
 800917a:	6023      	str	r3, [r4, #0]
 800917c:	2000      	movs	r0, #0
 800917e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009182:	462a      	mov	r2, r5
 8009184:	f000 fb89 	bl	800989a <_realloc_r>
 8009188:	4606      	mov	r6, r0
 800918a:	2800      	cmp	r0, #0
 800918c:	d1e0      	bne.n	8009150 <__ssputs_r+0x5c>
 800918e:	6921      	ldr	r1, [r4, #16]
 8009190:	4650      	mov	r0, sl
 8009192:	f7ff feaf 	bl	8008ef4 <_free_r>
 8009196:	230c      	movs	r3, #12
 8009198:	f8ca 3000 	str.w	r3, [sl]
 800919c:	89a3      	ldrh	r3, [r4, #12]
 800919e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80091a2:	81a3      	strh	r3, [r4, #12]
 80091a4:	f04f 30ff 	mov.w	r0, #4294967295
 80091a8:	e7e9      	b.n	800917e <__ssputs_r+0x8a>
	...

080091ac <_svfiprintf_r>:
 80091ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091b0:	4698      	mov	r8, r3
 80091b2:	898b      	ldrh	r3, [r1, #12]
 80091b4:	061b      	lsls	r3, r3, #24
 80091b6:	b09d      	sub	sp, #116	@ 0x74
 80091b8:	4607      	mov	r7, r0
 80091ba:	460d      	mov	r5, r1
 80091bc:	4614      	mov	r4, r2
 80091be:	d510      	bpl.n	80091e2 <_svfiprintf_r+0x36>
 80091c0:	690b      	ldr	r3, [r1, #16]
 80091c2:	b973      	cbnz	r3, 80091e2 <_svfiprintf_r+0x36>
 80091c4:	2140      	movs	r1, #64	@ 0x40
 80091c6:	f7ff ff09 	bl	8008fdc <_malloc_r>
 80091ca:	6028      	str	r0, [r5, #0]
 80091cc:	6128      	str	r0, [r5, #16]
 80091ce:	b930      	cbnz	r0, 80091de <_svfiprintf_r+0x32>
 80091d0:	230c      	movs	r3, #12
 80091d2:	603b      	str	r3, [r7, #0]
 80091d4:	f04f 30ff 	mov.w	r0, #4294967295
 80091d8:	b01d      	add	sp, #116	@ 0x74
 80091da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091de:	2340      	movs	r3, #64	@ 0x40
 80091e0:	616b      	str	r3, [r5, #20]
 80091e2:	2300      	movs	r3, #0
 80091e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80091e6:	2320      	movs	r3, #32
 80091e8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80091ec:	f8cd 800c 	str.w	r8, [sp, #12]
 80091f0:	2330      	movs	r3, #48	@ 0x30
 80091f2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009390 <_svfiprintf_r+0x1e4>
 80091f6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80091fa:	f04f 0901 	mov.w	r9, #1
 80091fe:	4623      	mov	r3, r4
 8009200:	469a      	mov	sl, r3
 8009202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009206:	b10a      	cbz	r2, 800920c <_svfiprintf_r+0x60>
 8009208:	2a25      	cmp	r2, #37	@ 0x25
 800920a:	d1f9      	bne.n	8009200 <_svfiprintf_r+0x54>
 800920c:	ebba 0b04 	subs.w	fp, sl, r4
 8009210:	d00b      	beq.n	800922a <_svfiprintf_r+0x7e>
 8009212:	465b      	mov	r3, fp
 8009214:	4622      	mov	r2, r4
 8009216:	4629      	mov	r1, r5
 8009218:	4638      	mov	r0, r7
 800921a:	f7ff ff6b 	bl	80090f4 <__ssputs_r>
 800921e:	3001      	adds	r0, #1
 8009220:	f000 80a7 	beq.w	8009372 <_svfiprintf_r+0x1c6>
 8009224:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009226:	445a      	add	r2, fp
 8009228:	9209      	str	r2, [sp, #36]	@ 0x24
 800922a:	f89a 3000 	ldrb.w	r3, [sl]
 800922e:	2b00      	cmp	r3, #0
 8009230:	f000 809f 	beq.w	8009372 <_svfiprintf_r+0x1c6>
 8009234:	2300      	movs	r3, #0
 8009236:	f04f 32ff 	mov.w	r2, #4294967295
 800923a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800923e:	f10a 0a01 	add.w	sl, sl, #1
 8009242:	9304      	str	r3, [sp, #16]
 8009244:	9307      	str	r3, [sp, #28]
 8009246:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800924a:	931a      	str	r3, [sp, #104]	@ 0x68
 800924c:	4654      	mov	r4, sl
 800924e:	2205      	movs	r2, #5
 8009250:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009254:	484e      	ldr	r0, [pc, #312]	@ (8009390 <_svfiprintf_r+0x1e4>)
 8009256:	f7f6 fffb 	bl	8000250 <memchr>
 800925a:	9a04      	ldr	r2, [sp, #16]
 800925c:	b9d8      	cbnz	r0, 8009296 <_svfiprintf_r+0xea>
 800925e:	06d0      	lsls	r0, r2, #27
 8009260:	bf44      	itt	mi
 8009262:	2320      	movmi	r3, #32
 8009264:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009268:	0711      	lsls	r1, r2, #28
 800926a:	bf44      	itt	mi
 800926c:	232b      	movmi	r3, #43	@ 0x2b
 800926e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009272:	f89a 3000 	ldrb.w	r3, [sl]
 8009276:	2b2a      	cmp	r3, #42	@ 0x2a
 8009278:	d015      	beq.n	80092a6 <_svfiprintf_r+0xfa>
 800927a:	9a07      	ldr	r2, [sp, #28]
 800927c:	4654      	mov	r4, sl
 800927e:	2000      	movs	r0, #0
 8009280:	f04f 0c0a 	mov.w	ip, #10
 8009284:	4621      	mov	r1, r4
 8009286:	f811 3b01 	ldrb.w	r3, [r1], #1
 800928a:	3b30      	subs	r3, #48	@ 0x30
 800928c:	2b09      	cmp	r3, #9
 800928e:	d94b      	bls.n	8009328 <_svfiprintf_r+0x17c>
 8009290:	b1b0      	cbz	r0, 80092c0 <_svfiprintf_r+0x114>
 8009292:	9207      	str	r2, [sp, #28]
 8009294:	e014      	b.n	80092c0 <_svfiprintf_r+0x114>
 8009296:	eba0 0308 	sub.w	r3, r0, r8
 800929a:	fa09 f303 	lsl.w	r3, r9, r3
 800929e:	4313      	orrs	r3, r2
 80092a0:	9304      	str	r3, [sp, #16]
 80092a2:	46a2      	mov	sl, r4
 80092a4:	e7d2      	b.n	800924c <_svfiprintf_r+0xa0>
 80092a6:	9b03      	ldr	r3, [sp, #12]
 80092a8:	1d19      	adds	r1, r3, #4
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	9103      	str	r1, [sp, #12]
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	bfbb      	ittet	lt
 80092b2:	425b      	neglt	r3, r3
 80092b4:	f042 0202 	orrlt.w	r2, r2, #2
 80092b8:	9307      	strge	r3, [sp, #28]
 80092ba:	9307      	strlt	r3, [sp, #28]
 80092bc:	bfb8      	it	lt
 80092be:	9204      	strlt	r2, [sp, #16]
 80092c0:	7823      	ldrb	r3, [r4, #0]
 80092c2:	2b2e      	cmp	r3, #46	@ 0x2e
 80092c4:	d10a      	bne.n	80092dc <_svfiprintf_r+0x130>
 80092c6:	7863      	ldrb	r3, [r4, #1]
 80092c8:	2b2a      	cmp	r3, #42	@ 0x2a
 80092ca:	d132      	bne.n	8009332 <_svfiprintf_r+0x186>
 80092cc:	9b03      	ldr	r3, [sp, #12]
 80092ce:	1d1a      	adds	r2, r3, #4
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	9203      	str	r2, [sp, #12]
 80092d4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80092d8:	3402      	adds	r4, #2
 80092da:	9305      	str	r3, [sp, #20]
 80092dc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80093a0 <_svfiprintf_r+0x1f4>
 80092e0:	7821      	ldrb	r1, [r4, #0]
 80092e2:	2203      	movs	r2, #3
 80092e4:	4650      	mov	r0, sl
 80092e6:	f7f6 ffb3 	bl	8000250 <memchr>
 80092ea:	b138      	cbz	r0, 80092fc <_svfiprintf_r+0x150>
 80092ec:	9b04      	ldr	r3, [sp, #16]
 80092ee:	eba0 000a 	sub.w	r0, r0, sl
 80092f2:	2240      	movs	r2, #64	@ 0x40
 80092f4:	4082      	lsls	r2, r0
 80092f6:	4313      	orrs	r3, r2
 80092f8:	3401      	adds	r4, #1
 80092fa:	9304      	str	r3, [sp, #16]
 80092fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009300:	4824      	ldr	r0, [pc, #144]	@ (8009394 <_svfiprintf_r+0x1e8>)
 8009302:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009306:	2206      	movs	r2, #6
 8009308:	f7f6 ffa2 	bl	8000250 <memchr>
 800930c:	2800      	cmp	r0, #0
 800930e:	d036      	beq.n	800937e <_svfiprintf_r+0x1d2>
 8009310:	4b21      	ldr	r3, [pc, #132]	@ (8009398 <_svfiprintf_r+0x1ec>)
 8009312:	bb1b      	cbnz	r3, 800935c <_svfiprintf_r+0x1b0>
 8009314:	9b03      	ldr	r3, [sp, #12]
 8009316:	3307      	adds	r3, #7
 8009318:	f023 0307 	bic.w	r3, r3, #7
 800931c:	3308      	adds	r3, #8
 800931e:	9303      	str	r3, [sp, #12]
 8009320:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009322:	4433      	add	r3, r6
 8009324:	9309      	str	r3, [sp, #36]	@ 0x24
 8009326:	e76a      	b.n	80091fe <_svfiprintf_r+0x52>
 8009328:	fb0c 3202 	mla	r2, ip, r2, r3
 800932c:	460c      	mov	r4, r1
 800932e:	2001      	movs	r0, #1
 8009330:	e7a8      	b.n	8009284 <_svfiprintf_r+0xd8>
 8009332:	2300      	movs	r3, #0
 8009334:	3401      	adds	r4, #1
 8009336:	9305      	str	r3, [sp, #20]
 8009338:	4619      	mov	r1, r3
 800933a:	f04f 0c0a 	mov.w	ip, #10
 800933e:	4620      	mov	r0, r4
 8009340:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009344:	3a30      	subs	r2, #48	@ 0x30
 8009346:	2a09      	cmp	r2, #9
 8009348:	d903      	bls.n	8009352 <_svfiprintf_r+0x1a6>
 800934a:	2b00      	cmp	r3, #0
 800934c:	d0c6      	beq.n	80092dc <_svfiprintf_r+0x130>
 800934e:	9105      	str	r1, [sp, #20]
 8009350:	e7c4      	b.n	80092dc <_svfiprintf_r+0x130>
 8009352:	fb0c 2101 	mla	r1, ip, r1, r2
 8009356:	4604      	mov	r4, r0
 8009358:	2301      	movs	r3, #1
 800935a:	e7f0      	b.n	800933e <_svfiprintf_r+0x192>
 800935c:	ab03      	add	r3, sp, #12
 800935e:	9300      	str	r3, [sp, #0]
 8009360:	462a      	mov	r2, r5
 8009362:	4b0e      	ldr	r3, [pc, #56]	@ (800939c <_svfiprintf_r+0x1f0>)
 8009364:	a904      	add	r1, sp, #16
 8009366:	4638      	mov	r0, r7
 8009368:	f3af 8000 	nop.w
 800936c:	1c42      	adds	r2, r0, #1
 800936e:	4606      	mov	r6, r0
 8009370:	d1d6      	bne.n	8009320 <_svfiprintf_r+0x174>
 8009372:	89ab      	ldrh	r3, [r5, #12]
 8009374:	065b      	lsls	r3, r3, #25
 8009376:	f53f af2d 	bmi.w	80091d4 <_svfiprintf_r+0x28>
 800937a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800937c:	e72c      	b.n	80091d8 <_svfiprintf_r+0x2c>
 800937e:	ab03      	add	r3, sp, #12
 8009380:	9300      	str	r3, [sp, #0]
 8009382:	462a      	mov	r2, r5
 8009384:	4b05      	ldr	r3, [pc, #20]	@ (800939c <_svfiprintf_r+0x1f0>)
 8009386:	a904      	add	r1, sp, #16
 8009388:	4638      	mov	r0, r7
 800938a:	f000 f879 	bl	8009480 <_printf_i>
 800938e:	e7ed      	b.n	800936c <_svfiprintf_r+0x1c0>
 8009390:	0800a07f 	.word	0x0800a07f
 8009394:	0800a089 	.word	0x0800a089
 8009398:	00000000 	.word	0x00000000
 800939c:	080090f5 	.word	0x080090f5
 80093a0:	0800a085 	.word	0x0800a085

080093a4 <_printf_common>:
 80093a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80093a8:	4616      	mov	r6, r2
 80093aa:	4698      	mov	r8, r3
 80093ac:	688a      	ldr	r2, [r1, #8]
 80093ae:	690b      	ldr	r3, [r1, #16]
 80093b0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80093b4:	4293      	cmp	r3, r2
 80093b6:	bfb8      	it	lt
 80093b8:	4613      	movlt	r3, r2
 80093ba:	6033      	str	r3, [r6, #0]
 80093bc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80093c0:	4607      	mov	r7, r0
 80093c2:	460c      	mov	r4, r1
 80093c4:	b10a      	cbz	r2, 80093ca <_printf_common+0x26>
 80093c6:	3301      	adds	r3, #1
 80093c8:	6033      	str	r3, [r6, #0]
 80093ca:	6823      	ldr	r3, [r4, #0]
 80093cc:	0699      	lsls	r1, r3, #26
 80093ce:	bf42      	ittt	mi
 80093d0:	6833      	ldrmi	r3, [r6, #0]
 80093d2:	3302      	addmi	r3, #2
 80093d4:	6033      	strmi	r3, [r6, #0]
 80093d6:	6825      	ldr	r5, [r4, #0]
 80093d8:	f015 0506 	ands.w	r5, r5, #6
 80093dc:	d106      	bne.n	80093ec <_printf_common+0x48>
 80093de:	f104 0a19 	add.w	sl, r4, #25
 80093e2:	68e3      	ldr	r3, [r4, #12]
 80093e4:	6832      	ldr	r2, [r6, #0]
 80093e6:	1a9b      	subs	r3, r3, r2
 80093e8:	42ab      	cmp	r3, r5
 80093ea:	dc26      	bgt.n	800943a <_printf_common+0x96>
 80093ec:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80093f0:	6822      	ldr	r2, [r4, #0]
 80093f2:	3b00      	subs	r3, #0
 80093f4:	bf18      	it	ne
 80093f6:	2301      	movne	r3, #1
 80093f8:	0692      	lsls	r2, r2, #26
 80093fa:	d42b      	bmi.n	8009454 <_printf_common+0xb0>
 80093fc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009400:	4641      	mov	r1, r8
 8009402:	4638      	mov	r0, r7
 8009404:	47c8      	blx	r9
 8009406:	3001      	adds	r0, #1
 8009408:	d01e      	beq.n	8009448 <_printf_common+0xa4>
 800940a:	6823      	ldr	r3, [r4, #0]
 800940c:	6922      	ldr	r2, [r4, #16]
 800940e:	f003 0306 	and.w	r3, r3, #6
 8009412:	2b04      	cmp	r3, #4
 8009414:	bf02      	ittt	eq
 8009416:	68e5      	ldreq	r5, [r4, #12]
 8009418:	6833      	ldreq	r3, [r6, #0]
 800941a:	1aed      	subeq	r5, r5, r3
 800941c:	68a3      	ldr	r3, [r4, #8]
 800941e:	bf0c      	ite	eq
 8009420:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009424:	2500      	movne	r5, #0
 8009426:	4293      	cmp	r3, r2
 8009428:	bfc4      	itt	gt
 800942a:	1a9b      	subgt	r3, r3, r2
 800942c:	18ed      	addgt	r5, r5, r3
 800942e:	2600      	movs	r6, #0
 8009430:	341a      	adds	r4, #26
 8009432:	42b5      	cmp	r5, r6
 8009434:	d11a      	bne.n	800946c <_printf_common+0xc8>
 8009436:	2000      	movs	r0, #0
 8009438:	e008      	b.n	800944c <_printf_common+0xa8>
 800943a:	2301      	movs	r3, #1
 800943c:	4652      	mov	r2, sl
 800943e:	4641      	mov	r1, r8
 8009440:	4638      	mov	r0, r7
 8009442:	47c8      	blx	r9
 8009444:	3001      	adds	r0, #1
 8009446:	d103      	bne.n	8009450 <_printf_common+0xac>
 8009448:	f04f 30ff 	mov.w	r0, #4294967295
 800944c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009450:	3501      	adds	r5, #1
 8009452:	e7c6      	b.n	80093e2 <_printf_common+0x3e>
 8009454:	18e1      	adds	r1, r4, r3
 8009456:	1c5a      	adds	r2, r3, #1
 8009458:	2030      	movs	r0, #48	@ 0x30
 800945a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800945e:	4422      	add	r2, r4
 8009460:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009464:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009468:	3302      	adds	r3, #2
 800946a:	e7c7      	b.n	80093fc <_printf_common+0x58>
 800946c:	2301      	movs	r3, #1
 800946e:	4622      	mov	r2, r4
 8009470:	4641      	mov	r1, r8
 8009472:	4638      	mov	r0, r7
 8009474:	47c8      	blx	r9
 8009476:	3001      	adds	r0, #1
 8009478:	d0e6      	beq.n	8009448 <_printf_common+0xa4>
 800947a:	3601      	adds	r6, #1
 800947c:	e7d9      	b.n	8009432 <_printf_common+0x8e>
	...

08009480 <_printf_i>:
 8009480:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009484:	7e0f      	ldrb	r7, [r1, #24]
 8009486:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009488:	2f78      	cmp	r7, #120	@ 0x78
 800948a:	4691      	mov	r9, r2
 800948c:	4680      	mov	r8, r0
 800948e:	460c      	mov	r4, r1
 8009490:	469a      	mov	sl, r3
 8009492:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009496:	d807      	bhi.n	80094a8 <_printf_i+0x28>
 8009498:	2f62      	cmp	r7, #98	@ 0x62
 800949a:	d80a      	bhi.n	80094b2 <_printf_i+0x32>
 800949c:	2f00      	cmp	r7, #0
 800949e:	f000 80d1 	beq.w	8009644 <_printf_i+0x1c4>
 80094a2:	2f58      	cmp	r7, #88	@ 0x58
 80094a4:	f000 80b8 	beq.w	8009618 <_printf_i+0x198>
 80094a8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80094ac:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80094b0:	e03a      	b.n	8009528 <_printf_i+0xa8>
 80094b2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80094b6:	2b15      	cmp	r3, #21
 80094b8:	d8f6      	bhi.n	80094a8 <_printf_i+0x28>
 80094ba:	a101      	add	r1, pc, #4	@ (adr r1, 80094c0 <_printf_i+0x40>)
 80094bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80094c0:	08009519 	.word	0x08009519
 80094c4:	0800952d 	.word	0x0800952d
 80094c8:	080094a9 	.word	0x080094a9
 80094cc:	080094a9 	.word	0x080094a9
 80094d0:	080094a9 	.word	0x080094a9
 80094d4:	080094a9 	.word	0x080094a9
 80094d8:	0800952d 	.word	0x0800952d
 80094dc:	080094a9 	.word	0x080094a9
 80094e0:	080094a9 	.word	0x080094a9
 80094e4:	080094a9 	.word	0x080094a9
 80094e8:	080094a9 	.word	0x080094a9
 80094ec:	0800962b 	.word	0x0800962b
 80094f0:	08009557 	.word	0x08009557
 80094f4:	080095e5 	.word	0x080095e5
 80094f8:	080094a9 	.word	0x080094a9
 80094fc:	080094a9 	.word	0x080094a9
 8009500:	0800964d 	.word	0x0800964d
 8009504:	080094a9 	.word	0x080094a9
 8009508:	08009557 	.word	0x08009557
 800950c:	080094a9 	.word	0x080094a9
 8009510:	080094a9 	.word	0x080094a9
 8009514:	080095ed 	.word	0x080095ed
 8009518:	6833      	ldr	r3, [r6, #0]
 800951a:	1d1a      	adds	r2, r3, #4
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	6032      	str	r2, [r6, #0]
 8009520:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009524:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009528:	2301      	movs	r3, #1
 800952a:	e09c      	b.n	8009666 <_printf_i+0x1e6>
 800952c:	6833      	ldr	r3, [r6, #0]
 800952e:	6820      	ldr	r0, [r4, #0]
 8009530:	1d19      	adds	r1, r3, #4
 8009532:	6031      	str	r1, [r6, #0]
 8009534:	0606      	lsls	r6, r0, #24
 8009536:	d501      	bpl.n	800953c <_printf_i+0xbc>
 8009538:	681d      	ldr	r5, [r3, #0]
 800953a:	e003      	b.n	8009544 <_printf_i+0xc4>
 800953c:	0645      	lsls	r5, r0, #25
 800953e:	d5fb      	bpl.n	8009538 <_printf_i+0xb8>
 8009540:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009544:	2d00      	cmp	r5, #0
 8009546:	da03      	bge.n	8009550 <_printf_i+0xd0>
 8009548:	232d      	movs	r3, #45	@ 0x2d
 800954a:	426d      	negs	r5, r5
 800954c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009550:	4858      	ldr	r0, [pc, #352]	@ (80096b4 <_printf_i+0x234>)
 8009552:	230a      	movs	r3, #10
 8009554:	e011      	b.n	800957a <_printf_i+0xfa>
 8009556:	6821      	ldr	r1, [r4, #0]
 8009558:	6833      	ldr	r3, [r6, #0]
 800955a:	0608      	lsls	r0, r1, #24
 800955c:	f853 5b04 	ldr.w	r5, [r3], #4
 8009560:	d402      	bmi.n	8009568 <_printf_i+0xe8>
 8009562:	0649      	lsls	r1, r1, #25
 8009564:	bf48      	it	mi
 8009566:	b2ad      	uxthmi	r5, r5
 8009568:	2f6f      	cmp	r7, #111	@ 0x6f
 800956a:	4852      	ldr	r0, [pc, #328]	@ (80096b4 <_printf_i+0x234>)
 800956c:	6033      	str	r3, [r6, #0]
 800956e:	bf14      	ite	ne
 8009570:	230a      	movne	r3, #10
 8009572:	2308      	moveq	r3, #8
 8009574:	2100      	movs	r1, #0
 8009576:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800957a:	6866      	ldr	r6, [r4, #4]
 800957c:	60a6      	str	r6, [r4, #8]
 800957e:	2e00      	cmp	r6, #0
 8009580:	db05      	blt.n	800958e <_printf_i+0x10e>
 8009582:	6821      	ldr	r1, [r4, #0]
 8009584:	432e      	orrs	r6, r5
 8009586:	f021 0104 	bic.w	r1, r1, #4
 800958a:	6021      	str	r1, [r4, #0]
 800958c:	d04b      	beq.n	8009626 <_printf_i+0x1a6>
 800958e:	4616      	mov	r6, r2
 8009590:	fbb5 f1f3 	udiv	r1, r5, r3
 8009594:	fb03 5711 	mls	r7, r3, r1, r5
 8009598:	5dc7      	ldrb	r7, [r0, r7]
 800959a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800959e:	462f      	mov	r7, r5
 80095a0:	42bb      	cmp	r3, r7
 80095a2:	460d      	mov	r5, r1
 80095a4:	d9f4      	bls.n	8009590 <_printf_i+0x110>
 80095a6:	2b08      	cmp	r3, #8
 80095a8:	d10b      	bne.n	80095c2 <_printf_i+0x142>
 80095aa:	6823      	ldr	r3, [r4, #0]
 80095ac:	07df      	lsls	r7, r3, #31
 80095ae:	d508      	bpl.n	80095c2 <_printf_i+0x142>
 80095b0:	6923      	ldr	r3, [r4, #16]
 80095b2:	6861      	ldr	r1, [r4, #4]
 80095b4:	4299      	cmp	r1, r3
 80095b6:	bfde      	ittt	le
 80095b8:	2330      	movle	r3, #48	@ 0x30
 80095ba:	f806 3c01 	strble.w	r3, [r6, #-1]
 80095be:	f106 36ff 	addle.w	r6, r6, #4294967295
 80095c2:	1b92      	subs	r2, r2, r6
 80095c4:	6122      	str	r2, [r4, #16]
 80095c6:	f8cd a000 	str.w	sl, [sp]
 80095ca:	464b      	mov	r3, r9
 80095cc:	aa03      	add	r2, sp, #12
 80095ce:	4621      	mov	r1, r4
 80095d0:	4640      	mov	r0, r8
 80095d2:	f7ff fee7 	bl	80093a4 <_printf_common>
 80095d6:	3001      	adds	r0, #1
 80095d8:	d14a      	bne.n	8009670 <_printf_i+0x1f0>
 80095da:	f04f 30ff 	mov.w	r0, #4294967295
 80095de:	b004      	add	sp, #16
 80095e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095e4:	6823      	ldr	r3, [r4, #0]
 80095e6:	f043 0320 	orr.w	r3, r3, #32
 80095ea:	6023      	str	r3, [r4, #0]
 80095ec:	4832      	ldr	r0, [pc, #200]	@ (80096b8 <_printf_i+0x238>)
 80095ee:	2778      	movs	r7, #120	@ 0x78
 80095f0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80095f4:	6823      	ldr	r3, [r4, #0]
 80095f6:	6831      	ldr	r1, [r6, #0]
 80095f8:	061f      	lsls	r7, r3, #24
 80095fa:	f851 5b04 	ldr.w	r5, [r1], #4
 80095fe:	d402      	bmi.n	8009606 <_printf_i+0x186>
 8009600:	065f      	lsls	r7, r3, #25
 8009602:	bf48      	it	mi
 8009604:	b2ad      	uxthmi	r5, r5
 8009606:	6031      	str	r1, [r6, #0]
 8009608:	07d9      	lsls	r1, r3, #31
 800960a:	bf44      	itt	mi
 800960c:	f043 0320 	orrmi.w	r3, r3, #32
 8009610:	6023      	strmi	r3, [r4, #0]
 8009612:	b11d      	cbz	r5, 800961c <_printf_i+0x19c>
 8009614:	2310      	movs	r3, #16
 8009616:	e7ad      	b.n	8009574 <_printf_i+0xf4>
 8009618:	4826      	ldr	r0, [pc, #152]	@ (80096b4 <_printf_i+0x234>)
 800961a:	e7e9      	b.n	80095f0 <_printf_i+0x170>
 800961c:	6823      	ldr	r3, [r4, #0]
 800961e:	f023 0320 	bic.w	r3, r3, #32
 8009622:	6023      	str	r3, [r4, #0]
 8009624:	e7f6      	b.n	8009614 <_printf_i+0x194>
 8009626:	4616      	mov	r6, r2
 8009628:	e7bd      	b.n	80095a6 <_printf_i+0x126>
 800962a:	6833      	ldr	r3, [r6, #0]
 800962c:	6825      	ldr	r5, [r4, #0]
 800962e:	6961      	ldr	r1, [r4, #20]
 8009630:	1d18      	adds	r0, r3, #4
 8009632:	6030      	str	r0, [r6, #0]
 8009634:	062e      	lsls	r6, r5, #24
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	d501      	bpl.n	800963e <_printf_i+0x1be>
 800963a:	6019      	str	r1, [r3, #0]
 800963c:	e002      	b.n	8009644 <_printf_i+0x1c4>
 800963e:	0668      	lsls	r0, r5, #25
 8009640:	d5fb      	bpl.n	800963a <_printf_i+0x1ba>
 8009642:	8019      	strh	r1, [r3, #0]
 8009644:	2300      	movs	r3, #0
 8009646:	6123      	str	r3, [r4, #16]
 8009648:	4616      	mov	r6, r2
 800964a:	e7bc      	b.n	80095c6 <_printf_i+0x146>
 800964c:	6833      	ldr	r3, [r6, #0]
 800964e:	1d1a      	adds	r2, r3, #4
 8009650:	6032      	str	r2, [r6, #0]
 8009652:	681e      	ldr	r6, [r3, #0]
 8009654:	6862      	ldr	r2, [r4, #4]
 8009656:	2100      	movs	r1, #0
 8009658:	4630      	mov	r0, r6
 800965a:	f7f6 fdf9 	bl	8000250 <memchr>
 800965e:	b108      	cbz	r0, 8009664 <_printf_i+0x1e4>
 8009660:	1b80      	subs	r0, r0, r6
 8009662:	6060      	str	r0, [r4, #4]
 8009664:	6863      	ldr	r3, [r4, #4]
 8009666:	6123      	str	r3, [r4, #16]
 8009668:	2300      	movs	r3, #0
 800966a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800966e:	e7aa      	b.n	80095c6 <_printf_i+0x146>
 8009670:	6923      	ldr	r3, [r4, #16]
 8009672:	4632      	mov	r2, r6
 8009674:	4649      	mov	r1, r9
 8009676:	4640      	mov	r0, r8
 8009678:	47d0      	blx	sl
 800967a:	3001      	adds	r0, #1
 800967c:	d0ad      	beq.n	80095da <_printf_i+0x15a>
 800967e:	6823      	ldr	r3, [r4, #0]
 8009680:	079b      	lsls	r3, r3, #30
 8009682:	d413      	bmi.n	80096ac <_printf_i+0x22c>
 8009684:	68e0      	ldr	r0, [r4, #12]
 8009686:	9b03      	ldr	r3, [sp, #12]
 8009688:	4298      	cmp	r0, r3
 800968a:	bfb8      	it	lt
 800968c:	4618      	movlt	r0, r3
 800968e:	e7a6      	b.n	80095de <_printf_i+0x15e>
 8009690:	2301      	movs	r3, #1
 8009692:	4632      	mov	r2, r6
 8009694:	4649      	mov	r1, r9
 8009696:	4640      	mov	r0, r8
 8009698:	47d0      	blx	sl
 800969a:	3001      	adds	r0, #1
 800969c:	d09d      	beq.n	80095da <_printf_i+0x15a>
 800969e:	3501      	adds	r5, #1
 80096a0:	68e3      	ldr	r3, [r4, #12]
 80096a2:	9903      	ldr	r1, [sp, #12]
 80096a4:	1a5b      	subs	r3, r3, r1
 80096a6:	42ab      	cmp	r3, r5
 80096a8:	dcf2      	bgt.n	8009690 <_printf_i+0x210>
 80096aa:	e7eb      	b.n	8009684 <_printf_i+0x204>
 80096ac:	2500      	movs	r5, #0
 80096ae:	f104 0619 	add.w	r6, r4, #25
 80096b2:	e7f5      	b.n	80096a0 <_printf_i+0x220>
 80096b4:	0800a090 	.word	0x0800a090
 80096b8:	0800a0a1 	.word	0x0800a0a1

080096bc <__sflush_r>:
 80096bc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80096c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80096c4:	0716      	lsls	r6, r2, #28
 80096c6:	4605      	mov	r5, r0
 80096c8:	460c      	mov	r4, r1
 80096ca:	d454      	bmi.n	8009776 <__sflush_r+0xba>
 80096cc:	684b      	ldr	r3, [r1, #4]
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	dc02      	bgt.n	80096d8 <__sflush_r+0x1c>
 80096d2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	dd48      	ble.n	800976a <__sflush_r+0xae>
 80096d8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80096da:	2e00      	cmp	r6, #0
 80096dc:	d045      	beq.n	800976a <__sflush_r+0xae>
 80096de:	2300      	movs	r3, #0
 80096e0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80096e4:	682f      	ldr	r7, [r5, #0]
 80096e6:	6a21      	ldr	r1, [r4, #32]
 80096e8:	602b      	str	r3, [r5, #0]
 80096ea:	d030      	beq.n	800974e <__sflush_r+0x92>
 80096ec:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80096ee:	89a3      	ldrh	r3, [r4, #12]
 80096f0:	0759      	lsls	r1, r3, #29
 80096f2:	d505      	bpl.n	8009700 <__sflush_r+0x44>
 80096f4:	6863      	ldr	r3, [r4, #4]
 80096f6:	1ad2      	subs	r2, r2, r3
 80096f8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80096fa:	b10b      	cbz	r3, 8009700 <__sflush_r+0x44>
 80096fc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80096fe:	1ad2      	subs	r2, r2, r3
 8009700:	2300      	movs	r3, #0
 8009702:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009704:	6a21      	ldr	r1, [r4, #32]
 8009706:	4628      	mov	r0, r5
 8009708:	47b0      	blx	r6
 800970a:	1c43      	adds	r3, r0, #1
 800970c:	89a3      	ldrh	r3, [r4, #12]
 800970e:	d106      	bne.n	800971e <__sflush_r+0x62>
 8009710:	6829      	ldr	r1, [r5, #0]
 8009712:	291d      	cmp	r1, #29
 8009714:	d82b      	bhi.n	800976e <__sflush_r+0xb2>
 8009716:	4a2a      	ldr	r2, [pc, #168]	@ (80097c0 <__sflush_r+0x104>)
 8009718:	40ca      	lsrs	r2, r1
 800971a:	07d6      	lsls	r6, r2, #31
 800971c:	d527      	bpl.n	800976e <__sflush_r+0xb2>
 800971e:	2200      	movs	r2, #0
 8009720:	6062      	str	r2, [r4, #4]
 8009722:	04d9      	lsls	r1, r3, #19
 8009724:	6922      	ldr	r2, [r4, #16]
 8009726:	6022      	str	r2, [r4, #0]
 8009728:	d504      	bpl.n	8009734 <__sflush_r+0x78>
 800972a:	1c42      	adds	r2, r0, #1
 800972c:	d101      	bne.n	8009732 <__sflush_r+0x76>
 800972e:	682b      	ldr	r3, [r5, #0]
 8009730:	b903      	cbnz	r3, 8009734 <__sflush_r+0x78>
 8009732:	6560      	str	r0, [r4, #84]	@ 0x54
 8009734:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009736:	602f      	str	r7, [r5, #0]
 8009738:	b1b9      	cbz	r1, 800976a <__sflush_r+0xae>
 800973a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800973e:	4299      	cmp	r1, r3
 8009740:	d002      	beq.n	8009748 <__sflush_r+0x8c>
 8009742:	4628      	mov	r0, r5
 8009744:	f7ff fbd6 	bl	8008ef4 <_free_r>
 8009748:	2300      	movs	r3, #0
 800974a:	6363      	str	r3, [r4, #52]	@ 0x34
 800974c:	e00d      	b.n	800976a <__sflush_r+0xae>
 800974e:	2301      	movs	r3, #1
 8009750:	4628      	mov	r0, r5
 8009752:	47b0      	blx	r6
 8009754:	4602      	mov	r2, r0
 8009756:	1c50      	adds	r0, r2, #1
 8009758:	d1c9      	bne.n	80096ee <__sflush_r+0x32>
 800975a:	682b      	ldr	r3, [r5, #0]
 800975c:	2b00      	cmp	r3, #0
 800975e:	d0c6      	beq.n	80096ee <__sflush_r+0x32>
 8009760:	2b1d      	cmp	r3, #29
 8009762:	d001      	beq.n	8009768 <__sflush_r+0xac>
 8009764:	2b16      	cmp	r3, #22
 8009766:	d11e      	bne.n	80097a6 <__sflush_r+0xea>
 8009768:	602f      	str	r7, [r5, #0]
 800976a:	2000      	movs	r0, #0
 800976c:	e022      	b.n	80097b4 <__sflush_r+0xf8>
 800976e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009772:	b21b      	sxth	r3, r3
 8009774:	e01b      	b.n	80097ae <__sflush_r+0xf2>
 8009776:	690f      	ldr	r7, [r1, #16]
 8009778:	2f00      	cmp	r7, #0
 800977a:	d0f6      	beq.n	800976a <__sflush_r+0xae>
 800977c:	0793      	lsls	r3, r2, #30
 800977e:	680e      	ldr	r6, [r1, #0]
 8009780:	bf08      	it	eq
 8009782:	694b      	ldreq	r3, [r1, #20]
 8009784:	600f      	str	r7, [r1, #0]
 8009786:	bf18      	it	ne
 8009788:	2300      	movne	r3, #0
 800978a:	eba6 0807 	sub.w	r8, r6, r7
 800978e:	608b      	str	r3, [r1, #8]
 8009790:	f1b8 0f00 	cmp.w	r8, #0
 8009794:	dde9      	ble.n	800976a <__sflush_r+0xae>
 8009796:	6a21      	ldr	r1, [r4, #32]
 8009798:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800979a:	4643      	mov	r3, r8
 800979c:	463a      	mov	r2, r7
 800979e:	4628      	mov	r0, r5
 80097a0:	47b0      	blx	r6
 80097a2:	2800      	cmp	r0, #0
 80097a4:	dc08      	bgt.n	80097b8 <__sflush_r+0xfc>
 80097a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80097aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80097ae:	81a3      	strh	r3, [r4, #12]
 80097b0:	f04f 30ff 	mov.w	r0, #4294967295
 80097b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80097b8:	4407      	add	r7, r0
 80097ba:	eba8 0800 	sub.w	r8, r8, r0
 80097be:	e7e7      	b.n	8009790 <__sflush_r+0xd4>
 80097c0:	20400001 	.word	0x20400001

080097c4 <_fflush_r>:
 80097c4:	b538      	push	{r3, r4, r5, lr}
 80097c6:	690b      	ldr	r3, [r1, #16]
 80097c8:	4605      	mov	r5, r0
 80097ca:	460c      	mov	r4, r1
 80097cc:	b913      	cbnz	r3, 80097d4 <_fflush_r+0x10>
 80097ce:	2500      	movs	r5, #0
 80097d0:	4628      	mov	r0, r5
 80097d2:	bd38      	pop	{r3, r4, r5, pc}
 80097d4:	b118      	cbz	r0, 80097de <_fflush_r+0x1a>
 80097d6:	6a03      	ldr	r3, [r0, #32]
 80097d8:	b90b      	cbnz	r3, 80097de <_fflush_r+0x1a>
 80097da:	f7ff f9e9 	bl	8008bb0 <__sinit>
 80097de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d0f3      	beq.n	80097ce <_fflush_r+0xa>
 80097e6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80097e8:	07d0      	lsls	r0, r2, #31
 80097ea:	d404      	bmi.n	80097f6 <_fflush_r+0x32>
 80097ec:	0599      	lsls	r1, r3, #22
 80097ee:	d402      	bmi.n	80097f6 <_fflush_r+0x32>
 80097f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80097f2:	f7ff fb50 	bl	8008e96 <__retarget_lock_acquire_recursive>
 80097f6:	4628      	mov	r0, r5
 80097f8:	4621      	mov	r1, r4
 80097fa:	f7ff ff5f 	bl	80096bc <__sflush_r>
 80097fe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009800:	07da      	lsls	r2, r3, #31
 8009802:	4605      	mov	r5, r0
 8009804:	d4e4      	bmi.n	80097d0 <_fflush_r+0xc>
 8009806:	89a3      	ldrh	r3, [r4, #12]
 8009808:	059b      	lsls	r3, r3, #22
 800980a:	d4e1      	bmi.n	80097d0 <_fflush_r+0xc>
 800980c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800980e:	f7ff fb43 	bl	8008e98 <__retarget_lock_release_recursive>
 8009812:	e7dd      	b.n	80097d0 <_fflush_r+0xc>

08009814 <fiprintf>:
 8009814:	b40e      	push	{r1, r2, r3}
 8009816:	b503      	push	{r0, r1, lr}
 8009818:	4601      	mov	r1, r0
 800981a:	ab03      	add	r3, sp, #12
 800981c:	4805      	ldr	r0, [pc, #20]	@ (8009834 <fiprintf+0x20>)
 800981e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009822:	6800      	ldr	r0, [r0, #0]
 8009824:	9301      	str	r3, [sp, #4]
 8009826:	f000 f88f 	bl	8009948 <_vfiprintf_r>
 800982a:	b002      	add	sp, #8
 800982c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009830:	b003      	add	sp, #12
 8009832:	4770      	bx	lr
 8009834:	20000020 	.word	0x20000020

08009838 <memmove>:
 8009838:	4288      	cmp	r0, r1
 800983a:	b510      	push	{r4, lr}
 800983c:	eb01 0402 	add.w	r4, r1, r2
 8009840:	d902      	bls.n	8009848 <memmove+0x10>
 8009842:	4284      	cmp	r4, r0
 8009844:	4623      	mov	r3, r4
 8009846:	d807      	bhi.n	8009858 <memmove+0x20>
 8009848:	1e43      	subs	r3, r0, #1
 800984a:	42a1      	cmp	r1, r4
 800984c:	d008      	beq.n	8009860 <memmove+0x28>
 800984e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009852:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009856:	e7f8      	b.n	800984a <memmove+0x12>
 8009858:	4402      	add	r2, r0
 800985a:	4601      	mov	r1, r0
 800985c:	428a      	cmp	r2, r1
 800985e:	d100      	bne.n	8009862 <memmove+0x2a>
 8009860:	bd10      	pop	{r4, pc}
 8009862:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009866:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800986a:	e7f7      	b.n	800985c <memmove+0x24>

0800986c <_sbrk_r>:
 800986c:	b538      	push	{r3, r4, r5, lr}
 800986e:	4d06      	ldr	r5, [pc, #24]	@ (8009888 <_sbrk_r+0x1c>)
 8009870:	2300      	movs	r3, #0
 8009872:	4604      	mov	r4, r0
 8009874:	4608      	mov	r0, r1
 8009876:	602b      	str	r3, [r5, #0]
 8009878:	f7f7 fd96 	bl	80013a8 <_sbrk>
 800987c:	1c43      	adds	r3, r0, #1
 800987e:	d102      	bne.n	8009886 <_sbrk_r+0x1a>
 8009880:	682b      	ldr	r3, [r5, #0]
 8009882:	b103      	cbz	r3, 8009886 <_sbrk_r+0x1a>
 8009884:	6023      	str	r3, [r4, #0]
 8009886:	bd38      	pop	{r3, r4, r5, pc}
 8009888:	200054c4 	.word	0x200054c4

0800988c <abort>:
 800988c:	b508      	push	{r3, lr}
 800988e:	2006      	movs	r0, #6
 8009890:	f000 fa2e 	bl	8009cf0 <raise>
 8009894:	2001      	movs	r0, #1
 8009896:	f7f7 fd0f 	bl	80012b8 <_exit>

0800989a <_realloc_r>:
 800989a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800989e:	4607      	mov	r7, r0
 80098a0:	4614      	mov	r4, r2
 80098a2:	460d      	mov	r5, r1
 80098a4:	b921      	cbnz	r1, 80098b0 <_realloc_r+0x16>
 80098a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80098aa:	4611      	mov	r1, r2
 80098ac:	f7ff bb96 	b.w	8008fdc <_malloc_r>
 80098b0:	b92a      	cbnz	r2, 80098be <_realloc_r+0x24>
 80098b2:	f7ff fb1f 	bl	8008ef4 <_free_r>
 80098b6:	4625      	mov	r5, r4
 80098b8:	4628      	mov	r0, r5
 80098ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80098be:	f000 fa33 	bl	8009d28 <_malloc_usable_size_r>
 80098c2:	4284      	cmp	r4, r0
 80098c4:	4606      	mov	r6, r0
 80098c6:	d802      	bhi.n	80098ce <_realloc_r+0x34>
 80098c8:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80098cc:	d8f4      	bhi.n	80098b8 <_realloc_r+0x1e>
 80098ce:	4621      	mov	r1, r4
 80098d0:	4638      	mov	r0, r7
 80098d2:	f7ff fb83 	bl	8008fdc <_malloc_r>
 80098d6:	4680      	mov	r8, r0
 80098d8:	b908      	cbnz	r0, 80098de <_realloc_r+0x44>
 80098da:	4645      	mov	r5, r8
 80098dc:	e7ec      	b.n	80098b8 <_realloc_r+0x1e>
 80098de:	42b4      	cmp	r4, r6
 80098e0:	4622      	mov	r2, r4
 80098e2:	4629      	mov	r1, r5
 80098e4:	bf28      	it	cs
 80098e6:	4632      	movcs	r2, r6
 80098e8:	f7ff fad7 	bl	8008e9a <memcpy>
 80098ec:	4629      	mov	r1, r5
 80098ee:	4638      	mov	r0, r7
 80098f0:	f7ff fb00 	bl	8008ef4 <_free_r>
 80098f4:	e7f1      	b.n	80098da <_realloc_r+0x40>

080098f6 <__sfputc_r>:
 80098f6:	6893      	ldr	r3, [r2, #8]
 80098f8:	3b01      	subs	r3, #1
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	b410      	push	{r4}
 80098fe:	6093      	str	r3, [r2, #8]
 8009900:	da08      	bge.n	8009914 <__sfputc_r+0x1e>
 8009902:	6994      	ldr	r4, [r2, #24]
 8009904:	42a3      	cmp	r3, r4
 8009906:	db01      	blt.n	800990c <__sfputc_r+0x16>
 8009908:	290a      	cmp	r1, #10
 800990a:	d103      	bne.n	8009914 <__sfputc_r+0x1e>
 800990c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009910:	f000 b932 	b.w	8009b78 <__swbuf_r>
 8009914:	6813      	ldr	r3, [r2, #0]
 8009916:	1c58      	adds	r0, r3, #1
 8009918:	6010      	str	r0, [r2, #0]
 800991a:	7019      	strb	r1, [r3, #0]
 800991c:	4608      	mov	r0, r1
 800991e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009922:	4770      	bx	lr

08009924 <__sfputs_r>:
 8009924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009926:	4606      	mov	r6, r0
 8009928:	460f      	mov	r7, r1
 800992a:	4614      	mov	r4, r2
 800992c:	18d5      	adds	r5, r2, r3
 800992e:	42ac      	cmp	r4, r5
 8009930:	d101      	bne.n	8009936 <__sfputs_r+0x12>
 8009932:	2000      	movs	r0, #0
 8009934:	e007      	b.n	8009946 <__sfputs_r+0x22>
 8009936:	f814 1b01 	ldrb.w	r1, [r4], #1
 800993a:	463a      	mov	r2, r7
 800993c:	4630      	mov	r0, r6
 800993e:	f7ff ffda 	bl	80098f6 <__sfputc_r>
 8009942:	1c43      	adds	r3, r0, #1
 8009944:	d1f3      	bne.n	800992e <__sfputs_r+0xa>
 8009946:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009948 <_vfiprintf_r>:
 8009948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800994c:	460d      	mov	r5, r1
 800994e:	b09d      	sub	sp, #116	@ 0x74
 8009950:	4614      	mov	r4, r2
 8009952:	4698      	mov	r8, r3
 8009954:	4606      	mov	r6, r0
 8009956:	b118      	cbz	r0, 8009960 <_vfiprintf_r+0x18>
 8009958:	6a03      	ldr	r3, [r0, #32]
 800995a:	b90b      	cbnz	r3, 8009960 <_vfiprintf_r+0x18>
 800995c:	f7ff f928 	bl	8008bb0 <__sinit>
 8009960:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009962:	07d9      	lsls	r1, r3, #31
 8009964:	d405      	bmi.n	8009972 <_vfiprintf_r+0x2a>
 8009966:	89ab      	ldrh	r3, [r5, #12]
 8009968:	059a      	lsls	r2, r3, #22
 800996a:	d402      	bmi.n	8009972 <_vfiprintf_r+0x2a>
 800996c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800996e:	f7ff fa92 	bl	8008e96 <__retarget_lock_acquire_recursive>
 8009972:	89ab      	ldrh	r3, [r5, #12]
 8009974:	071b      	lsls	r3, r3, #28
 8009976:	d501      	bpl.n	800997c <_vfiprintf_r+0x34>
 8009978:	692b      	ldr	r3, [r5, #16]
 800997a:	b99b      	cbnz	r3, 80099a4 <_vfiprintf_r+0x5c>
 800997c:	4629      	mov	r1, r5
 800997e:	4630      	mov	r0, r6
 8009980:	f000 f938 	bl	8009bf4 <__swsetup_r>
 8009984:	b170      	cbz	r0, 80099a4 <_vfiprintf_r+0x5c>
 8009986:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009988:	07dc      	lsls	r4, r3, #31
 800998a:	d504      	bpl.n	8009996 <_vfiprintf_r+0x4e>
 800998c:	f04f 30ff 	mov.w	r0, #4294967295
 8009990:	b01d      	add	sp, #116	@ 0x74
 8009992:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009996:	89ab      	ldrh	r3, [r5, #12]
 8009998:	0598      	lsls	r0, r3, #22
 800999a:	d4f7      	bmi.n	800998c <_vfiprintf_r+0x44>
 800999c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800999e:	f7ff fa7b 	bl	8008e98 <__retarget_lock_release_recursive>
 80099a2:	e7f3      	b.n	800998c <_vfiprintf_r+0x44>
 80099a4:	2300      	movs	r3, #0
 80099a6:	9309      	str	r3, [sp, #36]	@ 0x24
 80099a8:	2320      	movs	r3, #32
 80099aa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80099ae:	f8cd 800c 	str.w	r8, [sp, #12]
 80099b2:	2330      	movs	r3, #48	@ 0x30
 80099b4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009b64 <_vfiprintf_r+0x21c>
 80099b8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80099bc:	f04f 0901 	mov.w	r9, #1
 80099c0:	4623      	mov	r3, r4
 80099c2:	469a      	mov	sl, r3
 80099c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80099c8:	b10a      	cbz	r2, 80099ce <_vfiprintf_r+0x86>
 80099ca:	2a25      	cmp	r2, #37	@ 0x25
 80099cc:	d1f9      	bne.n	80099c2 <_vfiprintf_r+0x7a>
 80099ce:	ebba 0b04 	subs.w	fp, sl, r4
 80099d2:	d00b      	beq.n	80099ec <_vfiprintf_r+0xa4>
 80099d4:	465b      	mov	r3, fp
 80099d6:	4622      	mov	r2, r4
 80099d8:	4629      	mov	r1, r5
 80099da:	4630      	mov	r0, r6
 80099dc:	f7ff ffa2 	bl	8009924 <__sfputs_r>
 80099e0:	3001      	adds	r0, #1
 80099e2:	f000 80a7 	beq.w	8009b34 <_vfiprintf_r+0x1ec>
 80099e6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80099e8:	445a      	add	r2, fp
 80099ea:	9209      	str	r2, [sp, #36]	@ 0x24
 80099ec:	f89a 3000 	ldrb.w	r3, [sl]
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	f000 809f 	beq.w	8009b34 <_vfiprintf_r+0x1ec>
 80099f6:	2300      	movs	r3, #0
 80099f8:	f04f 32ff 	mov.w	r2, #4294967295
 80099fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009a00:	f10a 0a01 	add.w	sl, sl, #1
 8009a04:	9304      	str	r3, [sp, #16]
 8009a06:	9307      	str	r3, [sp, #28]
 8009a08:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009a0c:	931a      	str	r3, [sp, #104]	@ 0x68
 8009a0e:	4654      	mov	r4, sl
 8009a10:	2205      	movs	r2, #5
 8009a12:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a16:	4853      	ldr	r0, [pc, #332]	@ (8009b64 <_vfiprintf_r+0x21c>)
 8009a18:	f7f6 fc1a 	bl	8000250 <memchr>
 8009a1c:	9a04      	ldr	r2, [sp, #16]
 8009a1e:	b9d8      	cbnz	r0, 8009a58 <_vfiprintf_r+0x110>
 8009a20:	06d1      	lsls	r1, r2, #27
 8009a22:	bf44      	itt	mi
 8009a24:	2320      	movmi	r3, #32
 8009a26:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009a2a:	0713      	lsls	r3, r2, #28
 8009a2c:	bf44      	itt	mi
 8009a2e:	232b      	movmi	r3, #43	@ 0x2b
 8009a30:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009a34:	f89a 3000 	ldrb.w	r3, [sl]
 8009a38:	2b2a      	cmp	r3, #42	@ 0x2a
 8009a3a:	d015      	beq.n	8009a68 <_vfiprintf_r+0x120>
 8009a3c:	9a07      	ldr	r2, [sp, #28]
 8009a3e:	4654      	mov	r4, sl
 8009a40:	2000      	movs	r0, #0
 8009a42:	f04f 0c0a 	mov.w	ip, #10
 8009a46:	4621      	mov	r1, r4
 8009a48:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009a4c:	3b30      	subs	r3, #48	@ 0x30
 8009a4e:	2b09      	cmp	r3, #9
 8009a50:	d94b      	bls.n	8009aea <_vfiprintf_r+0x1a2>
 8009a52:	b1b0      	cbz	r0, 8009a82 <_vfiprintf_r+0x13a>
 8009a54:	9207      	str	r2, [sp, #28]
 8009a56:	e014      	b.n	8009a82 <_vfiprintf_r+0x13a>
 8009a58:	eba0 0308 	sub.w	r3, r0, r8
 8009a5c:	fa09 f303 	lsl.w	r3, r9, r3
 8009a60:	4313      	orrs	r3, r2
 8009a62:	9304      	str	r3, [sp, #16]
 8009a64:	46a2      	mov	sl, r4
 8009a66:	e7d2      	b.n	8009a0e <_vfiprintf_r+0xc6>
 8009a68:	9b03      	ldr	r3, [sp, #12]
 8009a6a:	1d19      	adds	r1, r3, #4
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	9103      	str	r1, [sp, #12]
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	bfbb      	ittet	lt
 8009a74:	425b      	neglt	r3, r3
 8009a76:	f042 0202 	orrlt.w	r2, r2, #2
 8009a7a:	9307      	strge	r3, [sp, #28]
 8009a7c:	9307      	strlt	r3, [sp, #28]
 8009a7e:	bfb8      	it	lt
 8009a80:	9204      	strlt	r2, [sp, #16]
 8009a82:	7823      	ldrb	r3, [r4, #0]
 8009a84:	2b2e      	cmp	r3, #46	@ 0x2e
 8009a86:	d10a      	bne.n	8009a9e <_vfiprintf_r+0x156>
 8009a88:	7863      	ldrb	r3, [r4, #1]
 8009a8a:	2b2a      	cmp	r3, #42	@ 0x2a
 8009a8c:	d132      	bne.n	8009af4 <_vfiprintf_r+0x1ac>
 8009a8e:	9b03      	ldr	r3, [sp, #12]
 8009a90:	1d1a      	adds	r2, r3, #4
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	9203      	str	r2, [sp, #12]
 8009a96:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009a9a:	3402      	adds	r4, #2
 8009a9c:	9305      	str	r3, [sp, #20]
 8009a9e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009b74 <_vfiprintf_r+0x22c>
 8009aa2:	7821      	ldrb	r1, [r4, #0]
 8009aa4:	2203      	movs	r2, #3
 8009aa6:	4650      	mov	r0, sl
 8009aa8:	f7f6 fbd2 	bl	8000250 <memchr>
 8009aac:	b138      	cbz	r0, 8009abe <_vfiprintf_r+0x176>
 8009aae:	9b04      	ldr	r3, [sp, #16]
 8009ab0:	eba0 000a 	sub.w	r0, r0, sl
 8009ab4:	2240      	movs	r2, #64	@ 0x40
 8009ab6:	4082      	lsls	r2, r0
 8009ab8:	4313      	orrs	r3, r2
 8009aba:	3401      	adds	r4, #1
 8009abc:	9304      	str	r3, [sp, #16]
 8009abe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ac2:	4829      	ldr	r0, [pc, #164]	@ (8009b68 <_vfiprintf_r+0x220>)
 8009ac4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009ac8:	2206      	movs	r2, #6
 8009aca:	f7f6 fbc1 	bl	8000250 <memchr>
 8009ace:	2800      	cmp	r0, #0
 8009ad0:	d03f      	beq.n	8009b52 <_vfiprintf_r+0x20a>
 8009ad2:	4b26      	ldr	r3, [pc, #152]	@ (8009b6c <_vfiprintf_r+0x224>)
 8009ad4:	bb1b      	cbnz	r3, 8009b1e <_vfiprintf_r+0x1d6>
 8009ad6:	9b03      	ldr	r3, [sp, #12]
 8009ad8:	3307      	adds	r3, #7
 8009ada:	f023 0307 	bic.w	r3, r3, #7
 8009ade:	3308      	adds	r3, #8
 8009ae0:	9303      	str	r3, [sp, #12]
 8009ae2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ae4:	443b      	add	r3, r7
 8009ae6:	9309      	str	r3, [sp, #36]	@ 0x24
 8009ae8:	e76a      	b.n	80099c0 <_vfiprintf_r+0x78>
 8009aea:	fb0c 3202 	mla	r2, ip, r2, r3
 8009aee:	460c      	mov	r4, r1
 8009af0:	2001      	movs	r0, #1
 8009af2:	e7a8      	b.n	8009a46 <_vfiprintf_r+0xfe>
 8009af4:	2300      	movs	r3, #0
 8009af6:	3401      	adds	r4, #1
 8009af8:	9305      	str	r3, [sp, #20]
 8009afa:	4619      	mov	r1, r3
 8009afc:	f04f 0c0a 	mov.w	ip, #10
 8009b00:	4620      	mov	r0, r4
 8009b02:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009b06:	3a30      	subs	r2, #48	@ 0x30
 8009b08:	2a09      	cmp	r2, #9
 8009b0a:	d903      	bls.n	8009b14 <_vfiprintf_r+0x1cc>
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d0c6      	beq.n	8009a9e <_vfiprintf_r+0x156>
 8009b10:	9105      	str	r1, [sp, #20]
 8009b12:	e7c4      	b.n	8009a9e <_vfiprintf_r+0x156>
 8009b14:	fb0c 2101 	mla	r1, ip, r1, r2
 8009b18:	4604      	mov	r4, r0
 8009b1a:	2301      	movs	r3, #1
 8009b1c:	e7f0      	b.n	8009b00 <_vfiprintf_r+0x1b8>
 8009b1e:	ab03      	add	r3, sp, #12
 8009b20:	9300      	str	r3, [sp, #0]
 8009b22:	462a      	mov	r2, r5
 8009b24:	4b12      	ldr	r3, [pc, #72]	@ (8009b70 <_vfiprintf_r+0x228>)
 8009b26:	a904      	add	r1, sp, #16
 8009b28:	4630      	mov	r0, r6
 8009b2a:	f3af 8000 	nop.w
 8009b2e:	4607      	mov	r7, r0
 8009b30:	1c78      	adds	r0, r7, #1
 8009b32:	d1d6      	bne.n	8009ae2 <_vfiprintf_r+0x19a>
 8009b34:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009b36:	07d9      	lsls	r1, r3, #31
 8009b38:	d405      	bmi.n	8009b46 <_vfiprintf_r+0x1fe>
 8009b3a:	89ab      	ldrh	r3, [r5, #12]
 8009b3c:	059a      	lsls	r2, r3, #22
 8009b3e:	d402      	bmi.n	8009b46 <_vfiprintf_r+0x1fe>
 8009b40:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009b42:	f7ff f9a9 	bl	8008e98 <__retarget_lock_release_recursive>
 8009b46:	89ab      	ldrh	r3, [r5, #12]
 8009b48:	065b      	lsls	r3, r3, #25
 8009b4a:	f53f af1f 	bmi.w	800998c <_vfiprintf_r+0x44>
 8009b4e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009b50:	e71e      	b.n	8009990 <_vfiprintf_r+0x48>
 8009b52:	ab03      	add	r3, sp, #12
 8009b54:	9300      	str	r3, [sp, #0]
 8009b56:	462a      	mov	r2, r5
 8009b58:	4b05      	ldr	r3, [pc, #20]	@ (8009b70 <_vfiprintf_r+0x228>)
 8009b5a:	a904      	add	r1, sp, #16
 8009b5c:	4630      	mov	r0, r6
 8009b5e:	f7ff fc8f 	bl	8009480 <_printf_i>
 8009b62:	e7e4      	b.n	8009b2e <_vfiprintf_r+0x1e6>
 8009b64:	0800a07f 	.word	0x0800a07f
 8009b68:	0800a089 	.word	0x0800a089
 8009b6c:	00000000 	.word	0x00000000
 8009b70:	08009925 	.word	0x08009925
 8009b74:	0800a085 	.word	0x0800a085

08009b78 <__swbuf_r>:
 8009b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b7a:	460e      	mov	r6, r1
 8009b7c:	4614      	mov	r4, r2
 8009b7e:	4605      	mov	r5, r0
 8009b80:	b118      	cbz	r0, 8009b8a <__swbuf_r+0x12>
 8009b82:	6a03      	ldr	r3, [r0, #32]
 8009b84:	b90b      	cbnz	r3, 8009b8a <__swbuf_r+0x12>
 8009b86:	f7ff f813 	bl	8008bb0 <__sinit>
 8009b8a:	69a3      	ldr	r3, [r4, #24]
 8009b8c:	60a3      	str	r3, [r4, #8]
 8009b8e:	89a3      	ldrh	r3, [r4, #12]
 8009b90:	071a      	lsls	r2, r3, #28
 8009b92:	d501      	bpl.n	8009b98 <__swbuf_r+0x20>
 8009b94:	6923      	ldr	r3, [r4, #16]
 8009b96:	b943      	cbnz	r3, 8009baa <__swbuf_r+0x32>
 8009b98:	4621      	mov	r1, r4
 8009b9a:	4628      	mov	r0, r5
 8009b9c:	f000 f82a 	bl	8009bf4 <__swsetup_r>
 8009ba0:	b118      	cbz	r0, 8009baa <__swbuf_r+0x32>
 8009ba2:	f04f 37ff 	mov.w	r7, #4294967295
 8009ba6:	4638      	mov	r0, r7
 8009ba8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009baa:	6823      	ldr	r3, [r4, #0]
 8009bac:	6922      	ldr	r2, [r4, #16]
 8009bae:	1a98      	subs	r0, r3, r2
 8009bb0:	6963      	ldr	r3, [r4, #20]
 8009bb2:	b2f6      	uxtb	r6, r6
 8009bb4:	4283      	cmp	r3, r0
 8009bb6:	4637      	mov	r7, r6
 8009bb8:	dc05      	bgt.n	8009bc6 <__swbuf_r+0x4e>
 8009bba:	4621      	mov	r1, r4
 8009bbc:	4628      	mov	r0, r5
 8009bbe:	f7ff fe01 	bl	80097c4 <_fflush_r>
 8009bc2:	2800      	cmp	r0, #0
 8009bc4:	d1ed      	bne.n	8009ba2 <__swbuf_r+0x2a>
 8009bc6:	68a3      	ldr	r3, [r4, #8]
 8009bc8:	3b01      	subs	r3, #1
 8009bca:	60a3      	str	r3, [r4, #8]
 8009bcc:	6823      	ldr	r3, [r4, #0]
 8009bce:	1c5a      	adds	r2, r3, #1
 8009bd0:	6022      	str	r2, [r4, #0]
 8009bd2:	701e      	strb	r6, [r3, #0]
 8009bd4:	6962      	ldr	r2, [r4, #20]
 8009bd6:	1c43      	adds	r3, r0, #1
 8009bd8:	429a      	cmp	r2, r3
 8009bda:	d004      	beq.n	8009be6 <__swbuf_r+0x6e>
 8009bdc:	89a3      	ldrh	r3, [r4, #12]
 8009bde:	07db      	lsls	r3, r3, #31
 8009be0:	d5e1      	bpl.n	8009ba6 <__swbuf_r+0x2e>
 8009be2:	2e0a      	cmp	r6, #10
 8009be4:	d1df      	bne.n	8009ba6 <__swbuf_r+0x2e>
 8009be6:	4621      	mov	r1, r4
 8009be8:	4628      	mov	r0, r5
 8009bea:	f7ff fdeb 	bl	80097c4 <_fflush_r>
 8009bee:	2800      	cmp	r0, #0
 8009bf0:	d0d9      	beq.n	8009ba6 <__swbuf_r+0x2e>
 8009bf2:	e7d6      	b.n	8009ba2 <__swbuf_r+0x2a>

08009bf4 <__swsetup_r>:
 8009bf4:	b538      	push	{r3, r4, r5, lr}
 8009bf6:	4b29      	ldr	r3, [pc, #164]	@ (8009c9c <__swsetup_r+0xa8>)
 8009bf8:	4605      	mov	r5, r0
 8009bfa:	6818      	ldr	r0, [r3, #0]
 8009bfc:	460c      	mov	r4, r1
 8009bfe:	b118      	cbz	r0, 8009c08 <__swsetup_r+0x14>
 8009c00:	6a03      	ldr	r3, [r0, #32]
 8009c02:	b90b      	cbnz	r3, 8009c08 <__swsetup_r+0x14>
 8009c04:	f7fe ffd4 	bl	8008bb0 <__sinit>
 8009c08:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009c0c:	0719      	lsls	r1, r3, #28
 8009c0e:	d422      	bmi.n	8009c56 <__swsetup_r+0x62>
 8009c10:	06da      	lsls	r2, r3, #27
 8009c12:	d407      	bmi.n	8009c24 <__swsetup_r+0x30>
 8009c14:	2209      	movs	r2, #9
 8009c16:	602a      	str	r2, [r5, #0]
 8009c18:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009c1c:	81a3      	strh	r3, [r4, #12]
 8009c1e:	f04f 30ff 	mov.w	r0, #4294967295
 8009c22:	e033      	b.n	8009c8c <__swsetup_r+0x98>
 8009c24:	0758      	lsls	r0, r3, #29
 8009c26:	d512      	bpl.n	8009c4e <__swsetup_r+0x5a>
 8009c28:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009c2a:	b141      	cbz	r1, 8009c3e <__swsetup_r+0x4a>
 8009c2c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009c30:	4299      	cmp	r1, r3
 8009c32:	d002      	beq.n	8009c3a <__swsetup_r+0x46>
 8009c34:	4628      	mov	r0, r5
 8009c36:	f7ff f95d 	bl	8008ef4 <_free_r>
 8009c3a:	2300      	movs	r3, #0
 8009c3c:	6363      	str	r3, [r4, #52]	@ 0x34
 8009c3e:	89a3      	ldrh	r3, [r4, #12]
 8009c40:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009c44:	81a3      	strh	r3, [r4, #12]
 8009c46:	2300      	movs	r3, #0
 8009c48:	6063      	str	r3, [r4, #4]
 8009c4a:	6923      	ldr	r3, [r4, #16]
 8009c4c:	6023      	str	r3, [r4, #0]
 8009c4e:	89a3      	ldrh	r3, [r4, #12]
 8009c50:	f043 0308 	orr.w	r3, r3, #8
 8009c54:	81a3      	strh	r3, [r4, #12]
 8009c56:	6923      	ldr	r3, [r4, #16]
 8009c58:	b94b      	cbnz	r3, 8009c6e <__swsetup_r+0x7a>
 8009c5a:	89a3      	ldrh	r3, [r4, #12]
 8009c5c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009c60:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009c64:	d003      	beq.n	8009c6e <__swsetup_r+0x7a>
 8009c66:	4621      	mov	r1, r4
 8009c68:	4628      	mov	r0, r5
 8009c6a:	f000 f88b 	bl	8009d84 <__smakebuf_r>
 8009c6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009c72:	f013 0201 	ands.w	r2, r3, #1
 8009c76:	d00a      	beq.n	8009c8e <__swsetup_r+0x9a>
 8009c78:	2200      	movs	r2, #0
 8009c7a:	60a2      	str	r2, [r4, #8]
 8009c7c:	6962      	ldr	r2, [r4, #20]
 8009c7e:	4252      	negs	r2, r2
 8009c80:	61a2      	str	r2, [r4, #24]
 8009c82:	6922      	ldr	r2, [r4, #16]
 8009c84:	b942      	cbnz	r2, 8009c98 <__swsetup_r+0xa4>
 8009c86:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009c8a:	d1c5      	bne.n	8009c18 <__swsetup_r+0x24>
 8009c8c:	bd38      	pop	{r3, r4, r5, pc}
 8009c8e:	0799      	lsls	r1, r3, #30
 8009c90:	bf58      	it	pl
 8009c92:	6962      	ldrpl	r2, [r4, #20]
 8009c94:	60a2      	str	r2, [r4, #8]
 8009c96:	e7f4      	b.n	8009c82 <__swsetup_r+0x8e>
 8009c98:	2000      	movs	r0, #0
 8009c9a:	e7f7      	b.n	8009c8c <__swsetup_r+0x98>
 8009c9c:	20000020 	.word	0x20000020

08009ca0 <_raise_r>:
 8009ca0:	291f      	cmp	r1, #31
 8009ca2:	b538      	push	{r3, r4, r5, lr}
 8009ca4:	4605      	mov	r5, r0
 8009ca6:	460c      	mov	r4, r1
 8009ca8:	d904      	bls.n	8009cb4 <_raise_r+0x14>
 8009caa:	2316      	movs	r3, #22
 8009cac:	6003      	str	r3, [r0, #0]
 8009cae:	f04f 30ff 	mov.w	r0, #4294967295
 8009cb2:	bd38      	pop	{r3, r4, r5, pc}
 8009cb4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009cb6:	b112      	cbz	r2, 8009cbe <_raise_r+0x1e>
 8009cb8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009cbc:	b94b      	cbnz	r3, 8009cd2 <_raise_r+0x32>
 8009cbe:	4628      	mov	r0, r5
 8009cc0:	f000 f830 	bl	8009d24 <_getpid_r>
 8009cc4:	4622      	mov	r2, r4
 8009cc6:	4601      	mov	r1, r0
 8009cc8:	4628      	mov	r0, r5
 8009cca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009cce:	f000 b817 	b.w	8009d00 <_kill_r>
 8009cd2:	2b01      	cmp	r3, #1
 8009cd4:	d00a      	beq.n	8009cec <_raise_r+0x4c>
 8009cd6:	1c59      	adds	r1, r3, #1
 8009cd8:	d103      	bne.n	8009ce2 <_raise_r+0x42>
 8009cda:	2316      	movs	r3, #22
 8009cdc:	6003      	str	r3, [r0, #0]
 8009cde:	2001      	movs	r0, #1
 8009ce0:	e7e7      	b.n	8009cb2 <_raise_r+0x12>
 8009ce2:	2100      	movs	r1, #0
 8009ce4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009ce8:	4620      	mov	r0, r4
 8009cea:	4798      	blx	r3
 8009cec:	2000      	movs	r0, #0
 8009cee:	e7e0      	b.n	8009cb2 <_raise_r+0x12>

08009cf0 <raise>:
 8009cf0:	4b02      	ldr	r3, [pc, #8]	@ (8009cfc <raise+0xc>)
 8009cf2:	4601      	mov	r1, r0
 8009cf4:	6818      	ldr	r0, [r3, #0]
 8009cf6:	f7ff bfd3 	b.w	8009ca0 <_raise_r>
 8009cfa:	bf00      	nop
 8009cfc:	20000020 	.word	0x20000020

08009d00 <_kill_r>:
 8009d00:	b538      	push	{r3, r4, r5, lr}
 8009d02:	4d07      	ldr	r5, [pc, #28]	@ (8009d20 <_kill_r+0x20>)
 8009d04:	2300      	movs	r3, #0
 8009d06:	4604      	mov	r4, r0
 8009d08:	4608      	mov	r0, r1
 8009d0a:	4611      	mov	r1, r2
 8009d0c:	602b      	str	r3, [r5, #0]
 8009d0e:	f7f7 fac3 	bl	8001298 <_kill>
 8009d12:	1c43      	adds	r3, r0, #1
 8009d14:	d102      	bne.n	8009d1c <_kill_r+0x1c>
 8009d16:	682b      	ldr	r3, [r5, #0]
 8009d18:	b103      	cbz	r3, 8009d1c <_kill_r+0x1c>
 8009d1a:	6023      	str	r3, [r4, #0]
 8009d1c:	bd38      	pop	{r3, r4, r5, pc}
 8009d1e:	bf00      	nop
 8009d20:	200054c4 	.word	0x200054c4

08009d24 <_getpid_r>:
 8009d24:	f7f7 bab0 	b.w	8001288 <_getpid>

08009d28 <_malloc_usable_size_r>:
 8009d28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009d2c:	1f18      	subs	r0, r3, #4
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	bfbc      	itt	lt
 8009d32:	580b      	ldrlt	r3, [r1, r0]
 8009d34:	18c0      	addlt	r0, r0, r3
 8009d36:	4770      	bx	lr

08009d38 <__swhatbuf_r>:
 8009d38:	b570      	push	{r4, r5, r6, lr}
 8009d3a:	460c      	mov	r4, r1
 8009d3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d40:	2900      	cmp	r1, #0
 8009d42:	b096      	sub	sp, #88	@ 0x58
 8009d44:	4615      	mov	r5, r2
 8009d46:	461e      	mov	r6, r3
 8009d48:	da0d      	bge.n	8009d66 <__swhatbuf_r+0x2e>
 8009d4a:	89a3      	ldrh	r3, [r4, #12]
 8009d4c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009d50:	f04f 0100 	mov.w	r1, #0
 8009d54:	bf14      	ite	ne
 8009d56:	2340      	movne	r3, #64	@ 0x40
 8009d58:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009d5c:	2000      	movs	r0, #0
 8009d5e:	6031      	str	r1, [r6, #0]
 8009d60:	602b      	str	r3, [r5, #0]
 8009d62:	b016      	add	sp, #88	@ 0x58
 8009d64:	bd70      	pop	{r4, r5, r6, pc}
 8009d66:	466a      	mov	r2, sp
 8009d68:	f000 f848 	bl	8009dfc <_fstat_r>
 8009d6c:	2800      	cmp	r0, #0
 8009d6e:	dbec      	blt.n	8009d4a <__swhatbuf_r+0x12>
 8009d70:	9901      	ldr	r1, [sp, #4]
 8009d72:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009d76:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009d7a:	4259      	negs	r1, r3
 8009d7c:	4159      	adcs	r1, r3
 8009d7e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009d82:	e7eb      	b.n	8009d5c <__swhatbuf_r+0x24>

08009d84 <__smakebuf_r>:
 8009d84:	898b      	ldrh	r3, [r1, #12]
 8009d86:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009d88:	079d      	lsls	r5, r3, #30
 8009d8a:	4606      	mov	r6, r0
 8009d8c:	460c      	mov	r4, r1
 8009d8e:	d507      	bpl.n	8009da0 <__smakebuf_r+0x1c>
 8009d90:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009d94:	6023      	str	r3, [r4, #0]
 8009d96:	6123      	str	r3, [r4, #16]
 8009d98:	2301      	movs	r3, #1
 8009d9a:	6163      	str	r3, [r4, #20]
 8009d9c:	b003      	add	sp, #12
 8009d9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009da0:	ab01      	add	r3, sp, #4
 8009da2:	466a      	mov	r2, sp
 8009da4:	f7ff ffc8 	bl	8009d38 <__swhatbuf_r>
 8009da8:	9f00      	ldr	r7, [sp, #0]
 8009daa:	4605      	mov	r5, r0
 8009dac:	4639      	mov	r1, r7
 8009dae:	4630      	mov	r0, r6
 8009db0:	f7ff f914 	bl	8008fdc <_malloc_r>
 8009db4:	b948      	cbnz	r0, 8009dca <__smakebuf_r+0x46>
 8009db6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009dba:	059a      	lsls	r2, r3, #22
 8009dbc:	d4ee      	bmi.n	8009d9c <__smakebuf_r+0x18>
 8009dbe:	f023 0303 	bic.w	r3, r3, #3
 8009dc2:	f043 0302 	orr.w	r3, r3, #2
 8009dc6:	81a3      	strh	r3, [r4, #12]
 8009dc8:	e7e2      	b.n	8009d90 <__smakebuf_r+0xc>
 8009dca:	89a3      	ldrh	r3, [r4, #12]
 8009dcc:	6020      	str	r0, [r4, #0]
 8009dce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009dd2:	81a3      	strh	r3, [r4, #12]
 8009dd4:	9b01      	ldr	r3, [sp, #4]
 8009dd6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009dda:	b15b      	cbz	r3, 8009df4 <__smakebuf_r+0x70>
 8009ddc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009de0:	4630      	mov	r0, r6
 8009de2:	f000 f81d 	bl	8009e20 <_isatty_r>
 8009de6:	b128      	cbz	r0, 8009df4 <__smakebuf_r+0x70>
 8009de8:	89a3      	ldrh	r3, [r4, #12]
 8009dea:	f023 0303 	bic.w	r3, r3, #3
 8009dee:	f043 0301 	orr.w	r3, r3, #1
 8009df2:	81a3      	strh	r3, [r4, #12]
 8009df4:	89a3      	ldrh	r3, [r4, #12]
 8009df6:	431d      	orrs	r5, r3
 8009df8:	81a5      	strh	r5, [r4, #12]
 8009dfa:	e7cf      	b.n	8009d9c <__smakebuf_r+0x18>

08009dfc <_fstat_r>:
 8009dfc:	b538      	push	{r3, r4, r5, lr}
 8009dfe:	4d07      	ldr	r5, [pc, #28]	@ (8009e1c <_fstat_r+0x20>)
 8009e00:	2300      	movs	r3, #0
 8009e02:	4604      	mov	r4, r0
 8009e04:	4608      	mov	r0, r1
 8009e06:	4611      	mov	r1, r2
 8009e08:	602b      	str	r3, [r5, #0]
 8009e0a:	f7f7 faa5 	bl	8001358 <_fstat>
 8009e0e:	1c43      	adds	r3, r0, #1
 8009e10:	d102      	bne.n	8009e18 <_fstat_r+0x1c>
 8009e12:	682b      	ldr	r3, [r5, #0]
 8009e14:	b103      	cbz	r3, 8009e18 <_fstat_r+0x1c>
 8009e16:	6023      	str	r3, [r4, #0]
 8009e18:	bd38      	pop	{r3, r4, r5, pc}
 8009e1a:	bf00      	nop
 8009e1c:	200054c4 	.word	0x200054c4

08009e20 <_isatty_r>:
 8009e20:	b538      	push	{r3, r4, r5, lr}
 8009e22:	4d06      	ldr	r5, [pc, #24]	@ (8009e3c <_isatty_r+0x1c>)
 8009e24:	2300      	movs	r3, #0
 8009e26:	4604      	mov	r4, r0
 8009e28:	4608      	mov	r0, r1
 8009e2a:	602b      	str	r3, [r5, #0]
 8009e2c:	f7f7 faa4 	bl	8001378 <_isatty>
 8009e30:	1c43      	adds	r3, r0, #1
 8009e32:	d102      	bne.n	8009e3a <_isatty_r+0x1a>
 8009e34:	682b      	ldr	r3, [r5, #0]
 8009e36:	b103      	cbz	r3, 8009e3a <_isatty_r+0x1a>
 8009e38:	6023      	str	r3, [r4, #0]
 8009e3a:	bd38      	pop	{r3, r4, r5, pc}
 8009e3c:	200054c4 	.word	0x200054c4

08009e40 <_init>:
 8009e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e42:	bf00      	nop
 8009e44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e46:	bc08      	pop	{r3}
 8009e48:	469e      	mov	lr, r3
 8009e4a:	4770      	bx	lr

08009e4c <_fini>:
 8009e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e4e:	bf00      	nop
 8009e50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e52:	bc08      	pop	{r3}
 8009e54:	469e      	mov	lr, r3
 8009e56:	4770      	bx	lr
