
exercicio3_aula4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008ae0  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001ac  08008ce0  08008ce0  00009ce0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008e8c  08008e8c  0000a1a0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008e8c  08008e8c  00009e8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008e94  08008e94  0000a1a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008e94  08008e94  00009e94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008e98  08008e98  00009e98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08008e9c  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000060  08008efc  0000a060  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000100  08008f9c  0000a100  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00005204  200001a0  0800903c  0000a1a0  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  200053a4  0800903c  0000a3a4  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  0000a1a0  2**0
                  CONTENTS, READONLY
 14 .debug_info   00022369  00000000  00000000  0000a1ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000427c  00000000  00000000  0002c537  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001a50  00000000  00000000  000307b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001480  00000000  00000000  00032208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000045a1  00000000  00000000  00033688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001f039  00000000  00000000  00037c29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0010e44c  00000000  00000000  00056c62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  001650ae  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000750c  00000000  00000000  001650f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000064  00000000  00000000  0016c600  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001a0 	.word	0x200001a0
 800021c:	00000000 	.word	0x00000000
 8000220:	08008cc8 	.word	0x08008cc8

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001a4 	.word	0x200001a4
 800023c:	08008cc8 	.word	0x08008cc8

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b988 	b.w	8000618 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	468e      	mov	lr, r1
 8000328:	4604      	mov	r4, r0
 800032a:	4688      	mov	r8, r1
 800032c:	2b00      	cmp	r3, #0
 800032e:	d14a      	bne.n	80003c6 <__udivmoddi4+0xa6>
 8000330:	428a      	cmp	r2, r1
 8000332:	4617      	mov	r7, r2
 8000334:	d962      	bls.n	80003fc <__udivmoddi4+0xdc>
 8000336:	fab2 f682 	clz	r6, r2
 800033a:	b14e      	cbz	r6, 8000350 <__udivmoddi4+0x30>
 800033c:	f1c6 0320 	rsb	r3, r6, #32
 8000340:	fa01 f806 	lsl.w	r8, r1, r6
 8000344:	fa20 f303 	lsr.w	r3, r0, r3
 8000348:	40b7      	lsls	r7, r6
 800034a:	ea43 0808 	orr.w	r8, r3, r8
 800034e:	40b4      	lsls	r4, r6
 8000350:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000354:	fa1f fc87 	uxth.w	ip, r7
 8000358:	fbb8 f1fe 	udiv	r1, r8, lr
 800035c:	0c23      	lsrs	r3, r4, #16
 800035e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000362:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000366:	fb01 f20c 	mul.w	r2, r1, ip
 800036a:	429a      	cmp	r2, r3
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0x62>
 800036e:	18fb      	adds	r3, r7, r3
 8000370:	f101 30ff 	add.w	r0, r1, #4294967295
 8000374:	f080 80ea 	bcs.w	800054c <__udivmoddi4+0x22c>
 8000378:	429a      	cmp	r2, r3
 800037a:	f240 80e7 	bls.w	800054c <__udivmoddi4+0x22c>
 800037e:	3902      	subs	r1, #2
 8000380:	443b      	add	r3, r7
 8000382:	1a9a      	subs	r2, r3, r2
 8000384:	b2a3      	uxth	r3, r4
 8000386:	fbb2 f0fe 	udiv	r0, r2, lr
 800038a:	fb0e 2210 	mls	r2, lr, r0, r2
 800038e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000392:	fb00 fc0c 	mul.w	ip, r0, ip
 8000396:	459c      	cmp	ip, r3
 8000398:	d909      	bls.n	80003ae <__udivmoddi4+0x8e>
 800039a:	18fb      	adds	r3, r7, r3
 800039c:	f100 32ff 	add.w	r2, r0, #4294967295
 80003a0:	f080 80d6 	bcs.w	8000550 <__udivmoddi4+0x230>
 80003a4:	459c      	cmp	ip, r3
 80003a6:	f240 80d3 	bls.w	8000550 <__udivmoddi4+0x230>
 80003aa:	443b      	add	r3, r7
 80003ac:	3802      	subs	r0, #2
 80003ae:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003b2:	eba3 030c 	sub.w	r3, r3, ip
 80003b6:	2100      	movs	r1, #0
 80003b8:	b11d      	cbz	r5, 80003c2 <__udivmoddi4+0xa2>
 80003ba:	40f3      	lsrs	r3, r6
 80003bc:	2200      	movs	r2, #0
 80003be:	e9c5 3200 	strd	r3, r2, [r5]
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d905      	bls.n	80003d6 <__udivmoddi4+0xb6>
 80003ca:	b10d      	cbz	r5, 80003d0 <__udivmoddi4+0xb0>
 80003cc:	e9c5 0100 	strd	r0, r1, [r5]
 80003d0:	2100      	movs	r1, #0
 80003d2:	4608      	mov	r0, r1
 80003d4:	e7f5      	b.n	80003c2 <__udivmoddi4+0xa2>
 80003d6:	fab3 f183 	clz	r1, r3
 80003da:	2900      	cmp	r1, #0
 80003dc:	d146      	bne.n	800046c <__udivmoddi4+0x14c>
 80003de:	4573      	cmp	r3, lr
 80003e0:	d302      	bcc.n	80003e8 <__udivmoddi4+0xc8>
 80003e2:	4282      	cmp	r2, r0
 80003e4:	f200 8105 	bhi.w	80005f2 <__udivmoddi4+0x2d2>
 80003e8:	1a84      	subs	r4, r0, r2
 80003ea:	eb6e 0203 	sbc.w	r2, lr, r3
 80003ee:	2001      	movs	r0, #1
 80003f0:	4690      	mov	r8, r2
 80003f2:	2d00      	cmp	r5, #0
 80003f4:	d0e5      	beq.n	80003c2 <__udivmoddi4+0xa2>
 80003f6:	e9c5 4800 	strd	r4, r8, [r5]
 80003fa:	e7e2      	b.n	80003c2 <__udivmoddi4+0xa2>
 80003fc:	2a00      	cmp	r2, #0
 80003fe:	f000 8090 	beq.w	8000522 <__udivmoddi4+0x202>
 8000402:	fab2 f682 	clz	r6, r2
 8000406:	2e00      	cmp	r6, #0
 8000408:	f040 80a4 	bne.w	8000554 <__udivmoddi4+0x234>
 800040c:	1a8a      	subs	r2, r1, r2
 800040e:	0c03      	lsrs	r3, r0, #16
 8000410:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000414:	b280      	uxth	r0, r0
 8000416:	b2bc      	uxth	r4, r7
 8000418:	2101      	movs	r1, #1
 800041a:	fbb2 fcfe 	udiv	ip, r2, lr
 800041e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000422:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000426:	fb04 f20c 	mul.w	r2, r4, ip
 800042a:	429a      	cmp	r2, r3
 800042c:	d907      	bls.n	800043e <__udivmoddi4+0x11e>
 800042e:	18fb      	adds	r3, r7, r3
 8000430:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000434:	d202      	bcs.n	800043c <__udivmoddi4+0x11c>
 8000436:	429a      	cmp	r2, r3
 8000438:	f200 80e0 	bhi.w	80005fc <__udivmoddi4+0x2dc>
 800043c:	46c4      	mov	ip, r8
 800043e:	1a9b      	subs	r3, r3, r2
 8000440:	fbb3 f2fe 	udiv	r2, r3, lr
 8000444:	fb0e 3312 	mls	r3, lr, r2, r3
 8000448:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800044c:	fb02 f404 	mul.w	r4, r2, r4
 8000450:	429c      	cmp	r4, r3
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x144>
 8000454:	18fb      	adds	r3, r7, r3
 8000456:	f102 30ff 	add.w	r0, r2, #4294967295
 800045a:	d202      	bcs.n	8000462 <__udivmoddi4+0x142>
 800045c:	429c      	cmp	r4, r3
 800045e:	f200 80ca 	bhi.w	80005f6 <__udivmoddi4+0x2d6>
 8000462:	4602      	mov	r2, r0
 8000464:	1b1b      	subs	r3, r3, r4
 8000466:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800046a:	e7a5      	b.n	80003b8 <__udivmoddi4+0x98>
 800046c:	f1c1 0620 	rsb	r6, r1, #32
 8000470:	408b      	lsls	r3, r1
 8000472:	fa22 f706 	lsr.w	r7, r2, r6
 8000476:	431f      	orrs	r7, r3
 8000478:	fa0e f401 	lsl.w	r4, lr, r1
 800047c:	fa20 f306 	lsr.w	r3, r0, r6
 8000480:	fa2e fe06 	lsr.w	lr, lr, r6
 8000484:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000488:	4323      	orrs	r3, r4
 800048a:	fa00 f801 	lsl.w	r8, r0, r1
 800048e:	fa1f fc87 	uxth.w	ip, r7
 8000492:	fbbe f0f9 	udiv	r0, lr, r9
 8000496:	0c1c      	lsrs	r4, r3, #16
 8000498:	fb09 ee10 	mls	lr, r9, r0, lr
 800049c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80004a0:	fb00 fe0c 	mul.w	lr, r0, ip
 80004a4:	45a6      	cmp	lr, r4
 80004a6:	fa02 f201 	lsl.w	r2, r2, r1
 80004aa:	d909      	bls.n	80004c0 <__udivmoddi4+0x1a0>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f100 3aff 	add.w	sl, r0, #4294967295
 80004b2:	f080 809c 	bcs.w	80005ee <__udivmoddi4+0x2ce>
 80004b6:	45a6      	cmp	lr, r4
 80004b8:	f240 8099 	bls.w	80005ee <__udivmoddi4+0x2ce>
 80004bc:	3802      	subs	r0, #2
 80004be:	443c      	add	r4, r7
 80004c0:	eba4 040e 	sub.w	r4, r4, lr
 80004c4:	fa1f fe83 	uxth.w	lr, r3
 80004c8:	fbb4 f3f9 	udiv	r3, r4, r9
 80004cc:	fb09 4413 	mls	r4, r9, r3, r4
 80004d0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004d4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004d8:	45a4      	cmp	ip, r4
 80004da:	d908      	bls.n	80004ee <__udivmoddi4+0x1ce>
 80004dc:	193c      	adds	r4, r7, r4
 80004de:	f103 3eff 	add.w	lr, r3, #4294967295
 80004e2:	f080 8082 	bcs.w	80005ea <__udivmoddi4+0x2ca>
 80004e6:	45a4      	cmp	ip, r4
 80004e8:	d97f      	bls.n	80005ea <__udivmoddi4+0x2ca>
 80004ea:	3b02      	subs	r3, #2
 80004ec:	443c      	add	r4, r7
 80004ee:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004f2:	eba4 040c 	sub.w	r4, r4, ip
 80004f6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004fa:	4564      	cmp	r4, ip
 80004fc:	4673      	mov	r3, lr
 80004fe:	46e1      	mov	r9, ip
 8000500:	d362      	bcc.n	80005c8 <__udivmoddi4+0x2a8>
 8000502:	d05f      	beq.n	80005c4 <__udivmoddi4+0x2a4>
 8000504:	b15d      	cbz	r5, 800051e <__udivmoddi4+0x1fe>
 8000506:	ebb8 0203 	subs.w	r2, r8, r3
 800050a:	eb64 0409 	sbc.w	r4, r4, r9
 800050e:	fa04 f606 	lsl.w	r6, r4, r6
 8000512:	fa22 f301 	lsr.w	r3, r2, r1
 8000516:	431e      	orrs	r6, r3
 8000518:	40cc      	lsrs	r4, r1
 800051a:	e9c5 6400 	strd	r6, r4, [r5]
 800051e:	2100      	movs	r1, #0
 8000520:	e74f      	b.n	80003c2 <__udivmoddi4+0xa2>
 8000522:	fbb1 fcf2 	udiv	ip, r1, r2
 8000526:	0c01      	lsrs	r1, r0, #16
 8000528:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800052c:	b280      	uxth	r0, r0
 800052e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000532:	463b      	mov	r3, r7
 8000534:	4638      	mov	r0, r7
 8000536:	463c      	mov	r4, r7
 8000538:	46b8      	mov	r8, r7
 800053a:	46be      	mov	lr, r7
 800053c:	2620      	movs	r6, #32
 800053e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000542:	eba2 0208 	sub.w	r2, r2, r8
 8000546:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800054a:	e766      	b.n	800041a <__udivmoddi4+0xfa>
 800054c:	4601      	mov	r1, r0
 800054e:	e718      	b.n	8000382 <__udivmoddi4+0x62>
 8000550:	4610      	mov	r0, r2
 8000552:	e72c      	b.n	80003ae <__udivmoddi4+0x8e>
 8000554:	f1c6 0220 	rsb	r2, r6, #32
 8000558:	fa2e f302 	lsr.w	r3, lr, r2
 800055c:	40b7      	lsls	r7, r6
 800055e:	40b1      	lsls	r1, r6
 8000560:	fa20 f202 	lsr.w	r2, r0, r2
 8000564:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000568:	430a      	orrs	r2, r1
 800056a:	fbb3 f8fe 	udiv	r8, r3, lr
 800056e:	b2bc      	uxth	r4, r7
 8000570:	fb0e 3318 	mls	r3, lr, r8, r3
 8000574:	0c11      	lsrs	r1, r2, #16
 8000576:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800057a:	fb08 f904 	mul.w	r9, r8, r4
 800057e:	40b0      	lsls	r0, r6
 8000580:	4589      	cmp	r9, r1
 8000582:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000586:	b280      	uxth	r0, r0
 8000588:	d93e      	bls.n	8000608 <__udivmoddi4+0x2e8>
 800058a:	1879      	adds	r1, r7, r1
 800058c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000590:	d201      	bcs.n	8000596 <__udivmoddi4+0x276>
 8000592:	4589      	cmp	r9, r1
 8000594:	d81f      	bhi.n	80005d6 <__udivmoddi4+0x2b6>
 8000596:	eba1 0109 	sub.w	r1, r1, r9
 800059a:	fbb1 f9fe 	udiv	r9, r1, lr
 800059e:	fb09 f804 	mul.w	r8, r9, r4
 80005a2:	fb0e 1119 	mls	r1, lr, r9, r1
 80005a6:	b292      	uxth	r2, r2
 80005a8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80005ac:	4542      	cmp	r2, r8
 80005ae:	d229      	bcs.n	8000604 <__udivmoddi4+0x2e4>
 80005b0:	18ba      	adds	r2, r7, r2
 80005b2:	f109 31ff 	add.w	r1, r9, #4294967295
 80005b6:	d2c4      	bcs.n	8000542 <__udivmoddi4+0x222>
 80005b8:	4542      	cmp	r2, r8
 80005ba:	d2c2      	bcs.n	8000542 <__udivmoddi4+0x222>
 80005bc:	f1a9 0102 	sub.w	r1, r9, #2
 80005c0:	443a      	add	r2, r7
 80005c2:	e7be      	b.n	8000542 <__udivmoddi4+0x222>
 80005c4:	45f0      	cmp	r8, lr
 80005c6:	d29d      	bcs.n	8000504 <__udivmoddi4+0x1e4>
 80005c8:	ebbe 0302 	subs.w	r3, lr, r2
 80005cc:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005d0:	3801      	subs	r0, #1
 80005d2:	46e1      	mov	r9, ip
 80005d4:	e796      	b.n	8000504 <__udivmoddi4+0x1e4>
 80005d6:	eba7 0909 	sub.w	r9, r7, r9
 80005da:	4449      	add	r1, r9
 80005dc:	f1a8 0c02 	sub.w	ip, r8, #2
 80005e0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005e4:	fb09 f804 	mul.w	r8, r9, r4
 80005e8:	e7db      	b.n	80005a2 <__udivmoddi4+0x282>
 80005ea:	4673      	mov	r3, lr
 80005ec:	e77f      	b.n	80004ee <__udivmoddi4+0x1ce>
 80005ee:	4650      	mov	r0, sl
 80005f0:	e766      	b.n	80004c0 <__udivmoddi4+0x1a0>
 80005f2:	4608      	mov	r0, r1
 80005f4:	e6fd      	b.n	80003f2 <__udivmoddi4+0xd2>
 80005f6:	443b      	add	r3, r7
 80005f8:	3a02      	subs	r2, #2
 80005fa:	e733      	b.n	8000464 <__udivmoddi4+0x144>
 80005fc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000600:	443b      	add	r3, r7
 8000602:	e71c      	b.n	800043e <__udivmoddi4+0x11e>
 8000604:	4649      	mov	r1, r9
 8000606:	e79c      	b.n	8000542 <__udivmoddi4+0x222>
 8000608:	eba1 0109 	sub.w	r1, r1, r9
 800060c:	46c4      	mov	ip, r8
 800060e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000612:	fb09 f804 	mul.w	r8, r9, r4
 8000616:	e7c4      	b.n	80005a2 <__udivmoddi4+0x282>

08000618 <__aeabi_idiv0>:
 8000618:	4770      	bx	lr
 800061a:	bf00      	nop

0800061c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000620:	f000 fdc7 	bl	80011b2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000624:	f000 f844 	bl	80006b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000628:	f000 f960 	bl	80008ec <MX_GPIO_Init>
  MX_ETH_Init();
 800062c:	f000 f8b2 	bl	8000794 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000630:	f000 f8fe 	bl	8000830 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000634:	f000 f92c 	bl	8000890 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000638:	f004 f9ee 	bl	8004a18 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of Semaforocont */
  SemaforocontHandle = osSemaphoreNew(2, 0, &Semaforocont_attributes);
 800063c:	4a11      	ldr	r2, [pc, #68]	@ (8000684 <main+0x68>)
 800063e:	2100      	movs	r1, #0
 8000640:	2002      	movs	r0, #2
 8000642:	f004 fb27 	bl	8004c94 <osSemaphoreNew>
 8000646:	4603      	mov	r3, r0
 8000648:	4a0f      	ldr	r2, [pc, #60]	@ (8000688 <main+0x6c>)
 800064a:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Task01 */
  Task01Handle = osThreadNew(Task01Fun, NULL, &Task01_attributes);
 800064c:	4a0f      	ldr	r2, [pc, #60]	@ (800068c <main+0x70>)
 800064e:	2100      	movs	r1, #0
 8000650:	480f      	ldr	r0, [pc, #60]	@ (8000690 <main+0x74>)
 8000652:	f004 fa4b 	bl	8004aec <osThreadNew>
 8000656:	4603      	mov	r3, r0
 8000658:	4a0e      	ldr	r2, [pc, #56]	@ (8000694 <main+0x78>)
 800065a:	6013      	str	r3, [r2, #0]

  /* creation of Task02 */
  Task02Handle = osThreadNew(Task02Fun, NULL, &Task02_attributes);
 800065c:	4a0e      	ldr	r2, [pc, #56]	@ (8000698 <main+0x7c>)
 800065e:	2100      	movs	r1, #0
 8000660:	480e      	ldr	r0, [pc, #56]	@ (800069c <main+0x80>)
 8000662:	f004 fa43 	bl	8004aec <osThreadNew>
 8000666:	4603      	mov	r3, r0
 8000668:	4a0d      	ldr	r2, [pc, #52]	@ (80006a0 <main+0x84>)
 800066a:	6013      	str	r3, [r2, #0]

  /* creation of Task03 */
  Task03Handle = osThreadNew(Task03Fun, NULL, &Task03_attributes);
 800066c:	4a0d      	ldr	r2, [pc, #52]	@ (80006a4 <main+0x88>)
 800066e:	2100      	movs	r1, #0
 8000670:	480d      	ldr	r0, [pc, #52]	@ (80006a8 <main+0x8c>)
 8000672:	f004 fa3b 	bl	8004aec <osThreadNew>
 8000676:	4603      	mov	r3, r0
 8000678:	4a0c      	ldr	r2, [pc, #48]	@ (80006ac <main+0x90>)
 800067a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800067c:	f004 fa00 	bl	8004a80 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000680:	bf00      	nop
 8000682:	e7fd      	b.n	8000680 <main+0x64>
 8000684:	08008e30 	.word	0x08008e30
 8000688:	20000818 	.word	0x20000818
 800068c:	08008dc4 	.word	0x08008dc4
 8000690:	08000a31 	.word	0x08000a31
 8000694:	2000080c 	.word	0x2000080c
 8000698:	08008de8 	.word	0x08008de8
 800069c:	08000b0d 	.word	0x08000b0d
 80006a0:	20000810 	.word	0x20000810
 80006a4:	08008e0c 	.word	0x08008e0c
 80006a8:	08000b89 	.word	0x08000b89
 80006ac:	20000814 	.word	0x20000814

080006b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b094      	sub	sp, #80	@ 0x50
 80006b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006b6:	f107 031c 	add.w	r3, r7, #28
 80006ba:	2234      	movs	r2, #52	@ 0x34
 80006bc:	2100      	movs	r1, #0
 80006be:	4618      	mov	r0, r3
 80006c0:	f007 fe26 	bl	8008310 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006c4:	f107 0308 	add.w	r3, r7, #8
 80006c8:	2200      	movs	r2, #0
 80006ca:	601a      	str	r2, [r3, #0]
 80006cc:	605a      	str	r2, [r3, #4]
 80006ce:	609a      	str	r2, [r3, #8]
 80006d0:	60da      	str	r2, [r3, #12]
 80006d2:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80006d4:	f001 fcee 	bl	80020b4 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006d8:	4b2c      	ldr	r3, [pc, #176]	@ (800078c <SystemClock_Config+0xdc>)
 80006da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006dc:	4a2b      	ldr	r2, [pc, #172]	@ (800078c <SystemClock_Config+0xdc>)
 80006de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006e2:	6413      	str	r3, [r2, #64]	@ 0x40
 80006e4:	4b29      	ldr	r3, [pc, #164]	@ (800078c <SystemClock_Config+0xdc>)
 80006e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006ec:	607b      	str	r3, [r7, #4]
 80006ee:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006f0:	4b27      	ldr	r3, [pc, #156]	@ (8000790 <SystemClock_Config+0xe0>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80006f8:	4a25      	ldr	r2, [pc, #148]	@ (8000790 <SystemClock_Config+0xe0>)
 80006fa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006fe:	6013      	str	r3, [r2, #0]
 8000700:	4b23      	ldr	r3, [pc, #140]	@ (8000790 <SystemClock_Config+0xe0>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000708:	603b      	str	r3, [r7, #0]
 800070a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800070c:	2301      	movs	r3, #1
 800070e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000710:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000714:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000716:	2302      	movs	r3, #2
 8000718:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800071a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800071e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000720:	2304      	movs	r3, #4
 8000722:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000724:	2360      	movs	r3, #96	@ 0x60
 8000726:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000728:	2302      	movs	r3, #2
 800072a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800072c:	2304      	movs	r3, #4
 800072e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000730:	2302      	movs	r3, #2
 8000732:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000734:	f107 031c 	add.w	r3, r7, #28
 8000738:	4618      	mov	r0, r3
 800073a:	f001 fd1b 	bl	8002174 <HAL_RCC_OscConfig>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000744:	f000 fa6e 	bl	8000c24 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000748:	f001 fcc4 	bl	80020d4 <HAL_PWREx_EnableOverDrive>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000752:	f000 fa67 	bl	8000c24 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000756:	230f      	movs	r3, #15
 8000758:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800075a:	2302      	movs	r3, #2
 800075c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800075e:	2300      	movs	r3, #0
 8000760:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000762:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000766:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000768:	2300      	movs	r3, #0
 800076a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800076c:	f107 0308 	add.w	r3, r7, #8
 8000770:	2103      	movs	r1, #3
 8000772:	4618      	mov	r0, r3
 8000774:	f001 ffac 	bl	80026d0 <HAL_RCC_ClockConfig>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800077e:	f000 fa51 	bl	8000c24 <Error_Handler>
  }
}
 8000782:	bf00      	nop
 8000784:	3750      	adds	r7, #80	@ 0x50
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	40023800 	.word	0x40023800
 8000790:	40007000 	.word	0x40007000

08000794 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000798:	4b1f      	ldr	r3, [pc, #124]	@ (8000818 <MX_ETH_Init+0x84>)
 800079a:	4a20      	ldr	r2, [pc, #128]	@ (800081c <MX_ETH_Init+0x88>)
 800079c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800079e:	4b20      	ldr	r3, [pc, #128]	@ (8000820 <MX_ETH_Init+0x8c>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80007a4:	4b1e      	ldr	r3, [pc, #120]	@ (8000820 <MX_ETH_Init+0x8c>)
 80007a6:	2280      	movs	r2, #128	@ 0x80
 80007a8:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80007aa:	4b1d      	ldr	r3, [pc, #116]	@ (8000820 <MX_ETH_Init+0x8c>)
 80007ac:	22e1      	movs	r2, #225	@ 0xe1
 80007ae:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80007b0:	4b1b      	ldr	r3, [pc, #108]	@ (8000820 <MX_ETH_Init+0x8c>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80007b6:	4b1a      	ldr	r3, [pc, #104]	@ (8000820 <MX_ETH_Init+0x8c>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80007bc:	4b18      	ldr	r3, [pc, #96]	@ (8000820 <MX_ETH_Init+0x8c>)
 80007be:	2200      	movs	r2, #0
 80007c0:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80007c2:	4b15      	ldr	r3, [pc, #84]	@ (8000818 <MX_ETH_Init+0x84>)
 80007c4:	4a16      	ldr	r2, [pc, #88]	@ (8000820 <MX_ETH_Init+0x8c>)
 80007c6:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80007c8:	4b13      	ldr	r3, [pc, #76]	@ (8000818 <MX_ETH_Init+0x84>)
 80007ca:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80007ce:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80007d0:	4b11      	ldr	r3, [pc, #68]	@ (8000818 <MX_ETH_Init+0x84>)
 80007d2:	4a14      	ldr	r2, [pc, #80]	@ (8000824 <MX_ETH_Init+0x90>)
 80007d4:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80007d6:	4b10      	ldr	r3, [pc, #64]	@ (8000818 <MX_ETH_Init+0x84>)
 80007d8:	4a13      	ldr	r2, [pc, #76]	@ (8000828 <MX_ETH_Init+0x94>)
 80007da:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80007dc:	4b0e      	ldr	r3, [pc, #56]	@ (8000818 <MX_ETH_Init+0x84>)
 80007de:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 80007e2:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80007e4:	480c      	ldr	r0, [pc, #48]	@ (8000818 <MX_ETH_Init+0x84>)
 80007e6:	f000 fe17 	bl	8001418 <HAL_ETH_Init>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d001      	beq.n	80007f4 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 80007f0:	f000 fa18 	bl	8000c24 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80007f4:	2238      	movs	r2, #56	@ 0x38
 80007f6:	2100      	movs	r1, #0
 80007f8:	480c      	ldr	r0, [pc, #48]	@ (800082c <MX_ETH_Init+0x98>)
 80007fa:	f007 fd89 	bl	8008310 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80007fe:	4b0b      	ldr	r3, [pc, #44]	@ (800082c <MX_ETH_Init+0x98>)
 8000800:	2221      	movs	r2, #33	@ 0x21
 8000802:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000804:	4b09      	ldr	r3, [pc, #36]	@ (800082c <MX_ETH_Init+0x98>)
 8000806:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 800080a:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800080c:	4b07      	ldr	r3, [pc, #28]	@ (800082c <MX_ETH_Init+0x98>)
 800080e:	2200      	movs	r2, #0
 8000810:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000812:	bf00      	nop
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	200001f4 	.word	0x200001f4
 800081c:	40028000 	.word	0x40028000
 8000820:	20000820 	.word	0x20000820
 8000824:	20000100 	.word	0x20000100
 8000828:	20000060 	.word	0x20000060
 800082c:	200001bc 	.word	0x200001bc

08000830 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000834:	4b14      	ldr	r3, [pc, #80]	@ (8000888 <MX_USART3_UART_Init+0x58>)
 8000836:	4a15      	ldr	r2, [pc, #84]	@ (800088c <MX_USART3_UART_Init+0x5c>)
 8000838:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800083a:	4b13      	ldr	r3, [pc, #76]	@ (8000888 <MX_USART3_UART_Init+0x58>)
 800083c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000840:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000842:	4b11      	ldr	r3, [pc, #68]	@ (8000888 <MX_USART3_UART_Init+0x58>)
 8000844:	2200      	movs	r2, #0
 8000846:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000848:	4b0f      	ldr	r3, [pc, #60]	@ (8000888 <MX_USART3_UART_Init+0x58>)
 800084a:	2200      	movs	r2, #0
 800084c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800084e:	4b0e      	ldr	r3, [pc, #56]	@ (8000888 <MX_USART3_UART_Init+0x58>)
 8000850:	2200      	movs	r2, #0
 8000852:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000854:	4b0c      	ldr	r3, [pc, #48]	@ (8000888 <MX_USART3_UART_Init+0x58>)
 8000856:	220c      	movs	r2, #12
 8000858:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800085a:	4b0b      	ldr	r3, [pc, #44]	@ (8000888 <MX_USART3_UART_Init+0x58>)
 800085c:	2200      	movs	r2, #0
 800085e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000860:	4b09      	ldr	r3, [pc, #36]	@ (8000888 <MX_USART3_UART_Init+0x58>)
 8000862:	2200      	movs	r2, #0
 8000864:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000866:	4b08      	ldr	r3, [pc, #32]	@ (8000888 <MX_USART3_UART_Init+0x58>)
 8000868:	2200      	movs	r2, #0
 800086a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800086c:	4b06      	ldr	r3, [pc, #24]	@ (8000888 <MX_USART3_UART_Init+0x58>)
 800086e:	2200      	movs	r2, #0
 8000870:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000872:	4805      	ldr	r0, [pc, #20]	@ (8000888 <MX_USART3_UART_Init+0x58>)
 8000874:	f003 f87a 	bl	800396c <HAL_UART_Init>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800087e:	f000 f9d1 	bl	8000c24 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000882:	bf00      	nop
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	200002a4 	.word	0x200002a4
 800088c:	40004800 	.word	0x40004800

08000890 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000894:	4b14      	ldr	r3, [pc, #80]	@ (80008e8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000896:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800089a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800089c:	4b12      	ldr	r3, [pc, #72]	@ (80008e8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800089e:	2206      	movs	r2, #6
 80008a0:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80008a2:	4b11      	ldr	r3, [pc, #68]	@ (80008e8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008a4:	2202      	movs	r2, #2
 80008a6:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80008a8:	4b0f      	ldr	r3, [pc, #60]	@ (80008e8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80008ae:	4b0e      	ldr	r3, [pc, #56]	@ (80008e8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008b0:	2202      	movs	r2, #2
 80008b2:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80008b4:	4b0c      	ldr	r3, [pc, #48]	@ (80008e8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008b6:	2201      	movs	r2, #1
 80008b8:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80008ba:	4b0b      	ldr	r3, [pc, #44]	@ (80008e8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008bc:	2200      	movs	r2, #0
 80008be:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80008c0:	4b09      	ldr	r3, [pc, #36]	@ (80008e8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80008c6:	4b08      	ldr	r3, [pc, #32]	@ (80008e8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008c8:	2201      	movs	r2, #1
 80008ca:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80008cc:	4b06      	ldr	r3, [pc, #24]	@ (80008e8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80008d2:	4805      	ldr	r0, [pc, #20]	@ (80008e8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008d4:	f001 fab3 	bl	8001e3e <HAL_PCD_Init>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80008de:	f000 f9a1 	bl	8000c24 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80008e2:	bf00      	nop
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	2000032c 	.word	0x2000032c

080008ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b08c      	sub	sp, #48	@ 0x30
 80008f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f2:	f107 031c 	add.w	r3, r7, #28
 80008f6:	2200      	movs	r2, #0
 80008f8:	601a      	str	r2, [r3, #0]
 80008fa:	605a      	str	r2, [r3, #4]
 80008fc:	609a      	str	r2, [r3, #8]
 80008fe:	60da      	str	r2, [r3, #12]
 8000900:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000902:	4b47      	ldr	r3, [pc, #284]	@ (8000a20 <MX_GPIO_Init+0x134>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000906:	4a46      	ldr	r2, [pc, #280]	@ (8000a20 <MX_GPIO_Init+0x134>)
 8000908:	f043 0304 	orr.w	r3, r3, #4
 800090c:	6313      	str	r3, [r2, #48]	@ 0x30
 800090e:	4b44      	ldr	r3, [pc, #272]	@ (8000a20 <MX_GPIO_Init+0x134>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000912:	f003 0304 	and.w	r3, r3, #4
 8000916:	61bb      	str	r3, [r7, #24]
 8000918:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800091a:	4b41      	ldr	r3, [pc, #260]	@ (8000a20 <MX_GPIO_Init+0x134>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800091e:	4a40      	ldr	r2, [pc, #256]	@ (8000a20 <MX_GPIO_Init+0x134>)
 8000920:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000924:	6313      	str	r3, [r2, #48]	@ 0x30
 8000926:	4b3e      	ldr	r3, [pc, #248]	@ (8000a20 <MX_GPIO_Init+0x134>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800092a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800092e:	617b      	str	r3, [r7, #20]
 8000930:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000932:	4b3b      	ldr	r3, [pc, #236]	@ (8000a20 <MX_GPIO_Init+0x134>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000936:	4a3a      	ldr	r2, [pc, #232]	@ (8000a20 <MX_GPIO_Init+0x134>)
 8000938:	f043 0301 	orr.w	r3, r3, #1
 800093c:	6313      	str	r3, [r2, #48]	@ 0x30
 800093e:	4b38      	ldr	r3, [pc, #224]	@ (8000a20 <MX_GPIO_Init+0x134>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000942:	f003 0301 	and.w	r3, r3, #1
 8000946:	613b      	str	r3, [r7, #16]
 8000948:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800094a:	4b35      	ldr	r3, [pc, #212]	@ (8000a20 <MX_GPIO_Init+0x134>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800094e:	4a34      	ldr	r2, [pc, #208]	@ (8000a20 <MX_GPIO_Init+0x134>)
 8000950:	f043 0302 	orr.w	r3, r3, #2
 8000954:	6313      	str	r3, [r2, #48]	@ 0x30
 8000956:	4b32      	ldr	r3, [pc, #200]	@ (8000a20 <MX_GPIO_Init+0x134>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800095a:	f003 0302 	and.w	r3, r3, #2
 800095e:	60fb      	str	r3, [r7, #12]
 8000960:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000962:	4b2f      	ldr	r3, [pc, #188]	@ (8000a20 <MX_GPIO_Init+0x134>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000966:	4a2e      	ldr	r2, [pc, #184]	@ (8000a20 <MX_GPIO_Init+0x134>)
 8000968:	f043 0308 	orr.w	r3, r3, #8
 800096c:	6313      	str	r3, [r2, #48]	@ 0x30
 800096e:	4b2c      	ldr	r3, [pc, #176]	@ (8000a20 <MX_GPIO_Init+0x134>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000972:	f003 0308 	and.w	r3, r3, #8
 8000976:	60bb      	str	r3, [r7, #8]
 8000978:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800097a:	4b29      	ldr	r3, [pc, #164]	@ (8000a20 <MX_GPIO_Init+0x134>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800097e:	4a28      	ldr	r2, [pc, #160]	@ (8000a20 <MX_GPIO_Init+0x134>)
 8000980:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000984:	6313      	str	r3, [r2, #48]	@ 0x30
 8000986:	4b26      	ldr	r3, [pc, #152]	@ (8000a20 <MX_GPIO_Init+0x134>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800098a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800098e:	607b      	str	r3, [r7, #4]
 8000990:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000992:	2200      	movs	r2, #0
 8000994:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000998:	4822      	ldr	r0, [pc, #136]	@ (8000a24 <MX_GPIO_Init+0x138>)
 800099a:	f001 fa37 	bl	8001e0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800099e:	2200      	movs	r2, #0
 80009a0:	2140      	movs	r1, #64	@ 0x40
 80009a2:	4821      	ldr	r0, [pc, #132]	@ (8000a28 <MX_GPIO_Init+0x13c>)
 80009a4:	f001 fa32 	bl	8001e0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80009a8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80009ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009ae:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80009b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b4:	2300      	movs	r3, #0
 80009b6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80009b8:	f107 031c 	add.w	r3, r7, #28
 80009bc:	4619      	mov	r1, r3
 80009be:	481b      	ldr	r0, [pc, #108]	@ (8000a2c <MX_GPIO_Init+0x140>)
 80009c0:	f001 f878 	bl	8001ab4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80009c4:	f244 0381 	movw	r3, #16513	@ 0x4081
 80009c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ca:	2301      	movs	r3, #1
 80009cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ce:	2300      	movs	r3, #0
 80009d0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d2:	2300      	movs	r3, #0
 80009d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009d6:	f107 031c 	add.w	r3, r7, #28
 80009da:	4619      	mov	r1, r3
 80009dc:	4811      	ldr	r0, [pc, #68]	@ (8000a24 <MX_GPIO_Init+0x138>)
 80009de:	f001 f869 	bl	8001ab4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80009e2:	2340      	movs	r3, #64	@ 0x40
 80009e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009e6:	2301      	movs	r3, #1
 80009e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ea:	2300      	movs	r3, #0
 80009ec:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ee:	2300      	movs	r3, #0
 80009f0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80009f2:	f107 031c 	add.w	r3, r7, #28
 80009f6:	4619      	mov	r1, r3
 80009f8:	480b      	ldr	r0, [pc, #44]	@ (8000a28 <MX_GPIO_Init+0x13c>)
 80009fa:	f001 f85b 	bl	8001ab4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80009fe:	2380      	movs	r3, #128	@ 0x80
 8000a00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a02:	2300      	movs	r3, #0
 8000a04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a06:	2300      	movs	r3, #0
 8000a08:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a0a:	f107 031c 	add.w	r3, r7, #28
 8000a0e:	4619      	mov	r1, r3
 8000a10:	4805      	ldr	r0, [pc, #20]	@ (8000a28 <MX_GPIO_Init+0x13c>)
 8000a12:	f001 f84f 	bl	8001ab4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000a16:	bf00      	nop
 8000a18:	3730      	adds	r7, #48	@ 0x30
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	40023800 	.word	0x40023800
 8000a24:	40020400 	.word	0x40020400
 8000a28:	40021800 	.word	0x40021800
 8000a2c:	40020800 	.word	0x40020800

08000a30 <Task01Fun>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Task01Fun */
void Task01Fun(void *argument)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b092      	sub	sp, #72	@ 0x48
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
	char msg[64];


  for(;;)
  {
	  cont = osSemaphoreGetCount(SemaforocontHandle);
 8000a38:	4b2e      	ldr	r3, [pc, #184]	@ (8000af4 <Task01Fun+0xc4>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f004 fa83 	bl	8004f48 <osSemaphoreGetCount>
 8000a42:	4603      	mov	r3, r0
 8000a44:	b2da      	uxtb	r2, r3
 8000a46:	4b2c      	ldr	r3, [pc, #176]	@ (8000af8 <Task01Fun+0xc8>)
 8000a48:	701a      	strb	r2, [r3, #0]
	  sprintf(msg, "Valor atual do semaforo: %d\r\n", cont);
 8000a4a:	4b2b      	ldr	r3, [pc, #172]	@ (8000af8 <Task01Fun+0xc8>)
 8000a4c:	781b      	ldrb	r3, [r3, #0]
 8000a4e:	461a      	mov	r2, r3
 8000a50:	f107 0308 	add.w	r3, r7, #8
 8000a54:	4929      	ldr	r1, [pc, #164]	@ (8000afc <Task01Fun+0xcc>)
 8000a56:	4618      	mov	r0, r3
 8000a58:	f007 fc38 	bl	80082cc <siprintf>
	  HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000a5c:	f107 0308 	add.w	r3, r7, #8
 8000a60:	4618      	mov	r0, r3
 8000a62:	f7ff fbed 	bl	8000240 <strlen>
 8000a66:	4603      	mov	r3, r0
 8000a68:	b29a      	uxth	r2, r3
 8000a6a:	f107 0108 	add.w	r1, r7, #8
 8000a6e:	f04f 33ff 	mov.w	r3, #4294967295
 8000a72:	4823      	ldr	r0, [pc, #140]	@ (8000b00 <Task01Fun+0xd0>)
 8000a74:	f002 ffc8 	bl	8003a08 <HAL_UART_Transmit>

	  if (cont == 0 ) {
 8000a78:	4b1f      	ldr	r3, [pc, #124]	@ (8000af8 <Task01Fun+0xc8>)
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d118      	bne.n	8000ab2 <Task01Fun+0x82>
	      sprintf(msg, "Semaforo indisponivel. Liberando na task1...\r\n");
 8000a80:	f107 0308 	add.w	r3, r7, #8
 8000a84:	491f      	ldr	r1, [pc, #124]	@ (8000b04 <Task01Fun+0xd4>)
 8000a86:	4618      	mov	r0, r3
 8000a88:	f007 fc20 	bl	80082cc <siprintf>
	      HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000a8c:	f107 0308 	add.w	r3, r7, #8
 8000a90:	4618      	mov	r0, r3
 8000a92:	f7ff fbd5 	bl	8000240 <strlen>
 8000a96:	4603      	mov	r3, r0
 8000a98:	b29a      	uxth	r2, r3
 8000a9a:	f107 0108 	add.w	r1, r7, #8
 8000a9e:	f04f 33ff 	mov.w	r3, #4294967295
 8000aa2:	4817      	ldr	r0, [pc, #92]	@ (8000b00 <Task01Fun+0xd0>)
 8000aa4:	f002 ffb0 	bl	8003a08 <HAL_UART_Transmit>

		  osSemaphoreRelease(SemaforocontHandle);
 8000aa8:	4b12      	ldr	r3, [pc, #72]	@ (8000af4 <Task01Fun+0xc4>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	4618      	mov	r0, r3
 8000aae:	f004 f9f3 	bl	8004e98 <osSemaphoreRelease>
	   }

	  osSemaphoreAcquire(SemaforocontHandle, osWaitForever);
 8000ab2:	4b10      	ldr	r3, [pc, #64]	@ (8000af4 <Task01Fun+0xc4>)
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	f04f 31ff 	mov.w	r1, #4294967295
 8000aba:	4618      	mov	r0, r3
 8000abc:	f004 f986 	bl	8004dcc <osSemaphoreAcquire>
	  sprintf(msg, "Executando tarefa 1 apos Acquire.\r\n");
 8000ac0:	f107 0308 	add.w	r3, r7, #8
 8000ac4:	4910      	ldr	r1, [pc, #64]	@ (8000b08 <Task01Fun+0xd8>)
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f007 fc00 	bl	80082cc <siprintf>
	  HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000acc:	f107 0308 	add.w	r3, r7, #8
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f7ff fbb5 	bl	8000240 <strlen>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	b29a      	uxth	r2, r3
 8000ada:	f107 0108 	add.w	r1, r7, #8
 8000ade:	f04f 33ff 	mov.w	r3, #4294967295
 8000ae2:	4807      	ldr	r0, [pc, #28]	@ (8000b00 <Task01Fun+0xd0>)
 8000ae4:	f002 ff90 	bl	8003a08 <HAL_UART_Transmit>
	  osDelay(500);
 8000ae8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000aec:	f004 f8a4 	bl	8004c38 <osDelay>
	  cont = osSemaphoreGetCount(SemaforocontHandle);
 8000af0:	e7a2      	b.n	8000a38 <Task01Fun+0x8>
 8000af2:	bf00      	nop
 8000af4:	20000818 	.word	0x20000818
 8000af8:	2000081c 	.word	0x2000081c
 8000afc:	08008d08 	.word	0x08008d08
 8000b00:	200002a4 	.word	0x200002a4
 8000b04:	08008d28 	.word	0x08008d28
 8000b08:	08008d58 	.word	0x08008d58

08000b0c <Task02Fun>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task02Fun */
void Task02Fun(void *argument)
{
 8000b0c:	b5b0      	push	{r4, r5, r7, lr}
 8000b0e:	b088      	sub	sp, #32
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task02Fun */
  /* Infinite loop */
	char msg[] = "Executando Task2 ...\r\n";
 8000b14:	4b18      	ldr	r3, [pc, #96]	@ (8000b78 <Task02Fun+0x6c>)
 8000b16:	f107 0408 	add.w	r4, r7, #8
 8000b1a:	461d      	mov	r5, r3
 8000b1c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b20:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000b24:	6020      	str	r0, [r4, #0]
 8000b26:	3404      	adds	r4, #4
 8000b28:	8021      	strh	r1, [r4, #0]
 8000b2a:	3402      	adds	r4, #2
 8000b2c:	0c0b      	lsrs	r3, r1, #16
 8000b2e:	7023      	strb	r3, [r4, #0]
	  for(;;)
	  {
		osSemaphoreAcquire(SemaforocontHandle, osWaitForever);
 8000b30:	4b12      	ldr	r3, [pc, #72]	@ (8000b7c <Task02Fun+0x70>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	f04f 31ff 	mov.w	r1, #4294967295
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f004 f947 	bl	8004dcc <osSemaphoreAcquire>
		cont = osSemaphoreGetCount(SemaforocontHandle);
 8000b3e:	4b0f      	ldr	r3, [pc, #60]	@ (8000b7c <Task02Fun+0x70>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	4618      	mov	r0, r3
 8000b44:	f004 fa00 	bl	8004f48 <osSemaphoreGetCount>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	b2da      	uxtb	r2, r3
 8000b4c:	4b0c      	ldr	r3, [pc, #48]	@ (8000b80 <Task02Fun+0x74>)
 8000b4e:	701a      	strb	r2, [r3, #0]

		//HAL_GPIO_TogglePin(GPIOB, LD2_Pin);

		HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000b50:	f107 0308 	add.w	r3, r7, #8
 8000b54:	4618      	mov	r0, r3
 8000b56:	f7ff fb73 	bl	8000240 <strlen>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	b29a      	uxth	r2, r3
 8000b5e:	f107 0108 	add.w	r1, r7, #8
 8000b62:	f04f 33ff 	mov.w	r3, #4294967295
 8000b66:	4807      	ldr	r0, [pc, #28]	@ (8000b84 <Task02Fun+0x78>)
 8000b68:	f002 ff4e 	bl	8003a08 <HAL_UART_Transmit>

		//osSemaphoreRelease(SemaforocontHandle);
		//cont = osSemaphoreGetCount(SemaforocontHandle);

	    osDelay(500);
 8000b6c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000b70:	f004 f862 	bl	8004c38 <osDelay>
		osSemaphoreAcquire(SemaforocontHandle, osWaitForever);
 8000b74:	bf00      	nop
 8000b76:	e7db      	b.n	8000b30 <Task02Fun+0x24>
 8000b78:	08008d7c 	.word	0x08008d7c
 8000b7c:	20000818 	.word	0x20000818
 8000b80:	2000081c 	.word	0x2000081c
 8000b84:	200002a4 	.word	0x200002a4

08000b88 <Task03Fun>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task03Fun */
void Task03Fun(void *argument)
{
 8000b88:	b5b0      	push	{r4, r5, r7, lr}
 8000b8a:	b088      	sub	sp, #32
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task03Fun */
  /* Infinite loop */
	char msg[] = "Executando Task3...\r\n";
 8000b90:	4b17      	ldr	r3, [pc, #92]	@ (8000bf0 <Task03Fun+0x68>)
 8000b92:	f107 0408 	add.w	r4, r7, #8
 8000b96:	461d      	mov	r5, r3
 8000b98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b9c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000ba0:	6020      	str	r0, [r4, #0]
 8000ba2:	3404      	adds	r4, #4
 8000ba4:	8021      	strh	r1, [r4, #0]
	  for(;;)
	  {
		osSemaphoreAcquire(SemaforocontHandle, osWaitForever);
 8000ba6:	4b13      	ldr	r3, [pc, #76]	@ (8000bf4 <Task03Fun+0x6c>)
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	f04f 31ff 	mov.w	r1, #4294967295
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f004 f90c 	bl	8004dcc <osSemaphoreAcquire>
		cont = osSemaphoreGetCount(SemaforocontHandle);
 8000bb4:	4b0f      	ldr	r3, [pc, #60]	@ (8000bf4 <Task03Fun+0x6c>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f004 f9c5 	bl	8004f48 <osSemaphoreGetCount>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	b2da      	uxtb	r2, r3
 8000bc2:	4b0d      	ldr	r3, [pc, #52]	@ (8000bf8 <Task03Fun+0x70>)
 8000bc4:	701a      	strb	r2, [r3, #0]


		HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000bc6:	f107 0308 	add.w	r3, r7, #8
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f7ff fb38 	bl	8000240 <strlen>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	b29a      	uxth	r2, r3
 8000bd4:	f107 0108 	add.w	r1, r7, #8
 8000bd8:	f04f 33ff 	mov.w	r3, #4294967295
 8000bdc:	4807      	ldr	r0, [pc, #28]	@ (8000bfc <Task03Fun+0x74>)
 8000bde:	f002 ff13 	bl	8003a08 <HAL_UART_Transmit>

		//osSemaphoreRelease(SemaforocontHandle);
//		cont = osSemaphoreGetCount(SemaforocontHandle);

	    osDelay(500);
 8000be2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000be6:	f004 f827 	bl	8004c38 <osDelay>
		osSemaphoreAcquire(SemaforocontHandle, osWaitForever);
 8000bea:	bf00      	nop
 8000bec:	e7db      	b.n	8000ba6 <Task03Fun+0x1e>
 8000bee:	bf00      	nop
 8000bf0:	08008d94 	.word	0x08008d94
 8000bf4:	20000818 	.word	0x20000818
 8000bf8:	2000081c 	.word	0x2000081c
 8000bfc:	200002a4 	.word	0x200002a4

08000c00 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b082      	sub	sp, #8
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	4a04      	ldr	r2, [pc, #16]	@ (8000c20 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c0e:	4293      	cmp	r3, r2
 8000c10:	d101      	bne.n	8000c16 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000c12:	f000 fadb 	bl	80011cc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c16:	bf00      	nop
 8000c18:	3708      	adds	r7, #8
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	40010000 	.word	0x40010000

08000c24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c28:	b672      	cpsid	i
}
 8000c2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c2c:	bf00      	nop
 8000c2e:	e7fd      	b.n	8000c2c <Error_Handler+0x8>

08000c30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b082      	sub	sp, #8
 8000c34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000c36:	4b11      	ldr	r3, [pc, #68]	@ (8000c7c <HAL_MspInit+0x4c>)
 8000c38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c3a:	4a10      	ldr	r2, [pc, #64]	@ (8000c7c <HAL_MspInit+0x4c>)
 8000c3c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c40:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c42:	4b0e      	ldr	r3, [pc, #56]	@ (8000c7c <HAL_MspInit+0x4c>)
 8000c44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c4a:	607b      	str	r3, [r7, #4]
 8000c4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c4e:	4b0b      	ldr	r3, [pc, #44]	@ (8000c7c <HAL_MspInit+0x4c>)
 8000c50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c52:	4a0a      	ldr	r2, [pc, #40]	@ (8000c7c <HAL_MspInit+0x4c>)
 8000c54:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c58:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c5a:	4b08      	ldr	r3, [pc, #32]	@ (8000c7c <HAL_MspInit+0x4c>)
 8000c5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c5e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c62:	603b      	str	r3, [r7, #0]
 8000c64:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000c66:	2200      	movs	r2, #0
 8000c68:	210f      	movs	r1, #15
 8000c6a:	f06f 0001 	mvn.w	r0, #1
 8000c6e:	f000 fba9 	bl	80013c4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c72:	bf00      	nop
 8000c74:	3708      	adds	r7, #8
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	40023800 	.word	0x40023800

08000c80 <HAL_ETH_MspInit>:
  * This function configures the hardware resources used in this example
  * @param heth: ETH handle pointer
  * @retval None
  */
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b08e      	sub	sp, #56	@ 0x38
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c88:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	601a      	str	r2, [r3, #0]
 8000c90:	605a      	str	r2, [r3, #4]
 8000c92:	609a      	str	r2, [r3, #8]
 8000c94:	60da      	str	r2, [r3, #12]
 8000c96:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	4a4e      	ldr	r2, [pc, #312]	@ (8000dd8 <HAL_ETH_MspInit+0x158>)
 8000c9e:	4293      	cmp	r3, r2
 8000ca0:	f040 8096 	bne.w	8000dd0 <HAL_ETH_MspInit+0x150>
  {
    /* USER CODE BEGIN ETH_MspInit 0 */

    /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000ca4:	4b4d      	ldr	r3, [pc, #308]	@ (8000ddc <HAL_ETH_MspInit+0x15c>)
 8000ca6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ca8:	4a4c      	ldr	r2, [pc, #304]	@ (8000ddc <HAL_ETH_MspInit+0x15c>)
 8000caa:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000cae:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cb0:	4b4a      	ldr	r3, [pc, #296]	@ (8000ddc <HAL_ETH_MspInit+0x15c>)
 8000cb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cb4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000cb8:	623b      	str	r3, [r7, #32]
 8000cba:	6a3b      	ldr	r3, [r7, #32]
 8000cbc:	4b47      	ldr	r3, [pc, #284]	@ (8000ddc <HAL_ETH_MspInit+0x15c>)
 8000cbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cc0:	4a46      	ldr	r2, [pc, #280]	@ (8000ddc <HAL_ETH_MspInit+0x15c>)
 8000cc2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000cc6:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cc8:	4b44      	ldr	r3, [pc, #272]	@ (8000ddc <HAL_ETH_MspInit+0x15c>)
 8000cca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ccc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000cd0:	61fb      	str	r3, [r7, #28]
 8000cd2:	69fb      	ldr	r3, [r7, #28]
 8000cd4:	4b41      	ldr	r3, [pc, #260]	@ (8000ddc <HAL_ETH_MspInit+0x15c>)
 8000cd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cd8:	4a40      	ldr	r2, [pc, #256]	@ (8000ddc <HAL_ETH_MspInit+0x15c>)
 8000cda:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8000cde:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ce0:	4b3e      	ldr	r3, [pc, #248]	@ (8000ddc <HAL_ETH_MspInit+0x15c>)
 8000ce2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ce4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000ce8:	61bb      	str	r3, [r7, #24]
 8000cea:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cec:	4b3b      	ldr	r3, [pc, #236]	@ (8000ddc <HAL_ETH_MspInit+0x15c>)
 8000cee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cf0:	4a3a      	ldr	r2, [pc, #232]	@ (8000ddc <HAL_ETH_MspInit+0x15c>)
 8000cf2:	f043 0304 	orr.w	r3, r3, #4
 8000cf6:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cf8:	4b38      	ldr	r3, [pc, #224]	@ (8000ddc <HAL_ETH_MspInit+0x15c>)
 8000cfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cfc:	f003 0304 	and.w	r3, r3, #4
 8000d00:	617b      	str	r3, [r7, #20]
 8000d02:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d04:	4b35      	ldr	r3, [pc, #212]	@ (8000ddc <HAL_ETH_MspInit+0x15c>)
 8000d06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d08:	4a34      	ldr	r2, [pc, #208]	@ (8000ddc <HAL_ETH_MspInit+0x15c>)
 8000d0a:	f043 0301 	orr.w	r3, r3, #1
 8000d0e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d10:	4b32      	ldr	r3, [pc, #200]	@ (8000ddc <HAL_ETH_MspInit+0x15c>)
 8000d12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d14:	f003 0301 	and.w	r3, r3, #1
 8000d18:	613b      	str	r3, [r7, #16]
 8000d1a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d1c:	4b2f      	ldr	r3, [pc, #188]	@ (8000ddc <HAL_ETH_MspInit+0x15c>)
 8000d1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d20:	4a2e      	ldr	r2, [pc, #184]	@ (8000ddc <HAL_ETH_MspInit+0x15c>)
 8000d22:	f043 0302 	orr.w	r3, r3, #2
 8000d26:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d28:	4b2c      	ldr	r3, [pc, #176]	@ (8000ddc <HAL_ETH_MspInit+0x15c>)
 8000d2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d2c:	f003 0302 	and.w	r3, r3, #2
 8000d30:	60fb      	str	r3, [r7, #12]
 8000d32:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d34:	4b29      	ldr	r3, [pc, #164]	@ (8000ddc <HAL_ETH_MspInit+0x15c>)
 8000d36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d38:	4a28      	ldr	r2, [pc, #160]	@ (8000ddc <HAL_ETH_MspInit+0x15c>)
 8000d3a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000d3e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d40:	4b26      	ldr	r3, [pc, #152]	@ (8000ddc <HAL_ETH_MspInit+0x15c>)
 8000d42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000d48:	60bb      	str	r3, [r7, #8]
 8000d4a:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000d4c:	2332      	movs	r3, #50	@ 0x32
 8000d4e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d50:	2302      	movs	r3, #2
 8000d52:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d54:	2300      	movs	r3, #0
 8000d56:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d58:	2303      	movs	r3, #3
 8000d5a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d5c:	230b      	movs	r3, #11
 8000d5e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d60:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d64:	4619      	mov	r1, r3
 8000d66:	481e      	ldr	r0, [pc, #120]	@ (8000de0 <HAL_ETH_MspInit+0x160>)
 8000d68:	f000 fea4 	bl	8001ab4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000d6c:	2386      	movs	r3, #134	@ 0x86
 8000d6e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d70:	2302      	movs	r3, #2
 8000d72:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d74:	2300      	movs	r3, #0
 8000d76:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d78:	2303      	movs	r3, #3
 8000d7a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d7c:	230b      	movs	r3, #11
 8000d7e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d80:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d84:	4619      	mov	r1, r3
 8000d86:	4817      	ldr	r0, [pc, #92]	@ (8000de4 <HAL_ETH_MspInit+0x164>)
 8000d88:	f000 fe94 	bl	8001ab4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000d8c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d90:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d92:	2302      	movs	r3, #2
 8000d94:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d96:	2300      	movs	r3, #0
 8000d98:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d9a:	2303      	movs	r3, #3
 8000d9c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d9e:	230b      	movs	r3, #11
 8000da0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000da2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000da6:	4619      	mov	r1, r3
 8000da8:	480f      	ldr	r0, [pc, #60]	@ (8000de8 <HAL_ETH_MspInit+0x168>)
 8000daa:	f000 fe83 	bl	8001ab4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000dae:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000db2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db4:	2302      	movs	r3, #2
 8000db6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db8:	2300      	movs	r3, #0
 8000dba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dbc:	2303      	movs	r3, #3
 8000dbe:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000dc0:	230b      	movs	r3, #11
 8000dc2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000dc4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000dc8:	4619      	mov	r1, r3
 8000dca:	4808      	ldr	r0, [pc, #32]	@ (8000dec <HAL_ETH_MspInit+0x16c>)
 8000dcc:	f000 fe72 	bl	8001ab4 <HAL_GPIO_Init>

    /* USER CODE END ETH_MspInit 1 */

  }

}
 8000dd0:	bf00      	nop
 8000dd2:	3738      	adds	r7, #56	@ 0x38
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	40028000 	.word	0x40028000
 8000ddc:	40023800 	.word	0x40023800
 8000de0:	40020800 	.word	0x40020800
 8000de4:	40020000 	.word	0x40020000
 8000de8:	40020400 	.word	0x40020400
 8000dec:	40021800 	.word	0x40021800

08000df0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b0ae      	sub	sp, #184	@ 0xb8
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df8:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	601a      	str	r2, [r3, #0]
 8000e00:	605a      	str	r2, [r3, #4]
 8000e02:	609a      	str	r2, [r3, #8]
 8000e04:	60da      	str	r2, [r3, #12]
 8000e06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e08:	f107 0314 	add.w	r3, r7, #20
 8000e0c:	2290      	movs	r2, #144	@ 0x90
 8000e0e:	2100      	movs	r1, #0
 8000e10:	4618      	mov	r0, r3
 8000e12:	f007 fa7d 	bl	8008310 <memset>
  if(huart->Instance==USART3)
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	4a22      	ldr	r2, [pc, #136]	@ (8000ea4 <HAL_UART_MspInit+0xb4>)
 8000e1c:	4293      	cmp	r3, r2
 8000e1e:	d13c      	bne.n	8000e9a <HAL_UART_MspInit+0xaa>

    /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000e20:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000e24:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000e26:	2300      	movs	r3, #0
 8000e28:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e2a:	f107 0314 	add.w	r3, r7, #20
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f001 fea6 	bl	8002b80 <HAL_RCCEx_PeriphCLKConfig>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d001      	beq.n	8000e3e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000e3a:	f7ff fef3 	bl	8000c24 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e3e:	4b1a      	ldr	r3, [pc, #104]	@ (8000ea8 <HAL_UART_MspInit+0xb8>)
 8000e40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e42:	4a19      	ldr	r2, [pc, #100]	@ (8000ea8 <HAL_UART_MspInit+0xb8>)
 8000e44:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000e48:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e4a:	4b17      	ldr	r3, [pc, #92]	@ (8000ea8 <HAL_UART_MspInit+0xb8>)
 8000e4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e4e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000e52:	613b      	str	r3, [r7, #16]
 8000e54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e56:	4b14      	ldr	r3, [pc, #80]	@ (8000ea8 <HAL_UART_MspInit+0xb8>)
 8000e58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e5a:	4a13      	ldr	r2, [pc, #76]	@ (8000ea8 <HAL_UART_MspInit+0xb8>)
 8000e5c:	f043 0308 	orr.w	r3, r3, #8
 8000e60:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e62:	4b11      	ldr	r3, [pc, #68]	@ (8000ea8 <HAL_UART_MspInit+0xb8>)
 8000e64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e66:	f003 0308 	and.w	r3, r3, #8
 8000e6a:	60fb      	str	r3, [r7, #12]
 8000e6c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000e6e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000e72:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e76:	2302      	movs	r3, #2
 8000e78:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e82:	2303      	movs	r3, #3
 8000e84:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e88:	2307      	movs	r3, #7
 8000e8a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e8e:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000e92:	4619      	mov	r1, r3
 8000e94:	4805      	ldr	r0, [pc, #20]	@ (8000eac <HAL_UART_MspInit+0xbc>)
 8000e96:	f000 fe0d 	bl	8001ab4 <HAL_GPIO_Init>

    /* USER CODE END USART3_MspInit 1 */

  }

}
 8000e9a:	bf00      	nop
 8000e9c:	37b8      	adds	r7, #184	@ 0xb8
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	40004800 	.word	0x40004800
 8000ea8:	40023800 	.word	0x40023800
 8000eac:	40020c00 	.word	0x40020c00

08000eb0 <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b0ae      	sub	sp, #184	@ 0xb8
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb8:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	601a      	str	r2, [r3, #0]
 8000ec0:	605a      	str	r2, [r3, #4]
 8000ec2:	609a      	str	r2, [r3, #8]
 8000ec4:	60da      	str	r2, [r3, #12]
 8000ec6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ec8:	f107 0314 	add.w	r3, r7, #20
 8000ecc:	2290      	movs	r2, #144	@ 0x90
 8000ece:	2100      	movs	r1, #0
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f007 fa1d 	bl	8008310 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000ede:	d159      	bne.n	8000f94 <HAL_PCD_MspInit+0xe4>

    /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000ee0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8000ee4:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000eec:	f107 0314 	add.w	r3, r7, #20
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f001 fe45 	bl	8002b80 <HAL_RCCEx_PeriphCLKConfig>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d001      	beq.n	8000f00 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8000efc:	f7ff fe92 	bl	8000c24 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f00:	4b26      	ldr	r3, [pc, #152]	@ (8000f9c <HAL_PCD_MspInit+0xec>)
 8000f02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f04:	4a25      	ldr	r2, [pc, #148]	@ (8000f9c <HAL_PCD_MspInit+0xec>)
 8000f06:	f043 0301 	orr.w	r3, r3, #1
 8000f0a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f0c:	4b23      	ldr	r3, [pc, #140]	@ (8000f9c <HAL_PCD_MspInit+0xec>)
 8000f0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f10:	f003 0301 	and.w	r3, r3, #1
 8000f14:	613b      	str	r3, [r7, #16]
 8000f16:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000f18:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8000f1c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f20:	2302      	movs	r3, #2
 8000f22:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f26:	2300      	movs	r3, #0
 8000f28:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f2c:	2303      	movs	r3, #3
 8000f2e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000f32:	230a      	movs	r3, #10
 8000f34:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f38:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	4818      	ldr	r0, [pc, #96]	@ (8000fa0 <HAL_PCD_MspInit+0xf0>)
 8000f40:	f000 fdb8 	bl	8001ab4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000f44:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000f48:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f52:	2300      	movs	r3, #0
 8000f54:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000f58:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	4810      	ldr	r0, [pc, #64]	@ (8000fa0 <HAL_PCD_MspInit+0xf0>)
 8000f60:	f000 fda8 	bl	8001ab4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000f64:	4b0d      	ldr	r3, [pc, #52]	@ (8000f9c <HAL_PCD_MspInit+0xec>)
 8000f66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f68:	4a0c      	ldr	r2, [pc, #48]	@ (8000f9c <HAL_PCD_MspInit+0xec>)
 8000f6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000f6e:	6353      	str	r3, [r2, #52]	@ 0x34
 8000f70:	4b0a      	ldr	r3, [pc, #40]	@ (8000f9c <HAL_PCD_MspInit+0xec>)
 8000f72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f74:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000f78:	60fb      	str	r3, [r7, #12]
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	4b07      	ldr	r3, [pc, #28]	@ (8000f9c <HAL_PCD_MspInit+0xec>)
 8000f7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f80:	4a06      	ldr	r2, [pc, #24]	@ (8000f9c <HAL_PCD_MspInit+0xec>)
 8000f82:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f86:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f88:	4b04      	ldr	r3, [pc, #16]	@ (8000f9c <HAL_PCD_MspInit+0xec>)
 8000f8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f8c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f90:	60bb      	str	r3, [r7, #8]
 8000f92:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8000f94:	bf00      	nop
 8000f96:	37b8      	adds	r7, #184	@ 0xb8
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	40023800 	.word	0x40023800
 8000fa0:	40020000 	.word	0x40020000

08000fa4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b08c      	sub	sp, #48	@ 0x30
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000fac:	2300      	movs	r3, #0
 8000fae:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000fb4:	4b2e      	ldr	r3, [pc, #184]	@ (8001070 <HAL_InitTick+0xcc>)
 8000fb6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fb8:	4a2d      	ldr	r2, [pc, #180]	@ (8001070 <HAL_InitTick+0xcc>)
 8000fba:	f043 0301 	orr.w	r3, r3, #1
 8000fbe:	6453      	str	r3, [r2, #68]	@ 0x44
 8000fc0:	4b2b      	ldr	r3, [pc, #172]	@ (8001070 <HAL_InitTick+0xcc>)
 8000fc2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fc4:	f003 0301 	and.w	r3, r3, #1
 8000fc8:	60bb      	str	r3, [r7, #8]
 8000fca:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000fcc:	f107 020c 	add.w	r2, r7, #12
 8000fd0:	f107 0310 	add.w	r3, r7, #16
 8000fd4:	4611      	mov	r1, r2
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f001 fda0 	bl	8002b1c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000fdc:	f001 fd8a 	bl	8002af4 <HAL_RCC_GetPCLK2Freq>
 8000fe0:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000fe2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000fe4:	4a23      	ldr	r2, [pc, #140]	@ (8001074 <HAL_InitTick+0xd0>)
 8000fe6:	fba2 2303 	umull	r2, r3, r2, r3
 8000fea:	0c9b      	lsrs	r3, r3, #18
 8000fec:	3b01      	subs	r3, #1
 8000fee:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000ff0:	4b21      	ldr	r3, [pc, #132]	@ (8001078 <HAL_InitTick+0xd4>)
 8000ff2:	4a22      	ldr	r2, [pc, #136]	@ (800107c <HAL_InitTick+0xd8>)
 8000ff4:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000ff6:	4b20      	ldr	r3, [pc, #128]	@ (8001078 <HAL_InitTick+0xd4>)
 8000ff8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000ffc:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000ffe:	4a1e      	ldr	r2, [pc, #120]	@ (8001078 <HAL_InitTick+0xd4>)
 8001000:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001002:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001004:	4b1c      	ldr	r3, [pc, #112]	@ (8001078 <HAL_InitTick+0xd4>)
 8001006:	2200      	movs	r2, #0
 8001008:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800100a:	4b1b      	ldr	r3, [pc, #108]	@ (8001078 <HAL_InitTick+0xd4>)
 800100c:	2200      	movs	r2, #0
 800100e:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001010:	4b19      	ldr	r3, [pc, #100]	@ (8001078 <HAL_InitTick+0xd4>)
 8001012:	2200      	movs	r2, #0
 8001014:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001016:	4818      	ldr	r0, [pc, #96]	@ (8001078 <HAL_InitTick+0xd4>)
 8001018:	f002 f9da 	bl	80033d0 <HAL_TIM_Base_Init>
 800101c:	4603      	mov	r3, r0
 800101e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8001022:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001026:	2b00      	cmp	r3, #0
 8001028:	d11b      	bne.n	8001062 <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 800102a:	4813      	ldr	r0, [pc, #76]	@ (8001078 <HAL_InitTick+0xd4>)
 800102c:	f002 fa32 	bl	8003494 <HAL_TIM_Base_Start_IT>
 8001030:	4603      	mov	r3, r0
 8001032:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001036:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800103a:	2b00      	cmp	r3, #0
 800103c:	d111      	bne.n	8001062 <HAL_InitTick+0xbe>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800103e:	2019      	movs	r0, #25
 8001040:	f000 f9dc 	bl	80013fc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	2b0f      	cmp	r3, #15
 8001048:	d808      	bhi.n	800105c <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 800104a:	2200      	movs	r2, #0
 800104c:	6879      	ldr	r1, [r7, #4]
 800104e:	2019      	movs	r0, #25
 8001050:	f000 f9b8 	bl	80013c4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001054:	4a0a      	ldr	r2, [pc, #40]	@ (8001080 <HAL_InitTick+0xdc>)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	6013      	str	r3, [r2, #0]
 800105a:	e002      	b.n	8001062 <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 800105c:	2301      	movs	r3, #1
 800105e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001062:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001066:	4618      	mov	r0, r3
 8001068:	3730      	adds	r7, #48	@ 0x30
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	40023800 	.word	0x40023800
 8001074:	431bde83 	.word	0x431bde83
 8001078:	20000828 	.word	0x20000828
 800107c:	40010000 	.word	0x40010000
 8001080:	20000004 	.word	0x20000004

08001084 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001088:	bf00      	nop
 800108a:	e7fd      	b.n	8001088 <NMI_Handler+0x4>

0800108c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001090:	bf00      	nop
 8001092:	e7fd      	b.n	8001090 <HardFault_Handler+0x4>

08001094 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001098:	bf00      	nop
 800109a:	e7fd      	b.n	8001098 <MemManage_Handler+0x4>

0800109c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010a0:	bf00      	nop
 80010a2:	e7fd      	b.n	80010a0 <BusFault_Handler+0x4>

080010a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010a8:	bf00      	nop
 80010aa:	e7fd      	b.n	80010a8 <UsageFault_Handler+0x4>

080010ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010b0:	bf00      	nop
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr
	...

080010bc <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80010c0:	4802      	ldr	r0, [pc, #8]	@ (80010cc <TIM1_UP_TIM10_IRQHandler+0x10>)
 80010c2:	f002 fa5f 	bl	8003584 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80010c6:	bf00      	nop
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	20000828 	.word	0x20000828

080010d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b086      	sub	sp, #24
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010d8:	4a14      	ldr	r2, [pc, #80]	@ (800112c <_sbrk+0x5c>)
 80010da:	4b15      	ldr	r3, [pc, #84]	@ (8001130 <_sbrk+0x60>)
 80010dc:	1ad3      	subs	r3, r2, r3
 80010de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010e4:	4b13      	ldr	r3, [pc, #76]	@ (8001134 <_sbrk+0x64>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d102      	bne.n	80010f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010ec:	4b11      	ldr	r3, [pc, #68]	@ (8001134 <_sbrk+0x64>)
 80010ee:	4a12      	ldr	r2, [pc, #72]	@ (8001138 <_sbrk+0x68>)
 80010f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010f2:	4b10      	ldr	r3, [pc, #64]	@ (8001134 <_sbrk+0x64>)
 80010f4:	681a      	ldr	r2, [r3, #0]
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	4413      	add	r3, r2
 80010fa:	693a      	ldr	r2, [r7, #16]
 80010fc:	429a      	cmp	r2, r3
 80010fe:	d207      	bcs.n	8001110 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001100:	f007 f96c 	bl	80083dc <__errno>
 8001104:	4603      	mov	r3, r0
 8001106:	220c      	movs	r2, #12
 8001108:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800110a:	f04f 33ff 	mov.w	r3, #4294967295
 800110e:	e009      	b.n	8001124 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001110:	4b08      	ldr	r3, [pc, #32]	@ (8001134 <_sbrk+0x64>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001116:	4b07      	ldr	r3, [pc, #28]	@ (8001134 <_sbrk+0x64>)
 8001118:	681a      	ldr	r2, [r3, #0]
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	4413      	add	r3, r2
 800111e:	4a05      	ldr	r2, [pc, #20]	@ (8001134 <_sbrk+0x64>)
 8001120:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001122:	68fb      	ldr	r3, [r7, #12]
}
 8001124:	4618      	mov	r0, r3
 8001126:	3718      	adds	r7, #24
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}
 800112c:	20080000 	.word	0x20080000
 8001130:	00000400 	.word	0x00000400
 8001134:	20000874 	.word	0x20000874
 8001138:	200053a8 	.word	0x200053a8

0800113c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001140:	4b06      	ldr	r3, [pc, #24]	@ (800115c <SystemInit+0x20>)
 8001142:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001146:	4a05      	ldr	r2, [pc, #20]	@ (800115c <SystemInit+0x20>)
 8001148:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800114c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001150:	bf00      	nop
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop
 800115c:	e000ed00 	.word	0xe000ed00

08001160 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001160:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001198 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001164:	f7ff ffea 	bl	800113c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001168:	480c      	ldr	r0, [pc, #48]	@ (800119c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800116a:	490d      	ldr	r1, [pc, #52]	@ (80011a0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800116c:	4a0d      	ldr	r2, [pc, #52]	@ (80011a4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800116e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001170:	e002      	b.n	8001178 <LoopCopyDataInit>

08001172 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001172:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001174:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001176:	3304      	adds	r3, #4

08001178 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001178:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800117a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800117c:	d3f9      	bcc.n	8001172 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800117e:	4a0a      	ldr	r2, [pc, #40]	@ (80011a8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001180:	4c0a      	ldr	r4, [pc, #40]	@ (80011ac <LoopFillZerobss+0x22>)
  movs r3, #0
 8001182:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001184:	e001      	b.n	800118a <LoopFillZerobss>

08001186 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001186:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001188:	3204      	adds	r2, #4

0800118a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800118a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800118c:	d3fb      	bcc.n	8001186 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800118e:	f007 f92b 	bl	80083e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001192:	f7ff fa43 	bl	800061c <main>
  bx  lr    
 8001196:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001198:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 800119c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011a0:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80011a4:	08008e9c 	.word	0x08008e9c
  ldr r2, =_sbss
 80011a8:	200001a0 	.word	0x200001a0
  ldr r4, =_ebss
 80011ac:	200053a4 	.word	0x200053a4

080011b0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011b0:	e7fe      	b.n	80011b0 <ADC_IRQHandler>

080011b2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011b2:	b580      	push	{r7, lr}
 80011b4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011b6:	2003      	movs	r0, #3
 80011b8:	f000 f8f9 	bl	80013ae <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011bc:	200f      	movs	r0, #15
 80011be:	f7ff fef1 	bl	8000fa4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011c2:	f7ff fd35 	bl	8000c30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011c6:	2300      	movs	r3, #0
}
 80011c8:	4618      	mov	r0, r3
 80011ca:	bd80      	pop	{r7, pc}

080011cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011d0:	4b06      	ldr	r3, [pc, #24]	@ (80011ec <HAL_IncTick+0x20>)
 80011d2:	781b      	ldrb	r3, [r3, #0]
 80011d4:	461a      	mov	r2, r3
 80011d6:	4b06      	ldr	r3, [pc, #24]	@ (80011f0 <HAL_IncTick+0x24>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4413      	add	r3, r2
 80011dc:	4a04      	ldr	r2, [pc, #16]	@ (80011f0 <HAL_IncTick+0x24>)
 80011de:	6013      	str	r3, [r2, #0]
}
 80011e0:	bf00      	nop
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr
 80011ea:	bf00      	nop
 80011ec:	20000008 	.word	0x20000008
 80011f0:	20000878 	.word	0x20000878

080011f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
  return uwTick;
 80011f8:	4b03      	ldr	r3, [pc, #12]	@ (8001208 <HAL_GetTick+0x14>)
 80011fa:	681b      	ldr	r3, [r3, #0]
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr
 8001206:	bf00      	nop
 8001208:	20000878 	.word	0x20000878

0800120c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b084      	sub	sp, #16
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001214:	f7ff ffee 	bl	80011f4 <HAL_GetTick>
 8001218:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001224:	d005      	beq.n	8001232 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001226:	4b0a      	ldr	r3, [pc, #40]	@ (8001250 <HAL_Delay+0x44>)
 8001228:	781b      	ldrb	r3, [r3, #0]
 800122a:	461a      	mov	r2, r3
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	4413      	add	r3, r2
 8001230:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001232:	bf00      	nop
 8001234:	f7ff ffde 	bl	80011f4 <HAL_GetTick>
 8001238:	4602      	mov	r2, r0
 800123a:	68bb      	ldr	r3, [r7, #8]
 800123c:	1ad3      	subs	r3, r2, r3
 800123e:	68fa      	ldr	r2, [r7, #12]
 8001240:	429a      	cmp	r2, r3
 8001242:	d8f7      	bhi.n	8001234 <HAL_Delay+0x28>
  {
  }
}
 8001244:	bf00      	nop
 8001246:	bf00      	nop
 8001248:	3710      	adds	r7, #16
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	20000008 	.word	0x20000008

08001254 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001254:	b480      	push	{r7}
 8001256:	b085      	sub	sp, #20
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	f003 0307 	and.w	r3, r3, #7
 8001262:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001264:	4b0b      	ldr	r3, [pc, #44]	@ (8001294 <__NVIC_SetPriorityGrouping+0x40>)
 8001266:	68db      	ldr	r3, [r3, #12]
 8001268:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800126a:	68ba      	ldr	r2, [r7, #8]
 800126c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001270:	4013      	ands	r3, r2
 8001272:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001278:	68bb      	ldr	r3, [r7, #8]
 800127a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800127c:	4b06      	ldr	r3, [pc, #24]	@ (8001298 <__NVIC_SetPriorityGrouping+0x44>)
 800127e:	4313      	orrs	r3, r2
 8001280:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001282:	4a04      	ldr	r2, [pc, #16]	@ (8001294 <__NVIC_SetPriorityGrouping+0x40>)
 8001284:	68bb      	ldr	r3, [r7, #8]
 8001286:	60d3      	str	r3, [r2, #12]
}
 8001288:	bf00      	nop
 800128a:	3714      	adds	r7, #20
 800128c:	46bd      	mov	sp, r7
 800128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001292:	4770      	bx	lr
 8001294:	e000ed00 	.word	0xe000ed00
 8001298:	05fa0000 	.word	0x05fa0000

0800129c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012a0:	4b04      	ldr	r3, [pc, #16]	@ (80012b4 <__NVIC_GetPriorityGrouping+0x18>)
 80012a2:	68db      	ldr	r3, [r3, #12]
 80012a4:	0a1b      	lsrs	r3, r3, #8
 80012a6:	f003 0307 	and.w	r3, r3, #7
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	46bd      	mov	sp, r7
 80012ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b2:	4770      	bx	lr
 80012b4:	e000ed00 	.word	0xe000ed00

080012b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b083      	sub	sp, #12
 80012bc:	af00      	add	r7, sp, #0
 80012be:	4603      	mov	r3, r0
 80012c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	db0b      	blt.n	80012e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012ca:	79fb      	ldrb	r3, [r7, #7]
 80012cc:	f003 021f 	and.w	r2, r3, #31
 80012d0:	4907      	ldr	r1, [pc, #28]	@ (80012f0 <__NVIC_EnableIRQ+0x38>)
 80012d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012d6:	095b      	lsrs	r3, r3, #5
 80012d8:	2001      	movs	r0, #1
 80012da:	fa00 f202 	lsl.w	r2, r0, r2
 80012de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80012e2:	bf00      	nop
 80012e4:	370c      	adds	r7, #12
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr
 80012ee:	bf00      	nop
 80012f0:	e000e100 	.word	0xe000e100

080012f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b083      	sub	sp, #12
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	4603      	mov	r3, r0
 80012fc:	6039      	str	r1, [r7, #0]
 80012fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001300:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001304:	2b00      	cmp	r3, #0
 8001306:	db0a      	blt.n	800131e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	b2da      	uxtb	r2, r3
 800130c:	490c      	ldr	r1, [pc, #48]	@ (8001340 <__NVIC_SetPriority+0x4c>)
 800130e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001312:	0112      	lsls	r2, r2, #4
 8001314:	b2d2      	uxtb	r2, r2
 8001316:	440b      	add	r3, r1
 8001318:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800131c:	e00a      	b.n	8001334 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	b2da      	uxtb	r2, r3
 8001322:	4908      	ldr	r1, [pc, #32]	@ (8001344 <__NVIC_SetPriority+0x50>)
 8001324:	79fb      	ldrb	r3, [r7, #7]
 8001326:	f003 030f 	and.w	r3, r3, #15
 800132a:	3b04      	subs	r3, #4
 800132c:	0112      	lsls	r2, r2, #4
 800132e:	b2d2      	uxtb	r2, r2
 8001330:	440b      	add	r3, r1
 8001332:	761a      	strb	r2, [r3, #24]
}
 8001334:	bf00      	nop
 8001336:	370c      	adds	r7, #12
 8001338:	46bd      	mov	sp, r7
 800133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133e:	4770      	bx	lr
 8001340:	e000e100 	.word	0xe000e100
 8001344:	e000ed00 	.word	0xe000ed00

08001348 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001348:	b480      	push	{r7}
 800134a:	b089      	sub	sp, #36	@ 0x24
 800134c:	af00      	add	r7, sp, #0
 800134e:	60f8      	str	r0, [r7, #12]
 8001350:	60b9      	str	r1, [r7, #8]
 8001352:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	f003 0307 	and.w	r3, r3, #7
 800135a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800135c:	69fb      	ldr	r3, [r7, #28]
 800135e:	f1c3 0307 	rsb	r3, r3, #7
 8001362:	2b04      	cmp	r3, #4
 8001364:	bf28      	it	cs
 8001366:	2304      	movcs	r3, #4
 8001368:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800136a:	69fb      	ldr	r3, [r7, #28]
 800136c:	3304      	adds	r3, #4
 800136e:	2b06      	cmp	r3, #6
 8001370:	d902      	bls.n	8001378 <NVIC_EncodePriority+0x30>
 8001372:	69fb      	ldr	r3, [r7, #28]
 8001374:	3b03      	subs	r3, #3
 8001376:	e000      	b.n	800137a <NVIC_EncodePriority+0x32>
 8001378:	2300      	movs	r3, #0
 800137a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800137c:	f04f 32ff 	mov.w	r2, #4294967295
 8001380:	69bb      	ldr	r3, [r7, #24]
 8001382:	fa02 f303 	lsl.w	r3, r2, r3
 8001386:	43da      	mvns	r2, r3
 8001388:	68bb      	ldr	r3, [r7, #8]
 800138a:	401a      	ands	r2, r3
 800138c:	697b      	ldr	r3, [r7, #20]
 800138e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001390:	f04f 31ff 	mov.w	r1, #4294967295
 8001394:	697b      	ldr	r3, [r7, #20]
 8001396:	fa01 f303 	lsl.w	r3, r1, r3
 800139a:	43d9      	mvns	r1, r3
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013a0:	4313      	orrs	r3, r2
         );
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	3724      	adds	r7, #36	@ 0x24
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr

080013ae <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013ae:	b580      	push	{r7, lr}
 80013b0:	b082      	sub	sp, #8
 80013b2:	af00      	add	r7, sp, #0
 80013b4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013b6:	6878      	ldr	r0, [r7, #4]
 80013b8:	f7ff ff4c 	bl	8001254 <__NVIC_SetPriorityGrouping>
}
 80013bc:	bf00      	nop
 80013be:	3708      	adds	r7, #8
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}

080013c4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b086      	sub	sp, #24
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	4603      	mov	r3, r0
 80013cc:	60b9      	str	r1, [r7, #8]
 80013ce:	607a      	str	r2, [r7, #4]
 80013d0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80013d2:	2300      	movs	r3, #0
 80013d4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013d6:	f7ff ff61 	bl	800129c <__NVIC_GetPriorityGrouping>
 80013da:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013dc:	687a      	ldr	r2, [r7, #4]
 80013de:	68b9      	ldr	r1, [r7, #8]
 80013e0:	6978      	ldr	r0, [r7, #20]
 80013e2:	f7ff ffb1 	bl	8001348 <NVIC_EncodePriority>
 80013e6:	4602      	mov	r2, r0
 80013e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013ec:	4611      	mov	r1, r2
 80013ee:	4618      	mov	r0, r3
 80013f0:	f7ff ff80 	bl	80012f4 <__NVIC_SetPriority>
}
 80013f4:	bf00      	nop
 80013f6:	3718      	adds	r7, #24
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}

080013fc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0
 8001402:	4603      	mov	r3, r0
 8001404:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001406:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800140a:	4618      	mov	r0, r3
 800140c:	f7ff ff54 	bl	80012b8 <__NVIC_EnableIRQ>
}
 8001410:	bf00      	nop
 8001412:	3708      	adds	r7, #8
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}

08001418 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b084      	sub	sp, #16
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d101      	bne.n	800142a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001426:	2301      	movs	r3, #1
 8001428:	e086      	b.n	8001538 <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001430:	2b00      	cmp	r3, #0
 8001432:	d106      	bne.n	8001442 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2220      	movs	r2, #32
 8001438:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800143c:	6878      	ldr	r0, [r7, #4]
 800143e:	f7ff fc1f 	bl	8000c80 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001442:	4b3f      	ldr	r3, [pc, #252]	@ (8001540 <HAL_ETH_Init+0x128>)
 8001444:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001446:	4a3e      	ldr	r2, [pc, #248]	@ (8001540 <HAL_ETH_Init+0x128>)
 8001448:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800144c:	6453      	str	r3, [r2, #68]	@ 0x44
 800144e:	4b3c      	ldr	r3, [pc, #240]	@ (8001540 <HAL_ETH_Init+0x128>)
 8001450:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001452:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001456:	60bb      	str	r3, [r7, #8]
 8001458:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800145a:	4b3a      	ldr	r3, [pc, #232]	@ (8001544 <HAL_ETH_Init+0x12c>)
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	4a39      	ldr	r2, [pc, #228]	@ (8001544 <HAL_ETH_Init+0x12c>)
 8001460:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001464:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001466:	4b37      	ldr	r3, [pc, #220]	@ (8001544 <HAL_ETH_Init+0x12c>)
 8001468:	685a      	ldr	r2, [r3, #4]
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	689b      	ldr	r3, [r3, #8]
 800146e:	4935      	ldr	r1, [pc, #212]	@ (8001544 <HAL_ETH_Init+0x12c>)
 8001470:	4313      	orrs	r3, r2
 8001472:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001474:	4b33      	ldr	r3, [pc, #204]	@ (8001544 <HAL_ETH_Init+0x12c>)
 8001476:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	687a      	ldr	r2, [r7, #4]
 8001484:	6812      	ldr	r2, [r2, #0]
 8001486:	f043 0301 	orr.w	r3, r3, #1
 800148a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800148e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001490:	f7ff feb0 	bl	80011f4 <HAL_GetTick>
 8001494:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001496:	e011      	b.n	80014bc <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001498:	f7ff feac 	bl	80011f4 <HAL_GetTick>
 800149c:	4602      	mov	r2, r0
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	1ad3      	subs	r3, r2, r3
 80014a2:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80014a6:	d909      	bls.n	80014bc <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	2204      	movs	r2, #4
 80014ac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	22e0      	movs	r2, #224	@ 0xe0
 80014b4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 80014b8:	2301      	movs	r3, #1
 80014ba:	e03d      	b.n	8001538 <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f003 0301 	and.w	r3, r3, #1
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d1e4      	bne.n	8001498 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80014ce:	6878      	ldr	r0, [r7, #4]
 80014d0:	f000 f97a 	bl	80017c8 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80014d4:	6878      	ldr	r0, [r7, #4]
 80014d6:	f000 fa25 	bl	8001924 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80014da:	6878      	ldr	r0, [r7, #4]
 80014dc:	f000 fa7b 	bl	80019d6 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	461a      	mov	r2, r3
 80014e6:	2100      	movs	r1, #0
 80014e8:	6878      	ldr	r0, [r7, #4]
 80014ea:	f000 f9e3 	bl	80018b4 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 80014fc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681a      	ldr	r2, [r3, #0]
 800150a:	4b0f      	ldr	r3, [pc, #60]	@ (8001548 <HAL_ETH_Init+0x130>)
 800150c:	430b      	orrs	r3, r1
 800150e:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 8001522:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2200      	movs	r2, #0
 800152a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	2210      	movs	r2, #16
 8001532:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8001536:	2300      	movs	r3, #0
}
 8001538:	4618      	mov	r0, r3
 800153a:	3710      	adds	r7, #16
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}
 8001540:	40023800 	.word	0x40023800
 8001544:	40013800 	.word	0x40013800
 8001548:	00020060 	.word	0x00020060

0800154c <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b084      	sub	sp, #16
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
 8001554:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800155e:	68fa      	ldr	r2, [r7, #12]
 8001560:	4b53      	ldr	r3, [pc, #332]	@ (80016b0 <ETH_SetMACConfig+0x164>)
 8001562:	4013      	ands	r3, r2
 8001564:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	7b9b      	ldrb	r3, [r3, #14]
 800156a:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800156c:	683a      	ldr	r2, [r7, #0]
 800156e:	7c12      	ldrb	r2, [r2, #16]
 8001570:	2a00      	cmp	r2, #0
 8001572:	d102      	bne.n	800157a <ETH_SetMACConfig+0x2e>
 8001574:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001578:	e000      	b.n	800157c <ETH_SetMACConfig+0x30>
 800157a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 800157c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800157e:	683a      	ldr	r2, [r7, #0]
 8001580:	7c52      	ldrb	r2, [r2, #17]
 8001582:	2a00      	cmp	r2, #0
 8001584:	d102      	bne.n	800158c <ETH_SetMACConfig+0x40>
 8001586:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800158a:	e000      	b.n	800158e <ETH_SetMACConfig+0x42>
 800158c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800158e:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001594:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	7fdb      	ldrb	r3, [r3, #31]
 800159a:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 800159c:	431a      	orrs	r2, r3
                        macconf->Speed |
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80015a2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80015a4:	683a      	ldr	r2, [r7, #0]
 80015a6:	7f92      	ldrb	r2, [r2, #30]
 80015a8:	2a00      	cmp	r2, #0
 80015aa:	d102      	bne.n	80015b2 <ETH_SetMACConfig+0x66>
 80015ac:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80015b0:	e000      	b.n	80015b4 <ETH_SetMACConfig+0x68>
 80015b2:	2200      	movs	r2, #0
                        macconf->Speed |
 80015b4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	7f1b      	ldrb	r3, [r3, #28]
 80015ba:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80015bc:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80015c2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	791b      	ldrb	r3, [r3, #4]
 80015c8:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80015ca:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80015cc:	683a      	ldr	r2, [r7, #0]
 80015ce:	f892 2020 	ldrb.w	r2, [r2, #32]
 80015d2:	2a00      	cmp	r2, #0
 80015d4:	d102      	bne.n	80015dc <ETH_SetMACConfig+0x90>
 80015d6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80015da:	e000      	b.n	80015de <ETH_SetMACConfig+0x92>
 80015dc:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80015de:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	7bdb      	ldrb	r3, [r3, #15]
 80015e4:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80015e6:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80015ec:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80015f4:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80015f6:	4313      	orrs	r3, r2
 80015f8:	68fa      	ldr	r2, [r7, #12]
 80015fa:	4313      	orrs	r3, r2
 80015fc:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	68fa      	ldr	r2, [r7, #12]
 8001604:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800160e:	2001      	movs	r0, #1
 8001610:	f7ff fdfc 	bl	800120c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	68fa      	ldr	r2, [r7, #12]
 800161a:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	699b      	ldr	r3, [r3, #24]
 8001622:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001624:	68fa      	ldr	r2, [r7, #12]
 8001626:	f64f 7341 	movw	r3, #65345	@ 0xff41
 800162a:	4013      	ands	r3, r2
 800162c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001632:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001634:	683a      	ldr	r2, [r7, #0]
 8001636:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 800163a:	2a00      	cmp	r2, #0
 800163c:	d101      	bne.n	8001642 <ETH_SetMACConfig+0xf6>
 800163e:	2280      	movs	r2, #128	@ 0x80
 8001640:	e000      	b.n	8001644 <ETH_SetMACConfig+0xf8>
 8001642:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001644:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800164a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800164c:	683a      	ldr	r2, [r7, #0]
 800164e:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8001652:	2a01      	cmp	r2, #1
 8001654:	d101      	bne.n	800165a <ETH_SetMACConfig+0x10e>
 8001656:	2208      	movs	r2, #8
 8001658:	e000      	b.n	800165c <ETH_SetMACConfig+0x110>
 800165a:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 800165c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800165e:	683a      	ldr	r2, [r7, #0]
 8001660:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8001664:	2a01      	cmp	r2, #1
 8001666:	d101      	bne.n	800166c <ETH_SetMACConfig+0x120>
 8001668:	2204      	movs	r2, #4
 800166a:	e000      	b.n	800166e <ETH_SetMACConfig+0x122>
 800166c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800166e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001670:	683a      	ldr	r2, [r7, #0]
 8001672:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8001676:	2a01      	cmp	r2, #1
 8001678:	d101      	bne.n	800167e <ETH_SetMACConfig+0x132>
 800167a:	2202      	movs	r2, #2
 800167c:	e000      	b.n	8001680 <ETH_SetMACConfig+0x134>
 800167e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001680:	4313      	orrs	r3, r2
 8001682:	68fa      	ldr	r2, [r7, #12]
 8001684:	4313      	orrs	r3, r2
 8001686:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	68fa      	ldr	r2, [r7, #12]
 800168e:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	699b      	ldr	r3, [r3, #24]
 8001696:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001698:	2001      	movs	r0, #1
 800169a:	f7ff fdb7 	bl	800120c <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	68fa      	ldr	r2, [r7, #12]
 80016a4:	619a      	str	r2, [r3, #24]
}
 80016a6:	bf00      	nop
 80016a8:	3710      	adds	r7, #16
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	fd20810f 	.word	0xfd20810f

080016b4 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b084      	sub	sp, #16
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
 80016bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80016c6:	699b      	ldr	r3, [r3, #24]
 80016c8:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80016ca:	68fa      	ldr	r2, [r7, #12]
 80016cc:	4b3d      	ldr	r3, [pc, #244]	@ (80017c4 <ETH_SetDMAConfig+0x110>)
 80016ce:	4013      	ands	r3, r2
 80016d0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	7b1b      	ldrb	r3, [r3, #12]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d102      	bne.n	80016e0 <ETH_SetDMAConfig+0x2c>
 80016da:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80016de:	e000      	b.n	80016e2 <ETH_SetDMAConfig+0x2e>
 80016e0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	7b5b      	ldrb	r3, [r3, #13]
 80016e6:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80016e8:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80016ea:	683a      	ldr	r2, [r7, #0]
 80016ec:	7f52      	ldrb	r2, [r2, #29]
 80016ee:	2a00      	cmp	r2, #0
 80016f0:	d102      	bne.n	80016f8 <ETH_SetDMAConfig+0x44>
 80016f2:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80016f6:	e000      	b.n	80016fa <ETH_SetDMAConfig+0x46>
 80016f8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80016fa:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	7b9b      	ldrb	r3, [r3, #14]
 8001700:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001702:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001708:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	7f1b      	ldrb	r3, [r3, #28]
 800170e:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001710:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	7f9b      	ldrb	r3, [r3, #30]
 8001716:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001718:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800171e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001726:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001728:	4313      	orrs	r3, r2
 800172a:	68fa      	ldr	r2, [r7, #12]
 800172c:	4313      	orrs	r3, r2
 800172e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001738:	461a      	mov	r2, r3
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001746:	699b      	ldr	r3, [r3, #24]
 8001748:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800174a:	2001      	movs	r0, #1
 800174c:	f7ff fd5e 	bl	800120c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001758:	461a      	mov	r2, r3
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	791b      	ldrb	r3, [r3, #4]
 8001762:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001768:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800176e:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001774:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800177c:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800177e:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001784:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001786:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800178c:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800178e:	687a      	ldr	r2, [r7, #4]
 8001790:	6812      	ldr	r2, [r2, #0]
 8001792:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001796:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800179a:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80017a8:	2001      	movs	r0, #1
 80017aa:	f7ff fd2f 	bl	800120c <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80017b6:	461a      	mov	r2, r3
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	6013      	str	r3, [r2, #0]
}
 80017bc:	bf00      	nop
 80017be:	3710      	adds	r7, #16
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	f8de3f23 	.word	0xf8de3f23

080017c8 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b0a6      	sub	sp, #152	@ 0x98
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80017d0:	2301      	movs	r3, #1
 80017d2:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 80017d6:	2301      	movs	r3, #1
 80017d8:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80017dc:	2300      	movs	r3, #0
 80017de:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80017e0:	2300      	movs	r3, #0
 80017e2:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80017e6:	2301      	movs	r3, #1
 80017e8:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80017ec:	2300      	movs	r3, #0
 80017ee:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80017f2:	2301      	movs	r3, #1
 80017f4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 80017f8:	2301      	movs	r3, #1
 80017fa:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80017fe:	2300      	movs	r3, #0
 8001800:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8001804:	2300      	movs	r3, #0
 8001806:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800180a:	2300      	movs	r3, #0
 800180c:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 800180e:	2300      	movs	r3, #0
 8001810:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8001814:	2300      	movs	r3, #0
 8001816:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8001818:	2300      	movs	r3, #0
 800181a:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800181e:	2300      	movs	r3, #0
 8001820:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001824:	2300      	movs	r3, #0
 8001826:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 800182a:	2300      	movs	r3, #0
 800182c:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001830:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001834:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001836:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800183a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800183c:	2300      	movs	r3, #0
 800183e:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001842:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001846:	4619      	mov	r1, r3
 8001848:	6878      	ldr	r0, [r7, #4]
 800184a:	f7ff fe7f 	bl	800154c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 800184e:	2301      	movs	r3, #1
 8001850:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8001852:	2301      	movs	r3, #1
 8001854:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8001856:	2301      	movs	r3, #1
 8001858:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800185c:	2301      	movs	r3, #1
 800185e:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001860:	2300      	movs	r3, #0
 8001862:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8001864:	2300      	movs	r3, #0
 8001866:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 800186a:	2300      	movs	r3, #0
 800186c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001870:	2300      	movs	r3, #0
 8001872:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8001874:	2301      	movs	r3, #1
 8001876:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800187a:	2301      	movs	r3, #1
 800187c:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800187e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001882:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001884:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001888:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800188a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800188e:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8001890:	2301      	movs	r3, #1
 8001892:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8001896:	2300      	movs	r3, #0
 8001898:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800189a:	2300      	movs	r3, #0
 800189c:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800189e:	f107 0308 	add.w	r3, r7, #8
 80018a2:	4619      	mov	r1, r3
 80018a4:	6878      	ldr	r0, [r7, #4]
 80018a6:	f7ff ff05 	bl	80016b4 <ETH_SetDMAConfig>
}
 80018aa:	bf00      	nop
 80018ac:	3798      	adds	r7, #152	@ 0x98
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
	...

080018b4 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b087      	sub	sp, #28
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	60f8      	str	r0, [r7, #12]
 80018bc:	60b9      	str	r1, [r7, #8]
 80018be:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	3305      	adds	r3, #5
 80018c4:	781b      	ldrb	r3, [r3, #0]
 80018c6:	021b      	lsls	r3, r3, #8
 80018c8:	687a      	ldr	r2, [r7, #4]
 80018ca:	3204      	adds	r2, #4
 80018cc:	7812      	ldrb	r2, [r2, #0]
 80018ce:	4313      	orrs	r3, r2
 80018d0:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80018d2:	68ba      	ldr	r2, [r7, #8]
 80018d4:	4b11      	ldr	r3, [pc, #68]	@ (800191c <ETH_MACAddressConfig+0x68>)
 80018d6:	4413      	add	r3, r2
 80018d8:	461a      	mov	r2, r3
 80018da:	697b      	ldr	r3, [r7, #20]
 80018dc:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	3303      	adds	r3, #3
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	061a      	lsls	r2, r3, #24
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	3302      	adds	r3, #2
 80018ea:	781b      	ldrb	r3, [r3, #0]
 80018ec:	041b      	lsls	r3, r3, #16
 80018ee:	431a      	orrs	r2, r3
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	3301      	adds	r3, #1
 80018f4:	781b      	ldrb	r3, [r3, #0]
 80018f6:	021b      	lsls	r3, r3, #8
 80018f8:	4313      	orrs	r3, r2
 80018fa:	687a      	ldr	r2, [r7, #4]
 80018fc:	7812      	ldrb	r2, [r2, #0]
 80018fe:	4313      	orrs	r3, r2
 8001900:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001902:	68ba      	ldr	r2, [r7, #8]
 8001904:	4b06      	ldr	r3, [pc, #24]	@ (8001920 <ETH_MACAddressConfig+0x6c>)
 8001906:	4413      	add	r3, r2
 8001908:	461a      	mov	r2, r3
 800190a:	697b      	ldr	r3, [r7, #20]
 800190c:	6013      	str	r3, [r2, #0]
}
 800190e:	bf00      	nop
 8001910:	371c      	adds	r7, #28
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr
 800191a:	bf00      	nop
 800191c:	40028040 	.word	0x40028040
 8001920:	40028044 	.word	0x40028044

08001924 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001924:	b480      	push	{r7}
 8001926:	b085      	sub	sp, #20
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800192c:	2300      	movs	r3, #0
 800192e:	60fb      	str	r3, [r7, #12]
 8001930:	e03e      	b.n	80019b0 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	68d9      	ldr	r1, [r3, #12]
 8001936:	68fa      	ldr	r2, [r7, #12]
 8001938:	4613      	mov	r3, r2
 800193a:	009b      	lsls	r3, r3, #2
 800193c:	4413      	add	r3, r2
 800193e:	00db      	lsls	r3, r3, #3
 8001940:	440b      	add	r3, r1
 8001942:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8001944:	68bb      	ldr	r3, [r7, #8]
 8001946:	2200      	movs	r2, #0
 8001948:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 800194a:	68bb      	ldr	r3, [r7, #8]
 800194c:	2200      	movs	r2, #0
 800194e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8001950:	68bb      	ldr	r3, [r7, #8]
 8001952:	2200      	movs	r2, #0
 8001954:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8001956:	68bb      	ldr	r3, [r7, #8]
 8001958:	2200      	movs	r2, #0
 800195a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800195c:	68b9      	ldr	r1, [r7, #8]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	68fa      	ldr	r2, [r7, #12]
 8001962:	3206      	adds	r2, #6
 8001964:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8001968:	68bb      	ldr	r3, [r7, #8]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001970:	68bb      	ldr	r3, [r7, #8]
 8001972:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	2b02      	cmp	r3, #2
 8001978:	d80c      	bhi.n	8001994 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	68d9      	ldr	r1, [r3, #12]
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	1c5a      	adds	r2, r3, #1
 8001982:	4613      	mov	r3, r2
 8001984:	009b      	lsls	r3, r3, #2
 8001986:	4413      	add	r3, r2
 8001988:	00db      	lsls	r3, r3, #3
 800198a:	440b      	add	r3, r1
 800198c:	461a      	mov	r2, r3
 800198e:	68bb      	ldr	r3, [r7, #8]
 8001990:	60da      	str	r2, [r3, #12]
 8001992:	e004      	b.n	800199e <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	68db      	ldr	r3, [r3, #12]
 8001998:	461a      	mov	r2, r3
 800199a:	68bb      	ldr	r3, [r7, #8]
 800199c:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800199e:	68bb      	ldr	r3, [r7, #8]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 80019a6:	68bb      	ldr	r3, [r7, #8]
 80019a8:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	3301      	adds	r3, #1
 80019ae:	60fb      	str	r3, [r7, #12]
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	2b03      	cmp	r3, #3
 80019b4:	d9bd      	bls.n	8001932 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2200      	movs	r2, #0
 80019ba:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	68da      	ldr	r2, [r3, #12]
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80019c8:	611a      	str	r2, [r3, #16]
}
 80019ca:	bf00      	nop
 80019cc:	3714      	adds	r7, #20
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr

080019d6 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80019d6:	b480      	push	{r7}
 80019d8:	b085      	sub	sp, #20
 80019da:	af00      	add	r7, sp, #0
 80019dc:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80019de:	2300      	movs	r3, #0
 80019e0:	60fb      	str	r3, [r7, #12]
 80019e2:	e048      	b.n	8001a76 <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6919      	ldr	r1, [r3, #16]
 80019e8:	68fa      	ldr	r2, [r7, #12]
 80019ea:	4613      	mov	r3, r2
 80019ec:	009b      	lsls	r3, r3, #2
 80019ee:	4413      	add	r3, r2
 80019f0:	00db      	lsls	r3, r3, #3
 80019f2:	440b      	add	r3, r1
 80019f4:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 80019f6:	68bb      	ldr	r3, [r7, #8]
 80019f8:	2200      	movs	r2, #0
 80019fa:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 80019fc:	68bb      	ldr	r3, [r7, #8]
 80019fe:	2200      	movs	r2, #0
 8001a00:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8001a02:	68bb      	ldr	r3, [r7, #8]
 8001a04:	2200      	movs	r2, #0
 8001a06:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8001a08:	68bb      	ldr	r3, [r7, #8]
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8001a0e:	68bb      	ldr	r3, [r7, #8]
 8001a10:	2200      	movs	r2, #0
 8001a12:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8001a14:	68bb      	ldr	r3, [r7, #8]
 8001a16:	2200      	movs	r2, #0
 8001a18:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8001a1a:	68bb      	ldr	r3, [r7, #8]
 8001a1c:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8001a20:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	695b      	ldr	r3, [r3, #20]
 8001a26:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8001a2a:	68bb      	ldr	r3, [r7, #8]
 8001a2c:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8001a2e:	68bb      	ldr	r3, [r7, #8]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001a36:	68bb      	ldr	r3, [r7, #8]
 8001a38:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001a3a:	68b9      	ldr	r1, [r7, #8]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	68fa      	ldr	r2, [r7, #12]
 8001a40:	3212      	adds	r2, #18
 8001a42:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	2b02      	cmp	r3, #2
 8001a4a:	d80c      	bhi.n	8001a66 <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6919      	ldr	r1, [r3, #16]
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	1c5a      	adds	r2, r3, #1
 8001a54:	4613      	mov	r3, r2
 8001a56:	009b      	lsls	r3, r3, #2
 8001a58:	4413      	add	r3, r2
 8001a5a:	00db      	lsls	r3, r3, #3
 8001a5c:	440b      	add	r3, r1
 8001a5e:	461a      	mov	r2, r3
 8001a60:	68bb      	ldr	r3, [r7, #8]
 8001a62:	60da      	str	r2, [r3, #12]
 8001a64:	e004      	b.n	8001a70 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	691b      	ldr	r3, [r3, #16]
 8001a6a:	461a      	mov	r2, r3
 8001a6c:	68bb      	ldr	r3, [r7, #8]
 8001a6e:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	3301      	adds	r3, #1
 8001a74:	60fb      	str	r3, [r7, #12]
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	2b03      	cmp	r3, #3
 8001a7a:	d9b3      	bls.n	80019e4 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2200      	movs	r2, #0
 8001a80:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2200      	movs	r2, #0
 8001a86:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2200      	movs	r2, #0
 8001a92:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2200      	movs	r2, #0
 8001a98:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	691a      	ldr	r2, [r3, #16]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001aa6:	60da      	str	r2, [r3, #12]
}
 8001aa8:	bf00      	nop
 8001aaa:	3714      	adds	r7, #20
 8001aac:	46bd      	mov	sp, r7
 8001aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab2:	4770      	bx	lr

08001ab4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b089      	sub	sp, #36	@ 0x24
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
 8001abc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001aca:	2300      	movs	r3, #0
 8001acc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8001ace:	2300      	movs	r3, #0
 8001ad0:	61fb      	str	r3, [r7, #28]
 8001ad2:	e175      	b.n	8001dc0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	69fb      	ldr	r3, [r7, #28]
 8001ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8001adc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	697a      	ldr	r2, [r7, #20]
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8001ae8:	693a      	ldr	r2, [r7, #16]
 8001aea:	697b      	ldr	r3, [r7, #20]
 8001aec:	429a      	cmp	r2, r3
 8001aee:	f040 8164 	bne.w	8001dba <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	f003 0303 	and.w	r3, r3, #3
 8001afa:	2b01      	cmp	r3, #1
 8001afc:	d005      	beq.n	8001b0a <HAL_GPIO_Init+0x56>
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	f003 0303 	and.w	r3, r3, #3
 8001b06:	2b02      	cmp	r3, #2
 8001b08:	d130      	bne.n	8001b6c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	689b      	ldr	r3, [r3, #8]
 8001b0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001b10:	69fb      	ldr	r3, [r7, #28]
 8001b12:	005b      	lsls	r3, r3, #1
 8001b14:	2203      	movs	r2, #3
 8001b16:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1a:	43db      	mvns	r3, r3
 8001b1c:	69ba      	ldr	r2, [r7, #24]
 8001b1e:	4013      	ands	r3, r2
 8001b20:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	68da      	ldr	r2, [r3, #12]
 8001b26:	69fb      	ldr	r3, [r7, #28]
 8001b28:	005b      	lsls	r3, r3, #1
 8001b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2e:	69ba      	ldr	r2, [r7, #24]
 8001b30:	4313      	orrs	r3, r2
 8001b32:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	69ba      	ldr	r2, [r7, #24]
 8001b38:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b40:	2201      	movs	r2, #1
 8001b42:	69fb      	ldr	r3, [r7, #28]
 8001b44:	fa02 f303 	lsl.w	r3, r2, r3
 8001b48:	43db      	mvns	r3, r3
 8001b4a:	69ba      	ldr	r2, [r7, #24]
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	091b      	lsrs	r3, r3, #4
 8001b56:	f003 0201 	and.w	r2, r3, #1
 8001b5a:	69fb      	ldr	r3, [r7, #28]
 8001b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b60:	69ba      	ldr	r2, [r7, #24]
 8001b62:	4313      	orrs	r3, r2
 8001b64:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	69ba      	ldr	r2, [r7, #24]
 8001b6a:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	f003 0303 	and.w	r3, r3, #3
 8001b74:	2b03      	cmp	r3, #3
 8001b76:	d017      	beq.n	8001ba8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	68db      	ldr	r3, [r3, #12]
 8001b7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001b7e:	69fb      	ldr	r3, [r7, #28]
 8001b80:	005b      	lsls	r3, r3, #1
 8001b82:	2203      	movs	r2, #3
 8001b84:	fa02 f303 	lsl.w	r3, r2, r3
 8001b88:	43db      	mvns	r3, r3
 8001b8a:	69ba      	ldr	r2, [r7, #24]
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	689a      	ldr	r2, [r3, #8]
 8001b94:	69fb      	ldr	r3, [r7, #28]
 8001b96:	005b      	lsls	r3, r3, #1
 8001b98:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9c:	69ba      	ldr	r2, [r7, #24]
 8001b9e:	4313      	orrs	r3, r2
 8001ba0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	69ba      	ldr	r2, [r7, #24]
 8001ba6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	f003 0303 	and.w	r3, r3, #3
 8001bb0:	2b02      	cmp	r3, #2
 8001bb2:	d123      	bne.n	8001bfc <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001bb4:	69fb      	ldr	r3, [r7, #28]
 8001bb6:	08da      	lsrs	r2, r3, #3
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	3208      	adds	r2, #8
 8001bbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bc0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001bc2:	69fb      	ldr	r3, [r7, #28]
 8001bc4:	f003 0307 	and.w	r3, r3, #7
 8001bc8:	009b      	lsls	r3, r3, #2
 8001bca:	220f      	movs	r2, #15
 8001bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd0:	43db      	mvns	r3, r3
 8001bd2:	69ba      	ldr	r2, [r7, #24]
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	691a      	ldr	r2, [r3, #16]
 8001bdc:	69fb      	ldr	r3, [r7, #28]
 8001bde:	f003 0307 	and.w	r3, r3, #7
 8001be2:	009b      	lsls	r3, r3, #2
 8001be4:	fa02 f303 	lsl.w	r3, r2, r3
 8001be8:	69ba      	ldr	r2, [r7, #24]
 8001bea:	4313      	orrs	r3, r2
 8001bec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001bee:	69fb      	ldr	r3, [r7, #28]
 8001bf0:	08da      	lsrs	r2, r3, #3
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	3208      	adds	r2, #8
 8001bf6:	69b9      	ldr	r1, [r7, #24]
 8001bf8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001c02:	69fb      	ldr	r3, [r7, #28]
 8001c04:	005b      	lsls	r3, r3, #1
 8001c06:	2203      	movs	r2, #3
 8001c08:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0c:	43db      	mvns	r3, r3
 8001c0e:	69ba      	ldr	r2, [r7, #24]
 8001c10:	4013      	ands	r3, r2
 8001c12:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	f003 0203 	and.w	r2, r3, #3
 8001c1c:	69fb      	ldr	r3, [r7, #28]
 8001c1e:	005b      	lsls	r3, r3, #1
 8001c20:	fa02 f303 	lsl.w	r3, r2, r3
 8001c24:	69ba      	ldr	r2, [r7, #24]
 8001c26:	4313      	orrs	r3, r2
 8001c28:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	69ba      	ldr	r2, [r7, #24]
 8001c2e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	f000 80be 	beq.w	8001dba <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c3e:	4b66      	ldr	r3, [pc, #408]	@ (8001dd8 <HAL_GPIO_Init+0x324>)
 8001c40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c42:	4a65      	ldr	r2, [pc, #404]	@ (8001dd8 <HAL_GPIO_Init+0x324>)
 8001c44:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c48:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c4a:	4b63      	ldr	r3, [pc, #396]	@ (8001dd8 <HAL_GPIO_Init+0x324>)
 8001c4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c4e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c52:	60fb      	str	r3, [r7, #12]
 8001c54:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001c56:	4a61      	ldr	r2, [pc, #388]	@ (8001ddc <HAL_GPIO_Init+0x328>)
 8001c58:	69fb      	ldr	r3, [r7, #28]
 8001c5a:	089b      	lsrs	r3, r3, #2
 8001c5c:	3302      	adds	r3, #2
 8001c5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c62:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001c64:	69fb      	ldr	r3, [r7, #28]
 8001c66:	f003 0303 	and.w	r3, r3, #3
 8001c6a:	009b      	lsls	r3, r3, #2
 8001c6c:	220f      	movs	r2, #15
 8001c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c72:	43db      	mvns	r3, r3
 8001c74:	69ba      	ldr	r2, [r7, #24]
 8001c76:	4013      	ands	r3, r2
 8001c78:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	4a58      	ldr	r2, [pc, #352]	@ (8001de0 <HAL_GPIO_Init+0x32c>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d037      	beq.n	8001cf2 <HAL_GPIO_Init+0x23e>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	4a57      	ldr	r2, [pc, #348]	@ (8001de4 <HAL_GPIO_Init+0x330>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d031      	beq.n	8001cee <HAL_GPIO_Init+0x23a>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	4a56      	ldr	r2, [pc, #344]	@ (8001de8 <HAL_GPIO_Init+0x334>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d02b      	beq.n	8001cea <HAL_GPIO_Init+0x236>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	4a55      	ldr	r2, [pc, #340]	@ (8001dec <HAL_GPIO_Init+0x338>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d025      	beq.n	8001ce6 <HAL_GPIO_Init+0x232>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	4a54      	ldr	r2, [pc, #336]	@ (8001df0 <HAL_GPIO_Init+0x33c>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d01f      	beq.n	8001ce2 <HAL_GPIO_Init+0x22e>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	4a53      	ldr	r2, [pc, #332]	@ (8001df4 <HAL_GPIO_Init+0x340>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d019      	beq.n	8001cde <HAL_GPIO_Init+0x22a>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	4a52      	ldr	r2, [pc, #328]	@ (8001df8 <HAL_GPIO_Init+0x344>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d013      	beq.n	8001cda <HAL_GPIO_Init+0x226>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	4a51      	ldr	r2, [pc, #324]	@ (8001dfc <HAL_GPIO_Init+0x348>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d00d      	beq.n	8001cd6 <HAL_GPIO_Init+0x222>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	4a50      	ldr	r2, [pc, #320]	@ (8001e00 <HAL_GPIO_Init+0x34c>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d007      	beq.n	8001cd2 <HAL_GPIO_Init+0x21e>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	4a4f      	ldr	r2, [pc, #316]	@ (8001e04 <HAL_GPIO_Init+0x350>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d101      	bne.n	8001cce <HAL_GPIO_Init+0x21a>
 8001cca:	2309      	movs	r3, #9
 8001ccc:	e012      	b.n	8001cf4 <HAL_GPIO_Init+0x240>
 8001cce:	230a      	movs	r3, #10
 8001cd0:	e010      	b.n	8001cf4 <HAL_GPIO_Init+0x240>
 8001cd2:	2308      	movs	r3, #8
 8001cd4:	e00e      	b.n	8001cf4 <HAL_GPIO_Init+0x240>
 8001cd6:	2307      	movs	r3, #7
 8001cd8:	e00c      	b.n	8001cf4 <HAL_GPIO_Init+0x240>
 8001cda:	2306      	movs	r3, #6
 8001cdc:	e00a      	b.n	8001cf4 <HAL_GPIO_Init+0x240>
 8001cde:	2305      	movs	r3, #5
 8001ce0:	e008      	b.n	8001cf4 <HAL_GPIO_Init+0x240>
 8001ce2:	2304      	movs	r3, #4
 8001ce4:	e006      	b.n	8001cf4 <HAL_GPIO_Init+0x240>
 8001ce6:	2303      	movs	r3, #3
 8001ce8:	e004      	b.n	8001cf4 <HAL_GPIO_Init+0x240>
 8001cea:	2302      	movs	r3, #2
 8001cec:	e002      	b.n	8001cf4 <HAL_GPIO_Init+0x240>
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e000      	b.n	8001cf4 <HAL_GPIO_Init+0x240>
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	69fa      	ldr	r2, [r7, #28]
 8001cf6:	f002 0203 	and.w	r2, r2, #3
 8001cfa:	0092      	lsls	r2, r2, #2
 8001cfc:	4093      	lsls	r3, r2
 8001cfe:	69ba      	ldr	r2, [r7, #24]
 8001d00:	4313      	orrs	r3, r2
 8001d02:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001d04:	4935      	ldr	r1, [pc, #212]	@ (8001ddc <HAL_GPIO_Init+0x328>)
 8001d06:	69fb      	ldr	r3, [r7, #28]
 8001d08:	089b      	lsrs	r3, r3, #2
 8001d0a:	3302      	adds	r3, #2
 8001d0c:	69ba      	ldr	r2, [r7, #24]
 8001d0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d12:	4b3d      	ldr	r3, [pc, #244]	@ (8001e08 <HAL_GPIO_Init+0x354>)
 8001d14:	689b      	ldr	r3, [r3, #8]
 8001d16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d18:	693b      	ldr	r3, [r7, #16]
 8001d1a:	43db      	mvns	r3, r3
 8001d1c:	69ba      	ldr	r2, [r7, #24]
 8001d1e:	4013      	ands	r3, r2
 8001d20:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d003      	beq.n	8001d36 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001d2e:	69ba      	ldr	r2, [r7, #24]
 8001d30:	693b      	ldr	r3, [r7, #16]
 8001d32:	4313      	orrs	r3, r2
 8001d34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d36:	4a34      	ldr	r2, [pc, #208]	@ (8001e08 <HAL_GPIO_Init+0x354>)
 8001d38:	69bb      	ldr	r3, [r7, #24]
 8001d3a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d3c:	4b32      	ldr	r3, [pc, #200]	@ (8001e08 <HAL_GPIO_Init+0x354>)
 8001d3e:	68db      	ldr	r3, [r3, #12]
 8001d40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	43db      	mvns	r3, r3
 8001d46:	69ba      	ldr	r2, [r7, #24]
 8001d48:	4013      	ands	r3, r2
 8001d4a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d003      	beq.n	8001d60 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001d58:	69ba      	ldr	r2, [r7, #24]
 8001d5a:	693b      	ldr	r3, [r7, #16]
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d60:	4a29      	ldr	r2, [pc, #164]	@ (8001e08 <HAL_GPIO_Init+0x354>)
 8001d62:	69bb      	ldr	r3, [r7, #24]
 8001d64:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d66:	4b28      	ldr	r3, [pc, #160]	@ (8001e08 <HAL_GPIO_Init+0x354>)
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d6c:	693b      	ldr	r3, [r7, #16]
 8001d6e:	43db      	mvns	r3, r3
 8001d70:	69ba      	ldr	r2, [r7, #24]
 8001d72:	4013      	ands	r3, r2
 8001d74:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d003      	beq.n	8001d8a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001d82:	69ba      	ldr	r2, [r7, #24]
 8001d84:	693b      	ldr	r3, [r7, #16]
 8001d86:	4313      	orrs	r3, r2
 8001d88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d8a:	4a1f      	ldr	r2, [pc, #124]	@ (8001e08 <HAL_GPIO_Init+0x354>)
 8001d8c:	69bb      	ldr	r3, [r7, #24]
 8001d8e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d90:	4b1d      	ldr	r3, [pc, #116]	@ (8001e08 <HAL_GPIO_Init+0x354>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d96:	693b      	ldr	r3, [r7, #16]
 8001d98:	43db      	mvns	r3, r3
 8001d9a:	69ba      	ldr	r2, [r7, #24]
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d003      	beq.n	8001db4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001dac:	69ba      	ldr	r2, [r7, #24]
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	4313      	orrs	r3, r2
 8001db2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001db4:	4a14      	ldr	r2, [pc, #80]	@ (8001e08 <HAL_GPIO_Init+0x354>)
 8001db6:	69bb      	ldr	r3, [r7, #24]
 8001db8:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8001dba:	69fb      	ldr	r3, [r7, #28]
 8001dbc:	3301      	adds	r3, #1
 8001dbe:	61fb      	str	r3, [r7, #28]
 8001dc0:	69fb      	ldr	r3, [r7, #28]
 8001dc2:	2b0f      	cmp	r3, #15
 8001dc4:	f67f ae86 	bls.w	8001ad4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001dc8:	bf00      	nop
 8001dca:	bf00      	nop
 8001dcc:	3724      	adds	r7, #36	@ 0x24
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr
 8001dd6:	bf00      	nop
 8001dd8:	40023800 	.word	0x40023800
 8001ddc:	40013800 	.word	0x40013800
 8001de0:	40020000 	.word	0x40020000
 8001de4:	40020400 	.word	0x40020400
 8001de8:	40020800 	.word	0x40020800
 8001dec:	40020c00 	.word	0x40020c00
 8001df0:	40021000 	.word	0x40021000
 8001df4:	40021400 	.word	0x40021400
 8001df8:	40021800 	.word	0x40021800
 8001dfc:	40021c00 	.word	0x40021c00
 8001e00:	40022000 	.word	0x40022000
 8001e04:	40022400 	.word	0x40022400
 8001e08:	40013c00 	.word	0x40013c00

08001e0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b083      	sub	sp, #12
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
 8001e14:	460b      	mov	r3, r1
 8001e16:	807b      	strh	r3, [r7, #2]
 8001e18:	4613      	mov	r3, r2
 8001e1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e1c:	787b      	ldrb	r3, [r7, #1]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d003      	beq.n	8001e2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e22:	887a      	ldrh	r2, [r7, #2]
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001e28:	e003      	b.n	8001e32 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001e2a:	887b      	ldrh	r3, [r7, #2]
 8001e2c:	041a      	lsls	r2, r3, #16
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	619a      	str	r2, [r3, #24]
}
 8001e32:	bf00      	nop
 8001e34:	370c      	adds	r7, #12
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr

08001e3e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001e3e:	b580      	push	{r7, lr}
 8001e40:	b086      	sub	sp, #24
 8001e42:	af02      	add	r7, sp, #8
 8001e44:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d101      	bne.n	8001e50 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	e108      	b.n	8002062 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001e5c:	b2db      	uxtb	r3, r3
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d106      	bne.n	8001e70 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2200      	movs	r2, #0
 8001e66:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001e6a:	6878      	ldr	r0, [r7, #4]
 8001e6c:	f7ff f820 	bl	8000eb0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2203      	movs	r2, #3
 8001e74:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001e78:	68bb      	ldr	r3, [r7, #8]
 8001e7a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001e7e:	d102      	bne.n	8001e86 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2200      	movs	r2, #0
 8001e84:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f002 fb20 	bl	80044d0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6818      	ldr	r0, [r3, #0]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	7c1a      	ldrb	r2, [r3, #16]
 8001e98:	f88d 2000 	strb.w	r2, [sp]
 8001e9c:	3304      	adds	r3, #4
 8001e9e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ea0:	f002 fabc 	bl	800441c <USB_CoreInit>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d005      	beq.n	8001eb6 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2202      	movs	r2, #2
 8001eae:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	e0d5      	b.n	8002062 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	2100      	movs	r1, #0
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f002 fb18 	bl	80044f2 <USB_SetCurrentMode>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d005      	beq.n	8001ed4 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2202      	movs	r2, #2
 8001ecc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	e0c6      	b.n	8002062 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	73fb      	strb	r3, [r7, #15]
 8001ed8:	e04a      	b.n	8001f70 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001eda:	7bfa      	ldrb	r2, [r7, #15]
 8001edc:	6879      	ldr	r1, [r7, #4]
 8001ede:	4613      	mov	r3, r2
 8001ee0:	00db      	lsls	r3, r3, #3
 8001ee2:	4413      	add	r3, r2
 8001ee4:	009b      	lsls	r3, r3, #2
 8001ee6:	440b      	add	r3, r1
 8001ee8:	3315      	adds	r3, #21
 8001eea:	2201      	movs	r2, #1
 8001eec:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001eee:	7bfa      	ldrb	r2, [r7, #15]
 8001ef0:	6879      	ldr	r1, [r7, #4]
 8001ef2:	4613      	mov	r3, r2
 8001ef4:	00db      	lsls	r3, r3, #3
 8001ef6:	4413      	add	r3, r2
 8001ef8:	009b      	lsls	r3, r3, #2
 8001efa:	440b      	add	r3, r1
 8001efc:	3314      	adds	r3, #20
 8001efe:	7bfa      	ldrb	r2, [r7, #15]
 8001f00:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001f02:	7bfa      	ldrb	r2, [r7, #15]
 8001f04:	7bfb      	ldrb	r3, [r7, #15]
 8001f06:	b298      	uxth	r0, r3
 8001f08:	6879      	ldr	r1, [r7, #4]
 8001f0a:	4613      	mov	r3, r2
 8001f0c:	00db      	lsls	r3, r3, #3
 8001f0e:	4413      	add	r3, r2
 8001f10:	009b      	lsls	r3, r3, #2
 8001f12:	440b      	add	r3, r1
 8001f14:	332e      	adds	r3, #46	@ 0x2e
 8001f16:	4602      	mov	r2, r0
 8001f18:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001f1a:	7bfa      	ldrb	r2, [r7, #15]
 8001f1c:	6879      	ldr	r1, [r7, #4]
 8001f1e:	4613      	mov	r3, r2
 8001f20:	00db      	lsls	r3, r3, #3
 8001f22:	4413      	add	r3, r2
 8001f24:	009b      	lsls	r3, r3, #2
 8001f26:	440b      	add	r3, r1
 8001f28:	3318      	adds	r3, #24
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001f2e:	7bfa      	ldrb	r2, [r7, #15]
 8001f30:	6879      	ldr	r1, [r7, #4]
 8001f32:	4613      	mov	r3, r2
 8001f34:	00db      	lsls	r3, r3, #3
 8001f36:	4413      	add	r3, r2
 8001f38:	009b      	lsls	r3, r3, #2
 8001f3a:	440b      	add	r3, r1
 8001f3c:	331c      	adds	r3, #28
 8001f3e:	2200      	movs	r2, #0
 8001f40:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001f42:	7bfa      	ldrb	r2, [r7, #15]
 8001f44:	6879      	ldr	r1, [r7, #4]
 8001f46:	4613      	mov	r3, r2
 8001f48:	00db      	lsls	r3, r3, #3
 8001f4a:	4413      	add	r3, r2
 8001f4c:	009b      	lsls	r3, r3, #2
 8001f4e:	440b      	add	r3, r1
 8001f50:	3320      	adds	r3, #32
 8001f52:	2200      	movs	r2, #0
 8001f54:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001f56:	7bfa      	ldrb	r2, [r7, #15]
 8001f58:	6879      	ldr	r1, [r7, #4]
 8001f5a:	4613      	mov	r3, r2
 8001f5c:	00db      	lsls	r3, r3, #3
 8001f5e:	4413      	add	r3, r2
 8001f60:	009b      	lsls	r3, r3, #2
 8001f62:	440b      	add	r3, r1
 8001f64:	3324      	adds	r3, #36	@ 0x24
 8001f66:	2200      	movs	r2, #0
 8001f68:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f6a:	7bfb      	ldrb	r3, [r7, #15]
 8001f6c:	3301      	adds	r3, #1
 8001f6e:	73fb      	strb	r3, [r7, #15]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	791b      	ldrb	r3, [r3, #4]
 8001f74:	7bfa      	ldrb	r2, [r7, #15]
 8001f76:	429a      	cmp	r2, r3
 8001f78:	d3af      	bcc.n	8001eda <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	73fb      	strb	r3, [r7, #15]
 8001f7e:	e044      	b.n	800200a <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001f80:	7bfa      	ldrb	r2, [r7, #15]
 8001f82:	6879      	ldr	r1, [r7, #4]
 8001f84:	4613      	mov	r3, r2
 8001f86:	00db      	lsls	r3, r3, #3
 8001f88:	4413      	add	r3, r2
 8001f8a:	009b      	lsls	r3, r3, #2
 8001f8c:	440b      	add	r3, r1
 8001f8e:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8001f92:	2200      	movs	r2, #0
 8001f94:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001f96:	7bfa      	ldrb	r2, [r7, #15]
 8001f98:	6879      	ldr	r1, [r7, #4]
 8001f9a:	4613      	mov	r3, r2
 8001f9c:	00db      	lsls	r3, r3, #3
 8001f9e:	4413      	add	r3, r2
 8001fa0:	009b      	lsls	r3, r3, #2
 8001fa2:	440b      	add	r3, r1
 8001fa4:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8001fa8:	7bfa      	ldrb	r2, [r7, #15]
 8001faa:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001fac:	7bfa      	ldrb	r2, [r7, #15]
 8001fae:	6879      	ldr	r1, [r7, #4]
 8001fb0:	4613      	mov	r3, r2
 8001fb2:	00db      	lsls	r3, r3, #3
 8001fb4:	4413      	add	r3, r2
 8001fb6:	009b      	lsls	r3, r3, #2
 8001fb8:	440b      	add	r3, r1
 8001fba:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001fc2:	7bfa      	ldrb	r2, [r7, #15]
 8001fc4:	6879      	ldr	r1, [r7, #4]
 8001fc6:	4613      	mov	r3, r2
 8001fc8:	00db      	lsls	r3, r3, #3
 8001fca:	4413      	add	r3, r2
 8001fcc:	009b      	lsls	r3, r3, #2
 8001fce:	440b      	add	r3, r1
 8001fd0:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001fd8:	7bfa      	ldrb	r2, [r7, #15]
 8001fda:	6879      	ldr	r1, [r7, #4]
 8001fdc:	4613      	mov	r3, r2
 8001fde:	00db      	lsls	r3, r3, #3
 8001fe0:	4413      	add	r3, r2
 8001fe2:	009b      	lsls	r3, r3, #2
 8001fe4:	440b      	add	r3, r1
 8001fe6:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8001fea:	2200      	movs	r2, #0
 8001fec:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001fee:	7bfa      	ldrb	r2, [r7, #15]
 8001ff0:	6879      	ldr	r1, [r7, #4]
 8001ff2:	4613      	mov	r3, r2
 8001ff4:	00db      	lsls	r3, r3, #3
 8001ff6:	4413      	add	r3, r2
 8001ff8:	009b      	lsls	r3, r3, #2
 8001ffa:	440b      	add	r3, r1
 8001ffc:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002000:	2200      	movs	r2, #0
 8002002:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002004:	7bfb      	ldrb	r3, [r7, #15]
 8002006:	3301      	adds	r3, #1
 8002008:	73fb      	strb	r3, [r7, #15]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	791b      	ldrb	r3, [r3, #4]
 800200e:	7bfa      	ldrb	r2, [r7, #15]
 8002010:	429a      	cmp	r2, r3
 8002012:	d3b5      	bcc.n	8001f80 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6818      	ldr	r0, [r3, #0]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	7c1a      	ldrb	r2, [r3, #16]
 800201c:	f88d 2000 	strb.w	r2, [sp]
 8002020:	3304      	adds	r3, #4
 8002022:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002024:	f002 fab2 	bl	800458c <USB_DevInit>
 8002028:	4603      	mov	r3, r0
 800202a:	2b00      	cmp	r3, #0
 800202c:	d005      	beq.n	800203a <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2202      	movs	r2, #2
 8002032:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002036:	2301      	movs	r3, #1
 8002038:	e013      	b.n	8002062 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2200      	movs	r2, #0
 800203e:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2201      	movs	r2, #1
 8002044:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	7b1b      	ldrb	r3, [r3, #12]
 800204c:	2b01      	cmp	r3, #1
 800204e:	d102      	bne.n	8002056 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002050:	6878      	ldr	r0, [r7, #4]
 8002052:	f000 f80b 	bl	800206c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4618      	mov	r0, r3
 800205c:	f002 fc6d 	bl	800493a <USB_DevDisconnect>

  return HAL_OK;
 8002060:	2300      	movs	r3, #0
}
 8002062:	4618      	mov	r0, r3
 8002064:	3710      	adds	r7, #16
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}
	...

0800206c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800206c:	b480      	push	{r7}
 800206e:	b085      	sub	sp, #20
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2201      	movs	r2, #1
 800207e:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2200      	movs	r2, #0
 8002086:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	699b      	ldr	r3, [r3, #24]
 800208e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800209a:	4b05      	ldr	r3, [pc, #20]	@ (80020b0 <HAL_PCDEx_ActivateLPM+0x44>)
 800209c:	4313      	orrs	r3, r2
 800209e:	68fa      	ldr	r2, [r7, #12]
 80020a0:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80020a2:	2300      	movs	r3, #0
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	3714      	adds	r7, #20
 80020a8:	46bd      	mov	sp, r7
 80020aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ae:	4770      	bx	lr
 80020b0:	10000003 	.word	0x10000003

080020b4 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80020b4:	b480      	push	{r7}
 80020b6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80020b8:	4b05      	ldr	r3, [pc, #20]	@ (80020d0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a04      	ldr	r2, [pc, #16]	@ (80020d0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80020be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020c2:	6013      	str	r3, [r2, #0]
}
 80020c4:	bf00      	nop
 80020c6:	46bd      	mov	sp, r7
 80020c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020cc:	4770      	bx	lr
 80020ce:	bf00      	nop
 80020d0:	40007000 	.word	0x40007000

080020d4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b082      	sub	sp, #8
 80020d8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80020da:	2300      	movs	r3, #0
 80020dc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80020de:	4b23      	ldr	r3, [pc, #140]	@ (800216c <HAL_PWREx_EnableOverDrive+0x98>)
 80020e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020e2:	4a22      	ldr	r2, [pc, #136]	@ (800216c <HAL_PWREx_EnableOverDrive+0x98>)
 80020e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80020e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80020ea:	4b20      	ldr	r3, [pc, #128]	@ (800216c <HAL_PWREx_EnableOverDrive+0x98>)
 80020ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020f2:	603b      	str	r3, [r7, #0]
 80020f4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80020f6:	4b1e      	ldr	r3, [pc, #120]	@ (8002170 <HAL_PWREx_EnableOverDrive+0x9c>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4a1d      	ldr	r2, [pc, #116]	@ (8002170 <HAL_PWREx_EnableOverDrive+0x9c>)
 80020fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002100:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002102:	f7ff f877 	bl	80011f4 <HAL_GetTick>
 8002106:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002108:	e009      	b.n	800211e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800210a:	f7ff f873 	bl	80011f4 <HAL_GetTick>
 800210e:	4602      	mov	r2, r0
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	1ad3      	subs	r3, r2, r3
 8002114:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002118:	d901      	bls.n	800211e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800211a:	2303      	movs	r3, #3
 800211c:	e022      	b.n	8002164 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800211e:	4b14      	ldr	r3, [pc, #80]	@ (8002170 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002126:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800212a:	d1ee      	bne.n	800210a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800212c:	4b10      	ldr	r3, [pc, #64]	@ (8002170 <HAL_PWREx_EnableOverDrive+0x9c>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a0f      	ldr	r2, [pc, #60]	@ (8002170 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002132:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002136:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002138:	f7ff f85c 	bl	80011f4 <HAL_GetTick>
 800213c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800213e:	e009      	b.n	8002154 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002140:	f7ff f858 	bl	80011f4 <HAL_GetTick>
 8002144:	4602      	mov	r2, r0
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	1ad3      	subs	r3, r2, r3
 800214a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800214e:	d901      	bls.n	8002154 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002150:	2303      	movs	r3, #3
 8002152:	e007      	b.n	8002164 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002154:	4b06      	ldr	r3, [pc, #24]	@ (8002170 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800215c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002160:	d1ee      	bne.n	8002140 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002162:	2300      	movs	r3, #0
}
 8002164:	4618      	mov	r0, r3
 8002166:	3708      	adds	r7, #8
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}
 800216c:	40023800 	.word	0x40023800
 8002170:	40007000 	.word	0x40007000

08002174 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b086      	sub	sp, #24
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800217c:	2300      	movs	r3, #0
 800217e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d101      	bne.n	800218a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002186:	2301      	movs	r3, #1
 8002188:	e29b      	b.n	80026c2 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f003 0301 	and.w	r3, r3, #1
 8002192:	2b00      	cmp	r3, #0
 8002194:	f000 8087 	beq.w	80022a6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002198:	4b96      	ldr	r3, [pc, #600]	@ (80023f4 <HAL_RCC_OscConfig+0x280>)
 800219a:	689b      	ldr	r3, [r3, #8]
 800219c:	f003 030c 	and.w	r3, r3, #12
 80021a0:	2b04      	cmp	r3, #4
 80021a2:	d00c      	beq.n	80021be <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80021a4:	4b93      	ldr	r3, [pc, #588]	@ (80023f4 <HAL_RCC_OscConfig+0x280>)
 80021a6:	689b      	ldr	r3, [r3, #8]
 80021a8:	f003 030c 	and.w	r3, r3, #12
 80021ac:	2b08      	cmp	r3, #8
 80021ae:	d112      	bne.n	80021d6 <HAL_RCC_OscConfig+0x62>
 80021b0:	4b90      	ldr	r3, [pc, #576]	@ (80023f4 <HAL_RCC_OscConfig+0x280>)
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80021b8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80021bc:	d10b      	bne.n	80021d6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021be:	4b8d      	ldr	r3, [pc, #564]	@ (80023f4 <HAL_RCC_OscConfig+0x280>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d06c      	beq.n	80022a4 <HAL_RCC_OscConfig+0x130>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d168      	bne.n	80022a4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80021d2:	2301      	movs	r3, #1
 80021d4:	e275      	b.n	80026c2 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80021de:	d106      	bne.n	80021ee <HAL_RCC_OscConfig+0x7a>
 80021e0:	4b84      	ldr	r3, [pc, #528]	@ (80023f4 <HAL_RCC_OscConfig+0x280>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a83      	ldr	r2, [pc, #524]	@ (80023f4 <HAL_RCC_OscConfig+0x280>)
 80021e6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021ea:	6013      	str	r3, [r2, #0]
 80021ec:	e02e      	b.n	800224c <HAL_RCC_OscConfig+0xd8>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d10c      	bne.n	8002210 <HAL_RCC_OscConfig+0x9c>
 80021f6:	4b7f      	ldr	r3, [pc, #508]	@ (80023f4 <HAL_RCC_OscConfig+0x280>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a7e      	ldr	r2, [pc, #504]	@ (80023f4 <HAL_RCC_OscConfig+0x280>)
 80021fc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002200:	6013      	str	r3, [r2, #0]
 8002202:	4b7c      	ldr	r3, [pc, #496]	@ (80023f4 <HAL_RCC_OscConfig+0x280>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a7b      	ldr	r2, [pc, #492]	@ (80023f4 <HAL_RCC_OscConfig+0x280>)
 8002208:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800220c:	6013      	str	r3, [r2, #0]
 800220e:	e01d      	b.n	800224c <HAL_RCC_OscConfig+0xd8>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002218:	d10c      	bne.n	8002234 <HAL_RCC_OscConfig+0xc0>
 800221a:	4b76      	ldr	r3, [pc, #472]	@ (80023f4 <HAL_RCC_OscConfig+0x280>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a75      	ldr	r2, [pc, #468]	@ (80023f4 <HAL_RCC_OscConfig+0x280>)
 8002220:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002224:	6013      	str	r3, [r2, #0]
 8002226:	4b73      	ldr	r3, [pc, #460]	@ (80023f4 <HAL_RCC_OscConfig+0x280>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a72      	ldr	r2, [pc, #456]	@ (80023f4 <HAL_RCC_OscConfig+0x280>)
 800222c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002230:	6013      	str	r3, [r2, #0]
 8002232:	e00b      	b.n	800224c <HAL_RCC_OscConfig+0xd8>
 8002234:	4b6f      	ldr	r3, [pc, #444]	@ (80023f4 <HAL_RCC_OscConfig+0x280>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a6e      	ldr	r2, [pc, #440]	@ (80023f4 <HAL_RCC_OscConfig+0x280>)
 800223a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800223e:	6013      	str	r3, [r2, #0]
 8002240:	4b6c      	ldr	r3, [pc, #432]	@ (80023f4 <HAL_RCC_OscConfig+0x280>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a6b      	ldr	r2, [pc, #428]	@ (80023f4 <HAL_RCC_OscConfig+0x280>)
 8002246:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800224a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d013      	beq.n	800227c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002254:	f7fe ffce 	bl	80011f4 <HAL_GetTick>
 8002258:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800225a:	e008      	b.n	800226e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800225c:	f7fe ffca 	bl	80011f4 <HAL_GetTick>
 8002260:	4602      	mov	r2, r0
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	1ad3      	subs	r3, r2, r3
 8002266:	2b64      	cmp	r3, #100	@ 0x64
 8002268:	d901      	bls.n	800226e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800226a:	2303      	movs	r3, #3
 800226c:	e229      	b.n	80026c2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800226e:	4b61      	ldr	r3, [pc, #388]	@ (80023f4 <HAL_RCC_OscConfig+0x280>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002276:	2b00      	cmp	r3, #0
 8002278:	d0f0      	beq.n	800225c <HAL_RCC_OscConfig+0xe8>
 800227a:	e014      	b.n	80022a6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800227c:	f7fe ffba 	bl	80011f4 <HAL_GetTick>
 8002280:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002282:	e008      	b.n	8002296 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002284:	f7fe ffb6 	bl	80011f4 <HAL_GetTick>
 8002288:	4602      	mov	r2, r0
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	1ad3      	subs	r3, r2, r3
 800228e:	2b64      	cmp	r3, #100	@ 0x64
 8002290:	d901      	bls.n	8002296 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002292:	2303      	movs	r3, #3
 8002294:	e215      	b.n	80026c2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002296:	4b57      	ldr	r3, [pc, #348]	@ (80023f4 <HAL_RCC_OscConfig+0x280>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d1f0      	bne.n	8002284 <HAL_RCC_OscConfig+0x110>
 80022a2:	e000      	b.n	80022a6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f003 0302 	and.w	r3, r3, #2
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d069      	beq.n	8002386 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80022b2:	4b50      	ldr	r3, [pc, #320]	@ (80023f4 <HAL_RCC_OscConfig+0x280>)
 80022b4:	689b      	ldr	r3, [r3, #8]
 80022b6:	f003 030c 	and.w	r3, r3, #12
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d00b      	beq.n	80022d6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80022be:	4b4d      	ldr	r3, [pc, #308]	@ (80023f4 <HAL_RCC_OscConfig+0x280>)
 80022c0:	689b      	ldr	r3, [r3, #8]
 80022c2:	f003 030c 	and.w	r3, r3, #12
 80022c6:	2b08      	cmp	r3, #8
 80022c8:	d11c      	bne.n	8002304 <HAL_RCC_OscConfig+0x190>
 80022ca:	4b4a      	ldr	r3, [pc, #296]	@ (80023f4 <HAL_RCC_OscConfig+0x280>)
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d116      	bne.n	8002304 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022d6:	4b47      	ldr	r3, [pc, #284]	@ (80023f4 <HAL_RCC_OscConfig+0x280>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f003 0302 	and.w	r3, r3, #2
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d005      	beq.n	80022ee <HAL_RCC_OscConfig+0x17a>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	68db      	ldr	r3, [r3, #12]
 80022e6:	2b01      	cmp	r3, #1
 80022e8:	d001      	beq.n	80022ee <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
 80022ec:	e1e9      	b.n	80026c2 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022ee:	4b41      	ldr	r3, [pc, #260]	@ (80023f4 <HAL_RCC_OscConfig+0x280>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	691b      	ldr	r3, [r3, #16]
 80022fa:	00db      	lsls	r3, r3, #3
 80022fc:	493d      	ldr	r1, [pc, #244]	@ (80023f4 <HAL_RCC_OscConfig+0x280>)
 80022fe:	4313      	orrs	r3, r2
 8002300:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002302:	e040      	b.n	8002386 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	68db      	ldr	r3, [r3, #12]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d023      	beq.n	8002354 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800230c:	4b39      	ldr	r3, [pc, #228]	@ (80023f4 <HAL_RCC_OscConfig+0x280>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a38      	ldr	r2, [pc, #224]	@ (80023f4 <HAL_RCC_OscConfig+0x280>)
 8002312:	f043 0301 	orr.w	r3, r3, #1
 8002316:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002318:	f7fe ff6c 	bl	80011f4 <HAL_GetTick>
 800231c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800231e:	e008      	b.n	8002332 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002320:	f7fe ff68 	bl	80011f4 <HAL_GetTick>
 8002324:	4602      	mov	r2, r0
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	1ad3      	subs	r3, r2, r3
 800232a:	2b02      	cmp	r3, #2
 800232c:	d901      	bls.n	8002332 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800232e:	2303      	movs	r3, #3
 8002330:	e1c7      	b.n	80026c2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002332:	4b30      	ldr	r3, [pc, #192]	@ (80023f4 <HAL_RCC_OscConfig+0x280>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f003 0302 	and.w	r3, r3, #2
 800233a:	2b00      	cmp	r3, #0
 800233c:	d0f0      	beq.n	8002320 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800233e:	4b2d      	ldr	r3, [pc, #180]	@ (80023f4 <HAL_RCC_OscConfig+0x280>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	691b      	ldr	r3, [r3, #16]
 800234a:	00db      	lsls	r3, r3, #3
 800234c:	4929      	ldr	r1, [pc, #164]	@ (80023f4 <HAL_RCC_OscConfig+0x280>)
 800234e:	4313      	orrs	r3, r2
 8002350:	600b      	str	r3, [r1, #0]
 8002352:	e018      	b.n	8002386 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002354:	4b27      	ldr	r3, [pc, #156]	@ (80023f4 <HAL_RCC_OscConfig+0x280>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a26      	ldr	r2, [pc, #152]	@ (80023f4 <HAL_RCC_OscConfig+0x280>)
 800235a:	f023 0301 	bic.w	r3, r3, #1
 800235e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002360:	f7fe ff48 	bl	80011f4 <HAL_GetTick>
 8002364:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002366:	e008      	b.n	800237a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002368:	f7fe ff44 	bl	80011f4 <HAL_GetTick>
 800236c:	4602      	mov	r2, r0
 800236e:	693b      	ldr	r3, [r7, #16]
 8002370:	1ad3      	subs	r3, r2, r3
 8002372:	2b02      	cmp	r3, #2
 8002374:	d901      	bls.n	800237a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002376:	2303      	movs	r3, #3
 8002378:	e1a3      	b.n	80026c2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800237a:	4b1e      	ldr	r3, [pc, #120]	@ (80023f4 <HAL_RCC_OscConfig+0x280>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f003 0302 	and.w	r3, r3, #2
 8002382:	2b00      	cmp	r3, #0
 8002384:	d1f0      	bne.n	8002368 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f003 0308 	and.w	r3, r3, #8
 800238e:	2b00      	cmp	r3, #0
 8002390:	d038      	beq.n	8002404 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	695b      	ldr	r3, [r3, #20]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d019      	beq.n	80023ce <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800239a:	4b16      	ldr	r3, [pc, #88]	@ (80023f4 <HAL_RCC_OscConfig+0x280>)
 800239c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800239e:	4a15      	ldr	r2, [pc, #84]	@ (80023f4 <HAL_RCC_OscConfig+0x280>)
 80023a0:	f043 0301 	orr.w	r3, r3, #1
 80023a4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023a6:	f7fe ff25 	bl	80011f4 <HAL_GetTick>
 80023aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023ac:	e008      	b.n	80023c0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023ae:	f7fe ff21 	bl	80011f4 <HAL_GetTick>
 80023b2:	4602      	mov	r2, r0
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	1ad3      	subs	r3, r2, r3
 80023b8:	2b02      	cmp	r3, #2
 80023ba:	d901      	bls.n	80023c0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80023bc:	2303      	movs	r3, #3
 80023be:	e180      	b.n	80026c2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023c0:	4b0c      	ldr	r3, [pc, #48]	@ (80023f4 <HAL_RCC_OscConfig+0x280>)
 80023c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80023c4:	f003 0302 	and.w	r3, r3, #2
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d0f0      	beq.n	80023ae <HAL_RCC_OscConfig+0x23a>
 80023cc:	e01a      	b.n	8002404 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023ce:	4b09      	ldr	r3, [pc, #36]	@ (80023f4 <HAL_RCC_OscConfig+0x280>)
 80023d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80023d2:	4a08      	ldr	r2, [pc, #32]	@ (80023f4 <HAL_RCC_OscConfig+0x280>)
 80023d4:	f023 0301 	bic.w	r3, r3, #1
 80023d8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023da:	f7fe ff0b 	bl	80011f4 <HAL_GetTick>
 80023de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023e0:	e00a      	b.n	80023f8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023e2:	f7fe ff07 	bl	80011f4 <HAL_GetTick>
 80023e6:	4602      	mov	r2, r0
 80023e8:	693b      	ldr	r3, [r7, #16]
 80023ea:	1ad3      	subs	r3, r2, r3
 80023ec:	2b02      	cmp	r3, #2
 80023ee:	d903      	bls.n	80023f8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80023f0:	2303      	movs	r3, #3
 80023f2:	e166      	b.n	80026c2 <HAL_RCC_OscConfig+0x54e>
 80023f4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023f8:	4b92      	ldr	r3, [pc, #584]	@ (8002644 <HAL_RCC_OscConfig+0x4d0>)
 80023fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80023fc:	f003 0302 	and.w	r3, r3, #2
 8002400:	2b00      	cmp	r3, #0
 8002402:	d1ee      	bne.n	80023e2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f003 0304 	and.w	r3, r3, #4
 800240c:	2b00      	cmp	r3, #0
 800240e:	f000 80a4 	beq.w	800255a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002412:	4b8c      	ldr	r3, [pc, #560]	@ (8002644 <HAL_RCC_OscConfig+0x4d0>)
 8002414:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002416:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800241a:	2b00      	cmp	r3, #0
 800241c:	d10d      	bne.n	800243a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800241e:	4b89      	ldr	r3, [pc, #548]	@ (8002644 <HAL_RCC_OscConfig+0x4d0>)
 8002420:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002422:	4a88      	ldr	r2, [pc, #544]	@ (8002644 <HAL_RCC_OscConfig+0x4d0>)
 8002424:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002428:	6413      	str	r3, [r2, #64]	@ 0x40
 800242a:	4b86      	ldr	r3, [pc, #536]	@ (8002644 <HAL_RCC_OscConfig+0x4d0>)
 800242c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800242e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002432:	60bb      	str	r3, [r7, #8]
 8002434:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002436:	2301      	movs	r3, #1
 8002438:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800243a:	4b83      	ldr	r3, [pc, #524]	@ (8002648 <HAL_RCC_OscConfig+0x4d4>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002442:	2b00      	cmp	r3, #0
 8002444:	d118      	bne.n	8002478 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002446:	4b80      	ldr	r3, [pc, #512]	@ (8002648 <HAL_RCC_OscConfig+0x4d4>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4a7f      	ldr	r2, [pc, #508]	@ (8002648 <HAL_RCC_OscConfig+0x4d4>)
 800244c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002450:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002452:	f7fe fecf 	bl	80011f4 <HAL_GetTick>
 8002456:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002458:	e008      	b.n	800246c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800245a:	f7fe fecb 	bl	80011f4 <HAL_GetTick>
 800245e:	4602      	mov	r2, r0
 8002460:	693b      	ldr	r3, [r7, #16]
 8002462:	1ad3      	subs	r3, r2, r3
 8002464:	2b64      	cmp	r3, #100	@ 0x64
 8002466:	d901      	bls.n	800246c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002468:	2303      	movs	r3, #3
 800246a:	e12a      	b.n	80026c2 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800246c:	4b76      	ldr	r3, [pc, #472]	@ (8002648 <HAL_RCC_OscConfig+0x4d4>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002474:	2b00      	cmp	r3, #0
 8002476:	d0f0      	beq.n	800245a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	689b      	ldr	r3, [r3, #8]
 800247c:	2b01      	cmp	r3, #1
 800247e:	d106      	bne.n	800248e <HAL_RCC_OscConfig+0x31a>
 8002480:	4b70      	ldr	r3, [pc, #448]	@ (8002644 <HAL_RCC_OscConfig+0x4d0>)
 8002482:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002484:	4a6f      	ldr	r2, [pc, #444]	@ (8002644 <HAL_RCC_OscConfig+0x4d0>)
 8002486:	f043 0301 	orr.w	r3, r3, #1
 800248a:	6713      	str	r3, [r2, #112]	@ 0x70
 800248c:	e02d      	b.n	80024ea <HAL_RCC_OscConfig+0x376>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d10c      	bne.n	80024b0 <HAL_RCC_OscConfig+0x33c>
 8002496:	4b6b      	ldr	r3, [pc, #428]	@ (8002644 <HAL_RCC_OscConfig+0x4d0>)
 8002498:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800249a:	4a6a      	ldr	r2, [pc, #424]	@ (8002644 <HAL_RCC_OscConfig+0x4d0>)
 800249c:	f023 0301 	bic.w	r3, r3, #1
 80024a0:	6713      	str	r3, [r2, #112]	@ 0x70
 80024a2:	4b68      	ldr	r3, [pc, #416]	@ (8002644 <HAL_RCC_OscConfig+0x4d0>)
 80024a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024a6:	4a67      	ldr	r2, [pc, #412]	@ (8002644 <HAL_RCC_OscConfig+0x4d0>)
 80024a8:	f023 0304 	bic.w	r3, r3, #4
 80024ac:	6713      	str	r3, [r2, #112]	@ 0x70
 80024ae:	e01c      	b.n	80024ea <HAL_RCC_OscConfig+0x376>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	2b05      	cmp	r3, #5
 80024b6:	d10c      	bne.n	80024d2 <HAL_RCC_OscConfig+0x35e>
 80024b8:	4b62      	ldr	r3, [pc, #392]	@ (8002644 <HAL_RCC_OscConfig+0x4d0>)
 80024ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024bc:	4a61      	ldr	r2, [pc, #388]	@ (8002644 <HAL_RCC_OscConfig+0x4d0>)
 80024be:	f043 0304 	orr.w	r3, r3, #4
 80024c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80024c4:	4b5f      	ldr	r3, [pc, #380]	@ (8002644 <HAL_RCC_OscConfig+0x4d0>)
 80024c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024c8:	4a5e      	ldr	r2, [pc, #376]	@ (8002644 <HAL_RCC_OscConfig+0x4d0>)
 80024ca:	f043 0301 	orr.w	r3, r3, #1
 80024ce:	6713      	str	r3, [r2, #112]	@ 0x70
 80024d0:	e00b      	b.n	80024ea <HAL_RCC_OscConfig+0x376>
 80024d2:	4b5c      	ldr	r3, [pc, #368]	@ (8002644 <HAL_RCC_OscConfig+0x4d0>)
 80024d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024d6:	4a5b      	ldr	r2, [pc, #364]	@ (8002644 <HAL_RCC_OscConfig+0x4d0>)
 80024d8:	f023 0301 	bic.w	r3, r3, #1
 80024dc:	6713      	str	r3, [r2, #112]	@ 0x70
 80024de:	4b59      	ldr	r3, [pc, #356]	@ (8002644 <HAL_RCC_OscConfig+0x4d0>)
 80024e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024e2:	4a58      	ldr	r2, [pc, #352]	@ (8002644 <HAL_RCC_OscConfig+0x4d0>)
 80024e4:	f023 0304 	bic.w	r3, r3, #4
 80024e8:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d015      	beq.n	800251e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024f2:	f7fe fe7f 	bl	80011f4 <HAL_GetTick>
 80024f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024f8:	e00a      	b.n	8002510 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024fa:	f7fe fe7b 	bl	80011f4 <HAL_GetTick>
 80024fe:	4602      	mov	r2, r0
 8002500:	693b      	ldr	r3, [r7, #16]
 8002502:	1ad3      	subs	r3, r2, r3
 8002504:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002508:	4293      	cmp	r3, r2
 800250a:	d901      	bls.n	8002510 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800250c:	2303      	movs	r3, #3
 800250e:	e0d8      	b.n	80026c2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002510:	4b4c      	ldr	r3, [pc, #304]	@ (8002644 <HAL_RCC_OscConfig+0x4d0>)
 8002512:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002514:	f003 0302 	and.w	r3, r3, #2
 8002518:	2b00      	cmp	r3, #0
 800251a:	d0ee      	beq.n	80024fa <HAL_RCC_OscConfig+0x386>
 800251c:	e014      	b.n	8002548 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800251e:	f7fe fe69 	bl	80011f4 <HAL_GetTick>
 8002522:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002524:	e00a      	b.n	800253c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002526:	f7fe fe65 	bl	80011f4 <HAL_GetTick>
 800252a:	4602      	mov	r2, r0
 800252c:	693b      	ldr	r3, [r7, #16]
 800252e:	1ad3      	subs	r3, r2, r3
 8002530:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002534:	4293      	cmp	r3, r2
 8002536:	d901      	bls.n	800253c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002538:	2303      	movs	r3, #3
 800253a:	e0c2      	b.n	80026c2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800253c:	4b41      	ldr	r3, [pc, #260]	@ (8002644 <HAL_RCC_OscConfig+0x4d0>)
 800253e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002540:	f003 0302 	and.w	r3, r3, #2
 8002544:	2b00      	cmp	r3, #0
 8002546:	d1ee      	bne.n	8002526 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002548:	7dfb      	ldrb	r3, [r7, #23]
 800254a:	2b01      	cmp	r3, #1
 800254c:	d105      	bne.n	800255a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800254e:	4b3d      	ldr	r3, [pc, #244]	@ (8002644 <HAL_RCC_OscConfig+0x4d0>)
 8002550:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002552:	4a3c      	ldr	r2, [pc, #240]	@ (8002644 <HAL_RCC_OscConfig+0x4d0>)
 8002554:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002558:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	699b      	ldr	r3, [r3, #24]
 800255e:	2b00      	cmp	r3, #0
 8002560:	f000 80ae 	beq.w	80026c0 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002564:	4b37      	ldr	r3, [pc, #220]	@ (8002644 <HAL_RCC_OscConfig+0x4d0>)
 8002566:	689b      	ldr	r3, [r3, #8]
 8002568:	f003 030c 	and.w	r3, r3, #12
 800256c:	2b08      	cmp	r3, #8
 800256e:	d06d      	beq.n	800264c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	699b      	ldr	r3, [r3, #24]
 8002574:	2b02      	cmp	r3, #2
 8002576:	d14b      	bne.n	8002610 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002578:	4b32      	ldr	r3, [pc, #200]	@ (8002644 <HAL_RCC_OscConfig+0x4d0>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a31      	ldr	r2, [pc, #196]	@ (8002644 <HAL_RCC_OscConfig+0x4d0>)
 800257e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002582:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002584:	f7fe fe36 	bl	80011f4 <HAL_GetTick>
 8002588:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800258a:	e008      	b.n	800259e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800258c:	f7fe fe32 	bl	80011f4 <HAL_GetTick>
 8002590:	4602      	mov	r2, r0
 8002592:	693b      	ldr	r3, [r7, #16]
 8002594:	1ad3      	subs	r3, r2, r3
 8002596:	2b02      	cmp	r3, #2
 8002598:	d901      	bls.n	800259e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800259a:	2303      	movs	r3, #3
 800259c:	e091      	b.n	80026c2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800259e:	4b29      	ldr	r3, [pc, #164]	@ (8002644 <HAL_RCC_OscConfig+0x4d0>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d1f0      	bne.n	800258c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	69da      	ldr	r2, [r3, #28]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6a1b      	ldr	r3, [r3, #32]
 80025b2:	431a      	orrs	r2, r3
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025b8:	019b      	lsls	r3, r3, #6
 80025ba:	431a      	orrs	r2, r3
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025c0:	085b      	lsrs	r3, r3, #1
 80025c2:	3b01      	subs	r3, #1
 80025c4:	041b      	lsls	r3, r3, #16
 80025c6:	431a      	orrs	r2, r3
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025cc:	061b      	lsls	r3, r3, #24
 80025ce:	431a      	orrs	r2, r3
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025d4:	071b      	lsls	r3, r3, #28
 80025d6:	491b      	ldr	r1, [pc, #108]	@ (8002644 <HAL_RCC_OscConfig+0x4d0>)
 80025d8:	4313      	orrs	r3, r2
 80025da:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025dc:	4b19      	ldr	r3, [pc, #100]	@ (8002644 <HAL_RCC_OscConfig+0x4d0>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a18      	ldr	r2, [pc, #96]	@ (8002644 <HAL_RCC_OscConfig+0x4d0>)
 80025e2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80025e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025e8:	f7fe fe04 	bl	80011f4 <HAL_GetTick>
 80025ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025ee:	e008      	b.n	8002602 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025f0:	f7fe fe00 	bl	80011f4 <HAL_GetTick>
 80025f4:	4602      	mov	r2, r0
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	1ad3      	subs	r3, r2, r3
 80025fa:	2b02      	cmp	r3, #2
 80025fc:	d901      	bls.n	8002602 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80025fe:	2303      	movs	r3, #3
 8002600:	e05f      	b.n	80026c2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002602:	4b10      	ldr	r3, [pc, #64]	@ (8002644 <HAL_RCC_OscConfig+0x4d0>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800260a:	2b00      	cmp	r3, #0
 800260c:	d0f0      	beq.n	80025f0 <HAL_RCC_OscConfig+0x47c>
 800260e:	e057      	b.n	80026c0 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002610:	4b0c      	ldr	r3, [pc, #48]	@ (8002644 <HAL_RCC_OscConfig+0x4d0>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a0b      	ldr	r2, [pc, #44]	@ (8002644 <HAL_RCC_OscConfig+0x4d0>)
 8002616:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800261a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800261c:	f7fe fdea 	bl	80011f4 <HAL_GetTick>
 8002620:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002622:	e008      	b.n	8002636 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002624:	f7fe fde6 	bl	80011f4 <HAL_GetTick>
 8002628:	4602      	mov	r2, r0
 800262a:	693b      	ldr	r3, [r7, #16]
 800262c:	1ad3      	subs	r3, r2, r3
 800262e:	2b02      	cmp	r3, #2
 8002630:	d901      	bls.n	8002636 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002632:	2303      	movs	r3, #3
 8002634:	e045      	b.n	80026c2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002636:	4b03      	ldr	r3, [pc, #12]	@ (8002644 <HAL_RCC_OscConfig+0x4d0>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800263e:	2b00      	cmp	r3, #0
 8002640:	d1f0      	bne.n	8002624 <HAL_RCC_OscConfig+0x4b0>
 8002642:	e03d      	b.n	80026c0 <HAL_RCC_OscConfig+0x54c>
 8002644:	40023800 	.word	0x40023800
 8002648:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800264c:	4b1f      	ldr	r3, [pc, #124]	@ (80026cc <HAL_RCC_OscConfig+0x558>)
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	699b      	ldr	r3, [r3, #24]
 8002656:	2b01      	cmp	r3, #1
 8002658:	d030      	beq.n	80026bc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002664:	429a      	cmp	r2, r3
 8002666:	d129      	bne.n	80026bc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002672:	429a      	cmp	r2, r3
 8002674:	d122      	bne.n	80026bc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002676:	68fa      	ldr	r2, [r7, #12]
 8002678:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800267c:	4013      	ands	r3, r2
 800267e:	687a      	ldr	r2, [r7, #4]
 8002680:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002682:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002684:	4293      	cmp	r3, r2
 8002686:	d119      	bne.n	80026bc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002692:	085b      	lsrs	r3, r3, #1
 8002694:	3b01      	subs	r3, #1
 8002696:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002698:	429a      	cmp	r2, r3
 800269a:	d10f      	bne.n	80026bc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026a6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80026a8:	429a      	cmp	r2, r3
 80026aa:	d107      	bne.n	80026bc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026b6:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80026b8:	429a      	cmp	r2, r3
 80026ba:	d001      	beq.n	80026c0 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80026bc:	2301      	movs	r3, #1
 80026be:	e000      	b.n	80026c2 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80026c0:	2300      	movs	r3, #0
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	3718      	adds	r7, #24
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	bf00      	nop
 80026cc:	40023800 	.word	0x40023800

080026d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b084      	sub	sp, #16
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
 80026d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80026da:	2300      	movs	r3, #0
 80026dc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d101      	bne.n	80026e8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80026e4:	2301      	movs	r3, #1
 80026e6:	e0d0      	b.n	800288a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80026e8:	4b6a      	ldr	r3, [pc, #424]	@ (8002894 <HAL_RCC_ClockConfig+0x1c4>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f003 030f 	and.w	r3, r3, #15
 80026f0:	683a      	ldr	r2, [r7, #0]
 80026f2:	429a      	cmp	r2, r3
 80026f4:	d910      	bls.n	8002718 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026f6:	4b67      	ldr	r3, [pc, #412]	@ (8002894 <HAL_RCC_ClockConfig+0x1c4>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f023 020f 	bic.w	r2, r3, #15
 80026fe:	4965      	ldr	r1, [pc, #404]	@ (8002894 <HAL_RCC_ClockConfig+0x1c4>)
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	4313      	orrs	r3, r2
 8002704:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002706:	4b63      	ldr	r3, [pc, #396]	@ (8002894 <HAL_RCC_ClockConfig+0x1c4>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f003 030f 	and.w	r3, r3, #15
 800270e:	683a      	ldr	r2, [r7, #0]
 8002710:	429a      	cmp	r2, r3
 8002712:	d001      	beq.n	8002718 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002714:	2301      	movs	r3, #1
 8002716:	e0b8      	b.n	800288a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f003 0302 	and.w	r3, r3, #2
 8002720:	2b00      	cmp	r3, #0
 8002722:	d020      	beq.n	8002766 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f003 0304 	and.w	r3, r3, #4
 800272c:	2b00      	cmp	r3, #0
 800272e:	d005      	beq.n	800273c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002730:	4b59      	ldr	r3, [pc, #356]	@ (8002898 <HAL_RCC_ClockConfig+0x1c8>)
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	4a58      	ldr	r2, [pc, #352]	@ (8002898 <HAL_RCC_ClockConfig+0x1c8>)
 8002736:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800273a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f003 0308 	and.w	r3, r3, #8
 8002744:	2b00      	cmp	r3, #0
 8002746:	d005      	beq.n	8002754 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002748:	4b53      	ldr	r3, [pc, #332]	@ (8002898 <HAL_RCC_ClockConfig+0x1c8>)
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	4a52      	ldr	r2, [pc, #328]	@ (8002898 <HAL_RCC_ClockConfig+0x1c8>)
 800274e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002752:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002754:	4b50      	ldr	r3, [pc, #320]	@ (8002898 <HAL_RCC_ClockConfig+0x1c8>)
 8002756:	689b      	ldr	r3, [r3, #8]
 8002758:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	494d      	ldr	r1, [pc, #308]	@ (8002898 <HAL_RCC_ClockConfig+0x1c8>)
 8002762:	4313      	orrs	r3, r2
 8002764:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f003 0301 	and.w	r3, r3, #1
 800276e:	2b00      	cmp	r3, #0
 8002770:	d040      	beq.n	80027f4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	2b01      	cmp	r3, #1
 8002778:	d107      	bne.n	800278a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800277a:	4b47      	ldr	r3, [pc, #284]	@ (8002898 <HAL_RCC_ClockConfig+0x1c8>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002782:	2b00      	cmp	r3, #0
 8002784:	d115      	bne.n	80027b2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	e07f      	b.n	800288a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	2b02      	cmp	r3, #2
 8002790:	d107      	bne.n	80027a2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002792:	4b41      	ldr	r3, [pc, #260]	@ (8002898 <HAL_RCC_ClockConfig+0x1c8>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800279a:	2b00      	cmp	r3, #0
 800279c:	d109      	bne.n	80027b2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	e073      	b.n	800288a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027a2:	4b3d      	ldr	r3, [pc, #244]	@ (8002898 <HAL_RCC_ClockConfig+0x1c8>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f003 0302 	and.w	r3, r3, #2
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d101      	bne.n	80027b2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	e06b      	b.n	800288a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027b2:	4b39      	ldr	r3, [pc, #228]	@ (8002898 <HAL_RCC_ClockConfig+0x1c8>)
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	f023 0203 	bic.w	r2, r3, #3
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	4936      	ldr	r1, [pc, #216]	@ (8002898 <HAL_RCC_ClockConfig+0x1c8>)
 80027c0:	4313      	orrs	r3, r2
 80027c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027c4:	f7fe fd16 	bl	80011f4 <HAL_GetTick>
 80027c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027ca:	e00a      	b.n	80027e2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027cc:	f7fe fd12 	bl	80011f4 <HAL_GetTick>
 80027d0:	4602      	mov	r2, r0
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	1ad3      	subs	r3, r2, r3
 80027d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027da:	4293      	cmp	r3, r2
 80027dc:	d901      	bls.n	80027e2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80027de:	2303      	movs	r3, #3
 80027e0:	e053      	b.n	800288a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027e2:	4b2d      	ldr	r3, [pc, #180]	@ (8002898 <HAL_RCC_ClockConfig+0x1c8>)
 80027e4:	689b      	ldr	r3, [r3, #8]
 80027e6:	f003 020c 	and.w	r2, r3, #12
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	009b      	lsls	r3, r3, #2
 80027f0:	429a      	cmp	r2, r3
 80027f2:	d1eb      	bne.n	80027cc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80027f4:	4b27      	ldr	r3, [pc, #156]	@ (8002894 <HAL_RCC_ClockConfig+0x1c4>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f003 030f 	and.w	r3, r3, #15
 80027fc:	683a      	ldr	r2, [r7, #0]
 80027fe:	429a      	cmp	r2, r3
 8002800:	d210      	bcs.n	8002824 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002802:	4b24      	ldr	r3, [pc, #144]	@ (8002894 <HAL_RCC_ClockConfig+0x1c4>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f023 020f 	bic.w	r2, r3, #15
 800280a:	4922      	ldr	r1, [pc, #136]	@ (8002894 <HAL_RCC_ClockConfig+0x1c4>)
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	4313      	orrs	r3, r2
 8002810:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002812:	4b20      	ldr	r3, [pc, #128]	@ (8002894 <HAL_RCC_ClockConfig+0x1c4>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f003 030f 	and.w	r3, r3, #15
 800281a:	683a      	ldr	r2, [r7, #0]
 800281c:	429a      	cmp	r2, r3
 800281e:	d001      	beq.n	8002824 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002820:	2301      	movs	r3, #1
 8002822:	e032      	b.n	800288a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f003 0304 	and.w	r3, r3, #4
 800282c:	2b00      	cmp	r3, #0
 800282e:	d008      	beq.n	8002842 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002830:	4b19      	ldr	r3, [pc, #100]	@ (8002898 <HAL_RCC_ClockConfig+0x1c8>)
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	68db      	ldr	r3, [r3, #12]
 800283c:	4916      	ldr	r1, [pc, #88]	@ (8002898 <HAL_RCC_ClockConfig+0x1c8>)
 800283e:	4313      	orrs	r3, r2
 8002840:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f003 0308 	and.w	r3, r3, #8
 800284a:	2b00      	cmp	r3, #0
 800284c:	d009      	beq.n	8002862 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800284e:	4b12      	ldr	r3, [pc, #72]	@ (8002898 <HAL_RCC_ClockConfig+0x1c8>)
 8002850:	689b      	ldr	r3, [r3, #8]
 8002852:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	691b      	ldr	r3, [r3, #16]
 800285a:	00db      	lsls	r3, r3, #3
 800285c:	490e      	ldr	r1, [pc, #56]	@ (8002898 <HAL_RCC_ClockConfig+0x1c8>)
 800285e:	4313      	orrs	r3, r2
 8002860:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002862:	f000 f821 	bl	80028a8 <HAL_RCC_GetSysClockFreq>
 8002866:	4602      	mov	r2, r0
 8002868:	4b0b      	ldr	r3, [pc, #44]	@ (8002898 <HAL_RCC_ClockConfig+0x1c8>)
 800286a:	689b      	ldr	r3, [r3, #8]
 800286c:	091b      	lsrs	r3, r3, #4
 800286e:	f003 030f 	and.w	r3, r3, #15
 8002872:	490a      	ldr	r1, [pc, #40]	@ (800289c <HAL_RCC_ClockConfig+0x1cc>)
 8002874:	5ccb      	ldrb	r3, [r1, r3]
 8002876:	fa22 f303 	lsr.w	r3, r2, r3
 800287a:	4a09      	ldr	r2, [pc, #36]	@ (80028a0 <HAL_RCC_ClockConfig+0x1d0>)
 800287c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800287e:	4b09      	ldr	r3, [pc, #36]	@ (80028a4 <HAL_RCC_ClockConfig+0x1d4>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4618      	mov	r0, r3
 8002884:	f7fe fb8e 	bl	8000fa4 <HAL_InitTick>

  return HAL_OK;
 8002888:	2300      	movs	r3, #0
}
 800288a:	4618      	mov	r0, r3
 800288c:	3710      	adds	r7, #16
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}
 8002892:	bf00      	nop
 8002894:	40023c00 	.word	0x40023c00
 8002898:	40023800 	.word	0x40023800
 800289c:	08008e40 	.word	0x08008e40
 80028a0:	20000000 	.word	0x20000000
 80028a4:	20000004 	.word	0x20000004

080028a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80028ac:	b094      	sub	sp, #80	@ 0x50
 80028ae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80028b0:	2300      	movs	r3, #0
 80028b2:	647b      	str	r3, [r7, #68]	@ 0x44
 80028b4:	2300      	movs	r3, #0
 80028b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80028b8:	2300      	movs	r3, #0
 80028ba:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 80028bc:	2300      	movs	r3, #0
 80028be:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80028c0:	4b79      	ldr	r3, [pc, #484]	@ (8002aa8 <HAL_RCC_GetSysClockFreq+0x200>)
 80028c2:	689b      	ldr	r3, [r3, #8]
 80028c4:	f003 030c 	and.w	r3, r3, #12
 80028c8:	2b08      	cmp	r3, #8
 80028ca:	d00d      	beq.n	80028e8 <HAL_RCC_GetSysClockFreq+0x40>
 80028cc:	2b08      	cmp	r3, #8
 80028ce:	f200 80e1 	bhi.w	8002a94 <HAL_RCC_GetSysClockFreq+0x1ec>
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d002      	beq.n	80028dc <HAL_RCC_GetSysClockFreq+0x34>
 80028d6:	2b04      	cmp	r3, #4
 80028d8:	d003      	beq.n	80028e2 <HAL_RCC_GetSysClockFreq+0x3a>
 80028da:	e0db      	b.n	8002a94 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80028dc:	4b73      	ldr	r3, [pc, #460]	@ (8002aac <HAL_RCC_GetSysClockFreq+0x204>)
 80028de:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80028e0:	e0db      	b.n	8002a9a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80028e2:	4b73      	ldr	r3, [pc, #460]	@ (8002ab0 <HAL_RCC_GetSysClockFreq+0x208>)
 80028e4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80028e6:	e0d8      	b.n	8002a9a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80028e8:	4b6f      	ldr	r3, [pc, #444]	@ (8002aa8 <HAL_RCC_GetSysClockFreq+0x200>)
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80028f0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80028f2:	4b6d      	ldr	r3, [pc, #436]	@ (8002aa8 <HAL_RCC_GetSysClockFreq+0x200>)
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d063      	beq.n	80029c6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028fe:	4b6a      	ldr	r3, [pc, #424]	@ (8002aa8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	099b      	lsrs	r3, r3, #6
 8002904:	2200      	movs	r2, #0
 8002906:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002908:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800290a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800290c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002910:	633b      	str	r3, [r7, #48]	@ 0x30
 8002912:	2300      	movs	r3, #0
 8002914:	637b      	str	r3, [r7, #52]	@ 0x34
 8002916:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800291a:	4622      	mov	r2, r4
 800291c:	462b      	mov	r3, r5
 800291e:	f04f 0000 	mov.w	r0, #0
 8002922:	f04f 0100 	mov.w	r1, #0
 8002926:	0159      	lsls	r1, r3, #5
 8002928:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800292c:	0150      	lsls	r0, r2, #5
 800292e:	4602      	mov	r2, r0
 8002930:	460b      	mov	r3, r1
 8002932:	4621      	mov	r1, r4
 8002934:	1a51      	subs	r1, r2, r1
 8002936:	6139      	str	r1, [r7, #16]
 8002938:	4629      	mov	r1, r5
 800293a:	eb63 0301 	sbc.w	r3, r3, r1
 800293e:	617b      	str	r3, [r7, #20]
 8002940:	f04f 0200 	mov.w	r2, #0
 8002944:	f04f 0300 	mov.w	r3, #0
 8002948:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800294c:	4659      	mov	r1, fp
 800294e:	018b      	lsls	r3, r1, #6
 8002950:	4651      	mov	r1, sl
 8002952:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002956:	4651      	mov	r1, sl
 8002958:	018a      	lsls	r2, r1, #6
 800295a:	4651      	mov	r1, sl
 800295c:	ebb2 0801 	subs.w	r8, r2, r1
 8002960:	4659      	mov	r1, fp
 8002962:	eb63 0901 	sbc.w	r9, r3, r1
 8002966:	f04f 0200 	mov.w	r2, #0
 800296a:	f04f 0300 	mov.w	r3, #0
 800296e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002972:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002976:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800297a:	4690      	mov	r8, r2
 800297c:	4699      	mov	r9, r3
 800297e:	4623      	mov	r3, r4
 8002980:	eb18 0303 	adds.w	r3, r8, r3
 8002984:	60bb      	str	r3, [r7, #8]
 8002986:	462b      	mov	r3, r5
 8002988:	eb49 0303 	adc.w	r3, r9, r3
 800298c:	60fb      	str	r3, [r7, #12]
 800298e:	f04f 0200 	mov.w	r2, #0
 8002992:	f04f 0300 	mov.w	r3, #0
 8002996:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800299a:	4629      	mov	r1, r5
 800299c:	024b      	lsls	r3, r1, #9
 800299e:	4621      	mov	r1, r4
 80029a0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80029a4:	4621      	mov	r1, r4
 80029a6:	024a      	lsls	r2, r1, #9
 80029a8:	4610      	mov	r0, r2
 80029aa:	4619      	mov	r1, r3
 80029ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80029ae:	2200      	movs	r2, #0
 80029b0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80029b2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80029b4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80029b8:	f7fd fc9a 	bl	80002f0 <__aeabi_uldivmod>
 80029bc:	4602      	mov	r2, r0
 80029be:	460b      	mov	r3, r1
 80029c0:	4613      	mov	r3, r2
 80029c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80029c4:	e058      	b.n	8002a78 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029c6:	4b38      	ldr	r3, [pc, #224]	@ (8002aa8 <HAL_RCC_GetSysClockFreq+0x200>)
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	099b      	lsrs	r3, r3, #6
 80029cc:	2200      	movs	r2, #0
 80029ce:	4618      	mov	r0, r3
 80029d0:	4611      	mov	r1, r2
 80029d2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80029d6:	623b      	str	r3, [r7, #32]
 80029d8:	2300      	movs	r3, #0
 80029da:	627b      	str	r3, [r7, #36]	@ 0x24
 80029dc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80029e0:	4642      	mov	r2, r8
 80029e2:	464b      	mov	r3, r9
 80029e4:	f04f 0000 	mov.w	r0, #0
 80029e8:	f04f 0100 	mov.w	r1, #0
 80029ec:	0159      	lsls	r1, r3, #5
 80029ee:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80029f2:	0150      	lsls	r0, r2, #5
 80029f4:	4602      	mov	r2, r0
 80029f6:	460b      	mov	r3, r1
 80029f8:	4641      	mov	r1, r8
 80029fa:	ebb2 0a01 	subs.w	sl, r2, r1
 80029fe:	4649      	mov	r1, r9
 8002a00:	eb63 0b01 	sbc.w	fp, r3, r1
 8002a04:	f04f 0200 	mov.w	r2, #0
 8002a08:	f04f 0300 	mov.w	r3, #0
 8002a0c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002a10:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002a14:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002a18:	ebb2 040a 	subs.w	r4, r2, sl
 8002a1c:	eb63 050b 	sbc.w	r5, r3, fp
 8002a20:	f04f 0200 	mov.w	r2, #0
 8002a24:	f04f 0300 	mov.w	r3, #0
 8002a28:	00eb      	lsls	r3, r5, #3
 8002a2a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002a2e:	00e2      	lsls	r2, r4, #3
 8002a30:	4614      	mov	r4, r2
 8002a32:	461d      	mov	r5, r3
 8002a34:	4643      	mov	r3, r8
 8002a36:	18e3      	adds	r3, r4, r3
 8002a38:	603b      	str	r3, [r7, #0]
 8002a3a:	464b      	mov	r3, r9
 8002a3c:	eb45 0303 	adc.w	r3, r5, r3
 8002a40:	607b      	str	r3, [r7, #4]
 8002a42:	f04f 0200 	mov.w	r2, #0
 8002a46:	f04f 0300 	mov.w	r3, #0
 8002a4a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002a4e:	4629      	mov	r1, r5
 8002a50:	028b      	lsls	r3, r1, #10
 8002a52:	4621      	mov	r1, r4
 8002a54:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002a58:	4621      	mov	r1, r4
 8002a5a:	028a      	lsls	r2, r1, #10
 8002a5c:	4610      	mov	r0, r2
 8002a5e:	4619      	mov	r1, r3
 8002a60:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002a62:	2200      	movs	r2, #0
 8002a64:	61bb      	str	r3, [r7, #24]
 8002a66:	61fa      	str	r2, [r7, #28]
 8002a68:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a6c:	f7fd fc40 	bl	80002f0 <__aeabi_uldivmod>
 8002a70:	4602      	mov	r2, r0
 8002a72:	460b      	mov	r3, r1
 8002a74:	4613      	mov	r3, r2
 8002a76:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002a78:	4b0b      	ldr	r3, [pc, #44]	@ (8002aa8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	0c1b      	lsrs	r3, r3, #16
 8002a7e:	f003 0303 	and.w	r3, r3, #3
 8002a82:	3301      	adds	r3, #1
 8002a84:	005b      	lsls	r3, r3, #1
 8002a86:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002a88:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002a8a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002a8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a90:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002a92:	e002      	b.n	8002a9a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a94:	4b05      	ldr	r3, [pc, #20]	@ (8002aac <HAL_RCC_GetSysClockFreq+0x204>)
 8002a96:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002a98:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a9a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	3750      	adds	r7, #80	@ 0x50
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002aa6:	bf00      	nop
 8002aa8:	40023800 	.word	0x40023800
 8002aac:	00f42400 	.word	0x00f42400
 8002ab0:	007a1200 	.word	0x007a1200

08002ab4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ab8:	4b03      	ldr	r3, [pc, #12]	@ (8002ac8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002aba:	681b      	ldr	r3, [r3, #0]
}
 8002abc:	4618      	mov	r0, r3
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac4:	4770      	bx	lr
 8002ac6:	bf00      	nop
 8002ac8:	20000000 	.word	0x20000000

08002acc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002ad0:	f7ff fff0 	bl	8002ab4 <HAL_RCC_GetHCLKFreq>
 8002ad4:	4602      	mov	r2, r0
 8002ad6:	4b05      	ldr	r3, [pc, #20]	@ (8002aec <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ad8:	689b      	ldr	r3, [r3, #8]
 8002ada:	0a9b      	lsrs	r3, r3, #10
 8002adc:	f003 0307 	and.w	r3, r3, #7
 8002ae0:	4903      	ldr	r1, [pc, #12]	@ (8002af0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ae2:	5ccb      	ldrb	r3, [r1, r3]
 8002ae4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ae8:	4618      	mov	r0, r3
 8002aea:	bd80      	pop	{r7, pc}
 8002aec:	40023800 	.word	0x40023800
 8002af0:	08008e50 	.word	0x08008e50

08002af4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002af8:	f7ff ffdc 	bl	8002ab4 <HAL_RCC_GetHCLKFreq>
 8002afc:	4602      	mov	r2, r0
 8002afe:	4b05      	ldr	r3, [pc, #20]	@ (8002b14 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b00:	689b      	ldr	r3, [r3, #8]
 8002b02:	0b5b      	lsrs	r3, r3, #13
 8002b04:	f003 0307 	and.w	r3, r3, #7
 8002b08:	4903      	ldr	r1, [pc, #12]	@ (8002b18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b0a:	5ccb      	ldrb	r3, [r1, r3]
 8002b0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b10:	4618      	mov	r0, r3
 8002b12:	bd80      	pop	{r7, pc}
 8002b14:	40023800 	.word	0x40023800
 8002b18:	08008e50 	.word	0x08008e50

08002b1c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b083      	sub	sp, #12
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
 8002b24:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	220f      	movs	r2, #15
 8002b2a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002b2c:	4b12      	ldr	r3, [pc, #72]	@ (8002b78 <HAL_RCC_GetClockConfig+0x5c>)
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	f003 0203 	and.w	r2, r3, #3
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002b38:	4b0f      	ldr	r3, [pc, #60]	@ (8002b78 <HAL_RCC_GetClockConfig+0x5c>)
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002b44:	4b0c      	ldr	r3, [pc, #48]	@ (8002b78 <HAL_RCC_GetClockConfig+0x5c>)
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002b50:	4b09      	ldr	r3, [pc, #36]	@ (8002b78 <HAL_RCC_GetClockConfig+0x5c>)
 8002b52:	689b      	ldr	r3, [r3, #8]
 8002b54:	08db      	lsrs	r3, r3, #3
 8002b56:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002b5e:	4b07      	ldr	r3, [pc, #28]	@ (8002b7c <HAL_RCC_GetClockConfig+0x60>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f003 020f 	and.w	r2, r3, #15
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	601a      	str	r2, [r3, #0]
}
 8002b6a:	bf00      	nop
 8002b6c:	370c      	adds	r7, #12
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b74:	4770      	bx	lr
 8002b76:	bf00      	nop
 8002b78:	40023800 	.word	0x40023800
 8002b7c:	40023c00 	.word	0x40023c00

08002b80 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b088      	sub	sp, #32
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002b90:	2300      	movs	r3, #0
 8002b92:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002b94:	2300      	movs	r3, #0
 8002b96:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f003 0301 	and.w	r3, r3, #1
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d012      	beq.n	8002bce <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002ba8:	4b69      	ldr	r3, [pc, #420]	@ (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002baa:	689b      	ldr	r3, [r3, #8]
 8002bac:	4a68      	ldr	r2, [pc, #416]	@ (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bae:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002bb2:	6093      	str	r3, [r2, #8]
 8002bb4:	4b66      	ldr	r3, [pc, #408]	@ (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bb6:	689a      	ldr	r2, [r3, #8]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bbc:	4964      	ldr	r1, [pc, #400]	@ (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d101      	bne.n	8002bce <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d017      	beq.n	8002c0a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002bda:	4b5d      	ldr	r3, [pc, #372]	@ (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bdc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002be0:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002be8:	4959      	ldr	r1, [pc, #356]	@ (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bea:	4313      	orrs	r3, r2
 8002bec:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bf4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002bf8:	d101      	bne.n	8002bfe <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d101      	bne.n	8002c0a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002c06:	2301      	movs	r3, #1
 8002c08:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d017      	beq.n	8002c46 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002c16:	4b4e      	ldr	r3, [pc, #312]	@ (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c18:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002c1c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c24:	494a      	ldr	r1, [pc, #296]	@ (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c26:	4313      	orrs	r3, r2
 8002c28:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c30:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002c34:	d101      	bne.n	8002c3a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002c36:	2301      	movs	r3, #1
 8002c38:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d101      	bne.n	8002c46 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002c42:	2301      	movs	r3, #1
 8002c44:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d001      	beq.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002c52:	2301      	movs	r3, #1
 8002c54:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f003 0320 	and.w	r3, r3, #32
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	f000 808b 	beq.w	8002d7a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002c64:	4b3a      	ldr	r3, [pc, #232]	@ (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c68:	4a39      	ldr	r2, [pc, #228]	@ (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c6a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c6e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c70:	4b37      	ldr	r3, [pc, #220]	@ (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c74:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c78:	60bb      	str	r3, [r7, #8]
 8002c7a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002c7c:	4b35      	ldr	r3, [pc, #212]	@ (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a34      	ldr	r2, [pc, #208]	@ (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002c82:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c86:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c88:	f7fe fab4 	bl	80011f4 <HAL_GetTick>
 8002c8c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002c8e:	e008      	b.n	8002ca2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c90:	f7fe fab0 	bl	80011f4 <HAL_GetTick>
 8002c94:	4602      	mov	r2, r0
 8002c96:	697b      	ldr	r3, [r7, #20]
 8002c98:	1ad3      	subs	r3, r2, r3
 8002c9a:	2b64      	cmp	r3, #100	@ 0x64
 8002c9c:	d901      	bls.n	8002ca2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002c9e:	2303      	movs	r3, #3
 8002ca0:	e38f      	b.n	80033c2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002ca2:	4b2c      	ldr	r3, [pc, #176]	@ (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d0f0      	beq.n	8002c90 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002cae:	4b28      	ldr	r3, [pc, #160]	@ (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cb2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002cb6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002cb8:	693b      	ldr	r3, [r7, #16]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d035      	beq.n	8002d2a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cc2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002cc6:	693a      	ldr	r2, [r7, #16]
 8002cc8:	429a      	cmp	r2, r3
 8002cca:	d02e      	beq.n	8002d2a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002ccc:	4b20      	ldr	r3, [pc, #128]	@ (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cd0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002cd4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002cd6:	4b1e      	ldr	r3, [pc, #120]	@ (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cda:	4a1d      	ldr	r2, [pc, #116]	@ (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cdc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ce0:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002ce2:	4b1b      	ldr	r3, [pc, #108]	@ (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ce4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ce6:	4a1a      	ldr	r2, [pc, #104]	@ (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ce8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002cec:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002cee:	4a18      	ldr	r2, [pc, #96]	@ (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cf0:	693b      	ldr	r3, [r7, #16]
 8002cf2:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002cf4:	4b16      	ldr	r3, [pc, #88]	@ (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cf6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cf8:	f003 0301 	and.w	r3, r3, #1
 8002cfc:	2b01      	cmp	r3, #1
 8002cfe:	d114      	bne.n	8002d2a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d00:	f7fe fa78 	bl	80011f4 <HAL_GetTick>
 8002d04:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d06:	e00a      	b.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d08:	f7fe fa74 	bl	80011f4 <HAL_GetTick>
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	1ad3      	subs	r3, r2, r3
 8002d12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d901      	bls.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002d1a:	2303      	movs	r3, #3
 8002d1c:	e351      	b.n	80033c2 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d1e:	4b0c      	ldr	r3, [pc, #48]	@ (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d22:	f003 0302 	and.w	r3, r3, #2
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d0ee      	beq.n	8002d08 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d2e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002d32:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002d36:	d111      	bne.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002d38:	4b05      	ldr	r3, [pc, #20]	@ (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002d44:	4b04      	ldr	r3, [pc, #16]	@ (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002d46:	400b      	ands	r3, r1
 8002d48:	4901      	ldr	r1, [pc, #4]	@ (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	608b      	str	r3, [r1, #8]
 8002d4e:	e00b      	b.n	8002d68 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002d50:	40023800 	.word	0x40023800
 8002d54:	40007000 	.word	0x40007000
 8002d58:	0ffffcff 	.word	0x0ffffcff
 8002d5c:	4bac      	ldr	r3, [pc, #688]	@ (8003010 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d5e:	689b      	ldr	r3, [r3, #8]
 8002d60:	4aab      	ldr	r2, [pc, #684]	@ (8003010 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d62:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8002d66:	6093      	str	r3, [r2, #8]
 8002d68:	4ba9      	ldr	r3, [pc, #676]	@ (8003010 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d6a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d74:	49a6      	ldr	r1, [pc, #664]	@ (8003010 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d76:	4313      	orrs	r3, r2
 8002d78:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f003 0310 	and.w	r3, r3, #16
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d010      	beq.n	8002da8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002d86:	4ba2      	ldr	r3, [pc, #648]	@ (8003010 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d88:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002d8c:	4aa0      	ldr	r2, [pc, #640]	@ (8003010 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d8e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002d92:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002d96:	4b9e      	ldr	r3, [pc, #632]	@ (8003010 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d98:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002da0:	499b      	ldr	r1, [pc, #620]	@ (8003010 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002da2:	4313      	orrs	r3, r2
 8002da4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d00a      	beq.n	8002dca <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002db4:	4b96      	ldr	r3, [pc, #600]	@ (8003010 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002db6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002dba:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002dc2:	4993      	ldr	r1, [pc, #588]	@ (8003010 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d00a      	beq.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002dd6:	4b8e      	ldr	r3, [pc, #568]	@ (8003010 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ddc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002de4:	498a      	ldr	r1, [pc, #552]	@ (8003010 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002de6:	4313      	orrs	r3, r2
 8002de8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d00a      	beq.n	8002e0e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002df8:	4b85      	ldr	r3, [pc, #532]	@ (8003010 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002dfe:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002e06:	4982      	ldr	r1, [pc, #520]	@ (8003010 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d00a      	beq.n	8002e30 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002e1a:	4b7d      	ldr	r3, [pc, #500]	@ (8003010 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e20:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e28:	4979      	ldr	r1, [pc, #484]	@ (8003010 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d00a      	beq.n	8002e52 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002e3c:	4b74      	ldr	r3, [pc, #464]	@ (8003010 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e42:	f023 0203 	bic.w	r2, r3, #3
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e4a:	4971      	ldr	r1, [pc, #452]	@ (8003010 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d00a      	beq.n	8002e74 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002e5e:	4b6c      	ldr	r3, [pc, #432]	@ (8003010 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e64:	f023 020c 	bic.w	r2, r3, #12
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e6c:	4968      	ldr	r1, [pc, #416]	@ (8003010 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d00a      	beq.n	8002e96 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002e80:	4b63      	ldr	r3, [pc, #396]	@ (8003010 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e86:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e8e:	4960      	ldr	r1, [pc, #384]	@ (8003010 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e90:	4313      	orrs	r3, r2
 8002e92:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d00a      	beq.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002ea2:	4b5b      	ldr	r3, [pc, #364]	@ (8003010 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ea4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ea8:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002eb0:	4957      	ldr	r1, [pc, #348]	@ (8003010 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d00a      	beq.n	8002eda <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002ec4:	4b52      	ldr	r3, [pc, #328]	@ (8003010 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ec6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002eca:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ed2:	494f      	ldr	r1, [pc, #316]	@ (8003010 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d00a      	beq.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002ee6:	4b4a      	ldr	r3, [pc, #296]	@ (8003010 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ee8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002eec:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ef4:	4946      	ldr	r1, [pc, #280]	@ (8003010 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d00a      	beq.n	8002f1e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002f08:	4b41      	ldr	r3, [pc, #260]	@ (8003010 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f0e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f16:	493e      	ldr	r1, [pc, #248]	@ (8003010 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d00a      	beq.n	8002f40 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002f2a:	4b39      	ldr	r3, [pc, #228]	@ (8003010 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f30:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f38:	4935      	ldr	r1, [pc, #212]	@ (8003010 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d00a      	beq.n	8002f62 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002f4c:	4b30      	ldr	r3, [pc, #192]	@ (8003010 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f52:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002f5a:	492d      	ldr	r1, [pc, #180]	@ (8003010 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d011      	beq.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002f6e:	4b28      	ldr	r3, [pc, #160]	@ (8003010 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f74:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002f7c:	4924      	ldr	r1, [pc, #144]	@ (8003010 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002f88:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002f8c:	d101      	bne.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f003 0308 	and.w	r3, r3, #8
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d001      	beq.n	8002fa2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d00a      	beq.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002fae:	4b18      	ldr	r3, [pc, #96]	@ (8003010 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fb4:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002fbc:	4914      	ldr	r1, [pc, #80]	@ (8003010 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d00b      	beq.n	8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002fd0:	4b0f      	ldr	r3, [pc, #60]	@ (8003010 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fd6:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002fe0:	490b      	ldr	r1, [pc, #44]	@ (8003010 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d00f      	beq.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002ff4:	4b06      	ldr	r3, [pc, #24]	@ (8003010 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ff6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ffa:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003004:	4902      	ldr	r1, [pc, #8]	@ (8003010 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003006:	4313      	orrs	r3, r2
 8003008:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800300c:	e002      	b.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800300e:	bf00      	nop
 8003010:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800301c:	2b00      	cmp	r3, #0
 800301e:	d00b      	beq.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003020:	4b8a      	ldr	r3, [pc, #552]	@ (800324c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003022:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003026:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003030:	4986      	ldr	r1, [pc, #536]	@ (800324c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003032:	4313      	orrs	r3, r2
 8003034:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003040:	2b00      	cmp	r3, #0
 8003042:	d00b      	beq.n	800305c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003044:	4b81      	ldr	r3, [pc, #516]	@ (800324c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003046:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800304a:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003054:	497d      	ldr	r1, [pc, #500]	@ (800324c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003056:	4313      	orrs	r3, r2
 8003058:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800305c:	69fb      	ldr	r3, [r7, #28]
 800305e:	2b01      	cmp	r3, #1
 8003060:	d006      	beq.n	8003070 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800306a:	2b00      	cmp	r3, #0
 800306c:	f000 80d6 	beq.w	800321c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003070:	4b76      	ldr	r3, [pc, #472]	@ (800324c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a75      	ldr	r2, [pc, #468]	@ (800324c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003076:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800307a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800307c:	f7fe f8ba 	bl	80011f4 <HAL_GetTick>
 8003080:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003082:	e008      	b.n	8003096 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003084:	f7fe f8b6 	bl	80011f4 <HAL_GetTick>
 8003088:	4602      	mov	r2, r0
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	1ad3      	subs	r3, r2, r3
 800308e:	2b64      	cmp	r3, #100	@ 0x64
 8003090:	d901      	bls.n	8003096 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003092:	2303      	movs	r3, #3
 8003094:	e195      	b.n	80033c2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003096:	4b6d      	ldr	r3, [pc, #436]	@ (800324c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d1f0      	bne.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f003 0301 	and.w	r3, r3, #1
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d021      	beq.n	80030f2 <HAL_RCCEx_PeriphCLKConfig+0x572>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d11d      	bne.n	80030f2 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80030b6:	4b65      	ldr	r3, [pc, #404]	@ (800324c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80030bc:	0c1b      	lsrs	r3, r3, #16
 80030be:	f003 0303 	and.w	r3, r3, #3
 80030c2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80030c4:	4b61      	ldr	r3, [pc, #388]	@ (800324c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80030ca:	0e1b      	lsrs	r3, r3, #24
 80030cc:	f003 030f 	and.w	r3, r3, #15
 80030d0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	019a      	lsls	r2, r3, #6
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	041b      	lsls	r3, r3, #16
 80030dc:	431a      	orrs	r2, r3
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	061b      	lsls	r3, r3, #24
 80030e2:	431a      	orrs	r2, r3
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	689b      	ldr	r3, [r3, #8]
 80030e8:	071b      	lsls	r3, r3, #28
 80030ea:	4958      	ldr	r1, [pc, #352]	@ (800324c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030ec:	4313      	orrs	r3, r2
 80030ee:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d004      	beq.n	8003108 <HAL_RCCEx_PeriphCLKConfig+0x588>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003102:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003106:	d00a      	beq.n	800311e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003110:	2b00      	cmp	r3, #0
 8003112:	d02e      	beq.n	8003172 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003118:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800311c:	d129      	bne.n	8003172 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800311e:	4b4b      	ldr	r3, [pc, #300]	@ (800324c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003120:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003124:	0c1b      	lsrs	r3, r3, #16
 8003126:	f003 0303 	and.w	r3, r3, #3
 800312a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800312c:	4b47      	ldr	r3, [pc, #284]	@ (800324c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800312e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003132:	0f1b      	lsrs	r3, r3, #28
 8003134:	f003 0307 	and.w	r3, r3, #7
 8003138:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	019a      	lsls	r2, r3, #6
 8003140:	693b      	ldr	r3, [r7, #16]
 8003142:	041b      	lsls	r3, r3, #16
 8003144:	431a      	orrs	r2, r3
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	68db      	ldr	r3, [r3, #12]
 800314a:	061b      	lsls	r3, r3, #24
 800314c:	431a      	orrs	r2, r3
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	071b      	lsls	r3, r3, #28
 8003152:	493e      	ldr	r1, [pc, #248]	@ (800324c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003154:	4313      	orrs	r3, r2
 8003156:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800315a:	4b3c      	ldr	r3, [pc, #240]	@ (800324c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800315c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003160:	f023 021f 	bic.w	r2, r3, #31
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003168:	3b01      	subs	r3, #1
 800316a:	4938      	ldr	r1, [pc, #224]	@ (800324c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800316c:	4313      	orrs	r3, r2
 800316e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800317a:	2b00      	cmp	r3, #0
 800317c:	d01d      	beq.n	80031ba <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800317e:	4b33      	ldr	r3, [pc, #204]	@ (800324c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003180:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003184:	0e1b      	lsrs	r3, r3, #24
 8003186:	f003 030f 	and.w	r3, r3, #15
 800318a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800318c:	4b2f      	ldr	r3, [pc, #188]	@ (800324c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800318e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003192:	0f1b      	lsrs	r3, r3, #28
 8003194:	f003 0307 	and.w	r3, r3, #7
 8003198:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	019a      	lsls	r2, r3, #6
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	691b      	ldr	r3, [r3, #16]
 80031a4:	041b      	lsls	r3, r3, #16
 80031a6:	431a      	orrs	r2, r3
 80031a8:	693b      	ldr	r3, [r7, #16]
 80031aa:	061b      	lsls	r3, r3, #24
 80031ac:	431a      	orrs	r2, r3
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	071b      	lsls	r3, r3, #28
 80031b2:	4926      	ldr	r1, [pc, #152]	@ (800324c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80031b4:	4313      	orrs	r3, r2
 80031b6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d011      	beq.n	80031ea <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	019a      	lsls	r2, r3, #6
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	691b      	ldr	r3, [r3, #16]
 80031d0:	041b      	lsls	r3, r3, #16
 80031d2:	431a      	orrs	r2, r3
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	68db      	ldr	r3, [r3, #12]
 80031d8:	061b      	lsls	r3, r3, #24
 80031da:	431a      	orrs	r2, r3
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	689b      	ldr	r3, [r3, #8]
 80031e0:	071b      	lsls	r3, r3, #28
 80031e2:	491a      	ldr	r1, [pc, #104]	@ (800324c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80031e4:	4313      	orrs	r3, r2
 80031e6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80031ea:	4b18      	ldr	r3, [pc, #96]	@ (800324c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4a17      	ldr	r2, [pc, #92]	@ (800324c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80031f0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80031f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031f6:	f7fd fffd 	bl	80011f4 <HAL_GetTick>
 80031fa:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80031fc:	e008      	b.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80031fe:	f7fd fff9 	bl	80011f4 <HAL_GetTick>
 8003202:	4602      	mov	r2, r0
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	1ad3      	subs	r3, r2, r3
 8003208:	2b64      	cmp	r3, #100	@ 0x64
 800320a:	d901      	bls.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800320c:	2303      	movs	r3, #3
 800320e:	e0d8      	b.n	80033c2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003210:	4b0e      	ldr	r3, [pc, #56]	@ (800324c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003218:	2b00      	cmp	r3, #0
 800321a:	d0f0      	beq.n	80031fe <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800321c:	69bb      	ldr	r3, [r7, #24]
 800321e:	2b01      	cmp	r3, #1
 8003220:	f040 80ce 	bne.w	80033c0 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003224:	4b09      	ldr	r3, [pc, #36]	@ (800324c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a08      	ldr	r2, [pc, #32]	@ (800324c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800322a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800322e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003230:	f7fd ffe0 	bl	80011f4 <HAL_GetTick>
 8003234:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003236:	e00b      	b.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003238:	f7fd ffdc 	bl	80011f4 <HAL_GetTick>
 800323c:	4602      	mov	r2, r0
 800323e:	697b      	ldr	r3, [r7, #20]
 8003240:	1ad3      	subs	r3, r2, r3
 8003242:	2b64      	cmp	r3, #100	@ 0x64
 8003244:	d904      	bls.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003246:	2303      	movs	r3, #3
 8003248:	e0bb      	b.n	80033c2 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800324a:	bf00      	nop
 800324c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003250:	4b5e      	ldr	r3, [pc, #376]	@ (80033cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003258:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800325c:	d0ec      	beq.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003266:	2b00      	cmp	r3, #0
 8003268:	d003      	beq.n	8003272 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800326e:	2b00      	cmp	r3, #0
 8003270:	d009      	beq.n	8003286 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800327a:	2b00      	cmp	r3, #0
 800327c:	d02e      	beq.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003282:	2b00      	cmp	r3, #0
 8003284:	d12a      	bne.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003286:	4b51      	ldr	r3, [pc, #324]	@ (80033cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003288:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800328c:	0c1b      	lsrs	r3, r3, #16
 800328e:	f003 0303 	and.w	r3, r3, #3
 8003292:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003294:	4b4d      	ldr	r3, [pc, #308]	@ (80033cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003296:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800329a:	0f1b      	lsrs	r3, r3, #28
 800329c:	f003 0307 	and.w	r3, r3, #7
 80032a0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	695b      	ldr	r3, [r3, #20]
 80032a6:	019a      	lsls	r2, r3, #6
 80032a8:	693b      	ldr	r3, [r7, #16]
 80032aa:	041b      	lsls	r3, r3, #16
 80032ac:	431a      	orrs	r2, r3
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	699b      	ldr	r3, [r3, #24]
 80032b2:	061b      	lsls	r3, r3, #24
 80032b4:	431a      	orrs	r2, r3
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	071b      	lsls	r3, r3, #28
 80032ba:	4944      	ldr	r1, [pc, #272]	@ (80033cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80032bc:	4313      	orrs	r3, r2
 80032be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80032c2:	4b42      	ldr	r3, [pc, #264]	@ (80033cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80032c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80032c8:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032d0:	3b01      	subs	r3, #1
 80032d2:	021b      	lsls	r3, r3, #8
 80032d4:	493d      	ldr	r1, [pc, #244]	@ (80033cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80032d6:	4313      	orrs	r3, r2
 80032d8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d022      	beq.n	800332e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80032ec:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80032f0:	d11d      	bne.n	800332e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80032f2:	4b36      	ldr	r3, [pc, #216]	@ (80033cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80032f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032f8:	0e1b      	lsrs	r3, r3, #24
 80032fa:	f003 030f 	and.w	r3, r3, #15
 80032fe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003300:	4b32      	ldr	r3, [pc, #200]	@ (80033cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003302:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003306:	0f1b      	lsrs	r3, r3, #28
 8003308:	f003 0307 	and.w	r3, r3, #7
 800330c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	695b      	ldr	r3, [r3, #20]
 8003312:	019a      	lsls	r2, r3, #6
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6a1b      	ldr	r3, [r3, #32]
 8003318:	041b      	lsls	r3, r3, #16
 800331a:	431a      	orrs	r2, r3
 800331c:	693b      	ldr	r3, [r7, #16]
 800331e:	061b      	lsls	r3, r3, #24
 8003320:	431a      	orrs	r2, r3
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	071b      	lsls	r3, r3, #28
 8003326:	4929      	ldr	r1, [pc, #164]	@ (80033cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003328:	4313      	orrs	r3, r2
 800332a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f003 0308 	and.w	r3, r3, #8
 8003336:	2b00      	cmp	r3, #0
 8003338:	d028      	beq.n	800338c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800333a:	4b24      	ldr	r3, [pc, #144]	@ (80033cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800333c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003340:	0e1b      	lsrs	r3, r3, #24
 8003342:	f003 030f 	and.w	r3, r3, #15
 8003346:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003348:	4b20      	ldr	r3, [pc, #128]	@ (80033cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800334a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800334e:	0c1b      	lsrs	r3, r3, #16
 8003350:	f003 0303 	and.w	r3, r3, #3
 8003354:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	695b      	ldr	r3, [r3, #20]
 800335a:	019a      	lsls	r2, r3, #6
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	041b      	lsls	r3, r3, #16
 8003360:	431a      	orrs	r2, r3
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	061b      	lsls	r3, r3, #24
 8003366:	431a      	orrs	r2, r3
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	69db      	ldr	r3, [r3, #28]
 800336c:	071b      	lsls	r3, r3, #28
 800336e:	4917      	ldr	r1, [pc, #92]	@ (80033cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003370:	4313      	orrs	r3, r2
 8003372:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003376:	4b15      	ldr	r3, [pc, #84]	@ (80033cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003378:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800337c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003384:	4911      	ldr	r1, [pc, #68]	@ (80033cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003386:	4313      	orrs	r3, r2
 8003388:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800338c:	4b0f      	ldr	r3, [pc, #60]	@ (80033cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a0e      	ldr	r2, [pc, #56]	@ (80033cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003392:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003396:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003398:	f7fd ff2c 	bl	80011f4 <HAL_GetTick>
 800339c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800339e:	e008      	b.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80033a0:	f7fd ff28 	bl	80011f4 <HAL_GetTick>
 80033a4:	4602      	mov	r2, r0
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	1ad3      	subs	r3, r2, r3
 80033aa:	2b64      	cmp	r3, #100	@ 0x64
 80033ac:	d901      	bls.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80033ae:	2303      	movs	r3, #3
 80033b0:	e007      	b.n	80033c2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80033b2:	4b06      	ldr	r3, [pc, #24]	@ (80033cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80033ba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80033be:	d1ef      	bne.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80033c0:	2300      	movs	r3, #0
}
 80033c2:	4618      	mov	r0, r3
 80033c4:	3720      	adds	r7, #32
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}
 80033ca:	bf00      	nop
 80033cc:	40023800 	.word	0x40023800

080033d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b082      	sub	sp, #8
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d101      	bne.n	80033e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	e049      	b.n	8003476 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80033e8:	b2db      	uxtb	r3, r3
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d106      	bne.n	80033fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2200      	movs	r2, #0
 80033f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80033f6:	6878      	ldr	r0, [r7, #4]
 80033f8:	f000 f841 	bl	800347e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2202      	movs	r2, #2
 8003400:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681a      	ldr	r2, [r3, #0]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	3304      	adds	r3, #4
 800340c:	4619      	mov	r1, r3
 800340e:	4610      	mov	r0, r2
 8003410:	f000 f9e8 	bl	80037e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2201      	movs	r2, #1
 8003418:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2201      	movs	r2, #1
 8003420:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2201      	movs	r2, #1
 8003428:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2201      	movs	r2, #1
 8003430:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2201      	movs	r2, #1
 8003438:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2201      	movs	r2, #1
 8003440:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2201      	movs	r2, #1
 8003448:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2201      	movs	r2, #1
 8003450:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2201      	movs	r2, #1
 8003458:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2201      	movs	r2, #1
 8003460:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2201      	movs	r2, #1
 8003468:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2201      	movs	r2, #1
 8003470:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003474:	2300      	movs	r3, #0
}
 8003476:	4618      	mov	r0, r3
 8003478:	3708      	adds	r7, #8
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}

0800347e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800347e:	b480      	push	{r7}
 8003480:	b083      	sub	sp, #12
 8003482:	af00      	add	r7, sp, #0
 8003484:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003486:	bf00      	nop
 8003488:	370c      	adds	r7, #12
 800348a:	46bd      	mov	sp, r7
 800348c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003490:	4770      	bx	lr
	...

08003494 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003494:	b480      	push	{r7}
 8003496:	b085      	sub	sp, #20
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80034a2:	b2db      	uxtb	r3, r3
 80034a4:	2b01      	cmp	r3, #1
 80034a6:	d001      	beq.n	80034ac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80034a8:	2301      	movs	r3, #1
 80034aa:	e054      	b.n	8003556 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2202      	movs	r2, #2
 80034b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	68da      	ldr	r2, [r3, #12]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f042 0201 	orr.w	r2, r2, #1
 80034c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a26      	ldr	r2, [pc, #152]	@ (8003564 <HAL_TIM_Base_Start_IT+0xd0>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d022      	beq.n	8003514 <HAL_TIM_Base_Start_IT+0x80>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80034d6:	d01d      	beq.n	8003514 <HAL_TIM_Base_Start_IT+0x80>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a22      	ldr	r2, [pc, #136]	@ (8003568 <HAL_TIM_Base_Start_IT+0xd4>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d018      	beq.n	8003514 <HAL_TIM_Base_Start_IT+0x80>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a21      	ldr	r2, [pc, #132]	@ (800356c <HAL_TIM_Base_Start_IT+0xd8>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d013      	beq.n	8003514 <HAL_TIM_Base_Start_IT+0x80>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a1f      	ldr	r2, [pc, #124]	@ (8003570 <HAL_TIM_Base_Start_IT+0xdc>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d00e      	beq.n	8003514 <HAL_TIM_Base_Start_IT+0x80>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a1e      	ldr	r2, [pc, #120]	@ (8003574 <HAL_TIM_Base_Start_IT+0xe0>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d009      	beq.n	8003514 <HAL_TIM_Base_Start_IT+0x80>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a1c      	ldr	r2, [pc, #112]	@ (8003578 <HAL_TIM_Base_Start_IT+0xe4>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d004      	beq.n	8003514 <HAL_TIM_Base_Start_IT+0x80>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4a1b      	ldr	r2, [pc, #108]	@ (800357c <HAL_TIM_Base_Start_IT+0xe8>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d115      	bne.n	8003540 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	689a      	ldr	r2, [r3, #8]
 800351a:	4b19      	ldr	r3, [pc, #100]	@ (8003580 <HAL_TIM_Base_Start_IT+0xec>)
 800351c:	4013      	ands	r3, r2
 800351e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	2b06      	cmp	r3, #6
 8003524:	d015      	beq.n	8003552 <HAL_TIM_Base_Start_IT+0xbe>
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800352c:	d011      	beq.n	8003552 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	681a      	ldr	r2, [r3, #0]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f042 0201 	orr.w	r2, r2, #1
 800353c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800353e:	e008      	b.n	8003552 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	681a      	ldr	r2, [r3, #0]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f042 0201 	orr.w	r2, r2, #1
 800354e:	601a      	str	r2, [r3, #0]
 8003550:	e000      	b.n	8003554 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003552:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003554:	2300      	movs	r3, #0
}
 8003556:	4618      	mov	r0, r3
 8003558:	3714      	adds	r7, #20
 800355a:	46bd      	mov	sp, r7
 800355c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003560:	4770      	bx	lr
 8003562:	bf00      	nop
 8003564:	40010000 	.word	0x40010000
 8003568:	40000400 	.word	0x40000400
 800356c:	40000800 	.word	0x40000800
 8003570:	40000c00 	.word	0x40000c00
 8003574:	40010400 	.word	0x40010400
 8003578:	40014000 	.word	0x40014000
 800357c:	40001800 	.word	0x40001800
 8003580:	00010007 	.word	0x00010007

08003584 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b084      	sub	sp, #16
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	68db      	ldr	r3, [r3, #12]
 8003592:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	691b      	ldr	r3, [r3, #16]
 800359a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	f003 0302 	and.w	r3, r3, #2
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d020      	beq.n	80035e8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	f003 0302 	and.w	r3, r3, #2
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d01b      	beq.n	80035e8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f06f 0202 	mvn.w	r2, #2
 80035b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2201      	movs	r2, #1
 80035be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	699b      	ldr	r3, [r3, #24]
 80035c6:	f003 0303 	and.w	r3, r3, #3
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d003      	beq.n	80035d6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80035ce:	6878      	ldr	r0, [r7, #4]
 80035d0:	f000 f8e9 	bl	80037a6 <HAL_TIM_IC_CaptureCallback>
 80035d4:	e005      	b.n	80035e2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80035d6:	6878      	ldr	r0, [r7, #4]
 80035d8:	f000 f8db 	bl	8003792 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035dc:	6878      	ldr	r0, [r7, #4]
 80035de:	f000 f8ec 	bl	80037ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2200      	movs	r2, #0
 80035e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	f003 0304 	and.w	r3, r3, #4
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d020      	beq.n	8003634 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	f003 0304 	and.w	r3, r3, #4
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d01b      	beq.n	8003634 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f06f 0204 	mvn.w	r2, #4
 8003604:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2202      	movs	r2, #2
 800360a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	699b      	ldr	r3, [r3, #24]
 8003612:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003616:	2b00      	cmp	r3, #0
 8003618:	d003      	beq.n	8003622 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800361a:	6878      	ldr	r0, [r7, #4]
 800361c:	f000 f8c3 	bl	80037a6 <HAL_TIM_IC_CaptureCallback>
 8003620:	e005      	b.n	800362e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003622:	6878      	ldr	r0, [r7, #4]
 8003624:	f000 f8b5 	bl	8003792 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003628:	6878      	ldr	r0, [r7, #4]
 800362a:	f000 f8c6 	bl	80037ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2200      	movs	r2, #0
 8003632:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	f003 0308 	and.w	r3, r3, #8
 800363a:	2b00      	cmp	r3, #0
 800363c:	d020      	beq.n	8003680 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	f003 0308 	and.w	r3, r3, #8
 8003644:	2b00      	cmp	r3, #0
 8003646:	d01b      	beq.n	8003680 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f06f 0208 	mvn.w	r2, #8
 8003650:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2204      	movs	r2, #4
 8003656:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	69db      	ldr	r3, [r3, #28]
 800365e:	f003 0303 	and.w	r3, r3, #3
 8003662:	2b00      	cmp	r3, #0
 8003664:	d003      	beq.n	800366e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	f000 f89d 	bl	80037a6 <HAL_TIM_IC_CaptureCallback>
 800366c:	e005      	b.n	800367a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800366e:	6878      	ldr	r0, [r7, #4]
 8003670:	f000 f88f 	bl	8003792 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003674:	6878      	ldr	r0, [r7, #4]
 8003676:	f000 f8a0 	bl	80037ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2200      	movs	r2, #0
 800367e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	f003 0310 	and.w	r3, r3, #16
 8003686:	2b00      	cmp	r3, #0
 8003688:	d020      	beq.n	80036cc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	f003 0310 	and.w	r3, r3, #16
 8003690:	2b00      	cmp	r3, #0
 8003692:	d01b      	beq.n	80036cc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f06f 0210 	mvn.w	r2, #16
 800369c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2208      	movs	r2, #8
 80036a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	69db      	ldr	r3, [r3, #28]
 80036aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d003      	beq.n	80036ba <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036b2:	6878      	ldr	r0, [r7, #4]
 80036b4:	f000 f877 	bl	80037a6 <HAL_TIM_IC_CaptureCallback>
 80036b8:	e005      	b.n	80036c6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036ba:	6878      	ldr	r0, [r7, #4]
 80036bc:	f000 f869 	bl	8003792 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036c0:	6878      	ldr	r0, [r7, #4]
 80036c2:	f000 f87a 	bl	80037ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2200      	movs	r2, #0
 80036ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	f003 0301 	and.w	r3, r3, #1
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d00c      	beq.n	80036f0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	f003 0301 	and.w	r3, r3, #1
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d007      	beq.n	80036f0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f06f 0201 	mvn.w	r2, #1
 80036e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80036ea:	6878      	ldr	r0, [r7, #4]
 80036ec:	f7fd fa88 	bl	8000c00 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d104      	bne.n	8003704 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003700:	2b00      	cmp	r3, #0
 8003702:	d00c      	beq.n	800371e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800370a:	2b00      	cmp	r3, #0
 800370c:	d007      	beq.n	800371e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8003716:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003718:	6878      	ldr	r0, [r7, #4]
 800371a:	f000 f913 	bl	8003944 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800371e:	68bb      	ldr	r3, [r7, #8]
 8003720:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003724:	2b00      	cmp	r3, #0
 8003726:	d00c      	beq.n	8003742 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800372e:	2b00      	cmp	r3, #0
 8003730:	d007      	beq.n	8003742 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800373a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800373c:	6878      	ldr	r0, [r7, #4]
 800373e:	f000 f90b 	bl	8003958 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003748:	2b00      	cmp	r3, #0
 800374a:	d00c      	beq.n	8003766 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003752:	2b00      	cmp	r3, #0
 8003754:	d007      	beq.n	8003766 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800375e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003760:	6878      	ldr	r0, [r7, #4]
 8003762:	f000 f834 	bl	80037ce <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	f003 0320 	and.w	r3, r3, #32
 800376c:	2b00      	cmp	r3, #0
 800376e:	d00c      	beq.n	800378a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	f003 0320 	and.w	r3, r3, #32
 8003776:	2b00      	cmp	r3, #0
 8003778:	d007      	beq.n	800378a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f06f 0220 	mvn.w	r2, #32
 8003782:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003784:	6878      	ldr	r0, [r7, #4]
 8003786:	f000 f8d3 	bl	8003930 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800378a:	bf00      	nop
 800378c:	3710      	adds	r7, #16
 800378e:	46bd      	mov	sp, r7
 8003790:	bd80      	pop	{r7, pc}

08003792 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003792:	b480      	push	{r7}
 8003794:	b083      	sub	sp, #12
 8003796:	af00      	add	r7, sp, #0
 8003798:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800379a:	bf00      	nop
 800379c:	370c      	adds	r7, #12
 800379e:	46bd      	mov	sp, r7
 80037a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a4:	4770      	bx	lr

080037a6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80037a6:	b480      	push	{r7}
 80037a8:	b083      	sub	sp, #12
 80037aa:	af00      	add	r7, sp, #0
 80037ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80037ae:	bf00      	nop
 80037b0:	370c      	adds	r7, #12
 80037b2:	46bd      	mov	sp, r7
 80037b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b8:	4770      	bx	lr

080037ba <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80037ba:	b480      	push	{r7}
 80037bc:	b083      	sub	sp, #12
 80037be:	af00      	add	r7, sp, #0
 80037c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80037c2:	bf00      	nop
 80037c4:	370c      	adds	r7, #12
 80037c6:	46bd      	mov	sp, r7
 80037c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037cc:	4770      	bx	lr

080037ce <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80037ce:	b480      	push	{r7}
 80037d0:	b083      	sub	sp, #12
 80037d2:	af00      	add	r7, sp, #0
 80037d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80037d6:	bf00      	nop
 80037d8:	370c      	adds	r7, #12
 80037da:	46bd      	mov	sp, r7
 80037dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e0:	4770      	bx	lr
	...

080037e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80037e4:	b480      	push	{r7}
 80037e6:	b085      	sub	sp, #20
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
 80037ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	4a43      	ldr	r2, [pc, #268]	@ (8003904 <TIM_Base_SetConfig+0x120>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d013      	beq.n	8003824 <TIM_Base_SetConfig+0x40>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003802:	d00f      	beq.n	8003824 <TIM_Base_SetConfig+0x40>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	4a40      	ldr	r2, [pc, #256]	@ (8003908 <TIM_Base_SetConfig+0x124>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d00b      	beq.n	8003824 <TIM_Base_SetConfig+0x40>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	4a3f      	ldr	r2, [pc, #252]	@ (800390c <TIM_Base_SetConfig+0x128>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d007      	beq.n	8003824 <TIM_Base_SetConfig+0x40>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	4a3e      	ldr	r2, [pc, #248]	@ (8003910 <TIM_Base_SetConfig+0x12c>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d003      	beq.n	8003824 <TIM_Base_SetConfig+0x40>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	4a3d      	ldr	r2, [pc, #244]	@ (8003914 <TIM_Base_SetConfig+0x130>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d108      	bne.n	8003836 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800382a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	68fa      	ldr	r2, [r7, #12]
 8003832:	4313      	orrs	r3, r2
 8003834:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	4a32      	ldr	r2, [pc, #200]	@ (8003904 <TIM_Base_SetConfig+0x120>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d02b      	beq.n	8003896 <TIM_Base_SetConfig+0xb2>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003844:	d027      	beq.n	8003896 <TIM_Base_SetConfig+0xb2>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	4a2f      	ldr	r2, [pc, #188]	@ (8003908 <TIM_Base_SetConfig+0x124>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d023      	beq.n	8003896 <TIM_Base_SetConfig+0xb2>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	4a2e      	ldr	r2, [pc, #184]	@ (800390c <TIM_Base_SetConfig+0x128>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d01f      	beq.n	8003896 <TIM_Base_SetConfig+0xb2>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	4a2d      	ldr	r2, [pc, #180]	@ (8003910 <TIM_Base_SetConfig+0x12c>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d01b      	beq.n	8003896 <TIM_Base_SetConfig+0xb2>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	4a2c      	ldr	r2, [pc, #176]	@ (8003914 <TIM_Base_SetConfig+0x130>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d017      	beq.n	8003896 <TIM_Base_SetConfig+0xb2>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	4a2b      	ldr	r2, [pc, #172]	@ (8003918 <TIM_Base_SetConfig+0x134>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d013      	beq.n	8003896 <TIM_Base_SetConfig+0xb2>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	4a2a      	ldr	r2, [pc, #168]	@ (800391c <TIM_Base_SetConfig+0x138>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d00f      	beq.n	8003896 <TIM_Base_SetConfig+0xb2>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	4a29      	ldr	r2, [pc, #164]	@ (8003920 <TIM_Base_SetConfig+0x13c>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d00b      	beq.n	8003896 <TIM_Base_SetConfig+0xb2>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	4a28      	ldr	r2, [pc, #160]	@ (8003924 <TIM_Base_SetConfig+0x140>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d007      	beq.n	8003896 <TIM_Base_SetConfig+0xb2>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	4a27      	ldr	r2, [pc, #156]	@ (8003928 <TIM_Base_SetConfig+0x144>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d003      	beq.n	8003896 <TIM_Base_SetConfig+0xb2>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	4a26      	ldr	r2, [pc, #152]	@ (800392c <TIM_Base_SetConfig+0x148>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d108      	bne.n	80038a8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800389c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	68db      	ldr	r3, [r3, #12]
 80038a2:	68fa      	ldr	r2, [r7, #12]
 80038a4:	4313      	orrs	r3, r2
 80038a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	695b      	ldr	r3, [r3, #20]
 80038b2:	4313      	orrs	r3, r2
 80038b4:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	689a      	ldr	r2, [r3, #8]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	681a      	ldr	r2, [r3, #0]
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	4a0e      	ldr	r2, [pc, #56]	@ (8003904 <TIM_Base_SetConfig+0x120>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d003      	beq.n	80038d6 <TIM_Base_SetConfig+0xf2>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	4a10      	ldr	r2, [pc, #64]	@ (8003914 <TIM_Base_SetConfig+0x130>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d103      	bne.n	80038de <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	691a      	ldr	r2, [r3, #16]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f043 0204 	orr.w	r2, r3, #4
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2201      	movs	r2, #1
 80038ee:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	68fa      	ldr	r2, [r7, #12]
 80038f4:	601a      	str	r2, [r3, #0]
}
 80038f6:	bf00      	nop
 80038f8:	3714      	adds	r7, #20
 80038fa:	46bd      	mov	sp, r7
 80038fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003900:	4770      	bx	lr
 8003902:	bf00      	nop
 8003904:	40010000 	.word	0x40010000
 8003908:	40000400 	.word	0x40000400
 800390c:	40000800 	.word	0x40000800
 8003910:	40000c00 	.word	0x40000c00
 8003914:	40010400 	.word	0x40010400
 8003918:	40014000 	.word	0x40014000
 800391c:	40014400 	.word	0x40014400
 8003920:	40014800 	.word	0x40014800
 8003924:	40001800 	.word	0x40001800
 8003928:	40001c00 	.word	0x40001c00
 800392c:	40002000 	.word	0x40002000

08003930 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003930:	b480      	push	{r7}
 8003932:	b083      	sub	sp, #12
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003938:	bf00      	nop
 800393a:	370c      	adds	r7, #12
 800393c:	46bd      	mov	sp, r7
 800393e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003942:	4770      	bx	lr

08003944 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003944:	b480      	push	{r7}
 8003946:	b083      	sub	sp, #12
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800394c:	bf00      	nop
 800394e:	370c      	adds	r7, #12
 8003950:	46bd      	mov	sp, r7
 8003952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003956:	4770      	bx	lr

08003958 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003958:	b480      	push	{r7}
 800395a:	b083      	sub	sp, #12
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003960:	bf00      	nop
 8003962:	370c      	adds	r7, #12
 8003964:	46bd      	mov	sp, r7
 8003966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396a:	4770      	bx	lr

0800396c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b082      	sub	sp, #8
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d101      	bne.n	800397e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800397a:	2301      	movs	r3, #1
 800397c:	e040      	b.n	8003a00 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003982:	2b00      	cmp	r3, #0
 8003984:	d106      	bne.n	8003994 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2200      	movs	r2, #0
 800398a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800398e:	6878      	ldr	r0, [r7, #4]
 8003990:	f7fd fa2e 	bl	8000df0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2224      	movs	r2, #36	@ 0x24
 8003998:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	681a      	ldr	r2, [r3, #0]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f022 0201 	bic.w	r2, r2, #1
 80039a8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d002      	beq.n	80039b8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	f000 fb16 	bl	8003fe4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80039b8:	6878      	ldr	r0, [r7, #4]
 80039ba:	f000 f8af 	bl	8003b1c <UART_SetConfig>
 80039be:	4603      	mov	r3, r0
 80039c0:	2b01      	cmp	r3, #1
 80039c2:	d101      	bne.n	80039c8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80039c4:	2301      	movs	r3, #1
 80039c6:	e01b      	b.n	8003a00 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	685a      	ldr	r2, [r3, #4]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80039d6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	689a      	ldr	r2, [r3, #8]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80039e6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	681a      	ldr	r2, [r3, #0]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f042 0201 	orr.w	r2, r2, #1
 80039f6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80039f8:	6878      	ldr	r0, [r7, #4]
 80039fa:	f000 fb95 	bl	8004128 <UART_CheckIdleState>
 80039fe:	4603      	mov	r3, r0
}
 8003a00:	4618      	mov	r0, r3
 8003a02:	3708      	adds	r7, #8
 8003a04:	46bd      	mov	sp, r7
 8003a06:	bd80      	pop	{r7, pc}

08003a08 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b08a      	sub	sp, #40	@ 0x28
 8003a0c:	af02      	add	r7, sp, #8
 8003a0e:	60f8      	str	r0, [r7, #12]
 8003a10:	60b9      	str	r1, [r7, #8]
 8003a12:	603b      	str	r3, [r7, #0]
 8003a14:	4613      	mov	r3, r2
 8003a16:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003a1c:	2b20      	cmp	r3, #32
 8003a1e:	d177      	bne.n	8003b10 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d002      	beq.n	8003a2c <HAL_UART_Transmit+0x24>
 8003a26:	88fb      	ldrh	r3, [r7, #6]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d101      	bne.n	8003a30 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	e070      	b.n	8003b12 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	2200      	movs	r2, #0
 8003a34:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	2221      	movs	r2, #33	@ 0x21
 8003a3c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003a3e:	f7fd fbd9 	bl	80011f4 <HAL_GetTick>
 8003a42:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	88fa      	ldrh	r2, [r7, #6]
 8003a48:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	88fa      	ldrh	r2, [r7, #6]
 8003a50:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	689b      	ldr	r3, [r3, #8]
 8003a58:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a5c:	d108      	bne.n	8003a70 <HAL_UART_Transmit+0x68>
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	691b      	ldr	r3, [r3, #16]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d104      	bne.n	8003a70 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003a66:	2300      	movs	r3, #0
 8003a68:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003a6a:	68bb      	ldr	r3, [r7, #8]
 8003a6c:	61bb      	str	r3, [r7, #24]
 8003a6e:	e003      	b.n	8003a78 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003a74:	2300      	movs	r3, #0
 8003a76:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003a78:	e02f      	b.n	8003ada <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	9300      	str	r3, [sp, #0]
 8003a7e:	697b      	ldr	r3, [r7, #20]
 8003a80:	2200      	movs	r2, #0
 8003a82:	2180      	movs	r1, #128	@ 0x80
 8003a84:	68f8      	ldr	r0, [r7, #12]
 8003a86:	f000 fbf7 	bl	8004278 <UART_WaitOnFlagUntilTimeout>
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d004      	beq.n	8003a9a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	2220      	movs	r2, #32
 8003a94:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8003a96:	2303      	movs	r3, #3
 8003a98:	e03b      	b.n	8003b12 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8003a9a:	69fb      	ldr	r3, [r7, #28]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d10b      	bne.n	8003ab8 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003aa0:	69bb      	ldr	r3, [r7, #24]
 8003aa2:	881b      	ldrh	r3, [r3, #0]
 8003aa4:	461a      	mov	r2, r3
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003aae:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003ab0:	69bb      	ldr	r3, [r7, #24]
 8003ab2:	3302      	adds	r3, #2
 8003ab4:	61bb      	str	r3, [r7, #24]
 8003ab6:	e007      	b.n	8003ac8 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003ab8:	69fb      	ldr	r3, [r7, #28]
 8003aba:	781a      	ldrb	r2, [r3, #0]
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003ac2:	69fb      	ldr	r3, [r7, #28]
 8003ac4:	3301      	adds	r3, #1
 8003ac6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003ace:	b29b      	uxth	r3, r3
 8003ad0:	3b01      	subs	r3, #1
 8003ad2:	b29a      	uxth	r2, r3
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003ae0:	b29b      	uxth	r3, r3
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d1c9      	bne.n	8003a7a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	9300      	str	r3, [sp, #0]
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	2200      	movs	r2, #0
 8003aee:	2140      	movs	r1, #64	@ 0x40
 8003af0:	68f8      	ldr	r0, [r7, #12]
 8003af2:	f000 fbc1 	bl	8004278 <UART_WaitOnFlagUntilTimeout>
 8003af6:	4603      	mov	r3, r0
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d004      	beq.n	8003b06 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	2220      	movs	r2, #32
 8003b00:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8003b02:	2303      	movs	r3, #3
 8003b04:	e005      	b.n	8003b12 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	2220      	movs	r2, #32
 8003b0a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	e000      	b.n	8003b12 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003b10:	2302      	movs	r3, #2
  }
}
 8003b12:	4618      	mov	r0, r3
 8003b14:	3720      	adds	r7, #32
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bd80      	pop	{r7, pc}
	...

08003b1c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b088      	sub	sp, #32
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003b24:	2300      	movs	r3, #0
 8003b26:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	689a      	ldr	r2, [r3, #8]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	691b      	ldr	r3, [r3, #16]
 8003b30:	431a      	orrs	r2, r3
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	695b      	ldr	r3, [r3, #20]
 8003b36:	431a      	orrs	r2, r3
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	69db      	ldr	r3, [r3, #28]
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	681a      	ldr	r2, [r3, #0]
 8003b46:	4ba6      	ldr	r3, [pc, #664]	@ (8003de0 <UART_SetConfig+0x2c4>)
 8003b48:	4013      	ands	r3, r2
 8003b4a:	687a      	ldr	r2, [r7, #4]
 8003b4c:	6812      	ldr	r2, [r2, #0]
 8003b4e:	6979      	ldr	r1, [r7, #20]
 8003b50:	430b      	orrs	r3, r1
 8003b52:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	68da      	ldr	r2, [r3, #12]
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	430a      	orrs	r2, r1
 8003b68:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	699b      	ldr	r3, [r3, #24]
 8003b6e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6a1b      	ldr	r3, [r3, #32]
 8003b74:	697a      	ldr	r2, [r7, #20]
 8003b76:	4313      	orrs	r3, r2
 8003b78:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	689b      	ldr	r3, [r3, #8]
 8003b80:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	697a      	ldr	r2, [r7, #20]
 8003b8a:	430a      	orrs	r2, r1
 8003b8c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a94      	ldr	r2, [pc, #592]	@ (8003de4 <UART_SetConfig+0x2c8>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d120      	bne.n	8003bda <UART_SetConfig+0xbe>
 8003b98:	4b93      	ldr	r3, [pc, #588]	@ (8003de8 <UART_SetConfig+0x2cc>)
 8003b9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b9e:	f003 0303 	and.w	r3, r3, #3
 8003ba2:	2b03      	cmp	r3, #3
 8003ba4:	d816      	bhi.n	8003bd4 <UART_SetConfig+0xb8>
 8003ba6:	a201      	add	r2, pc, #4	@ (adr r2, 8003bac <UART_SetConfig+0x90>)
 8003ba8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bac:	08003bbd 	.word	0x08003bbd
 8003bb0:	08003bc9 	.word	0x08003bc9
 8003bb4:	08003bc3 	.word	0x08003bc3
 8003bb8:	08003bcf 	.word	0x08003bcf
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	77fb      	strb	r3, [r7, #31]
 8003bc0:	e150      	b.n	8003e64 <UART_SetConfig+0x348>
 8003bc2:	2302      	movs	r3, #2
 8003bc4:	77fb      	strb	r3, [r7, #31]
 8003bc6:	e14d      	b.n	8003e64 <UART_SetConfig+0x348>
 8003bc8:	2304      	movs	r3, #4
 8003bca:	77fb      	strb	r3, [r7, #31]
 8003bcc:	e14a      	b.n	8003e64 <UART_SetConfig+0x348>
 8003bce:	2308      	movs	r3, #8
 8003bd0:	77fb      	strb	r3, [r7, #31]
 8003bd2:	e147      	b.n	8003e64 <UART_SetConfig+0x348>
 8003bd4:	2310      	movs	r3, #16
 8003bd6:	77fb      	strb	r3, [r7, #31]
 8003bd8:	e144      	b.n	8003e64 <UART_SetConfig+0x348>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a83      	ldr	r2, [pc, #524]	@ (8003dec <UART_SetConfig+0x2d0>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d132      	bne.n	8003c4a <UART_SetConfig+0x12e>
 8003be4:	4b80      	ldr	r3, [pc, #512]	@ (8003de8 <UART_SetConfig+0x2cc>)
 8003be6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bea:	f003 030c 	and.w	r3, r3, #12
 8003bee:	2b0c      	cmp	r3, #12
 8003bf0:	d828      	bhi.n	8003c44 <UART_SetConfig+0x128>
 8003bf2:	a201      	add	r2, pc, #4	@ (adr r2, 8003bf8 <UART_SetConfig+0xdc>)
 8003bf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bf8:	08003c2d 	.word	0x08003c2d
 8003bfc:	08003c45 	.word	0x08003c45
 8003c00:	08003c45 	.word	0x08003c45
 8003c04:	08003c45 	.word	0x08003c45
 8003c08:	08003c39 	.word	0x08003c39
 8003c0c:	08003c45 	.word	0x08003c45
 8003c10:	08003c45 	.word	0x08003c45
 8003c14:	08003c45 	.word	0x08003c45
 8003c18:	08003c33 	.word	0x08003c33
 8003c1c:	08003c45 	.word	0x08003c45
 8003c20:	08003c45 	.word	0x08003c45
 8003c24:	08003c45 	.word	0x08003c45
 8003c28:	08003c3f 	.word	0x08003c3f
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	77fb      	strb	r3, [r7, #31]
 8003c30:	e118      	b.n	8003e64 <UART_SetConfig+0x348>
 8003c32:	2302      	movs	r3, #2
 8003c34:	77fb      	strb	r3, [r7, #31]
 8003c36:	e115      	b.n	8003e64 <UART_SetConfig+0x348>
 8003c38:	2304      	movs	r3, #4
 8003c3a:	77fb      	strb	r3, [r7, #31]
 8003c3c:	e112      	b.n	8003e64 <UART_SetConfig+0x348>
 8003c3e:	2308      	movs	r3, #8
 8003c40:	77fb      	strb	r3, [r7, #31]
 8003c42:	e10f      	b.n	8003e64 <UART_SetConfig+0x348>
 8003c44:	2310      	movs	r3, #16
 8003c46:	77fb      	strb	r3, [r7, #31]
 8003c48:	e10c      	b.n	8003e64 <UART_SetConfig+0x348>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4a68      	ldr	r2, [pc, #416]	@ (8003df0 <UART_SetConfig+0x2d4>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d120      	bne.n	8003c96 <UART_SetConfig+0x17a>
 8003c54:	4b64      	ldr	r3, [pc, #400]	@ (8003de8 <UART_SetConfig+0x2cc>)
 8003c56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c5a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003c5e:	2b30      	cmp	r3, #48	@ 0x30
 8003c60:	d013      	beq.n	8003c8a <UART_SetConfig+0x16e>
 8003c62:	2b30      	cmp	r3, #48	@ 0x30
 8003c64:	d814      	bhi.n	8003c90 <UART_SetConfig+0x174>
 8003c66:	2b20      	cmp	r3, #32
 8003c68:	d009      	beq.n	8003c7e <UART_SetConfig+0x162>
 8003c6a:	2b20      	cmp	r3, #32
 8003c6c:	d810      	bhi.n	8003c90 <UART_SetConfig+0x174>
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d002      	beq.n	8003c78 <UART_SetConfig+0x15c>
 8003c72:	2b10      	cmp	r3, #16
 8003c74:	d006      	beq.n	8003c84 <UART_SetConfig+0x168>
 8003c76:	e00b      	b.n	8003c90 <UART_SetConfig+0x174>
 8003c78:	2300      	movs	r3, #0
 8003c7a:	77fb      	strb	r3, [r7, #31]
 8003c7c:	e0f2      	b.n	8003e64 <UART_SetConfig+0x348>
 8003c7e:	2302      	movs	r3, #2
 8003c80:	77fb      	strb	r3, [r7, #31]
 8003c82:	e0ef      	b.n	8003e64 <UART_SetConfig+0x348>
 8003c84:	2304      	movs	r3, #4
 8003c86:	77fb      	strb	r3, [r7, #31]
 8003c88:	e0ec      	b.n	8003e64 <UART_SetConfig+0x348>
 8003c8a:	2308      	movs	r3, #8
 8003c8c:	77fb      	strb	r3, [r7, #31]
 8003c8e:	e0e9      	b.n	8003e64 <UART_SetConfig+0x348>
 8003c90:	2310      	movs	r3, #16
 8003c92:	77fb      	strb	r3, [r7, #31]
 8003c94:	e0e6      	b.n	8003e64 <UART_SetConfig+0x348>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a56      	ldr	r2, [pc, #344]	@ (8003df4 <UART_SetConfig+0x2d8>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d120      	bne.n	8003ce2 <UART_SetConfig+0x1c6>
 8003ca0:	4b51      	ldr	r3, [pc, #324]	@ (8003de8 <UART_SetConfig+0x2cc>)
 8003ca2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ca6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003caa:	2bc0      	cmp	r3, #192	@ 0xc0
 8003cac:	d013      	beq.n	8003cd6 <UART_SetConfig+0x1ba>
 8003cae:	2bc0      	cmp	r3, #192	@ 0xc0
 8003cb0:	d814      	bhi.n	8003cdc <UART_SetConfig+0x1c0>
 8003cb2:	2b80      	cmp	r3, #128	@ 0x80
 8003cb4:	d009      	beq.n	8003cca <UART_SetConfig+0x1ae>
 8003cb6:	2b80      	cmp	r3, #128	@ 0x80
 8003cb8:	d810      	bhi.n	8003cdc <UART_SetConfig+0x1c0>
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d002      	beq.n	8003cc4 <UART_SetConfig+0x1a8>
 8003cbe:	2b40      	cmp	r3, #64	@ 0x40
 8003cc0:	d006      	beq.n	8003cd0 <UART_SetConfig+0x1b4>
 8003cc2:	e00b      	b.n	8003cdc <UART_SetConfig+0x1c0>
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	77fb      	strb	r3, [r7, #31]
 8003cc8:	e0cc      	b.n	8003e64 <UART_SetConfig+0x348>
 8003cca:	2302      	movs	r3, #2
 8003ccc:	77fb      	strb	r3, [r7, #31]
 8003cce:	e0c9      	b.n	8003e64 <UART_SetConfig+0x348>
 8003cd0:	2304      	movs	r3, #4
 8003cd2:	77fb      	strb	r3, [r7, #31]
 8003cd4:	e0c6      	b.n	8003e64 <UART_SetConfig+0x348>
 8003cd6:	2308      	movs	r3, #8
 8003cd8:	77fb      	strb	r3, [r7, #31]
 8003cda:	e0c3      	b.n	8003e64 <UART_SetConfig+0x348>
 8003cdc:	2310      	movs	r3, #16
 8003cde:	77fb      	strb	r3, [r7, #31]
 8003ce0:	e0c0      	b.n	8003e64 <UART_SetConfig+0x348>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4a44      	ldr	r2, [pc, #272]	@ (8003df8 <UART_SetConfig+0x2dc>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d125      	bne.n	8003d38 <UART_SetConfig+0x21c>
 8003cec:	4b3e      	ldr	r3, [pc, #248]	@ (8003de8 <UART_SetConfig+0x2cc>)
 8003cee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cf2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003cf6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003cfa:	d017      	beq.n	8003d2c <UART_SetConfig+0x210>
 8003cfc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003d00:	d817      	bhi.n	8003d32 <UART_SetConfig+0x216>
 8003d02:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003d06:	d00b      	beq.n	8003d20 <UART_SetConfig+0x204>
 8003d08:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003d0c:	d811      	bhi.n	8003d32 <UART_SetConfig+0x216>
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d003      	beq.n	8003d1a <UART_SetConfig+0x1fe>
 8003d12:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003d16:	d006      	beq.n	8003d26 <UART_SetConfig+0x20a>
 8003d18:	e00b      	b.n	8003d32 <UART_SetConfig+0x216>
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	77fb      	strb	r3, [r7, #31]
 8003d1e:	e0a1      	b.n	8003e64 <UART_SetConfig+0x348>
 8003d20:	2302      	movs	r3, #2
 8003d22:	77fb      	strb	r3, [r7, #31]
 8003d24:	e09e      	b.n	8003e64 <UART_SetConfig+0x348>
 8003d26:	2304      	movs	r3, #4
 8003d28:	77fb      	strb	r3, [r7, #31]
 8003d2a:	e09b      	b.n	8003e64 <UART_SetConfig+0x348>
 8003d2c:	2308      	movs	r3, #8
 8003d2e:	77fb      	strb	r3, [r7, #31]
 8003d30:	e098      	b.n	8003e64 <UART_SetConfig+0x348>
 8003d32:	2310      	movs	r3, #16
 8003d34:	77fb      	strb	r3, [r7, #31]
 8003d36:	e095      	b.n	8003e64 <UART_SetConfig+0x348>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4a2f      	ldr	r2, [pc, #188]	@ (8003dfc <UART_SetConfig+0x2e0>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d125      	bne.n	8003d8e <UART_SetConfig+0x272>
 8003d42:	4b29      	ldr	r3, [pc, #164]	@ (8003de8 <UART_SetConfig+0x2cc>)
 8003d44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d48:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003d4c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003d50:	d017      	beq.n	8003d82 <UART_SetConfig+0x266>
 8003d52:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003d56:	d817      	bhi.n	8003d88 <UART_SetConfig+0x26c>
 8003d58:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003d5c:	d00b      	beq.n	8003d76 <UART_SetConfig+0x25a>
 8003d5e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003d62:	d811      	bhi.n	8003d88 <UART_SetConfig+0x26c>
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d003      	beq.n	8003d70 <UART_SetConfig+0x254>
 8003d68:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d6c:	d006      	beq.n	8003d7c <UART_SetConfig+0x260>
 8003d6e:	e00b      	b.n	8003d88 <UART_SetConfig+0x26c>
 8003d70:	2301      	movs	r3, #1
 8003d72:	77fb      	strb	r3, [r7, #31]
 8003d74:	e076      	b.n	8003e64 <UART_SetConfig+0x348>
 8003d76:	2302      	movs	r3, #2
 8003d78:	77fb      	strb	r3, [r7, #31]
 8003d7a:	e073      	b.n	8003e64 <UART_SetConfig+0x348>
 8003d7c:	2304      	movs	r3, #4
 8003d7e:	77fb      	strb	r3, [r7, #31]
 8003d80:	e070      	b.n	8003e64 <UART_SetConfig+0x348>
 8003d82:	2308      	movs	r3, #8
 8003d84:	77fb      	strb	r3, [r7, #31]
 8003d86:	e06d      	b.n	8003e64 <UART_SetConfig+0x348>
 8003d88:	2310      	movs	r3, #16
 8003d8a:	77fb      	strb	r3, [r7, #31]
 8003d8c:	e06a      	b.n	8003e64 <UART_SetConfig+0x348>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4a1b      	ldr	r2, [pc, #108]	@ (8003e00 <UART_SetConfig+0x2e4>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d138      	bne.n	8003e0a <UART_SetConfig+0x2ee>
 8003d98:	4b13      	ldr	r3, [pc, #76]	@ (8003de8 <UART_SetConfig+0x2cc>)
 8003d9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d9e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8003da2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003da6:	d017      	beq.n	8003dd8 <UART_SetConfig+0x2bc>
 8003da8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003dac:	d82a      	bhi.n	8003e04 <UART_SetConfig+0x2e8>
 8003dae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003db2:	d00b      	beq.n	8003dcc <UART_SetConfig+0x2b0>
 8003db4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003db8:	d824      	bhi.n	8003e04 <UART_SetConfig+0x2e8>
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d003      	beq.n	8003dc6 <UART_SetConfig+0x2aa>
 8003dbe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003dc2:	d006      	beq.n	8003dd2 <UART_SetConfig+0x2b6>
 8003dc4:	e01e      	b.n	8003e04 <UART_SetConfig+0x2e8>
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	77fb      	strb	r3, [r7, #31]
 8003dca:	e04b      	b.n	8003e64 <UART_SetConfig+0x348>
 8003dcc:	2302      	movs	r3, #2
 8003dce:	77fb      	strb	r3, [r7, #31]
 8003dd0:	e048      	b.n	8003e64 <UART_SetConfig+0x348>
 8003dd2:	2304      	movs	r3, #4
 8003dd4:	77fb      	strb	r3, [r7, #31]
 8003dd6:	e045      	b.n	8003e64 <UART_SetConfig+0x348>
 8003dd8:	2308      	movs	r3, #8
 8003dda:	77fb      	strb	r3, [r7, #31]
 8003ddc:	e042      	b.n	8003e64 <UART_SetConfig+0x348>
 8003dde:	bf00      	nop
 8003de0:	efff69f3 	.word	0xefff69f3
 8003de4:	40011000 	.word	0x40011000
 8003de8:	40023800 	.word	0x40023800
 8003dec:	40004400 	.word	0x40004400
 8003df0:	40004800 	.word	0x40004800
 8003df4:	40004c00 	.word	0x40004c00
 8003df8:	40005000 	.word	0x40005000
 8003dfc:	40011400 	.word	0x40011400
 8003e00:	40007800 	.word	0x40007800
 8003e04:	2310      	movs	r3, #16
 8003e06:	77fb      	strb	r3, [r7, #31]
 8003e08:	e02c      	b.n	8003e64 <UART_SetConfig+0x348>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a72      	ldr	r2, [pc, #456]	@ (8003fd8 <UART_SetConfig+0x4bc>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d125      	bne.n	8003e60 <UART_SetConfig+0x344>
 8003e14:	4b71      	ldr	r3, [pc, #452]	@ (8003fdc <UART_SetConfig+0x4c0>)
 8003e16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e1a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8003e1e:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003e22:	d017      	beq.n	8003e54 <UART_SetConfig+0x338>
 8003e24:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003e28:	d817      	bhi.n	8003e5a <UART_SetConfig+0x33e>
 8003e2a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e2e:	d00b      	beq.n	8003e48 <UART_SetConfig+0x32c>
 8003e30:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e34:	d811      	bhi.n	8003e5a <UART_SetConfig+0x33e>
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d003      	beq.n	8003e42 <UART_SetConfig+0x326>
 8003e3a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003e3e:	d006      	beq.n	8003e4e <UART_SetConfig+0x332>
 8003e40:	e00b      	b.n	8003e5a <UART_SetConfig+0x33e>
 8003e42:	2300      	movs	r3, #0
 8003e44:	77fb      	strb	r3, [r7, #31]
 8003e46:	e00d      	b.n	8003e64 <UART_SetConfig+0x348>
 8003e48:	2302      	movs	r3, #2
 8003e4a:	77fb      	strb	r3, [r7, #31]
 8003e4c:	e00a      	b.n	8003e64 <UART_SetConfig+0x348>
 8003e4e:	2304      	movs	r3, #4
 8003e50:	77fb      	strb	r3, [r7, #31]
 8003e52:	e007      	b.n	8003e64 <UART_SetConfig+0x348>
 8003e54:	2308      	movs	r3, #8
 8003e56:	77fb      	strb	r3, [r7, #31]
 8003e58:	e004      	b.n	8003e64 <UART_SetConfig+0x348>
 8003e5a:	2310      	movs	r3, #16
 8003e5c:	77fb      	strb	r3, [r7, #31]
 8003e5e:	e001      	b.n	8003e64 <UART_SetConfig+0x348>
 8003e60:	2310      	movs	r3, #16
 8003e62:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	69db      	ldr	r3, [r3, #28]
 8003e68:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e6c:	d15b      	bne.n	8003f26 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8003e6e:	7ffb      	ldrb	r3, [r7, #31]
 8003e70:	2b08      	cmp	r3, #8
 8003e72:	d828      	bhi.n	8003ec6 <UART_SetConfig+0x3aa>
 8003e74:	a201      	add	r2, pc, #4	@ (adr r2, 8003e7c <UART_SetConfig+0x360>)
 8003e76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e7a:	bf00      	nop
 8003e7c:	08003ea1 	.word	0x08003ea1
 8003e80:	08003ea9 	.word	0x08003ea9
 8003e84:	08003eb1 	.word	0x08003eb1
 8003e88:	08003ec7 	.word	0x08003ec7
 8003e8c:	08003eb7 	.word	0x08003eb7
 8003e90:	08003ec7 	.word	0x08003ec7
 8003e94:	08003ec7 	.word	0x08003ec7
 8003e98:	08003ec7 	.word	0x08003ec7
 8003e9c:	08003ebf 	.word	0x08003ebf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ea0:	f7fe fe14 	bl	8002acc <HAL_RCC_GetPCLK1Freq>
 8003ea4:	61b8      	str	r0, [r7, #24]
        break;
 8003ea6:	e013      	b.n	8003ed0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003ea8:	f7fe fe24 	bl	8002af4 <HAL_RCC_GetPCLK2Freq>
 8003eac:	61b8      	str	r0, [r7, #24]
        break;
 8003eae:	e00f      	b.n	8003ed0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003eb0:	4b4b      	ldr	r3, [pc, #300]	@ (8003fe0 <UART_SetConfig+0x4c4>)
 8003eb2:	61bb      	str	r3, [r7, #24]
        break;
 8003eb4:	e00c      	b.n	8003ed0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003eb6:	f7fe fcf7 	bl	80028a8 <HAL_RCC_GetSysClockFreq>
 8003eba:	61b8      	str	r0, [r7, #24]
        break;
 8003ebc:	e008      	b.n	8003ed0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ebe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003ec2:	61bb      	str	r3, [r7, #24]
        break;
 8003ec4:	e004      	b.n	8003ed0 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	77bb      	strb	r3, [r7, #30]
        break;
 8003ece:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003ed0:	69bb      	ldr	r3, [r7, #24]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d074      	beq.n	8003fc0 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003ed6:	69bb      	ldr	r3, [r7, #24]
 8003ed8:	005a      	lsls	r2, r3, #1
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	085b      	lsrs	r3, r3, #1
 8003ee0:	441a      	add	r2, r3
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003eea:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003eec:	693b      	ldr	r3, [r7, #16]
 8003eee:	2b0f      	cmp	r3, #15
 8003ef0:	d916      	bls.n	8003f20 <UART_SetConfig+0x404>
 8003ef2:	693b      	ldr	r3, [r7, #16]
 8003ef4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ef8:	d212      	bcs.n	8003f20 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003efa:	693b      	ldr	r3, [r7, #16]
 8003efc:	b29b      	uxth	r3, r3
 8003efe:	f023 030f 	bic.w	r3, r3, #15
 8003f02:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003f04:	693b      	ldr	r3, [r7, #16]
 8003f06:	085b      	lsrs	r3, r3, #1
 8003f08:	b29b      	uxth	r3, r3
 8003f0a:	f003 0307 	and.w	r3, r3, #7
 8003f0e:	b29a      	uxth	r2, r3
 8003f10:	89fb      	ldrh	r3, [r7, #14]
 8003f12:	4313      	orrs	r3, r2
 8003f14:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	89fa      	ldrh	r2, [r7, #14]
 8003f1c:	60da      	str	r2, [r3, #12]
 8003f1e:	e04f      	b.n	8003fc0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003f20:	2301      	movs	r3, #1
 8003f22:	77bb      	strb	r3, [r7, #30]
 8003f24:	e04c      	b.n	8003fc0 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003f26:	7ffb      	ldrb	r3, [r7, #31]
 8003f28:	2b08      	cmp	r3, #8
 8003f2a:	d828      	bhi.n	8003f7e <UART_SetConfig+0x462>
 8003f2c:	a201      	add	r2, pc, #4	@ (adr r2, 8003f34 <UART_SetConfig+0x418>)
 8003f2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f32:	bf00      	nop
 8003f34:	08003f59 	.word	0x08003f59
 8003f38:	08003f61 	.word	0x08003f61
 8003f3c:	08003f69 	.word	0x08003f69
 8003f40:	08003f7f 	.word	0x08003f7f
 8003f44:	08003f6f 	.word	0x08003f6f
 8003f48:	08003f7f 	.word	0x08003f7f
 8003f4c:	08003f7f 	.word	0x08003f7f
 8003f50:	08003f7f 	.word	0x08003f7f
 8003f54:	08003f77 	.word	0x08003f77
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f58:	f7fe fdb8 	bl	8002acc <HAL_RCC_GetPCLK1Freq>
 8003f5c:	61b8      	str	r0, [r7, #24]
        break;
 8003f5e:	e013      	b.n	8003f88 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f60:	f7fe fdc8 	bl	8002af4 <HAL_RCC_GetPCLK2Freq>
 8003f64:	61b8      	str	r0, [r7, #24]
        break;
 8003f66:	e00f      	b.n	8003f88 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f68:	4b1d      	ldr	r3, [pc, #116]	@ (8003fe0 <UART_SetConfig+0x4c4>)
 8003f6a:	61bb      	str	r3, [r7, #24]
        break;
 8003f6c:	e00c      	b.n	8003f88 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f6e:	f7fe fc9b 	bl	80028a8 <HAL_RCC_GetSysClockFreq>
 8003f72:	61b8      	str	r0, [r7, #24]
        break;
 8003f74:	e008      	b.n	8003f88 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f76:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003f7a:	61bb      	str	r3, [r7, #24]
        break;
 8003f7c:	e004      	b.n	8003f88 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8003f7e:	2300      	movs	r3, #0
 8003f80:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003f82:	2301      	movs	r3, #1
 8003f84:	77bb      	strb	r3, [r7, #30]
        break;
 8003f86:	bf00      	nop
    }

    if (pclk != 0U)
 8003f88:	69bb      	ldr	r3, [r7, #24]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d018      	beq.n	8003fc0 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	085a      	lsrs	r2, r3, #1
 8003f94:	69bb      	ldr	r3, [r7, #24]
 8003f96:	441a      	add	r2, r3
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fa0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003fa2:	693b      	ldr	r3, [r7, #16]
 8003fa4:	2b0f      	cmp	r3, #15
 8003fa6:	d909      	bls.n	8003fbc <UART_SetConfig+0x4a0>
 8003fa8:	693b      	ldr	r3, [r7, #16]
 8003faa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003fae:	d205      	bcs.n	8003fbc <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003fb0:	693b      	ldr	r3, [r7, #16]
 8003fb2:	b29a      	uxth	r2, r3
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	60da      	str	r2, [r3, #12]
 8003fba:	e001      	b.n	8003fc0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003fcc:	7fbb      	ldrb	r3, [r7, #30]
}
 8003fce:	4618      	mov	r0, r3
 8003fd0:	3720      	adds	r7, #32
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bd80      	pop	{r7, pc}
 8003fd6:	bf00      	nop
 8003fd8:	40007c00 	.word	0x40007c00
 8003fdc:	40023800 	.word	0x40023800
 8003fe0:	00f42400 	.word	0x00f42400

08003fe4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b083      	sub	sp, #12
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ff0:	f003 0308 	and.w	r3, r3, #8
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d00a      	beq.n	800400e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	430a      	orrs	r2, r1
 800400c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004012:	f003 0301 	and.w	r3, r3, #1
 8004016:	2b00      	cmp	r3, #0
 8004018:	d00a      	beq.n	8004030 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	430a      	orrs	r2, r1
 800402e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004034:	f003 0302 	and.w	r3, r3, #2
 8004038:	2b00      	cmp	r3, #0
 800403a:	d00a      	beq.n	8004052 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	430a      	orrs	r2, r1
 8004050:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004056:	f003 0304 	and.w	r3, r3, #4
 800405a:	2b00      	cmp	r3, #0
 800405c:	d00a      	beq.n	8004074 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	430a      	orrs	r2, r1
 8004072:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004078:	f003 0310 	and.w	r3, r3, #16
 800407c:	2b00      	cmp	r3, #0
 800407e:	d00a      	beq.n	8004096 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	689b      	ldr	r3, [r3, #8]
 8004086:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	430a      	orrs	r2, r1
 8004094:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800409a:	f003 0320 	and.w	r3, r3, #32
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d00a      	beq.n	80040b8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	689b      	ldr	r3, [r3, #8]
 80040a8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	430a      	orrs	r2, r1
 80040b6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d01a      	beq.n	80040fa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	430a      	orrs	r2, r1
 80040d8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040de:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80040e2:	d10a      	bne.n	80040fa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	430a      	orrs	r2, r1
 80040f8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004102:	2b00      	cmp	r3, #0
 8004104:	d00a      	beq.n	800411c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	430a      	orrs	r2, r1
 800411a:	605a      	str	r2, [r3, #4]
  }
}
 800411c:	bf00      	nop
 800411e:	370c      	adds	r7, #12
 8004120:	46bd      	mov	sp, r7
 8004122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004126:	4770      	bx	lr

08004128 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b098      	sub	sp, #96	@ 0x60
 800412c:	af02      	add	r7, sp, #8
 800412e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2200      	movs	r2, #0
 8004134:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004138:	f7fd f85c 	bl	80011f4 <HAL_GetTick>
 800413c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f003 0308 	and.w	r3, r3, #8
 8004148:	2b08      	cmp	r3, #8
 800414a:	d12e      	bne.n	80041aa <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800414c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004150:	9300      	str	r3, [sp, #0]
 8004152:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004154:	2200      	movs	r2, #0
 8004156:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800415a:	6878      	ldr	r0, [r7, #4]
 800415c:	f000 f88c 	bl	8004278 <UART_WaitOnFlagUntilTimeout>
 8004160:	4603      	mov	r3, r0
 8004162:	2b00      	cmp	r3, #0
 8004164:	d021      	beq.n	80041aa <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800416c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800416e:	e853 3f00 	ldrex	r3, [r3]
 8004172:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004174:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004176:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800417a:	653b      	str	r3, [r7, #80]	@ 0x50
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	461a      	mov	r2, r3
 8004182:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004184:	647b      	str	r3, [r7, #68]	@ 0x44
 8004186:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004188:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800418a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800418c:	e841 2300 	strex	r3, r2, [r1]
 8004190:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004192:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004194:	2b00      	cmp	r3, #0
 8004196:	d1e6      	bne.n	8004166 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2220      	movs	r2, #32
 800419c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2200      	movs	r2, #0
 80041a2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80041a6:	2303      	movs	r3, #3
 80041a8:	e062      	b.n	8004270 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f003 0304 	and.w	r3, r3, #4
 80041b4:	2b04      	cmp	r3, #4
 80041b6:	d149      	bne.n	800424c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80041b8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80041bc:	9300      	str	r3, [sp, #0]
 80041be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041c0:	2200      	movs	r2, #0
 80041c2:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80041c6:	6878      	ldr	r0, [r7, #4]
 80041c8:	f000 f856 	bl	8004278 <UART_WaitOnFlagUntilTimeout>
 80041cc:	4603      	mov	r3, r0
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d03c      	beq.n	800424c <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041da:	e853 3f00 	ldrex	r3, [r3]
 80041de:	623b      	str	r3, [r7, #32]
   return(result);
 80041e0:	6a3b      	ldr	r3, [r7, #32]
 80041e2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80041e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	461a      	mov	r2, r3
 80041ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80041f0:	633b      	str	r3, [r7, #48]	@ 0x30
 80041f2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041f4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80041f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80041f8:	e841 2300 	strex	r3, r2, [r1]
 80041fc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80041fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004200:	2b00      	cmp	r3, #0
 8004202:	d1e6      	bne.n	80041d2 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	3308      	adds	r3, #8
 800420a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800420c:	693b      	ldr	r3, [r7, #16]
 800420e:	e853 3f00 	ldrex	r3, [r3]
 8004212:	60fb      	str	r3, [r7, #12]
   return(result);
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	f023 0301 	bic.w	r3, r3, #1
 800421a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	3308      	adds	r3, #8
 8004222:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004224:	61fa      	str	r2, [r7, #28]
 8004226:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004228:	69b9      	ldr	r1, [r7, #24]
 800422a:	69fa      	ldr	r2, [r7, #28]
 800422c:	e841 2300 	strex	r3, r2, [r1]
 8004230:	617b      	str	r3, [r7, #20]
   return(result);
 8004232:	697b      	ldr	r3, [r7, #20]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d1e5      	bne.n	8004204 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2220      	movs	r2, #32
 800423c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2200      	movs	r2, #0
 8004244:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004248:	2303      	movs	r3, #3
 800424a:	e011      	b.n	8004270 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2220      	movs	r2, #32
 8004250:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2220      	movs	r2, #32
 8004256:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2200      	movs	r2, #0
 800425e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2200      	movs	r2, #0
 8004264:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2200      	movs	r2, #0
 800426a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800426e:	2300      	movs	r3, #0
}
 8004270:	4618      	mov	r0, r3
 8004272:	3758      	adds	r7, #88	@ 0x58
 8004274:	46bd      	mov	sp, r7
 8004276:	bd80      	pop	{r7, pc}

08004278 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b084      	sub	sp, #16
 800427c:	af00      	add	r7, sp, #0
 800427e:	60f8      	str	r0, [r7, #12]
 8004280:	60b9      	str	r1, [r7, #8]
 8004282:	603b      	str	r3, [r7, #0]
 8004284:	4613      	mov	r3, r2
 8004286:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004288:	e04f      	b.n	800432a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800428a:	69bb      	ldr	r3, [r7, #24]
 800428c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004290:	d04b      	beq.n	800432a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004292:	f7fc ffaf 	bl	80011f4 <HAL_GetTick>
 8004296:	4602      	mov	r2, r0
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	1ad3      	subs	r3, r2, r3
 800429c:	69ba      	ldr	r2, [r7, #24]
 800429e:	429a      	cmp	r2, r3
 80042a0:	d302      	bcc.n	80042a8 <UART_WaitOnFlagUntilTimeout+0x30>
 80042a2:	69bb      	ldr	r3, [r7, #24]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d101      	bne.n	80042ac <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80042a8:	2303      	movs	r3, #3
 80042aa:	e04e      	b.n	800434a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f003 0304 	and.w	r3, r3, #4
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d037      	beq.n	800432a <UART_WaitOnFlagUntilTimeout+0xb2>
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	2b80      	cmp	r3, #128	@ 0x80
 80042be:	d034      	beq.n	800432a <UART_WaitOnFlagUntilTimeout+0xb2>
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	2b40      	cmp	r3, #64	@ 0x40
 80042c4:	d031      	beq.n	800432a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	69db      	ldr	r3, [r3, #28]
 80042cc:	f003 0308 	and.w	r3, r3, #8
 80042d0:	2b08      	cmp	r3, #8
 80042d2:	d110      	bne.n	80042f6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	2208      	movs	r2, #8
 80042da:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80042dc:	68f8      	ldr	r0, [r7, #12]
 80042de:	f000 f838 	bl	8004352 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	2208      	movs	r2, #8
 80042e6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	2200      	movs	r2, #0
 80042ee:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80042f2:	2301      	movs	r3, #1
 80042f4:	e029      	b.n	800434a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	69db      	ldr	r3, [r3, #28]
 80042fc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004300:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004304:	d111      	bne.n	800432a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800430e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004310:	68f8      	ldr	r0, [r7, #12]
 8004312:	f000 f81e 	bl	8004352 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	2220      	movs	r2, #32
 800431a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	2200      	movs	r2, #0
 8004322:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004326:	2303      	movs	r3, #3
 8004328:	e00f      	b.n	800434a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	69da      	ldr	r2, [r3, #28]
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	4013      	ands	r3, r2
 8004334:	68ba      	ldr	r2, [r7, #8]
 8004336:	429a      	cmp	r2, r3
 8004338:	bf0c      	ite	eq
 800433a:	2301      	moveq	r3, #1
 800433c:	2300      	movne	r3, #0
 800433e:	b2db      	uxtb	r3, r3
 8004340:	461a      	mov	r2, r3
 8004342:	79fb      	ldrb	r3, [r7, #7]
 8004344:	429a      	cmp	r2, r3
 8004346:	d0a0      	beq.n	800428a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004348:	2300      	movs	r3, #0
}
 800434a:	4618      	mov	r0, r3
 800434c:	3710      	adds	r7, #16
 800434e:	46bd      	mov	sp, r7
 8004350:	bd80      	pop	{r7, pc}

08004352 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004352:	b480      	push	{r7}
 8004354:	b095      	sub	sp, #84	@ 0x54
 8004356:	af00      	add	r7, sp, #0
 8004358:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004360:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004362:	e853 3f00 	ldrex	r3, [r3]
 8004366:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004368:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800436a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800436e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	461a      	mov	r2, r3
 8004376:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004378:	643b      	str	r3, [r7, #64]	@ 0x40
 800437a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800437c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800437e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004380:	e841 2300 	strex	r3, r2, [r1]
 8004384:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004386:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004388:	2b00      	cmp	r3, #0
 800438a:	d1e6      	bne.n	800435a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	3308      	adds	r3, #8
 8004392:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004394:	6a3b      	ldr	r3, [r7, #32]
 8004396:	e853 3f00 	ldrex	r3, [r3]
 800439a:	61fb      	str	r3, [r7, #28]
   return(result);
 800439c:	69fb      	ldr	r3, [r7, #28]
 800439e:	f023 0301 	bic.w	r3, r3, #1
 80043a2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	3308      	adds	r3, #8
 80043aa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80043ac:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80043ae:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043b0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80043b2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80043b4:	e841 2300 	strex	r3, r2, [r1]
 80043b8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80043ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d1e5      	bne.n	800438c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80043c4:	2b01      	cmp	r3, #1
 80043c6:	d118      	bne.n	80043fa <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	e853 3f00 	ldrex	r3, [r3]
 80043d4:	60bb      	str	r3, [r7, #8]
   return(result);
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	f023 0310 	bic.w	r3, r3, #16
 80043dc:	647b      	str	r3, [r7, #68]	@ 0x44
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	461a      	mov	r2, r3
 80043e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80043e6:	61bb      	str	r3, [r7, #24]
 80043e8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043ea:	6979      	ldr	r1, [r7, #20]
 80043ec:	69ba      	ldr	r2, [r7, #24]
 80043ee:	e841 2300 	strex	r3, r2, [r1]
 80043f2:	613b      	str	r3, [r7, #16]
   return(result);
 80043f4:	693b      	ldr	r3, [r7, #16]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d1e6      	bne.n	80043c8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2220      	movs	r2, #32
 80043fe:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2200      	movs	r2, #0
 8004406:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2200      	movs	r2, #0
 800440c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800440e:	bf00      	nop
 8004410:	3754      	adds	r7, #84	@ 0x54
 8004412:	46bd      	mov	sp, r7
 8004414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004418:	4770      	bx	lr
	...

0800441c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800441c:	b084      	sub	sp, #16
 800441e:	b580      	push	{r7, lr}
 8004420:	b084      	sub	sp, #16
 8004422:	af00      	add	r7, sp, #0
 8004424:	6078      	str	r0, [r7, #4]
 8004426:	f107 001c 	add.w	r0, r7, #28
 800442a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800442e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8004432:	2b01      	cmp	r3, #1
 8004434:	d121      	bne.n	800447a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800443a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	68da      	ldr	r2, [r3, #12]
 8004446:	4b21      	ldr	r3, [pc, #132]	@ (80044cc <USB_CoreInit+0xb0>)
 8004448:	4013      	ands	r3, r2
 800444a:	687a      	ldr	r2, [r7, #4]
 800444c:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	68db      	ldr	r3, [r3, #12]
 8004452:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800445a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800445e:	2b01      	cmp	r3, #1
 8004460:	d105      	bne.n	800446e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	68db      	ldr	r3, [r3, #12]
 8004466:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800446e:	6878      	ldr	r0, [r7, #4]
 8004470:	f000 fa92 	bl	8004998 <USB_CoreReset>
 8004474:	4603      	mov	r3, r0
 8004476:	73fb      	strb	r3, [r7, #15]
 8004478:	e010      	b.n	800449c <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	68db      	ldr	r3, [r3, #12]
 800447e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004486:	6878      	ldr	r0, [r7, #4]
 8004488:	f000 fa86 	bl	8004998 <USB_CoreReset>
 800448c:	4603      	mov	r3, r0
 800448e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004494:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 800449c:	7fbb      	ldrb	r3, [r7, #30]
 800449e:	2b01      	cmp	r3, #1
 80044a0:	d10b      	bne.n	80044ba <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	689b      	ldr	r3, [r3, #8]
 80044a6:	f043 0206 	orr.w	r2, r3, #6
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	689b      	ldr	r3, [r3, #8]
 80044b2:	f043 0220 	orr.w	r2, r3, #32
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80044ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80044bc:	4618      	mov	r0, r3
 80044be:	3710      	adds	r7, #16
 80044c0:	46bd      	mov	sp, r7
 80044c2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80044c6:	b004      	add	sp, #16
 80044c8:	4770      	bx	lr
 80044ca:	bf00      	nop
 80044cc:	ffbdffbf 	.word	0xffbdffbf

080044d0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80044d0:	b480      	push	{r7}
 80044d2:	b083      	sub	sp, #12
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	689b      	ldr	r3, [r3, #8]
 80044dc:	f023 0201 	bic.w	r2, r3, #1
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80044e4:	2300      	movs	r3, #0
}
 80044e6:	4618      	mov	r0, r3
 80044e8:	370c      	adds	r7, #12
 80044ea:	46bd      	mov	sp, r7
 80044ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f0:	4770      	bx	lr

080044f2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80044f2:	b580      	push	{r7, lr}
 80044f4:	b084      	sub	sp, #16
 80044f6:	af00      	add	r7, sp, #0
 80044f8:	6078      	str	r0, [r7, #4]
 80044fa:	460b      	mov	r3, r1
 80044fc:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80044fe:	2300      	movs	r3, #0
 8004500:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	68db      	ldr	r3, [r3, #12]
 8004506:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800450e:	78fb      	ldrb	r3, [r7, #3]
 8004510:	2b01      	cmp	r3, #1
 8004512:	d115      	bne.n	8004540 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	68db      	ldr	r3, [r3, #12]
 8004518:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004520:	200a      	movs	r0, #10
 8004522:	f7fc fe73 	bl	800120c <HAL_Delay>
      ms += 10U;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	330a      	adds	r3, #10
 800452a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800452c:	6878      	ldr	r0, [r7, #4]
 800452e:	f000 fa25 	bl	800497c <USB_GetMode>
 8004532:	4603      	mov	r3, r0
 8004534:	2b01      	cmp	r3, #1
 8004536:	d01e      	beq.n	8004576 <USB_SetCurrentMode+0x84>
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	2bc7      	cmp	r3, #199	@ 0xc7
 800453c:	d9f0      	bls.n	8004520 <USB_SetCurrentMode+0x2e>
 800453e:	e01a      	b.n	8004576 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004540:	78fb      	ldrb	r3, [r7, #3]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d115      	bne.n	8004572 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	68db      	ldr	r3, [r3, #12]
 800454a:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004552:	200a      	movs	r0, #10
 8004554:	f7fc fe5a 	bl	800120c <HAL_Delay>
      ms += 10U;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	330a      	adds	r3, #10
 800455c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800455e:	6878      	ldr	r0, [r7, #4]
 8004560:	f000 fa0c 	bl	800497c <USB_GetMode>
 8004564:	4603      	mov	r3, r0
 8004566:	2b00      	cmp	r3, #0
 8004568:	d005      	beq.n	8004576 <USB_SetCurrentMode+0x84>
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	2bc7      	cmp	r3, #199	@ 0xc7
 800456e:	d9f0      	bls.n	8004552 <USB_SetCurrentMode+0x60>
 8004570:	e001      	b.n	8004576 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004572:	2301      	movs	r3, #1
 8004574:	e005      	b.n	8004582 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	2bc8      	cmp	r3, #200	@ 0xc8
 800457a:	d101      	bne.n	8004580 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800457c:	2301      	movs	r3, #1
 800457e:	e000      	b.n	8004582 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004580:	2300      	movs	r3, #0
}
 8004582:	4618      	mov	r0, r3
 8004584:	3710      	adds	r7, #16
 8004586:	46bd      	mov	sp, r7
 8004588:	bd80      	pop	{r7, pc}
	...

0800458c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800458c:	b084      	sub	sp, #16
 800458e:	b580      	push	{r7, lr}
 8004590:	b086      	sub	sp, #24
 8004592:	af00      	add	r7, sp, #0
 8004594:	6078      	str	r0, [r7, #4]
 8004596:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800459a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800459e:	2300      	movs	r3, #0
 80045a0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80045a6:	2300      	movs	r3, #0
 80045a8:	613b      	str	r3, [r7, #16]
 80045aa:	e009      	b.n	80045c0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80045ac:	687a      	ldr	r2, [r7, #4]
 80045ae:	693b      	ldr	r3, [r7, #16]
 80045b0:	3340      	adds	r3, #64	@ 0x40
 80045b2:	009b      	lsls	r3, r3, #2
 80045b4:	4413      	add	r3, r2
 80045b6:	2200      	movs	r2, #0
 80045b8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80045ba:	693b      	ldr	r3, [r7, #16]
 80045bc:	3301      	adds	r3, #1
 80045be:	613b      	str	r3, [r7, #16]
 80045c0:	693b      	ldr	r3, [r7, #16]
 80045c2:	2b0e      	cmp	r3, #14
 80045c4:	d9f2      	bls.n	80045ac <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80045c6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d11c      	bne.n	8004608 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80045d4:	685b      	ldr	r3, [r3, #4]
 80045d6:	68fa      	ldr	r2, [r7, #12]
 80045d8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80045dc:	f043 0302 	orr.w	r3, r3, #2
 80045e0:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045e6:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	601a      	str	r2, [r3, #0]
 8004606:	e005      	b.n	8004614 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800460c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800461a:	461a      	mov	r2, r3
 800461c:	2300      	movs	r3, #0
 800461e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004620:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8004624:	2b01      	cmp	r3, #1
 8004626:	d10d      	bne.n	8004644 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004628:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800462c:	2b00      	cmp	r3, #0
 800462e:	d104      	bne.n	800463a <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004630:	2100      	movs	r1, #0
 8004632:	6878      	ldr	r0, [r7, #4]
 8004634:	f000 f968 	bl	8004908 <USB_SetDevSpeed>
 8004638:	e008      	b.n	800464c <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800463a:	2101      	movs	r1, #1
 800463c:	6878      	ldr	r0, [r7, #4]
 800463e:	f000 f963 	bl	8004908 <USB_SetDevSpeed>
 8004642:	e003      	b.n	800464c <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004644:	2103      	movs	r1, #3
 8004646:	6878      	ldr	r0, [r7, #4]
 8004648:	f000 f95e 	bl	8004908 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800464c:	2110      	movs	r1, #16
 800464e:	6878      	ldr	r0, [r7, #4]
 8004650:	f000 f8fa 	bl	8004848 <USB_FlushTxFifo>
 8004654:	4603      	mov	r3, r0
 8004656:	2b00      	cmp	r3, #0
 8004658:	d001      	beq.n	800465e <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800465a:	2301      	movs	r3, #1
 800465c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800465e:	6878      	ldr	r0, [r7, #4]
 8004660:	f000 f924 	bl	80048ac <USB_FlushRxFifo>
 8004664:	4603      	mov	r3, r0
 8004666:	2b00      	cmp	r3, #0
 8004668:	d001      	beq.n	800466e <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800466a:	2301      	movs	r3, #1
 800466c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004674:	461a      	mov	r2, r3
 8004676:	2300      	movs	r3, #0
 8004678:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004680:	461a      	mov	r2, r3
 8004682:	2300      	movs	r3, #0
 8004684:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800468c:	461a      	mov	r2, r3
 800468e:	2300      	movs	r3, #0
 8004690:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004692:	2300      	movs	r3, #0
 8004694:	613b      	str	r3, [r7, #16]
 8004696:	e043      	b.n	8004720 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004698:	693b      	ldr	r3, [r7, #16]
 800469a:	015a      	lsls	r2, r3, #5
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	4413      	add	r3, r2
 80046a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80046aa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80046ae:	d118      	bne.n	80046e2 <USB_DevInit+0x156>
    {
      if (i == 0U)
 80046b0:	693b      	ldr	r3, [r7, #16]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d10a      	bne.n	80046cc <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80046b6:	693b      	ldr	r3, [r7, #16]
 80046b8:	015a      	lsls	r2, r3, #5
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	4413      	add	r3, r2
 80046be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80046c2:	461a      	mov	r2, r3
 80046c4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80046c8:	6013      	str	r3, [r2, #0]
 80046ca:	e013      	b.n	80046f4 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80046cc:	693b      	ldr	r3, [r7, #16]
 80046ce:	015a      	lsls	r2, r3, #5
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	4413      	add	r3, r2
 80046d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80046d8:	461a      	mov	r2, r3
 80046da:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80046de:	6013      	str	r3, [r2, #0]
 80046e0:	e008      	b.n	80046f4 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80046e2:	693b      	ldr	r3, [r7, #16]
 80046e4:	015a      	lsls	r2, r3, #5
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	4413      	add	r3, r2
 80046ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80046ee:	461a      	mov	r2, r3
 80046f0:	2300      	movs	r3, #0
 80046f2:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80046f4:	693b      	ldr	r3, [r7, #16]
 80046f6:	015a      	lsls	r2, r3, #5
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	4413      	add	r3, r2
 80046fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004700:	461a      	mov	r2, r3
 8004702:	2300      	movs	r3, #0
 8004704:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004706:	693b      	ldr	r3, [r7, #16]
 8004708:	015a      	lsls	r2, r3, #5
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	4413      	add	r3, r2
 800470e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004712:	461a      	mov	r2, r3
 8004714:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004718:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800471a:	693b      	ldr	r3, [r7, #16]
 800471c:	3301      	adds	r3, #1
 800471e:	613b      	str	r3, [r7, #16]
 8004720:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004724:	461a      	mov	r2, r3
 8004726:	693b      	ldr	r3, [r7, #16]
 8004728:	4293      	cmp	r3, r2
 800472a:	d3b5      	bcc.n	8004698 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800472c:	2300      	movs	r3, #0
 800472e:	613b      	str	r3, [r7, #16]
 8004730:	e043      	b.n	80047ba <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004732:	693b      	ldr	r3, [r7, #16]
 8004734:	015a      	lsls	r2, r3, #5
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	4413      	add	r3, r2
 800473a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004744:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004748:	d118      	bne.n	800477c <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800474a:	693b      	ldr	r3, [r7, #16]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d10a      	bne.n	8004766 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004750:	693b      	ldr	r3, [r7, #16]
 8004752:	015a      	lsls	r2, r3, #5
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	4413      	add	r3, r2
 8004758:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800475c:	461a      	mov	r2, r3
 800475e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004762:	6013      	str	r3, [r2, #0]
 8004764:	e013      	b.n	800478e <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004766:	693b      	ldr	r3, [r7, #16]
 8004768:	015a      	lsls	r2, r3, #5
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	4413      	add	r3, r2
 800476e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004772:	461a      	mov	r2, r3
 8004774:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004778:	6013      	str	r3, [r2, #0]
 800477a:	e008      	b.n	800478e <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800477c:	693b      	ldr	r3, [r7, #16]
 800477e:	015a      	lsls	r2, r3, #5
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	4413      	add	r3, r2
 8004784:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004788:	461a      	mov	r2, r3
 800478a:	2300      	movs	r3, #0
 800478c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800478e:	693b      	ldr	r3, [r7, #16]
 8004790:	015a      	lsls	r2, r3, #5
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	4413      	add	r3, r2
 8004796:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800479a:	461a      	mov	r2, r3
 800479c:	2300      	movs	r3, #0
 800479e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80047a0:	693b      	ldr	r3, [r7, #16]
 80047a2:	015a      	lsls	r2, r3, #5
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	4413      	add	r3, r2
 80047a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80047ac:	461a      	mov	r2, r3
 80047ae:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80047b2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80047b4:	693b      	ldr	r3, [r7, #16]
 80047b6:	3301      	adds	r3, #1
 80047b8:	613b      	str	r3, [r7, #16]
 80047ba:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80047be:	461a      	mov	r2, r3
 80047c0:	693b      	ldr	r3, [r7, #16]
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d3b5      	bcc.n	8004732 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80047cc:	691b      	ldr	r3, [r3, #16]
 80047ce:	68fa      	ldr	r2, [r7, #12]
 80047d0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80047d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80047d8:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2200      	movs	r2, #0
 80047de:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80047e6:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80047e8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d105      	bne.n	80047fc <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	699b      	ldr	r3, [r3, #24]
 80047f4:	f043 0210 	orr.w	r2, r3, #16
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	699a      	ldr	r2, [r3, #24]
 8004800:	4b0f      	ldr	r3, [pc, #60]	@ (8004840 <USB_DevInit+0x2b4>)
 8004802:	4313      	orrs	r3, r2
 8004804:	687a      	ldr	r2, [r7, #4]
 8004806:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004808:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800480c:	2b00      	cmp	r3, #0
 800480e:	d005      	beq.n	800481c <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	699b      	ldr	r3, [r3, #24]
 8004814:	f043 0208 	orr.w	r2, r3, #8
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800481c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004820:	2b01      	cmp	r3, #1
 8004822:	d105      	bne.n	8004830 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	699a      	ldr	r2, [r3, #24]
 8004828:	4b06      	ldr	r3, [pc, #24]	@ (8004844 <USB_DevInit+0x2b8>)
 800482a:	4313      	orrs	r3, r2
 800482c:	687a      	ldr	r2, [r7, #4]
 800482e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004830:	7dfb      	ldrb	r3, [r7, #23]
}
 8004832:	4618      	mov	r0, r3
 8004834:	3718      	adds	r7, #24
 8004836:	46bd      	mov	sp, r7
 8004838:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800483c:	b004      	add	sp, #16
 800483e:	4770      	bx	lr
 8004840:	803c3800 	.word	0x803c3800
 8004844:	40000004 	.word	0x40000004

08004848 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004848:	b480      	push	{r7}
 800484a:	b085      	sub	sp, #20
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
 8004850:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004852:	2300      	movs	r3, #0
 8004854:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	3301      	adds	r3, #1
 800485a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004862:	d901      	bls.n	8004868 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004864:	2303      	movs	r3, #3
 8004866:	e01b      	b.n	80048a0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	691b      	ldr	r3, [r3, #16]
 800486c:	2b00      	cmp	r3, #0
 800486e:	daf2      	bge.n	8004856 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004870:	2300      	movs	r3, #0
 8004872:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	019b      	lsls	r3, r3, #6
 8004878:	f043 0220 	orr.w	r2, r3, #32
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	3301      	adds	r3, #1
 8004884:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800488c:	d901      	bls.n	8004892 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800488e:	2303      	movs	r3, #3
 8004890:	e006      	b.n	80048a0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	691b      	ldr	r3, [r3, #16]
 8004896:	f003 0320 	and.w	r3, r3, #32
 800489a:	2b20      	cmp	r3, #32
 800489c:	d0f0      	beq.n	8004880 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800489e:	2300      	movs	r3, #0
}
 80048a0:	4618      	mov	r0, r3
 80048a2:	3714      	adds	r7, #20
 80048a4:	46bd      	mov	sp, r7
 80048a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048aa:	4770      	bx	lr

080048ac <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80048ac:	b480      	push	{r7}
 80048ae:	b085      	sub	sp, #20
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80048b4:	2300      	movs	r3, #0
 80048b6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	3301      	adds	r3, #1
 80048bc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80048c4:	d901      	bls.n	80048ca <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80048c6:	2303      	movs	r3, #3
 80048c8:	e018      	b.n	80048fc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	691b      	ldr	r3, [r3, #16]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	daf2      	bge.n	80048b8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80048d2:	2300      	movs	r3, #0
 80048d4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2210      	movs	r2, #16
 80048da:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	3301      	adds	r3, #1
 80048e0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80048e8:	d901      	bls.n	80048ee <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80048ea:	2303      	movs	r3, #3
 80048ec:	e006      	b.n	80048fc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	691b      	ldr	r3, [r3, #16]
 80048f2:	f003 0310 	and.w	r3, r3, #16
 80048f6:	2b10      	cmp	r3, #16
 80048f8:	d0f0      	beq.n	80048dc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80048fa:	2300      	movs	r3, #0
}
 80048fc:	4618      	mov	r0, r3
 80048fe:	3714      	adds	r7, #20
 8004900:	46bd      	mov	sp, r7
 8004902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004906:	4770      	bx	lr

08004908 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004908:	b480      	push	{r7}
 800490a:	b085      	sub	sp, #20
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
 8004910:	460b      	mov	r3, r1
 8004912:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800491e:	681a      	ldr	r2, [r3, #0]
 8004920:	78fb      	ldrb	r3, [r7, #3]
 8004922:	68f9      	ldr	r1, [r7, #12]
 8004924:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004928:	4313      	orrs	r3, r2
 800492a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800492c:	2300      	movs	r3, #0
}
 800492e:	4618      	mov	r0, r3
 8004930:	3714      	adds	r7, #20
 8004932:	46bd      	mov	sp, r7
 8004934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004938:	4770      	bx	lr

0800493a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800493a:	b480      	push	{r7}
 800493c:	b085      	sub	sp, #20
 800493e:	af00      	add	r7, sp, #0
 8004940:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	68fa      	ldr	r2, [r7, #12]
 8004950:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8004954:	f023 0303 	bic.w	r3, r3, #3
 8004958:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004960:	685b      	ldr	r3, [r3, #4]
 8004962:	68fa      	ldr	r2, [r7, #12]
 8004964:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004968:	f043 0302 	orr.w	r3, r3, #2
 800496c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800496e:	2300      	movs	r3, #0
}
 8004970:	4618      	mov	r0, r3
 8004972:	3714      	adds	r7, #20
 8004974:	46bd      	mov	sp, r7
 8004976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497a:	4770      	bx	lr

0800497c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800497c:	b480      	push	{r7}
 800497e:	b083      	sub	sp, #12
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	695b      	ldr	r3, [r3, #20]
 8004988:	f003 0301 	and.w	r3, r3, #1
}
 800498c:	4618      	mov	r0, r3
 800498e:	370c      	adds	r7, #12
 8004990:	46bd      	mov	sp, r7
 8004992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004996:	4770      	bx	lr

08004998 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004998:	b480      	push	{r7}
 800499a:	b085      	sub	sp, #20
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80049a0:	2300      	movs	r3, #0
 80049a2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	3301      	adds	r3, #1
 80049a8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80049b0:	d901      	bls.n	80049b6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80049b2:	2303      	movs	r3, #3
 80049b4:	e022      	b.n	80049fc <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	691b      	ldr	r3, [r3, #16]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	daf2      	bge.n	80049a4 <USB_CoreReset+0xc>

  count = 10U;
 80049be:	230a      	movs	r3, #10
 80049c0:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 80049c2:	e002      	b.n	80049ca <USB_CoreReset+0x32>
  {
    count--;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	3b01      	subs	r3, #1
 80049c8:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d1f9      	bne.n	80049c4 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	691b      	ldr	r3, [r3, #16]
 80049d4:	f043 0201 	orr.w	r2, r3, #1
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	3301      	adds	r3, #1
 80049e0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80049e8:	d901      	bls.n	80049ee <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 80049ea:	2303      	movs	r3, #3
 80049ec:	e006      	b.n	80049fc <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	691b      	ldr	r3, [r3, #16]
 80049f2:	f003 0301 	and.w	r3, r3, #1
 80049f6:	2b01      	cmp	r3, #1
 80049f8:	d0f0      	beq.n	80049dc <USB_CoreReset+0x44>

  return HAL_OK;
 80049fa:	2300      	movs	r3, #0
}
 80049fc:	4618      	mov	r0, r3
 80049fe:	3714      	adds	r7, #20
 8004a00:	46bd      	mov	sp, r7
 8004a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a06:	4770      	bx	lr

08004a08 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004a08:	b480      	push	{r7}
 8004a0a:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8004a0c:	bf00      	nop
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a14:	4770      	bx	lr
	...

08004a18 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004a18:	b480      	push	{r7}
 8004a1a:	b085      	sub	sp, #20
 8004a1c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004a1e:	f3ef 8305 	mrs	r3, IPSR
 8004a22:	60bb      	str	r3, [r7, #8]
  return(result);
 8004a24:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d10f      	bne.n	8004a4a <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a2a:	f3ef 8310 	mrs	r3, PRIMASK
 8004a2e:	607b      	str	r3, [r7, #4]
  return(result);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d105      	bne.n	8004a42 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004a36:	f3ef 8311 	mrs	r3, BASEPRI
 8004a3a:	603b      	str	r3, [r7, #0]
  return(result);
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d007      	beq.n	8004a52 <osKernelInitialize+0x3a>
 8004a42:	4b0e      	ldr	r3, [pc, #56]	@ (8004a7c <osKernelInitialize+0x64>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	2b02      	cmp	r3, #2
 8004a48:	d103      	bne.n	8004a52 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8004a4a:	f06f 0305 	mvn.w	r3, #5
 8004a4e:	60fb      	str	r3, [r7, #12]
 8004a50:	e00c      	b.n	8004a6c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004a52:	4b0a      	ldr	r3, [pc, #40]	@ (8004a7c <osKernelInitialize+0x64>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d105      	bne.n	8004a66 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004a5a:	4b08      	ldr	r3, [pc, #32]	@ (8004a7c <osKernelInitialize+0x64>)
 8004a5c:	2201      	movs	r2, #1
 8004a5e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004a60:	2300      	movs	r3, #0
 8004a62:	60fb      	str	r3, [r7, #12]
 8004a64:	e002      	b.n	8004a6c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8004a66:	f04f 33ff 	mov.w	r3, #4294967295
 8004a6a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004a6c:	68fb      	ldr	r3, [r7, #12]
}
 8004a6e:	4618      	mov	r0, r3
 8004a70:	3714      	adds	r7, #20
 8004a72:	46bd      	mov	sp, r7
 8004a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a78:	4770      	bx	lr
 8004a7a:	bf00      	nop
 8004a7c:	2000087c 	.word	0x2000087c

08004a80 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b084      	sub	sp, #16
 8004a84:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004a86:	f3ef 8305 	mrs	r3, IPSR
 8004a8a:	60bb      	str	r3, [r7, #8]
  return(result);
 8004a8c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d10f      	bne.n	8004ab2 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a92:	f3ef 8310 	mrs	r3, PRIMASK
 8004a96:	607b      	str	r3, [r7, #4]
  return(result);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d105      	bne.n	8004aaa <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004a9e:	f3ef 8311 	mrs	r3, BASEPRI
 8004aa2:	603b      	str	r3, [r7, #0]
  return(result);
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d007      	beq.n	8004aba <osKernelStart+0x3a>
 8004aaa:	4b0f      	ldr	r3, [pc, #60]	@ (8004ae8 <osKernelStart+0x68>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	2b02      	cmp	r3, #2
 8004ab0:	d103      	bne.n	8004aba <osKernelStart+0x3a>
    stat = osErrorISR;
 8004ab2:	f06f 0305 	mvn.w	r3, #5
 8004ab6:	60fb      	str	r3, [r7, #12]
 8004ab8:	e010      	b.n	8004adc <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004aba:	4b0b      	ldr	r3, [pc, #44]	@ (8004ae8 <osKernelStart+0x68>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	2b01      	cmp	r3, #1
 8004ac0:	d109      	bne.n	8004ad6 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004ac2:	f7ff ffa1 	bl	8004a08 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004ac6:	4b08      	ldr	r3, [pc, #32]	@ (8004ae8 <osKernelStart+0x68>)
 8004ac8:	2202      	movs	r2, #2
 8004aca:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004acc:	f001 fe0a 	bl	80066e4 <vTaskStartScheduler>
      stat = osOK;
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	60fb      	str	r3, [r7, #12]
 8004ad4:	e002      	b.n	8004adc <osKernelStart+0x5c>
    } else {
      stat = osError;
 8004ad6:	f04f 33ff 	mov.w	r3, #4294967295
 8004ada:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004adc:	68fb      	ldr	r3, [r7, #12]
}
 8004ade:	4618      	mov	r0, r3
 8004ae0:	3710      	adds	r7, #16
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	bd80      	pop	{r7, pc}
 8004ae6:	bf00      	nop
 8004ae8:	2000087c 	.word	0x2000087c

08004aec <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b090      	sub	sp, #64	@ 0x40
 8004af0:	af04      	add	r7, sp, #16
 8004af2:	60f8      	str	r0, [r7, #12]
 8004af4:	60b9      	str	r1, [r7, #8]
 8004af6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004af8:	2300      	movs	r3, #0
 8004afa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004afc:	f3ef 8305 	mrs	r3, IPSR
 8004b00:	61fb      	str	r3, [r7, #28]
  return(result);
 8004b02:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	f040 808f 	bne.w	8004c28 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b0a:	f3ef 8310 	mrs	r3, PRIMASK
 8004b0e:	61bb      	str	r3, [r7, #24]
  return(result);
 8004b10:	69bb      	ldr	r3, [r7, #24]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d105      	bne.n	8004b22 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004b16:	f3ef 8311 	mrs	r3, BASEPRI
 8004b1a:	617b      	str	r3, [r7, #20]
  return(result);
 8004b1c:	697b      	ldr	r3, [r7, #20]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d003      	beq.n	8004b2a <osThreadNew+0x3e>
 8004b22:	4b44      	ldr	r3, [pc, #272]	@ (8004c34 <osThreadNew+0x148>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	2b02      	cmp	r3, #2
 8004b28:	d07e      	beq.n	8004c28 <osThreadNew+0x13c>
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d07b      	beq.n	8004c28 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8004b30:	2380      	movs	r3, #128	@ 0x80
 8004b32:	62bb      	str	r3, [r7, #40]	@ 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8004b34:	2318      	movs	r3, #24
 8004b36:	627b      	str	r3, [r7, #36]	@ 0x24

    name = NULL;
 8004b38:	2300      	movs	r3, #0
 8004b3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    mem  = -1;
 8004b3c:	f04f 33ff 	mov.w	r3, #4294967295
 8004b40:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d045      	beq.n	8004bd4 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d002      	beq.n	8004b56 <osThreadNew+0x6a>
        name = attr->name;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	699b      	ldr	r3, [r3, #24]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d002      	beq.n	8004b64 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	699b      	ldr	r3, [r3, #24]
 8004b62:	627b      	str	r3, [r7, #36]	@ 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004b64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d008      	beq.n	8004b7c <osThreadNew+0x90>
 8004b6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b6c:	2b38      	cmp	r3, #56	@ 0x38
 8004b6e:	d805      	bhi.n	8004b7c <osThreadNew+0x90>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	f003 0301 	and.w	r3, r3, #1
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d001      	beq.n	8004b80 <osThreadNew+0x94>
        return (NULL);
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	e054      	b.n	8004c2a <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	695b      	ldr	r3, [r3, #20]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d003      	beq.n	8004b90 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	695b      	ldr	r3, [r3, #20]
 8004b8c:	089b      	lsrs	r3, r3, #2
 8004b8e:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	689b      	ldr	r3, [r3, #8]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d00e      	beq.n	8004bb6 <osThreadNew+0xca>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	68db      	ldr	r3, [r3, #12]
 8004b9c:	2ba7      	cmp	r3, #167	@ 0xa7
 8004b9e:	d90a      	bls.n	8004bb6 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d006      	beq.n	8004bb6 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	695b      	ldr	r3, [r3, #20]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d002      	beq.n	8004bb6 <osThreadNew+0xca>
        mem = 1;
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	623b      	str	r3, [r7, #32]
 8004bb4:	e010      	b.n	8004bd8 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	689b      	ldr	r3, [r3, #8]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d10c      	bne.n	8004bd8 <osThreadNew+0xec>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	68db      	ldr	r3, [r3, #12]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d108      	bne.n	8004bd8 <osThreadNew+0xec>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	691b      	ldr	r3, [r3, #16]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d104      	bne.n	8004bd8 <osThreadNew+0xec>
          mem = 0;
 8004bce:	2300      	movs	r3, #0
 8004bd0:	623b      	str	r3, [r7, #32]
 8004bd2:	e001      	b.n	8004bd8 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8004bd8:	6a3b      	ldr	r3, [r7, #32]
 8004bda:	2b01      	cmp	r3, #1
 8004bdc:	d110      	bne.n	8004c00 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8004be2:	687a      	ldr	r2, [r7, #4]
 8004be4:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004be6:	9202      	str	r2, [sp, #8]
 8004be8:	9301      	str	r3, [sp, #4]
 8004bea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bec:	9300      	str	r3, [sp, #0]
 8004bee:	68bb      	ldr	r3, [r7, #8]
 8004bf0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004bf2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004bf4:	68f8      	ldr	r0, [r7, #12]
 8004bf6:	f001 fb77 	bl	80062e8 <xTaskCreateStatic>
 8004bfa:	4603      	mov	r3, r0
 8004bfc:	613b      	str	r3, [r7, #16]
 8004bfe:	e013      	b.n	8004c28 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8004c00:	6a3b      	ldr	r3, [r7, #32]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d110      	bne.n	8004c28 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004c06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c08:	b29a      	uxth	r2, r3
 8004c0a:	f107 0310 	add.w	r3, r7, #16
 8004c0e:	9301      	str	r3, [sp, #4]
 8004c10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c12:	9300      	str	r3, [sp, #0]
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004c18:	68f8      	ldr	r0, [r7, #12]
 8004c1a:	f001 fbcb 	bl	80063b4 <xTaskCreate>
 8004c1e:	4603      	mov	r3, r0
 8004c20:	2b01      	cmp	r3, #1
 8004c22:	d001      	beq.n	8004c28 <osThreadNew+0x13c>
          hTask = NULL;
 8004c24:	2300      	movs	r3, #0
 8004c26:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004c28:	693b      	ldr	r3, [r7, #16]
}
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	3730      	adds	r7, #48	@ 0x30
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	bd80      	pop	{r7, pc}
 8004c32:	bf00      	nop
 8004c34:	2000087c 	.word	0x2000087c

08004c38 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b086      	sub	sp, #24
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004c40:	f3ef 8305 	mrs	r3, IPSR
 8004c44:	613b      	str	r3, [r7, #16]
  return(result);
 8004c46:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d10f      	bne.n	8004c6c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c4c:	f3ef 8310 	mrs	r3, PRIMASK
 8004c50:	60fb      	str	r3, [r7, #12]
  return(result);
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d105      	bne.n	8004c64 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004c58:	f3ef 8311 	mrs	r3, BASEPRI
 8004c5c:	60bb      	str	r3, [r7, #8]
  return(result);
 8004c5e:	68bb      	ldr	r3, [r7, #8]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d007      	beq.n	8004c74 <osDelay+0x3c>
 8004c64:	4b0a      	ldr	r3, [pc, #40]	@ (8004c90 <osDelay+0x58>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	2b02      	cmp	r3, #2
 8004c6a:	d103      	bne.n	8004c74 <osDelay+0x3c>
    stat = osErrorISR;
 8004c6c:	f06f 0305 	mvn.w	r3, #5
 8004c70:	617b      	str	r3, [r7, #20]
 8004c72:	e007      	b.n	8004c84 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8004c74:	2300      	movs	r3, #0
 8004c76:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d002      	beq.n	8004c84 <osDelay+0x4c>
      vTaskDelay(ticks);
 8004c7e:	6878      	ldr	r0, [r7, #4]
 8004c80:	f001 fcf8 	bl	8006674 <vTaskDelay>
    }
  }

  return (stat);
 8004c84:	697b      	ldr	r3, [r7, #20]
}
 8004c86:	4618      	mov	r0, r3
 8004c88:	3718      	adds	r7, #24
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bd80      	pop	{r7, pc}
 8004c8e:	bf00      	nop
 8004c90:	2000087c 	.word	0x2000087c

08004c94 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b08c      	sub	sp, #48	@ 0x30
 8004c98:	af02      	add	r7, sp, #8
 8004c9a:	60f8      	str	r0, [r7, #12]
 8004c9c:	60b9      	str	r1, [r7, #8]
 8004c9e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004ca4:	f3ef 8305 	mrs	r3, IPSR
 8004ca8:	61bb      	str	r3, [r7, #24]
  return(result);
 8004caa:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	f040 8086 	bne.w	8004dbe <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004cb2:	f3ef 8310 	mrs	r3, PRIMASK
 8004cb6:	617b      	str	r3, [r7, #20]
  return(result);
 8004cb8:	697b      	ldr	r3, [r7, #20]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d105      	bne.n	8004cca <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004cbe:	f3ef 8311 	mrs	r3, BASEPRI
 8004cc2:	613b      	str	r3, [r7, #16]
  return(result);
 8004cc4:	693b      	ldr	r3, [r7, #16]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d003      	beq.n	8004cd2 <osSemaphoreNew+0x3e>
 8004cca:	4b3f      	ldr	r3, [pc, #252]	@ (8004dc8 <osSemaphoreNew+0x134>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	2b02      	cmp	r3, #2
 8004cd0:	d075      	beq.n	8004dbe <osSemaphoreNew+0x12a>
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d072      	beq.n	8004dbe <osSemaphoreNew+0x12a>
 8004cd8:	68ba      	ldr	r2, [r7, #8]
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	429a      	cmp	r2, r3
 8004cde:	d86e      	bhi.n	8004dbe <osSemaphoreNew+0x12a>
    mem = -1;
 8004ce0:	f04f 33ff 	mov.w	r3, #4294967295
 8004ce4:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d015      	beq.n	8004d18 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	689b      	ldr	r3, [r3, #8]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d006      	beq.n	8004d02 <osSemaphoreNew+0x6e>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	68db      	ldr	r3, [r3, #12]
 8004cf8:	2b4f      	cmp	r3, #79	@ 0x4f
 8004cfa:	d902      	bls.n	8004d02 <osSemaphoreNew+0x6e>
        mem = 1;
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	623b      	str	r3, [r7, #32]
 8004d00:	e00c      	b.n	8004d1c <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	689b      	ldr	r3, [r3, #8]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d108      	bne.n	8004d1c <osSemaphoreNew+0x88>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	68db      	ldr	r3, [r3, #12]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d104      	bne.n	8004d1c <osSemaphoreNew+0x88>
          mem = 0;
 8004d12:	2300      	movs	r3, #0
 8004d14:	623b      	str	r3, [r7, #32]
 8004d16:	e001      	b.n	8004d1c <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 8004d18:	2300      	movs	r3, #0
 8004d1a:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8004d1c:	6a3b      	ldr	r3, [r7, #32]
 8004d1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d22:	d04c      	beq.n	8004dbe <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	2b01      	cmp	r3, #1
 8004d28:	d128      	bne.n	8004d7c <osSemaphoreNew+0xe8>
        if (mem == 1) {
 8004d2a:	6a3b      	ldr	r3, [r7, #32]
 8004d2c:	2b01      	cmp	r3, #1
 8004d2e:	d10a      	bne.n	8004d46 <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	689b      	ldr	r3, [r3, #8]
 8004d34:	2203      	movs	r2, #3
 8004d36:	9200      	str	r2, [sp, #0]
 8004d38:	2200      	movs	r2, #0
 8004d3a:	2100      	movs	r1, #0
 8004d3c:	2001      	movs	r0, #1
 8004d3e:	f000 fa89 	bl	8005254 <xQueueGenericCreateStatic>
 8004d42:	6278      	str	r0, [r7, #36]	@ 0x24
 8004d44:	e005      	b.n	8004d52 <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 8004d46:	2203      	movs	r2, #3
 8004d48:	2100      	movs	r1, #0
 8004d4a:	2001      	movs	r0, #1
 8004d4c:	f000 fb09 	bl	8005362 <xQueueGenericCreate>
 8004d50:	6278      	str	r0, [r7, #36]	@ 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8004d52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d022      	beq.n	8004d9e <osSemaphoreNew+0x10a>
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d01f      	beq.n	8004d9e <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8004d5e:	2300      	movs	r3, #0
 8004d60:	2200      	movs	r2, #0
 8004d62:	2100      	movs	r1, #0
 8004d64:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004d66:	f000 fbd9 	bl	800551c <xQueueGenericSend>
 8004d6a:	4603      	mov	r3, r0
 8004d6c:	2b01      	cmp	r3, #1
 8004d6e:	d016      	beq.n	8004d9e <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 8004d70:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004d72:	f001 f8e3 	bl	8005f3c <vQueueDelete>
            hSemaphore = NULL;
 8004d76:	2300      	movs	r3, #0
 8004d78:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d7a:	e010      	b.n	8004d9e <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 8004d7c:	6a3b      	ldr	r3, [r7, #32]
 8004d7e:	2b01      	cmp	r3, #1
 8004d80:	d108      	bne.n	8004d94 <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	689b      	ldr	r3, [r3, #8]
 8004d86:	461a      	mov	r2, r3
 8004d88:	68b9      	ldr	r1, [r7, #8]
 8004d8a:	68f8      	ldr	r0, [r7, #12]
 8004d8c:	f000 fb4f 	bl	800542e <xQueueCreateCountingSemaphoreStatic>
 8004d90:	6278      	str	r0, [r7, #36]	@ 0x24
 8004d92:	e004      	b.n	8004d9e <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8004d94:	68b9      	ldr	r1, [r7, #8]
 8004d96:	68f8      	ldr	r0, [r7, #12]
 8004d98:	f000 fb86 	bl	80054a8 <xQueueCreateCountingSemaphore>
 8004d9c:	6278      	str	r0, [r7, #36]	@ 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8004d9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d00c      	beq.n	8004dbe <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d003      	beq.n	8004db2 <osSemaphoreNew+0x11e>
          name = attr->name;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	61fb      	str	r3, [r7, #28]
 8004db0:	e001      	b.n	8004db6 <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 8004db2:	2300      	movs	r3, #0
 8004db4:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8004db6:	69f9      	ldr	r1, [r7, #28]
 8004db8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004dba:	f001 fa0d 	bl	80061d8 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8004dbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	3728      	adds	r7, #40	@ 0x28
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	bd80      	pop	{r7, pc}
 8004dc8:	2000087c 	.word	0x2000087c

08004dcc <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b088      	sub	sp, #32
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
 8004dd4:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8004dda:	2300      	movs	r3, #0
 8004ddc:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8004dde:	69bb      	ldr	r3, [r7, #24]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d103      	bne.n	8004dec <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8004de4:	f06f 0303 	mvn.w	r3, #3
 8004de8:	61fb      	str	r3, [r7, #28]
 8004dea:	e04b      	b.n	8004e84 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004dec:	f3ef 8305 	mrs	r3, IPSR
 8004df0:	617b      	str	r3, [r7, #20]
  return(result);
 8004df2:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d10f      	bne.n	8004e18 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004df8:	f3ef 8310 	mrs	r3, PRIMASK
 8004dfc:	613b      	str	r3, [r7, #16]
  return(result);
 8004dfe:	693b      	ldr	r3, [r7, #16]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d105      	bne.n	8004e10 <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004e04:	f3ef 8311 	mrs	r3, BASEPRI
 8004e08:	60fb      	str	r3, [r7, #12]
  return(result);
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d026      	beq.n	8004e5e <osSemaphoreAcquire+0x92>
 8004e10:	4b1f      	ldr	r3, [pc, #124]	@ (8004e90 <osSemaphoreAcquire+0xc4>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	2b02      	cmp	r3, #2
 8004e16:	d122      	bne.n	8004e5e <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d003      	beq.n	8004e26 <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 8004e1e:	f06f 0303 	mvn.w	r3, #3
 8004e22:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8004e24:	e02d      	b.n	8004e82 <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 8004e26:	2300      	movs	r3, #0
 8004e28:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8004e2a:	f107 0308 	add.w	r3, r7, #8
 8004e2e:	461a      	mov	r2, r3
 8004e30:	2100      	movs	r1, #0
 8004e32:	69b8      	ldr	r0, [r7, #24]
 8004e34:	f000 ffb8 	bl	8005da8 <xQueueReceiveFromISR>
 8004e38:	4603      	mov	r3, r0
 8004e3a:	2b01      	cmp	r3, #1
 8004e3c:	d003      	beq.n	8004e46 <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 8004e3e:	f06f 0302 	mvn.w	r3, #2
 8004e42:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8004e44:	e01d      	b.n	8004e82 <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 8004e46:	68bb      	ldr	r3, [r7, #8]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d01a      	beq.n	8004e82 <osSemaphoreAcquire+0xb6>
 8004e4c:	4b11      	ldr	r3, [pc, #68]	@ (8004e94 <osSemaphoreAcquire+0xc8>)
 8004e4e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004e52:	601a      	str	r2, [r3, #0]
 8004e54:	f3bf 8f4f 	dsb	sy
 8004e58:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 8004e5c:	e011      	b.n	8004e82 <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8004e5e:	6839      	ldr	r1, [r7, #0]
 8004e60:	69b8      	ldr	r0, [r7, #24]
 8004e62:	f000 fe89 	bl	8005b78 <xQueueSemaphoreTake>
 8004e66:	4603      	mov	r3, r0
 8004e68:	2b01      	cmp	r3, #1
 8004e6a:	d00b      	beq.n	8004e84 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d003      	beq.n	8004e7a <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 8004e72:	f06f 0301 	mvn.w	r3, #1
 8004e76:	61fb      	str	r3, [r7, #28]
 8004e78:	e004      	b.n	8004e84 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 8004e7a:	f06f 0302 	mvn.w	r3, #2
 8004e7e:	61fb      	str	r3, [r7, #28]
 8004e80:	e000      	b.n	8004e84 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 8004e82:	bf00      	nop
      }
    }
  }

  return (stat);
 8004e84:	69fb      	ldr	r3, [r7, #28]
}
 8004e86:	4618      	mov	r0, r3
 8004e88:	3720      	adds	r7, #32
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	bd80      	pop	{r7, pc}
 8004e8e:	bf00      	nop
 8004e90:	2000087c 	.word	0x2000087c
 8004e94:	e000ed04 	.word	0xe000ed04

08004e98 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b088      	sub	sp, #32
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8004ea8:	69bb      	ldr	r3, [r7, #24]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d103      	bne.n	8004eb6 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8004eae:	f06f 0303 	mvn.w	r3, #3
 8004eb2:	61fb      	str	r3, [r7, #28]
 8004eb4:	e03e      	b.n	8004f34 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004eb6:	f3ef 8305 	mrs	r3, IPSR
 8004eba:	617b      	str	r3, [r7, #20]
  return(result);
 8004ebc:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d10f      	bne.n	8004ee2 <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ec2:	f3ef 8310 	mrs	r3, PRIMASK
 8004ec6:	613b      	str	r3, [r7, #16]
  return(result);
 8004ec8:	693b      	ldr	r3, [r7, #16]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d105      	bne.n	8004eda <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004ece:	f3ef 8311 	mrs	r3, BASEPRI
 8004ed2:	60fb      	str	r3, [r7, #12]
  return(result);
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d01e      	beq.n	8004f18 <osSemaphoreRelease+0x80>
 8004eda:	4b19      	ldr	r3, [pc, #100]	@ (8004f40 <osSemaphoreRelease+0xa8>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	2b02      	cmp	r3, #2
 8004ee0:	d11a      	bne.n	8004f18 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8004ee6:	f107 0308 	add.w	r3, r7, #8
 8004eea:	4619      	mov	r1, r3
 8004eec:	69b8      	ldr	r0, [r7, #24]
 8004eee:	f000 fcc2 	bl	8005876 <xQueueGiveFromISR>
 8004ef2:	4603      	mov	r3, r0
 8004ef4:	2b01      	cmp	r3, #1
 8004ef6:	d003      	beq.n	8004f00 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 8004ef8:	f06f 0302 	mvn.w	r3, #2
 8004efc:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8004efe:	e018      	b.n	8004f32 <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 8004f00:	68bb      	ldr	r3, [r7, #8]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d015      	beq.n	8004f32 <osSemaphoreRelease+0x9a>
 8004f06:	4b0f      	ldr	r3, [pc, #60]	@ (8004f44 <osSemaphoreRelease+0xac>)
 8004f08:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004f0c:	601a      	str	r2, [r3, #0]
 8004f0e:	f3bf 8f4f 	dsb	sy
 8004f12:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8004f16:	e00c      	b.n	8004f32 <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8004f18:	2300      	movs	r3, #0
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	2100      	movs	r1, #0
 8004f1e:	69b8      	ldr	r0, [r7, #24]
 8004f20:	f000 fafc 	bl	800551c <xQueueGenericSend>
 8004f24:	4603      	mov	r3, r0
 8004f26:	2b01      	cmp	r3, #1
 8004f28:	d004      	beq.n	8004f34 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 8004f2a:	f06f 0302 	mvn.w	r3, #2
 8004f2e:	61fb      	str	r3, [r7, #28]
 8004f30:	e000      	b.n	8004f34 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8004f32:	bf00      	nop
    }
  }

  return (stat);
 8004f34:	69fb      	ldr	r3, [r7, #28]
}
 8004f36:	4618      	mov	r0, r3
 8004f38:	3720      	adds	r7, #32
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	bd80      	pop	{r7, pc}
 8004f3e:	bf00      	nop
 8004f40:	2000087c 	.word	0x2000087c
 8004f44:	e000ed04 	.word	0xe000ed04

08004f48 <osSemaphoreGetCount>:

uint32_t osSemaphoreGetCount (osSemaphoreId_t semaphore_id) {
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b088      	sub	sp, #32
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	61bb      	str	r3, [r7, #24]
  uint32_t count;

  if (hSemaphore == NULL) {
 8004f54:	69bb      	ldr	r3, [r7, #24]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d102      	bne.n	8004f60 <osSemaphoreGetCount+0x18>
    count = 0U;
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	61fb      	str	r3, [r7, #28]
 8004f5e:	e01e      	b.n	8004f9e <osSemaphoreGetCount+0x56>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004f60:	f3ef 8305 	mrs	r3, IPSR
 8004f64:	617b      	str	r3, [r7, #20]
  return(result);
 8004f66:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d10f      	bne.n	8004f8c <osSemaphoreGetCount+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f6c:	f3ef 8310 	mrs	r3, PRIMASK
 8004f70:	613b      	str	r3, [r7, #16]
  return(result);
 8004f72:	693b      	ldr	r3, [r7, #16]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d105      	bne.n	8004f84 <osSemaphoreGetCount+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004f78:	f3ef 8311 	mrs	r3, BASEPRI
 8004f7c:	60fb      	str	r3, [r7, #12]
  return(result);
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d008      	beq.n	8004f96 <osSemaphoreGetCount+0x4e>
 8004f84:	4b08      	ldr	r3, [pc, #32]	@ (8004fa8 <osSemaphoreGetCount+0x60>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	2b02      	cmp	r3, #2
 8004f8a:	d104      	bne.n	8004f96 <osSemaphoreGetCount+0x4e>
    count = uxQueueMessagesWaitingFromISR (hSemaphore);
 8004f8c:	69b8      	ldr	r0, [r7, #24]
 8004f8e:	f000 ffb4 	bl	8005efa <uxQueueMessagesWaitingFromISR>
 8004f92:	61f8      	str	r0, [r7, #28]
 8004f94:	e003      	b.n	8004f9e <osSemaphoreGetCount+0x56>
  } else {
    count = (uint32_t)uxSemaphoreGetCount (hSemaphore);
 8004f96:	69b8      	ldr	r0, [r7, #24]
 8004f98:	f000 ff8e 	bl	8005eb8 <uxQueueMessagesWaiting>
 8004f9c:	61f8      	str	r0, [r7, #28]
  }

  return (count);
 8004f9e:	69fb      	ldr	r3, [r7, #28]
}
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	3720      	adds	r7, #32
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	bd80      	pop	{r7, pc}
 8004fa8:	2000087c 	.word	0x2000087c

08004fac <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004fac:	b480      	push	{r7}
 8004fae:	b085      	sub	sp, #20
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	60f8      	str	r0, [r7, #12]
 8004fb4:	60b9      	str	r1, [r7, #8]
 8004fb6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	4a07      	ldr	r2, [pc, #28]	@ (8004fd8 <vApplicationGetIdleTaskMemory+0x2c>)
 8004fbc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004fbe:	68bb      	ldr	r3, [r7, #8]
 8004fc0:	4a06      	ldr	r2, [pc, #24]	@ (8004fdc <vApplicationGetIdleTaskMemory+0x30>)
 8004fc2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2280      	movs	r2, #128	@ 0x80
 8004fc8:	601a      	str	r2, [r3, #0]
}
 8004fca:	bf00      	nop
 8004fcc:	3714      	adds	r7, #20
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd4:	4770      	bx	lr
 8004fd6:	bf00      	nop
 8004fd8:	20000880 	.word	0x20000880
 8004fdc:	20000928 	.word	0x20000928

08004fe0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004fe0:	b480      	push	{r7}
 8004fe2:	b085      	sub	sp, #20
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	60f8      	str	r0, [r7, #12]
 8004fe8:	60b9      	str	r1, [r7, #8]
 8004fea:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	4a07      	ldr	r2, [pc, #28]	@ (800500c <vApplicationGetTimerTaskMemory+0x2c>)
 8004ff0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004ff2:	68bb      	ldr	r3, [r7, #8]
 8004ff4:	4a06      	ldr	r2, [pc, #24]	@ (8005010 <vApplicationGetTimerTaskMemory+0x30>)
 8004ff6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004ffe:	601a      	str	r2, [r3, #0]
}
 8005000:	bf00      	nop
 8005002:	3714      	adds	r7, #20
 8005004:	46bd      	mov	sp, r7
 8005006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500a:	4770      	bx	lr
 800500c:	20000b28 	.word	0x20000b28
 8005010:	20000bd0 	.word	0x20000bd0

08005014 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005014:	b480      	push	{r7}
 8005016:	b083      	sub	sp, #12
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	f103 0208 	add.w	r2, r3, #8
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	f04f 32ff 	mov.w	r2, #4294967295
 800502c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	f103 0208 	add.w	r2, r3, #8
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	f103 0208 	add.w	r2, r3, #8
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2200      	movs	r2, #0
 8005046:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005048:	bf00      	nop
 800504a:	370c      	adds	r7, #12
 800504c:	46bd      	mov	sp, r7
 800504e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005052:	4770      	bx	lr

08005054 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005054:	b480      	push	{r7}
 8005056:	b083      	sub	sp, #12
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2200      	movs	r2, #0
 8005060:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005062:	bf00      	nop
 8005064:	370c      	adds	r7, #12
 8005066:	46bd      	mov	sp, r7
 8005068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506c:	4770      	bx	lr

0800506e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800506e:	b480      	push	{r7}
 8005070:	b085      	sub	sp, #20
 8005072:	af00      	add	r7, sp, #0
 8005074:	6078      	str	r0, [r7, #4]
 8005076:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	685b      	ldr	r3, [r3, #4]
 800507c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	68fa      	ldr	r2, [r7, #12]
 8005082:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	689a      	ldr	r2, [r3, #8]
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	689b      	ldr	r3, [r3, #8]
 8005090:	683a      	ldr	r2, [r7, #0]
 8005092:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	683a      	ldr	r2, [r7, #0]
 8005098:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	687a      	ldr	r2, [r7, #4]
 800509e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	1c5a      	adds	r2, r3, #1
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	601a      	str	r2, [r3, #0]
}
 80050aa:	bf00      	nop
 80050ac:	3714      	adds	r7, #20
 80050ae:	46bd      	mov	sp, r7
 80050b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b4:	4770      	bx	lr

080050b6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80050b6:	b480      	push	{r7}
 80050b8:	b085      	sub	sp, #20
 80050ba:	af00      	add	r7, sp, #0
 80050bc:	6078      	str	r0, [r7, #4]
 80050be:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80050c6:	68bb      	ldr	r3, [r7, #8]
 80050c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050cc:	d103      	bne.n	80050d6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	691b      	ldr	r3, [r3, #16]
 80050d2:	60fb      	str	r3, [r7, #12]
 80050d4:	e00c      	b.n	80050f0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	3308      	adds	r3, #8
 80050da:	60fb      	str	r3, [r7, #12]
 80050dc:	e002      	b.n	80050e4 <vListInsert+0x2e>
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	685b      	ldr	r3, [r3, #4]
 80050e2:	60fb      	str	r3, [r7, #12]
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	685b      	ldr	r3, [r3, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	68ba      	ldr	r2, [r7, #8]
 80050ec:	429a      	cmp	r2, r3
 80050ee:	d2f6      	bcs.n	80050de <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	685a      	ldr	r2, [r3, #4]
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	685b      	ldr	r3, [r3, #4]
 80050fc:	683a      	ldr	r2, [r7, #0]
 80050fe:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	68fa      	ldr	r2, [r7, #12]
 8005104:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	683a      	ldr	r2, [r7, #0]
 800510a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	687a      	ldr	r2, [r7, #4]
 8005110:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	1c5a      	adds	r2, r3, #1
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	601a      	str	r2, [r3, #0]
}
 800511c:	bf00      	nop
 800511e:	3714      	adds	r7, #20
 8005120:	46bd      	mov	sp, r7
 8005122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005126:	4770      	bx	lr

08005128 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005128:	b480      	push	{r7}
 800512a:	b085      	sub	sp, #20
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	691b      	ldr	r3, [r3, #16]
 8005134:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	687a      	ldr	r2, [r7, #4]
 800513c:	6892      	ldr	r2, [r2, #8]
 800513e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	689b      	ldr	r3, [r3, #8]
 8005144:	687a      	ldr	r2, [r7, #4]
 8005146:	6852      	ldr	r2, [r2, #4]
 8005148:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	685b      	ldr	r3, [r3, #4]
 800514e:	687a      	ldr	r2, [r7, #4]
 8005150:	429a      	cmp	r2, r3
 8005152:	d103      	bne.n	800515c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	689a      	ldr	r2, [r3, #8]
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2200      	movs	r2, #0
 8005160:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	1e5a      	subs	r2, r3, #1
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
}
 8005170:	4618      	mov	r0, r3
 8005172:	3714      	adds	r7, #20
 8005174:	46bd      	mov	sp, r7
 8005176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517a:	4770      	bx	lr

0800517c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b084      	sub	sp, #16
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
 8005184:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d10d      	bne.n	80051ac <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005190:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005194:	b672      	cpsid	i
 8005196:	f383 8811 	msr	BASEPRI, r3
 800519a:	f3bf 8f6f 	isb	sy
 800519e:	f3bf 8f4f 	dsb	sy
 80051a2:	b662      	cpsie	i
 80051a4:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80051a6:	bf00      	nop
 80051a8:	bf00      	nop
 80051aa:	e7fd      	b.n	80051a8 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 80051ac:	f002 fd76 	bl	8007c9c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681a      	ldr	r2, [r3, #0]
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051b8:	68f9      	ldr	r1, [r7, #12]
 80051ba:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80051bc:	fb01 f303 	mul.w	r3, r1, r3
 80051c0:	441a      	add	r2, r3
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	2200      	movs	r2, #0
 80051ca:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681a      	ldr	r2, [r3, #0]
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681a      	ldr	r2, [r3, #0]
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051dc:	3b01      	subs	r3, #1
 80051de:	68f9      	ldr	r1, [r7, #12]
 80051e0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80051e2:	fb01 f303 	mul.w	r3, r1, r3
 80051e6:	441a      	add	r2, r3
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	22ff      	movs	r2, #255	@ 0xff
 80051f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	22ff      	movs	r2, #255	@ 0xff
 80051f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d114      	bne.n	800522c <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	691b      	ldr	r3, [r3, #16]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d01a      	beq.n	8005240 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	3310      	adds	r3, #16
 800520e:	4618      	mov	r0, r3
 8005210:	f001 fd14 	bl	8006c3c <xTaskRemoveFromEventList>
 8005214:	4603      	mov	r3, r0
 8005216:	2b00      	cmp	r3, #0
 8005218:	d012      	beq.n	8005240 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800521a:	4b0d      	ldr	r3, [pc, #52]	@ (8005250 <xQueueGenericReset+0xd4>)
 800521c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005220:	601a      	str	r2, [r3, #0]
 8005222:	f3bf 8f4f 	dsb	sy
 8005226:	f3bf 8f6f 	isb	sy
 800522a:	e009      	b.n	8005240 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	3310      	adds	r3, #16
 8005230:	4618      	mov	r0, r3
 8005232:	f7ff feef 	bl	8005014 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	3324      	adds	r3, #36	@ 0x24
 800523a:	4618      	mov	r0, r3
 800523c:	f7ff feea 	bl	8005014 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005240:	f002 fd62 	bl	8007d08 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005244:	2301      	movs	r3, #1
}
 8005246:	4618      	mov	r0, r3
 8005248:	3710      	adds	r7, #16
 800524a:	46bd      	mov	sp, r7
 800524c:	bd80      	pop	{r7, pc}
 800524e:	bf00      	nop
 8005250:	e000ed04 	.word	0xe000ed04

08005254 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005254:	b580      	push	{r7, lr}
 8005256:	b08e      	sub	sp, #56	@ 0x38
 8005258:	af02      	add	r7, sp, #8
 800525a:	60f8      	str	r0, [r7, #12]
 800525c:	60b9      	str	r1, [r7, #8]
 800525e:	607a      	str	r2, [r7, #4]
 8005260:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d10d      	bne.n	8005284 <xQueueGenericCreateStatic+0x30>
	__asm volatile
 8005268:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800526c:	b672      	cpsid	i
 800526e:	f383 8811 	msr	BASEPRI, r3
 8005272:	f3bf 8f6f 	isb	sy
 8005276:	f3bf 8f4f 	dsb	sy
 800527a:	b662      	cpsie	i
 800527c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800527e:	bf00      	nop
 8005280:	bf00      	nop
 8005282:	e7fd      	b.n	8005280 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d10d      	bne.n	80052a6 <xQueueGenericCreateStatic+0x52>
	__asm volatile
 800528a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800528e:	b672      	cpsid	i
 8005290:	f383 8811 	msr	BASEPRI, r3
 8005294:	f3bf 8f6f 	isb	sy
 8005298:	f3bf 8f4f 	dsb	sy
 800529c:	b662      	cpsie	i
 800529e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80052a0:	bf00      	nop
 80052a2:	bf00      	nop
 80052a4:	e7fd      	b.n	80052a2 <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d002      	beq.n	80052b2 <xQueueGenericCreateStatic+0x5e>
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d001      	beq.n	80052b6 <xQueueGenericCreateStatic+0x62>
 80052b2:	2301      	movs	r3, #1
 80052b4:	e000      	b.n	80052b8 <xQueueGenericCreateStatic+0x64>
 80052b6:	2300      	movs	r3, #0
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d10d      	bne.n	80052d8 <xQueueGenericCreateStatic+0x84>
	__asm volatile
 80052bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052c0:	b672      	cpsid	i
 80052c2:	f383 8811 	msr	BASEPRI, r3
 80052c6:	f3bf 8f6f 	isb	sy
 80052ca:	f3bf 8f4f 	dsb	sy
 80052ce:	b662      	cpsie	i
 80052d0:	623b      	str	r3, [r7, #32]
}
 80052d2:	bf00      	nop
 80052d4:	bf00      	nop
 80052d6:	e7fd      	b.n	80052d4 <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d102      	bne.n	80052e4 <xQueueGenericCreateStatic+0x90>
 80052de:	68bb      	ldr	r3, [r7, #8]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d101      	bne.n	80052e8 <xQueueGenericCreateStatic+0x94>
 80052e4:	2301      	movs	r3, #1
 80052e6:	e000      	b.n	80052ea <xQueueGenericCreateStatic+0x96>
 80052e8:	2300      	movs	r3, #0
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d10d      	bne.n	800530a <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 80052ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052f2:	b672      	cpsid	i
 80052f4:	f383 8811 	msr	BASEPRI, r3
 80052f8:	f3bf 8f6f 	isb	sy
 80052fc:	f3bf 8f4f 	dsb	sy
 8005300:	b662      	cpsie	i
 8005302:	61fb      	str	r3, [r7, #28]
}
 8005304:	bf00      	nop
 8005306:	bf00      	nop
 8005308:	e7fd      	b.n	8005306 <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800530a:	2350      	movs	r3, #80	@ 0x50
 800530c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800530e:	697b      	ldr	r3, [r7, #20]
 8005310:	2b50      	cmp	r3, #80	@ 0x50
 8005312:	d00d      	beq.n	8005330 <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 8005314:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005318:	b672      	cpsid	i
 800531a:	f383 8811 	msr	BASEPRI, r3
 800531e:	f3bf 8f6f 	isb	sy
 8005322:	f3bf 8f4f 	dsb	sy
 8005326:	b662      	cpsie	i
 8005328:	61bb      	str	r3, [r7, #24]
}
 800532a:	bf00      	nop
 800532c:	bf00      	nop
 800532e:	e7fd      	b.n	800532c <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005330:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8005336:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005338:	2b00      	cmp	r3, #0
 800533a:	d00d      	beq.n	8005358 <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800533c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800533e:	2201      	movs	r2, #1
 8005340:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005344:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8005348:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800534a:	9300      	str	r3, [sp, #0]
 800534c:	4613      	mov	r3, r2
 800534e:	687a      	ldr	r2, [r7, #4]
 8005350:	68b9      	ldr	r1, [r7, #8]
 8005352:	68f8      	ldr	r0, [r7, #12]
 8005354:	f000 f848 	bl	80053e8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005358:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800535a:	4618      	mov	r0, r3
 800535c:	3730      	adds	r7, #48	@ 0x30
 800535e:	46bd      	mov	sp, r7
 8005360:	bd80      	pop	{r7, pc}

08005362 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005362:	b580      	push	{r7, lr}
 8005364:	b08a      	sub	sp, #40	@ 0x28
 8005366:	af02      	add	r7, sp, #8
 8005368:	60f8      	str	r0, [r7, #12]
 800536a:	60b9      	str	r1, [r7, #8]
 800536c:	4613      	mov	r3, r2
 800536e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d10d      	bne.n	8005392 <xQueueGenericCreate+0x30>
	__asm volatile
 8005376:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800537a:	b672      	cpsid	i
 800537c:	f383 8811 	msr	BASEPRI, r3
 8005380:	f3bf 8f6f 	isb	sy
 8005384:	f3bf 8f4f 	dsb	sy
 8005388:	b662      	cpsie	i
 800538a:	613b      	str	r3, [r7, #16]
}
 800538c:	bf00      	nop
 800538e:	bf00      	nop
 8005390:	e7fd      	b.n	800538e <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8005392:	68bb      	ldr	r3, [r7, #8]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d102      	bne.n	800539e <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8005398:	2300      	movs	r3, #0
 800539a:	61fb      	str	r3, [r7, #28]
 800539c:	e004      	b.n	80053a8 <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	68ba      	ldr	r2, [r7, #8]
 80053a2:	fb02 f303 	mul.w	r3, r2, r3
 80053a6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80053a8:	69fb      	ldr	r3, [r7, #28]
 80053aa:	3350      	adds	r3, #80	@ 0x50
 80053ac:	4618      	mov	r0, r3
 80053ae:	f002 fda3 	bl	8007ef8 <pvPortMalloc>
 80053b2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80053b4:	69bb      	ldr	r3, [r7, #24]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d011      	beq.n	80053de <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80053ba:	69bb      	ldr	r3, [r7, #24]
 80053bc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80053be:	697b      	ldr	r3, [r7, #20]
 80053c0:	3350      	adds	r3, #80	@ 0x50
 80053c2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80053c4:	69bb      	ldr	r3, [r7, #24]
 80053c6:	2200      	movs	r2, #0
 80053c8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80053cc:	79fa      	ldrb	r2, [r7, #7]
 80053ce:	69bb      	ldr	r3, [r7, #24]
 80053d0:	9300      	str	r3, [sp, #0]
 80053d2:	4613      	mov	r3, r2
 80053d4:	697a      	ldr	r2, [r7, #20]
 80053d6:	68b9      	ldr	r1, [r7, #8]
 80053d8:	68f8      	ldr	r0, [r7, #12]
 80053da:	f000 f805 	bl	80053e8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80053de:	69bb      	ldr	r3, [r7, #24]
	}
 80053e0:	4618      	mov	r0, r3
 80053e2:	3720      	adds	r7, #32
 80053e4:	46bd      	mov	sp, r7
 80053e6:	bd80      	pop	{r7, pc}

080053e8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b084      	sub	sp, #16
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	60f8      	str	r0, [r7, #12]
 80053f0:	60b9      	str	r1, [r7, #8]
 80053f2:	607a      	str	r2, [r7, #4]
 80053f4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80053f6:	68bb      	ldr	r3, [r7, #8]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d103      	bne.n	8005404 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80053fc:	69bb      	ldr	r3, [r7, #24]
 80053fe:	69ba      	ldr	r2, [r7, #24]
 8005400:	601a      	str	r2, [r3, #0]
 8005402:	e002      	b.n	800540a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005404:	69bb      	ldr	r3, [r7, #24]
 8005406:	687a      	ldr	r2, [r7, #4]
 8005408:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800540a:	69bb      	ldr	r3, [r7, #24]
 800540c:	68fa      	ldr	r2, [r7, #12]
 800540e:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005410:	69bb      	ldr	r3, [r7, #24]
 8005412:	68ba      	ldr	r2, [r7, #8]
 8005414:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005416:	2101      	movs	r1, #1
 8005418:	69b8      	ldr	r0, [r7, #24]
 800541a:	f7ff feaf 	bl	800517c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800541e:	69bb      	ldr	r3, [r7, #24]
 8005420:	78fa      	ldrb	r2, [r7, #3]
 8005422:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005426:	bf00      	nop
 8005428:	3710      	adds	r7, #16
 800542a:	46bd      	mov	sp, r7
 800542c:	bd80      	pop	{r7, pc}

0800542e <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800542e:	b580      	push	{r7, lr}
 8005430:	b08a      	sub	sp, #40	@ 0x28
 8005432:	af02      	add	r7, sp, #8
 8005434:	60f8      	str	r0, [r7, #12]
 8005436:	60b9      	str	r1, [r7, #8]
 8005438:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d10d      	bne.n	800545c <xQueueCreateCountingSemaphoreStatic+0x2e>
	__asm volatile
 8005440:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005444:	b672      	cpsid	i
 8005446:	f383 8811 	msr	BASEPRI, r3
 800544a:	f3bf 8f6f 	isb	sy
 800544e:	f3bf 8f4f 	dsb	sy
 8005452:	b662      	cpsie	i
 8005454:	61bb      	str	r3, [r7, #24]
}
 8005456:	bf00      	nop
 8005458:	bf00      	nop
 800545a:	e7fd      	b.n	8005458 <xQueueCreateCountingSemaphoreStatic+0x2a>
		configASSERT( uxInitialCount <= uxMaxCount );
 800545c:	68ba      	ldr	r2, [r7, #8]
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	429a      	cmp	r2, r3
 8005462:	d90d      	bls.n	8005480 <xQueueCreateCountingSemaphoreStatic+0x52>
	__asm volatile
 8005464:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005468:	b672      	cpsid	i
 800546a:	f383 8811 	msr	BASEPRI, r3
 800546e:	f3bf 8f6f 	isb	sy
 8005472:	f3bf 8f4f 	dsb	sy
 8005476:	b662      	cpsie	i
 8005478:	617b      	str	r3, [r7, #20]
}
 800547a:	bf00      	nop
 800547c:	bf00      	nop
 800547e:	e7fd      	b.n	800547c <xQueueCreateCountingSemaphoreStatic+0x4e>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8005480:	2302      	movs	r3, #2
 8005482:	9300      	str	r3, [sp, #0]
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2200      	movs	r2, #0
 8005488:	2100      	movs	r1, #0
 800548a:	68f8      	ldr	r0, [r7, #12]
 800548c:	f7ff fee2 	bl	8005254 <xQueueGenericCreateStatic>
 8005490:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8005492:	69fb      	ldr	r3, [r7, #28]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d002      	beq.n	800549e <xQueueCreateCountingSemaphoreStatic+0x70>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8005498:	69fb      	ldr	r3, [r7, #28]
 800549a:	68ba      	ldr	r2, [r7, #8]
 800549c:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800549e:	69fb      	ldr	r3, [r7, #28]
	}
 80054a0:	4618      	mov	r0, r3
 80054a2:	3720      	adds	r7, #32
 80054a4:	46bd      	mov	sp, r7
 80054a6:	bd80      	pop	{r7, pc}

080054a8 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b086      	sub	sp, #24
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
 80054b0:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d10d      	bne.n	80054d4 <xQueueCreateCountingSemaphore+0x2c>
	__asm volatile
 80054b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054bc:	b672      	cpsid	i
 80054be:	f383 8811 	msr	BASEPRI, r3
 80054c2:	f3bf 8f6f 	isb	sy
 80054c6:	f3bf 8f4f 	dsb	sy
 80054ca:	b662      	cpsie	i
 80054cc:	613b      	str	r3, [r7, #16]
}
 80054ce:	bf00      	nop
 80054d0:	bf00      	nop
 80054d2:	e7fd      	b.n	80054d0 <xQueueCreateCountingSemaphore+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 80054d4:	683a      	ldr	r2, [r7, #0]
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	429a      	cmp	r2, r3
 80054da:	d90d      	bls.n	80054f8 <xQueueCreateCountingSemaphore+0x50>
	__asm volatile
 80054dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054e0:	b672      	cpsid	i
 80054e2:	f383 8811 	msr	BASEPRI, r3
 80054e6:	f3bf 8f6f 	isb	sy
 80054ea:	f3bf 8f4f 	dsb	sy
 80054ee:	b662      	cpsie	i
 80054f0:	60fb      	str	r3, [r7, #12]
}
 80054f2:	bf00      	nop
 80054f4:	bf00      	nop
 80054f6:	e7fd      	b.n	80054f4 <xQueueCreateCountingSemaphore+0x4c>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80054f8:	2202      	movs	r2, #2
 80054fa:	2100      	movs	r1, #0
 80054fc:	6878      	ldr	r0, [r7, #4]
 80054fe:	f7ff ff30 	bl	8005362 <xQueueGenericCreate>
 8005502:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8005504:	697b      	ldr	r3, [r7, #20]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d002      	beq.n	8005510 <xQueueCreateCountingSemaphore+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800550a:	697b      	ldr	r3, [r7, #20]
 800550c:	683a      	ldr	r2, [r7, #0]
 800550e:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8005510:	697b      	ldr	r3, [r7, #20]
	}
 8005512:	4618      	mov	r0, r3
 8005514:	3718      	adds	r7, #24
 8005516:	46bd      	mov	sp, r7
 8005518:	bd80      	pop	{r7, pc}
	...

0800551c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800551c:	b580      	push	{r7, lr}
 800551e:	b08e      	sub	sp, #56	@ 0x38
 8005520:	af00      	add	r7, sp, #0
 8005522:	60f8      	str	r0, [r7, #12]
 8005524:	60b9      	str	r1, [r7, #8]
 8005526:	607a      	str	r2, [r7, #4]
 8005528:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800552a:	2300      	movs	r3, #0
 800552c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005532:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005534:	2b00      	cmp	r3, #0
 8005536:	d10d      	bne.n	8005554 <xQueueGenericSend+0x38>
	__asm volatile
 8005538:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800553c:	b672      	cpsid	i
 800553e:	f383 8811 	msr	BASEPRI, r3
 8005542:	f3bf 8f6f 	isb	sy
 8005546:	f3bf 8f4f 	dsb	sy
 800554a:	b662      	cpsie	i
 800554c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800554e:	bf00      	nop
 8005550:	bf00      	nop
 8005552:	e7fd      	b.n	8005550 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d103      	bne.n	8005562 <xQueueGenericSend+0x46>
 800555a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800555c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800555e:	2b00      	cmp	r3, #0
 8005560:	d101      	bne.n	8005566 <xQueueGenericSend+0x4a>
 8005562:	2301      	movs	r3, #1
 8005564:	e000      	b.n	8005568 <xQueueGenericSend+0x4c>
 8005566:	2300      	movs	r3, #0
 8005568:	2b00      	cmp	r3, #0
 800556a:	d10d      	bne.n	8005588 <xQueueGenericSend+0x6c>
	__asm volatile
 800556c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005570:	b672      	cpsid	i
 8005572:	f383 8811 	msr	BASEPRI, r3
 8005576:	f3bf 8f6f 	isb	sy
 800557a:	f3bf 8f4f 	dsb	sy
 800557e:	b662      	cpsie	i
 8005580:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005582:	bf00      	nop
 8005584:	bf00      	nop
 8005586:	e7fd      	b.n	8005584 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	2b02      	cmp	r3, #2
 800558c:	d103      	bne.n	8005596 <xQueueGenericSend+0x7a>
 800558e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005590:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005592:	2b01      	cmp	r3, #1
 8005594:	d101      	bne.n	800559a <xQueueGenericSend+0x7e>
 8005596:	2301      	movs	r3, #1
 8005598:	e000      	b.n	800559c <xQueueGenericSend+0x80>
 800559a:	2300      	movs	r3, #0
 800559c:	2b00      	cmp	r3, #0
 800559e:	d10d      	bne.n	80055bc <xQueueGenericSend+0xa0>
	__asm volatile
 80055a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055a4:	b672      	cpsid	i
 80055a6:	f383 8811 	msr	BASEPRI, r3
 80055aa:	f3bf 8f6f 	isb	sy
 80055ae:	f3bf 8f4f 	dsb	sy
 80055b2:	b662      	cpsie	i
 80055b4:	623b      	str	r3, [r7, #32]
}
 80055b6:	bf00      	nop
 80055b8:	bf00      	nop
 80055ba:	e7fd      	b.n	80055b8 <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80055bc:	f001 fd0c 	bl	8006fd8 <xTaskGetSchedulerState>
 80055c0:	4603      	mov	r3, r0
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d102      	bne.n	80055cc <xQueueGenericSend+0xb0>
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d101      	bne.n	80055d0 <xQueueGenericSend+0xb4>
 80055cc:	2301      	movs	r3, #1
 80055ce:	e000      	b.n	80055d2 <xQueueGenericSend+0xb6>
 80055d0:	2300      	movs	r3, #0
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d10d      	bne.n	80055f2 <xQueueGenericSend+0xd6>
	__asm volatile
 80055d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055da:	b672      	cpsid	i
 80055dc:	f383 8811 	msr	BASEPRI, r3
 80055e0:	f3bf 8f6f 	isb	sy
 80055e4:	f3bf 8f4f 	dsb	sy
 80055e8:	b662      	cpsie	i
 80055ea:	61fb      	str	r3, [r7, #28]
}
 80055ec:	bf00      	nop
 80055ee:	bf00      	nop
 80055f0:	e7fd      	b.n	80055ee <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80055f2:	f002 fb53 	bl	8007c9c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80055f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055f8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80055fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055fe:	429a      	cmp	r2, r3
 8005600:	d302      	bcc.n	8005608 <xQueueGenericSend+0xec>
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	2b02      	cmp	r3, #2
 8005606:	d129      	bne.n	800565c <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005608:	683a      	ldr	r2, [r7, #0]
 800560a:	68b9      	ldr	r1, [r7, #8]
 800560c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800560e:	f000 fcd3 	bl	8005fb8 <prvCopyDataToQueue>
 8005612:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005614:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005616:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005618:	2b00      	cmp	r3, #0
 800561a:	d010      	beq.n	800563e <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800561c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800561e:	3324      	adds	r3, #36	@ 0x24
 8005620:	4618      	mov	r0, r3
 8005622:	f001 fb0b 	bl	8006c3c <xTaskRemoveFromEventList>
 8005626:	4603      	mov	r3, r0
 8005628:	2b00      	cmp	r3, #0
 800562a:	d013      	beq.n	8005654 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800562c:	4b3f      	ldr	r3, [pc, #252]	@ (800572c <xQueueGenericSend+0x210>)
 800562e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005632:	601a      	str	r2, [r3, #0]
 8005634:	f3bf 8f4f 	dsb	sy
 8005638:	f3bf 8f6f 	isb	sy
 800563c:	e00a      	b.n	8005654 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800563e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005640:	2b00      	cmp	r3, #0
 8005642:	d007      	beq.n	8005654 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005644:	4b39      	ldr	r3, [pc, #228]	@ (800572c <xQueueGenericSend+0x210>)
 8005646:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800564a:	601a      	str	r2, [r3, #0]
 800564c:	f3bf 8f4f 	dsb	sy
 8005650:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005654:	f002 fb58 	bl	8007d08 <vPortExitCritical>
				return pdPASS;
 8005658:	2301      	movs	r3, #1
 800565a:	e063      	b.n	8005724 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d103      	bne.n	800566a <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005662:	f002 fb51 	bl	8007d08 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005666:	2300      	movs	r3, #0
 8005668:	e05c      	b.n	8005724 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 800566a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800566c:	2b00      	cmp	r3, #0
 800566e:	d106      	bne.n	800567e <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005670:	f107 0314 	add.w	r3, r7, #20
 8005674:	4618      	mov	r0, r3
 8005676:	f001 fb47 	bl	8006d08 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800567a:	2301      	movs	r3, #1
 800567c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800567e:	f002 fb43 	bl	8007d08 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005682:	f001 f8a3 	bl	80067cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005686:	f002 fb09 	bl	8007c9c <vPortEnterCritical>
 800568a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800568c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005690:	b25b      	sxtb	r3, r3
 8005692:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005696:	d103      	bne.n	80056a0 <xQueueGenericSend+0x184>
 8005698:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800569a:	2200      	movs	r2, #0
 800569c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80056a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056a2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80056a6:	b25b      	sxtb	r3, r3
 80056a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056ac:	d103      	bne.n	80056b6 <xQueueGenericSend+0x19a>
 80056ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056b0:	2200      	movs	r2, #0
 80056b2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80056b6:	f002 fb27 	bl	8007d08 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80056ba:	1d3a      	adds	r2, r7, #4
 80056bc:	f107 0314 	add.w	r3, r7, #20
 80056c0:	4611      	mov	r1, r2
 80056c2:	4618      	mov	r0, r3
 80056c4:	f001 fb36 	bl	8006d34 <xTaskCheckForTimeOut>
 80056c8:	4603      	mov	r3, r0
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d124      	bne.n	8005718 <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80056ce:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80056d0:	f000 fd6a 	bl	80061a8 <prvIsQueueFull>
 80056d4:	4603      	mov	r3, r0
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d018      	beq.n	800570c <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80056da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056dc:	3310      	adds	r3, #16
 80056de:	687a      	ldr	r2, [r7, #4]
 80056e0:	4611      	mov	r1, r2
 80056e2:	4618      	mov	r0, r3
 80056e4:	f001 fa54 	bl	8006b90 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80056e8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80056ea:	f000 fcf5 	bl	80060d8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80056ee:	f001 f87b 	bl	80067e8 <xTaskResumeAll>
 80056f2:	4603      	mov	r3, r0
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	f47f af7c 	bne.w	80055f2 <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 80056fa:	4b0c      	ldr	r3, [pc, #48]	@ (800572c <xQueueGenericSend+0x210>)
 80056fc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005700:	601a      	str	r2, [r3, #0]
 8005702:	f3bf 8f4f 	dsb	sy
 8005706:	f3bf 8f6f 	isb	sy
 800570a:	e772      	b.n	80055f2 <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800570c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800570e:	f000 fce3 	bl	80060d8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005712:	f001 f869 	bl	80067e8 <xTaskResumeAll>
 8005716:	e76c      	b.n	80055f2 <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005718:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800571a:	f000 fcdd 	bl	80060d8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800571e:	f001 f863 	bl	80067e8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005722:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005724:	4618      	mov	r0, r3
 8005726:	3738      	adds	r7, #56	@ 0x38
 8005728:	46bd      	mov	sp, r7
 800572a:	bd80      	pop	{r7, pc}
 800572c:	e000ed04 	.word	0xe000ed04

08005730 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b08e      	sub	sp, #56	@ 0x38
 8005734:	af00      	add	r7, sp, #0
 8005736:	60f8      	str	r0, [r7, #12]
 8005738:	60b9      	str	r1, [r7, #8]
 800573a:	607a      	str	r2, [r7, #4]
 800573c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005742:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005744:	2b00      	cmp	r3, #0
 8005746:	d10d      	bne.n	8005764 <xQueueGenericSendFromISR+0x34>
	__asm volatile
 8005748:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800574c:	b672      	cpsid	i
 800574e:	f383 8811 	msr	BASEPRI, r3
 8005752:	f3bf 8f6f 	isb	sy
 8005756:	f3bf 8f4f 	dsb	sy
 800575a:	b662      	cpsie	i
 800575c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800575e:	bf00      	nop
 8005760:	bf00      	nop
 8005762:	e7fd      	b.n	8005760 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005764:	68bb      	ldr	r3, [r7, #8]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d103      	bne.n	8005772 <xQueueGenericSendFromISR+0x42>
 800576a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800576c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800576e:	2b00      	cmp	r3, #0
 8005770:	d101      	bne.n	8005776 <xQueueGenericSendFromISR+0x46>
 8005772:	2301      	movs	r3, #1
 8005774:	e000      	b.n	8005778 <xQueueGenericSendFromISR+0x48>
 8005776:	2300      	movs	r3, #0
 8005778:	2b00      	cmp	r3, #0
 800577a:	d10d      	bne.n	8005798 <xQueueGenericSendFromISR+0x68>
	__asm volatile
 800577c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005780:	b672      	cpsid	i
 8005782:	f383 8811 	msr	BASEPRI, r3
 8005786:	f3bf 8f6f 	isb	sy
 800578a:	f3bf 8f4f 	dsb	sy
 800578e:	b662      	cpsie	i
 8005790:	623b      	str	r3, [r7, #32]
}
 8005792:	bf00      	nop
 8005794:	bf00      	nop
 8005796:	e7fd      	b.n	8005794 <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	2b02      	cmp	r3, #2
 800579c:	d103      	bne.n	80057a6 <xQueueGenericSendFromISR+0x76>
 800579e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057a2:	2b01      	cmp	r3, #1
 80057a4:	d101      	bne.n	80057aa <xQueueGenericSendFromISR+0x7a>
 80057a6:	2301      	movs	r3, #1
 80057a8:	e000      	b.n	80057ac <xQueueGenericSendFromISR+0x7c>
 80057aa:	2300      	movs	r3, #0
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d10d      	bne.n	80057cc <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 80057b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057b4:	b672      	cpsid	i
 80057b6:	f383 8811 	msr	BASEPRI, r3
 80057ba:	f3bf 8f6f 	isb	sy
 80057be:	f3bf 8f4f 	dsb	sy
 80057c2:	b662      	cpsie	i
 80057c4:	61fb      	str	r3, [r7, #28]
}
 80057c6:	bf00      	nop
 80057c8:	bf00      	nop
 80057ca:	e7fd      	b.n	80057c8 <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80057cc:	f002 fb4e 	bl	8007e6c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80057d0:	f3ef 8211 	mrs	r2, BASEPRI
 80057d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057d8:	b672      	cpsid	i
 80057da:	f383 8811 	msr	BASEPRI, r3
 80057de:	f3bf 8f6f 	isb	sy
 80057e2:	f3bf 8f4f 	dsb	sy
 80057e6:	b662      	cpsie	i
 80057e8:	61ba      	str	r2, [r7, #24]
 80057ea:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80057ec:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80057ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80057f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057f2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80057f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057f8:	429a      	cmp	r2, r3
 80057fa:	d302      	bcc.n	8005802 <xQueueGenericSendFromISR+0xd2>
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	2b02      	cmp	r3, #2
 8005800:	d12c      	bne.n	800585c <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005802:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005804:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005808:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800580c:	683a      	ldr	r2, [r7, #0]
 800580e:	68b9      	ldr	r1, [r7, #8]
 8005810:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005812:	f000 fbd1 	bl	8005fb8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005816:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 800581a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800581e:	d112      	bne.n	8005846 <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005820:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005822:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005824:	2b00      	cmp	r3, #0
 8005826:	d016      	beq.n	8005856 <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005828:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800582a:	3324      	adds	r3, #36	@ 0x24
 800582c:	4618      	mov	r0, r3
 800582e:	f001 fa05 	bl	8006c3c <xTaskRemoveFromEventList>
 8005832:	4603      	mov	r3, r0
 8005834:	2b00      	cmp	r3, #0
 8005836:	d00e      	beq.n	8005856 <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d00b      	beq.n	8005856 <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2201      	movs	r2, #1
 8005842:	601a      	str	r2, [r3, #0]
 8005844:	e007      	b.n	8005856 <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005846:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800584a:	3301      	adds	r3, #1
 800584c:	b2db      	uxtb	r3, r3
 800584e:	b25a      	sxtb	r2, r3
 8005850:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005852:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8005856:	2301      	movs	r3, #1
 8005858:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 800585a:	e001      	b.n	8005860 <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800585c:	2300      	movs	r3, #0
 800585e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005860:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005862:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005864:	693b      	ldr	r3, [r7, #16]
 8005866:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800586a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800586c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800586e:	4618      	mov	r0, r3
 8005870:	3738      	adds	r7, #56	@ 0x38
 8005872:	46bd      	mov	sp, r7
 8005874:	bd80      	pop	{r7, pc}

08005876 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005876:	b580      	push	{r7, lr}
 8005878:	b08e      	sub	sp, #56	@ 0x38
 800587a:	af00      	add	r7, sp, #0
 800587c:	6078      	str	r0, [r7, #4]
 800587e:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8005884:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005886:	2b00      	cmp	r3, #0
 8005888:	d10d      	bne.n	80058a6 <xQueueGiveFromISR+0x30>
	__asm volatile
 800588a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800588e:	b672      	cpsid	i
 8005890:	f383 8811 	msr	BASEPRI, r3
 8005894:	f3bf 8f6f 	isb	sy
 8005898:	f3bf 8f4f 	dsb	sy
 800589c:	b662      	cpsie	i
 800589e:	623b      	str	r3, [r7, #32]
}
 80058a0:	bf00      	nop
 80058a2:	bf00      	nop
 80058a4:	e7fd      	b.n	80058a2 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80058a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d00d      	beq.n	80058ca <xQueueGiveFromISR+0x54>
	__asm volatile
 80058ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058b2:	b672      	cpsid	i
 80058b4:	f383 8811 	msr	BASEPRI, r3
 80058b8:	f3bf 8f6f 	isb	sy
 80058bc:	f3bf 8f4f 	dsb	sy
 80058c0:	b662      	cpsie	i
 80058c2:	61fb      	str	r3, [r7, #28]
}
 80058c4:	bf00      	nop
 80058c6:	bf00      	nop
 80058c8:	e7fd      	b.n	80058c6 <xQueueGiveFromISR+0x50>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80058ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d103      	bne.n	80058da <xQueueGiveFromISR+0x64>
 80058d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058d4:	689b      	ldr	r3, [r3, #8]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d101      	bne.n	80058de <xQueueGiveFromISR+0x68>
 80058da:	2301      	movs	r3, #1
 80058dc:	e000      	b.n	80058e0 <xQueueGiveFromISR+0x6a>
 80058de:	2300      	movs	r3, #0
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d10d      	bne.n	8005900 <xQueueGiveFromISR+0x8a>
	__asm volatile
 80058e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058e8:	b672      	cpsid	i
 80058ea:	f383 8811 	msr	BASEPRI, r3
 80058ee:	f3bf 8f6f 	isb	sy
 80058f2:	f3bf 8f4f 	dsb	sy
 80058f6:	b662      	cpsie	i
 80058f8:	61bb      	str	r3, [r7, #24]
}
 80058fa:	bf00      	nop
 80058fc:	bf00      	nop
 80058fe:	e7fd      	b.n	80058fc <xQueueGiveFromISR+0x86>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005900:	f002 fab4 	bl	8007e6c <vPortValidateInterruptPriority>
	__asm volatile
 8005904:	f3ef 8211 	mrs	r2, BASEPRI
 8005908:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800590c:	b672      	cpsid	i
 800590e:	f383 8811 	msr	BASEPRI, r3
 8005912:	f3bf 8f6f 	isb	sy
 8005916:	f3bf 8f4f 	dsb	sy
 800591a:	b662      	cpsie	i
 800591c:	617a      	str	r2, [r7, #20]
 800591e:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8005920:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005922:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005924:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005926:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005928:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800592a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800592c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800592e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005930:	429a      	cmp	r2, r3
 8005932:	d22b      	bcs.n	800598c <xQueueGiveFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005934:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005936:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800593a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800593e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005940:	1c5a      	adds	r2, r3, #1
 8005942:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005944:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005946:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800594a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800594e:	d112      	bne.n	8005976 <xQueueGiveFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005950:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005952:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005954:	2b00      	cmp	r3, #0
 8005956:	d016      	beq.n	8005986 <xQueueGiveFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005958:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800595a:	3324      	adds	r3, #36	@ 0x24
 800595c:	4618      	mov	r0, r3
 800595e:	f001 f96d 	bl	8006c3c <xTaskRemoveFromEventList>
 8005962:	4603      	mov	r3, r0
 8005964:	2b00      	cmp	r3, #0
 8005966:	d00e      	beq.n	8005986 <xQueueGiveFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d00b      	beq.n	8005986 <xQueueGiveFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	2201      	movs	r2, #1
 8005972:	601a      	str	r2, [r3, #0]
 8005974:	e007      	b.n	8005986 <xQueueGiveFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005976:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800597a:	3301      	adds	r3, #1
 800597c:	b2db      	uxtb	r3, r3
 800597e:	b25a      	sxtb	r2, r3
 8005980:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005982:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8005986:	2301      	movs	r3, #1
 8005988:	637b      	str	r3, [r7, #52]	@ 0x34
 800598a:	e001      	b.n	8005990 <xQueueGiveFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800598c:	2300      	movs	r3, #0
 800598e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005990:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005992:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	f383 8811 	msr	BASEPRI, r3
}
 800599a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800599c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800599e:	4618      	mov	r0, r3
 80059a0:	3738      	adds	r7, #56	@ 0x38
 80059a2:	46bd      	mov	sp, r7
 80059a4:	bd80      	pop	{r7, pc}
	...

080059a8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b08c      	sub	sp, #48	@ 0x30
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	60f8      	str	r0, [r7, #12]
 80059b0:	60b9      	str	r1, [r7, #8]
 80059b2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80059b4:	2300      	movs	r3, #0
 80059b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80059bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d10d      	bne.n	80059de <xQueueReceive+0x36>
	__asm volatile
 80059c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059c6:	b672      	cpsid	i
 80059c8:	f383 8811 	msr	BASEPRI, r3
 80059cc:	f3bf 8f6f 	isb	sy
 80059d0:	f3bf 8f4f 	dsb	sy
 80059d4:	b662      	cpsie	i
 80059d6:	623b      	str	r3, [r7, #32]
}
 80059d8:	bf00      	nop
 80059da:	bf00      	nop
 80059dc:	e7fd      	b.n	80059da <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80059de:	68bb      	ldr	r3, [r7, #8]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d103      	bne.n	80059ec <xQueueReceive+0x44>
 80059e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d101      	bne.n	80059f0 <xQueueReceive+0x48>
 80059ec:	2301      	movs	r3, #1
 80059ee:	e000      	b.n	80059f2 <xQueueReceive+0x4a>
 80059f0:	2300      	movs	r3, #0
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d10d      	bne.n	8005a12 <xQueueReceive+0x6a>
	__asm volatile
 80059f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059fa:	b672      	cpsid	i
 80059fc:	f383 8811 	msr	BASEPRI, r3
 8005a00:	f3bf 8f6f 	isb	sy
 8005a04:	f3bf 8f4f 	dsb	sy
 8005a08:	b662      	cpsie	i
 8005a0a:	61fb      	str	r3, [r7, #28]
}
 8005a0c:	bf00      	nop
 8005a0e:	bf00      	nop
 8005a10:	e7fd      	b.n	8005a0e <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005a12:	f001 fae1 	bl	8006fd8 <xTaskGetSchedulerState>
 8005a16:	4603      	mov	r3, r0
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d102      	bne.n	8005a22 <xQueueReceive+0x7a>
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d101      	bne.n	8005a26 <xQueueReceive+0x7e>
 8005a22:	2301      	movs	r3, #1
 8005a24:	e000      	b.n	8005a28 <xQueueReceive+0x80>
 8005a26:	2300      	movs	r3, #0
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d10d      	bne.n	8005a48 <xQueueReceive+0xa0>
	__asm volatile
 8005a2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a30:	b672      	cpsid	i
 8005a32:	f383 8811 	msr	BASEPRI, r3
 8005a36:	f3bf 8f6f 	isb	sy
 8005a3a:	f3bf 8f4f 	dsb	sy
 8005a3e:	b662      	cpsie	i
 8005a40:	61bb      	str	r3, [r7, #24]
}
 8005a42:	bf00      	nop
 8005a44:	bf00      	nop
 8005a46:	e7fd      	b.n	8005a44 <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005a48:	f002 f928 	bl	8007c9c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005a4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a50:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005a52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d01f      	beq.n	8005a98 <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005a58:	68b9      	ldr	r1, [r7, #8]
 8005a5a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005a5c:	f000 fb16 	bl	800608c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005a60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a62:	1e5a      	subs	r2, r3, #1
 8005a64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a66:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005a68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a6a:	691b      	ldr	r3, [r3, #16]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d00f      	beq.n	8005a90 <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005a70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a72:	3310      	adds	r3, #16
 8005a74:	4618      	mov	r0, r3
 8005a76:	f001 f8e1 	bl	8006c3c <xTaskRemoveFromEventList>
 8005a7a:	4603      	mov	r3, r0
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d007      	beq.n	8005a90 <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005a80:	4b3c      	ldr	r3, [pc, #240]	@ (8005b74 <xQueueReceive+0x1cc>)
 8005a82:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005a86:	601a      	str	r2, [r3, #0]
 8005a88:	f3bf 8f4f 	dsb	sy
 8005a8c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005a90:	f002 f93a 	bl	8007d08 <vPortExitCritical>
				return pdPASS;
 8005a94:	2301      	movs	r3, #1
 8005a96:	e069      	b.n	8005b6c <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d103      	bne.n	8005aa6 <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005a9e:	f002 f933 	bl	8007d08 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	e062      	b.n	8005b6c <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005aa6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d106      	bne.n	8005aba <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005aac:	f107 0310 	add.w	r3, r7, #16
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	f001 f929 	bl	8006d08 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005aba:	f002 f925 	bl	8007d08 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005abe:	f000 fe85 	bl	80067cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005ac2:	f002 f8eb 	bl	8007c9c <vPortEnterCritical>
 8005ac6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ac8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005acc:	b25b      	sxtb	r3, r3
 8005ace:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ad2:	d103      	bne.n	8005adc <xQueueReceive+0x134>
 8005ad4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005adc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ade:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005ae2:	b25b      	sxtb	r3, r3
 8005ae4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ae8:	d103      	bne.n	8005af2 <xQueueReceive+0x14a>
 8005aea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005aec:	2200      	movs	r2, #0
 8005aee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005af2:	f002 f909 	bl	8007d08 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005af6:	1d3a      	adds	r2, r7, #4
 8005af8:	f107 0310 	add.w	r3, r7, #16
 8005afc:	4611      	mov	r1, r2
 8005afe:	4618      	mov	r0, r3
 8005b00:	f001 f918 	bl	8006d34 <xTaskCheckForTimeOut>
 8005b04:	4603      	mov	r3, r0
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d123      	bne.n	8005b52 <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005b0a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005b0c:	f000 fb36 	bl	800617c <prvIsQueueEmpty>
 8005b10:	4603      	mov	r3, r0
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d017      	beq.n	8005b46 <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005b16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b18:	3324      	adds	r3, #36	@ 0x24
 8005b1a:	687a      	ldr	r2, [r7, #4]
 8005b1c:	4611      	mov	r1, r2
 8005b1e:	4618      	mov	r0, r3
 8005b20:	f001 f836 	bl	8006b90 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005b24:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005b26:	f000 fad7 	bl	80060d8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005b2a:	f000 fe5d 	bl	80067e8 <xTaskResumeAll>
 8005b2e:	4603      	mov	r3, r0
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d189      	bne.n	8005a48 <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 8005b34:	4b0f      	ldr	r3, [pc, #60]	@ (8005b74 <xQueueReceive+0x1cc>)
 8005b36:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005b3a:	601a      	str	r2, [r3, #0]
 8005b3c:	f3bf 8f4f 	dsb	sy
 8005b40:	f3bf 8f6f 	isb	sy
 8005b44:	e780      	b.n	8005a48 <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005b46:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005b48:	f000 fac6 	bl	80060d8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005b4c:	f000 fe4c 	bl	80067e8 <xTaskResumeAll>
 8005b50:	e77a      	b.n	8005a48 <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005b52:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005b54:	f000 fac0 	bl	80060d8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005b58:	f000 fe46 	bl	80067e8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005b5c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005b5e:	f000 fb0d 	bl	800617c <prvIsQueueEmpty>
 8005b62:	4603      	mov	r3, r0
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	f43f af6f 	beq.w	8005a48 <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005b6a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	3730      	adds	r7, #48	@ 0x30
 8005b70:	46bd      	mov	sp, r7
 8005b72:	bd80      	pop	{r7, pc}
 8005b74:	e000ed04 	.word	0xe000ed04

08005b78 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b08e      	sub	sp, #56	@ 0x38
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
 8005b80:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8005b82:	2300      	movs	r3, #0
 8005b84:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005b8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d10d      	bne.n	8005bb0 <xQueueSemaphoreTake+0x38>
	__asm volatile
 8005b94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b98:	b672      	cpsid	i
 8005b9a:	f383 8811 	msr	BASEPRI, r3
 8005b9e:	f3bf 8f6f 	isb	sy
 8005ba2:	f3bf 8f4f 	dsb	sy
 8005ba6:	b662      	cpsie	i
 8005ba8:	623b      	str	r3, [r7, #32]
}
 8005baa:	bf00      	nop
 8005bac:	bf00      	nop
 8005bae:	e7fd      	b.n	8005bac <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005bb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d00d      	beq.n	8005bd4 <xQueueSemaphoreTake+0x5c>
	__asm volatile
 8005bb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bbc:	b672      	cpsid	i
 8005bbe:	f383 8811 	msr	BASEPRI, r3
 8005bc2:	f3bf 8f6f 	isb	sy
 8005bc6:	f3bf 8f4f 	dsb	sy
 8005bca:	b662      	cpsie	i
 8005bcc:	61fb      	str	r3, [r7, #28]
}
 8005bce:	bf00      	nop
 8005bd0:	bf00      	nop
 8005bd2:	e7fd      	b.n	8005bd0 <xQueueSemaphoreTake+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005bd4:	f001 fa00 	bl	8006fd8 <xTaskGetSchedulerState>
 8005bd8:	4603      	mov	r3, r0
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d102      	bne.n	8005be4 <xQueueSemaphoreTake+0x6c>
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d101      	bne.n	8005be8 <xQueueSemaphoreTake+0x70>
 8005be4:	2301      	movs	r3, #1
 8005be6:	e000      	b.n	8005bea <xQueueSemaphoreTake+0x72>
 8005be8:	2300      	movs	r3, #0
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d10d      	bne.n	8005c0a <xQueueSemaphoreTake+0x92>
	__asm volatile
 8005bee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bf2:	b672      	cpsid	i
 8005bf4:	f383 8811 	msr	BASEPRI, r3
 8005bf8:	f3bf 8f6f 	isb	sy
 8005bfc:	f3bf 8f4f 	dsb	sy
 8005c00:	b662      	cpsie	i
 8005c02:	61bb      	str	r3, [r7, #24]
}
 8005c04:	bf00      	nop
 8005c06:	bf00      	nop
 8005c08:	e7fd      	b.n	8005c06 <xQueueSemaphoreTake+0x8e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005c0a:	f002 f847 	bl	8007c9c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005c0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c12:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005c14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d024      	beq.n	8005c64 <xQueueSemaphoreTake+0xec>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005c1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c1c:	1e5a      	subs	r2, r3, #1
 8005c1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c20:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005c22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d104      	bne.n	8005c34 <xQueueSemaphoreTake+0xbc>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8005c2a:	f001 fb57 	bl	80072dc <pvTaskIncrementMutexHeldCount>
 8005c2e:	4602      	mov	r2, r0
 8005c30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c32:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005c34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c36:	691b      	ldr	r3, [r3, #16]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d00f      	beq.n	8005c5c <xQueueSemaphoreTake+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005c3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c3e:	3310      	adds	r3, #16
 8005c40:	4618      	mov	r0, r3
 8005c42:	f000 fffb 	bl	8006c3c <xTaskRemoveFromEventList>
 8005c46:	4603      	mov	r3, r0
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d007      	beq.n	8005c5c <xQueueSemaphoreTake+0xe4>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005c4c:	4b55      	ldr	r3, [pc, #340]	@ (8005da4 <xQueueSemaphoreTake+0x22c>)
 8005c4e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005c52:	601a      	str	r2, [r3, #0]
 8005c54:	f3bf 8f4f 	dsb	sy
 8005c58:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005c5c:	f002 f854 	bl	8007d08 <vPortExitCritical>
				return pdPASS;
 8005c60:	2301      	movs	r3, #1
 8005c62:	e09a      	b.n	8005d9a <xQueueSemaphoreTake+0x222>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d114      	bne.n	8005c94 <xQueueSemaphoreTake+0x11c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005c6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d00d      	beq.n	8005c8c <xQueueSemaphoreTake+0x114>
	__asm volatile
 8005c70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c74:	b672      	cpsid	i
 8005c76:	f383 8811 	msr	BASEPRI, r3
 8005c7a:	f3bf 8f6f 	isb	sy
 8005c7e:	f3bf 8f4f 	dsb	sy
 8005c82:	b662      	cpsie	i
 8005c84:	617b      	str	r3, [r7, #20]
}
 8005c86:	bf00      	nop
 8005c88:	bf00      	nop
 8005c8a:	e7fd      	b.n	8005c88 <xQueueSemaphoreTake+0x110>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8005c8c:	f002 f83c 	bl	8007d08 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005c90:	2300      	movs	r3, #0
 8005c92:	e082      	b.n	8005d9a <xQueueSemaphoreTake+0x222>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005c94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d106      	bne.n	8005ca8 <xQueueSemaphoreTake+0x130>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005c9a:	f107 030c 	add.w	r3, r7, #12
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	f001 f832 	bl	8006d08 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005ca4:	2301      	movs	r3, #1
 8005ca6:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005ca8:	f002 f82e 	bl	8007d08 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005cac:	f000 fd8e 	bl	80067cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005cb0:	f001 fff4 	bl	8007c9c <vPortEnterCritical>
 8005cb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005cb6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005cba:	b25b      	sxtb	r3, r3
 8005cbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cc0:	d103      	bne.n	8005cca <xQueueSemaphoreTake+0x152>
 8005cc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005cca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ccc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005cd0:	b25b      	sxtb	r3, r3
 8005cd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cd6:	d103      	bne.n	8005ce0 <xQueueSemaphoreTake+0x168>
 8005cd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005cda:	2200      	movs	r2, #0
 8005cdc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005ce0:	f002 f812 	bl	8007d08 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005ce4:	463a      	mov	r2, r7
 8005ce6:	f107 030c 	add.w	r3, r7, #12
 8005cea:	4611      	mov	r1, r2
 8005cec:	4618      	mov	r0, r3
 8005cee:	f001 f821 	bl	8006d34 <xTaskCheckForTimeOut>
 8005cf2:	4603      	mov	r3, r0
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d132      	bne.n	8005d5e <xQueueSemaphoreTake+0x1e6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005cf8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005cfa:	f000 fa3f 	bl	800617c <prvIsQueueEmpty>
 8005cfe:	4603      	mov	r3, r0
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d026      	beq.n	8005d52 <xQueueSemaphoreTake+0x1da>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005d04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d109      	bne.n	8005d20 <xQueueSemaphoreTake+0x1a8>
					{
						taskENTER_CRITICAL();
 8005d0c:	f001 ffc6 	bl	8007c9c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005d10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d12:	689b      	ldr	r3, [r3, #8]
 8005d14:	4618      	mov	r0, r3
 8005d16:	f001 f97d 	bl	8007014 <xTaskPriorityInherit>
 8005d1a:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8005d1c:	f001 fff4 	bl	8007d08 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005d20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d22:	3324      	adds	r3, #36	@ 0x24
 8005d24:	683a      	ldr	r2, [r7, #0]
 8005d26:	4611      	mov	r1, r2
 8005d28:	4618      	mov	r0, r3
 8005d2a:	f000 ff31 	bl	8006b90 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005d2e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005d30:	f000 f9d2 	bl	80060d8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005d34:	f000 fd58 	bl	80067e8 <xTaskResumeAll>
 8005d38:	4603      	mov	r3, r0
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	f47f af65 	bne.w	8005c0a <xQueueSemaphoreTake+0x92>
				{
					portYIELD_WITHIN_API();
 8005d40:	4b18      	ldr	r3, [pc, #96]	@ (8005da4 <xQueueSemaphoreTake+0x22c>)
 8005d42:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005d46:	601a      	str	r2, [r3, #0]
 8005d48:	f3bf 8f4f 	dsb	sy
 8005d4c:	f3bf 8f6f 	isb	sy
 8005d50:	e75b      	b.n	8005c0a <xQueueSemaphoreTake+0x92>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8005d52:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005d54:	f000 f9c0 	bl	80060d8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005d58:	f000 fd46 	bl	80067e8 <xTaskResumeAll>
 8005d5c:	e755      	b.n	8005c0a <xQueueSemaphoreTake+0x92>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8005d5e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005d60:	f000 f9ba 	bl	80060d8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005d64:	f000 fd40 	bl	80067e8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005d68:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005d6a:	f000 fa07 	bl	800617c <prvIsQueueEmpty>
 8005d6e:	4603      	mov	r3, r0
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	f43f af4a 	beq.w	8005c0a <xQueueSemaphoreTake+0x92>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8005d76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d00d      	beq.n	8005d98 <xQueueSemaphoreTake+0x220>
					{
						taskENTER_CRITICAL();
 8005d7c:	f001 ff8e 	bl	8007c9c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005d80:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005d82:	f000 f901 	bl	8005f88 <prvGetDisinheritPriorityAfterTimeout>
 8005d86:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8005d88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d8a:	689b      	ldr	r3, [r3, #8]
 8005d8c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005d8e:	4618      	mov	r0, r3
 8005d90:	f001 fa1c 	bl	80071cc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005d94:	f001 ffb8 	bl	8007d08 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005d98:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	3738      	adds	r7, #56	@ 0x38
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	bd80      	pop	{r7, pc}
 8005da2:	bf00      	nop
 8005da4:	e000ed04 	.word	0xe000ed04

08005da8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b08e      	sub	sp, #56	@ 0x38
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	60f8      	str	r0, [r7, #12]
 8005db0:	60b9      	str	r1, [r7, #8]
 8005db2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005db8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d10d      	bne.n	8005dda <xQueueReceiveFromISR+0x32>
	__asm volatile
 8005dbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dc2:	b672      	cpsid	i
 8005dc4:	f383 8811 	msr	BASEPRI, r3
 8005dc8:	f3bf 8f6f 	isb	sy
 8005dcc:	f3bf 8f4f 	dsb	sy
 8005dd0:	b662      	cpsie	i
 8005dd2:	623b      	str	r3, [r7, #32]
}
 8005dd4:	bf00      	nop
 8005dd6:	bf00      	nop
 8005dd8:	e7fd      	b.n	8005dd6 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005dda:	68bb      	ldr	r3, [r7, #8]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d103      	bne.n	8005de8 <xQueueReceiveFromISR+0x40>
 8005de0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005de2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d101      	bne.n	8005dec <xQueueReceiveFromISR+0x44>
 8005de8:	2301      	movs	r3, #1
 8005dea:	e000      	b.n	8005dee <xQueueReceiveFromISR+0x46>
 8005dec:	2300      	movs	r3, #0
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d10d      	bne.n	8005e0e <xQueueReceiveFromISR+0x66>
	__asm volatile
 8005df2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005df6:	b672      	cpsid	i
 8005df8:	f383 8811 	msr	BASEPRI, r3
 8005dfc:	f3bf 8f6f 	isb	sy
 8005e00:	f3bf 8f4f 	dsb	sy
 8005e04:	b662      	cpsie	i
 8005e06:	61fb      	str	r3, [r7, #28]
}
 8005e08:	bf00      	nop
 8005e0a:	bf00      	nop
 8005e0c:	e7fd      	b.n	8005e0a <xQueueReceiveFromISR+0x62>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005e0e:	f002 f82d 	bl	8007e6c <vPortValidateInterruptPriority>
	__asm volatile
 8005e12:	f3ef 8211 	mrs	r2, BASEPRI
 8005e16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e1a:	b672      	cpsid	i
 8005e1c:	f383 8811 	msr	BASEPRI, r3
 8005e20:	f3bf 8f6f 	isb	sy
 8005e24:	f3bf 8f4f 	dsb	sy
 8005e28:	b662      	cpsie	i
 8005e2a:	61ba      	str	r2, [r7, #24]
 8005e2c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8005e2e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005e30:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005e32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e36:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005e38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d02f      	beq.n	8005e9e <xQueueReceiveFromISR+0xf6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8005e3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e40:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005e44:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005e48:	68b9      	ldr	r1, [r7, #8]
 8005e4a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005e4c:	f000 f91e 	bl	800608c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005e50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e52:	1e5a      	subs	r2, r3, #1
 8005e54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e56:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8005e58:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8005e5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e60:	d112      	bne.n	8005e88 <xQueueReceiveFromISR+0xe0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005e62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e64:	691b      	ldr	r3, [r3, #16]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d016      	beq.n	8005e98 <xQueueReceiveFromISR+0xf0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005e6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e6c:	3310      	adds	r3, #16
 8005e6e:	4618      	mov	r0, r3
 8005e70:	f000 fee4 	bl	8006c3c <xTaskRemoveFromEventList>
 8005e74:	4603      	mov	r3, r0
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d00e      	beq.n	8005e98 <xQueueReceiveFromISR+0xf0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d00b      	beq.n	8005e98 <xQueueReceiveFromISR+0xf0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2201      	movs	r2, #1
 8005e84:	601a      	str	r2, [r3, #0]
 8005e86:	e007      	b.n	8005e98 <xQueueReceiveFromISR+0xf0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005e88:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005e8c:	3301      	adds	r3, #1
 8005e8e:	b2db      	uxtb	r3, r3
 8005e90:	b25a      	sxtb	r2, r3
 8005e92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e94:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8005e98:	2301      	movs	r3, #1
 8005e9a:	637b      	str	r3, [r7, #52]	@ 0x34
 8005e9c:	e001      	b.n	8005ea2 <xQueueReceiveFromISR+0xfa>
		}
		else
		{
			xReturn = pdFAIL;
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	637b      	str	r3, [r7, #52]	@ 0x34
 8005ea2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ea4:	613b      	str	r3, [r7, #16]
	__asm volatile
 8005ea6:	693b      	ldr	r3, [r7, #16]
 8005ea8:	f383 8811 	msr	BASEPRI, r3
}
 8005eac:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005eae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	3738      	adds	r7, #56	@ 0x38
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	bd80      	pop	{r7, pc}

08005eb8 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b084      	sub	sp, #16
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d10d      	bne.n	8005ee2 <uxQueueMessagesWaiting+0x2a>
	__asm volatile
 8005ec6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005eca:	b672      	cpsid	i
 8005ecc:	f383 8811 	msr	BASEPRI, r3
 8005ed0:	f3bf 8f6f 	isb	sy
 8005ed4:	f3bf 8f4f 	dsb	sy
 8005ed8:	b662      	cpsie	i
 8005eda:	60bb      	str	r3, [r7, #8]
}
 8005edc:	bf00      	nop
 8005ede:	bf00      	nop
 8005ee0:	e7fd      	b.n	8005ede <uxQueueMessagesWaiting+0x26>

	taskENTER_CRITICAL();
 8005ee2:	f001 fedb 	bl	8007c9c <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005eea:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8005eec:	f001 ff0c 	bl	8007d08 <vPortExitCritical>

	return uxReturn;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	3710      	adds	r7, #16
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	bd80      	pop	{r7, pc}

08005efa <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8005efa:	b480      	push	{r7}
 8005efc:	b087      	sub	sp, #28
 8005efe:	af00      	add	r7, sp, #0
 8005f00:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8005f06:	697b      	ldr	r3, [r7, #20]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d10d      	bne.n	8005f28 <uxQueueMessagesWaitingFromISR+0x2e>
	__asm volatile
 8005f0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f10:	b672      	cpsid	i
 8005f12:	f383 8811 	msr	BASEPRI, r3
 8005f16:	f3bf 8f6f 	isb	sy
 8005f1a:	f3bf 8f4f 	dsb	sy
 8005f1e:	b662      	cpsie	i
 8005f20:	60fb      	str	r3, [r7, #12]
}
 8005f22:	bf00      	nop
 8005f24:	bf00      	nop
 8005f26:	e7fd      	b.n	8005f24 <uxQueueMessagesWaitingFromISR+0x2a>
	uxReturn = pxQueue->uxMessagesWaiting;
 8005f28:	697b      	ldr	r3, [r7, #20]
 8005f2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f2c:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8005f2e:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8005f30:	4618      	mov	r0, r3
 8005f32:	371c      	adds	r7, #28
 8005f34:	46bd      	mov	sp, r7
 8005f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3a:	4770      	bx	lr

08005f3c <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b084      	sub	sp, #16
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d10d      	bne.n	8005f6a <vQueueDelete+0x2e>
	__asm volatile
 8005f4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f52:	b672      	cpsid	i
 8005f54:	f383 8811 	msr	BASEPRI, r3
 8005f58:	f3bf 8f6f 	isb	sy
 8005f5c:	f3bf 8f4f 	dsb	sy
 8005f60:	b662      	cpsie	i
 8005f62:	60bb      	str	r3, [r7, #8]
}
 8005f64:	bf00      	nop
 8005f66:	bf00      	nop
 8005f68:	e7fd      	b.n	8005f66 <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8005f6a:	68f8      	ldr	r0, [r7, #12]
 8005f6c:	f000 f95e 	bl	800622c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d102      	bne.n	8005f80 <vQueueDelete+0x44>
		{
			vPortFree( pxQueue );
 8005f7a:	68f8      	ldr	r0, [r7, #12]
 8005f7c:	f002 f88a 	bl	8008094 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8005f80:	bf00      	nop
 8005f82:	3710      	adds	r7, #16
 8005f84:	46bd      	mov	sp, r7
 8005f86:	bd80      	pop	{r7, pc}

08005f88 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8005f88:	b480      	push	{r7}
 8005f8a:	b085      	sub	sp, #20
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d006      	beq.n	8005fa6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8005fa2:	60fb      	str	r3, [r7, #12]
 8005fa4:	e001      	b.n	8005faa <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8005faa:	68fb      	ldr	r3, [r7, #12]
	}
 8005fac:	4618      	mov	r0, r3
 8005fae:	3714      	adds	r7, #20
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb6:	4770      	bx	lr

08005fb8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b086      	sub	sp, #24
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	60f8      	str	r0, [r7, #12]
 8005fc0:	60b9      	str	r1, [r7, #8]
 8005fc2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fcc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d10d      	bne.n	8005ff2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d14d      	bne.n	800607a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	689b      	ldr	r3, [r3, #8]
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	f001 f87e 	bl	80070e4 <xTaskPriorityDisinherit>
 8005fe8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	2200      	movs	r2, #0
 8005fee:	609a      	str	r2, [r3, #8]
 8005ff0:	e043      	b.n	800607a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d119      	bne.n	800602c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	6858      	ldr	r0, [r3, #4]
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006000:	461a      	mov	r2, r3
 8006002:	68b9      	ldr	r1, [r7, #8]
 8006004:	f002 fa16 	bl	8008434 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	685a      	ldr	r2, [r3, #4]
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006010:	441a      	add	r2, r3
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	685a      	ldr	r2, [r3, #4]
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	689b      	ldr	r3, [r3, #8]
 800601e:	429a      	cmp	r2, r3
 8006020:	d32b      	bcc.n	800607a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681a      	ldr	r2, [r3, #0]
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	605a      	str	r2, [r3, #4]
 800602a:	e026      	b.n	800607a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	68d8      	ldr	r0, [r3, #12]
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006034:	461a      	mov	r2, r3
 8006036:	68b9      	ldr	r1, [r7, #8]
 8006038:	f002 f9fc 	bl	8008434 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	68da      	ldr	r2, [r3, #12]
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006044:	425b      	negs	r3, r3
 8006046:	441a      	add	r2, r3
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	68da      	ldr	r2, [r3, #12]
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	429a      	cmp	r2, r3
 8006056:	d207      	bcs.n	8006068 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	689a      	ldr	r2, [r3, #8]
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006060:	425b      	negs	r3, r3
 8006062:	441a      	add	r2, r3
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2b02      	cmp	r3, #2
 800606c:	d105      	bne.n	800607a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800606e:	693b      	ldr	r3, [r7, #16]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d002      	beq.n	800607a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006074:	693b      	ldr	r3, [r7, #16]
 8006076:	3b01      	subs	r3, #1
 8006078:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800607a:	693b      	ldr	r3, [r7, #16]
 800607c:	1c5a      	adds	r2, r3, #1
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8006082:	697b      	ldr	r3, [r7, #20]
}
 8006084:	4618      	mov	r0, r3
 8006086:	3718      	adds	r7, #24
 8006088:	46bd      	mov	sp, r7
 800608a:	bd80      	pop	{r7, pc}

0800608c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b082      	sub	sp, #8
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
 8006094:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800609a:	2b00      	cmp	r3, #0
 800609c:	d018      	beq.n	80060d0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	68da      	ldr	r2, [r3, #12]
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060a6:	441a      	add	r2, r3
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	68da      	ldr	r2, [r3, #12]
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	689b      	ldr	r3, [r3, #8]
 80060b4:	429a      	cmp	r2, r3
 80060b6:	d303      	bcc.n	80060c0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681a      	ldr	r2, [r3, #0]
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	68d9      	ldr	r1, [r3, #12]
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060c8:	461a      	mov	r2, r3
 80060ca:	6838      	ldr	r0, [r7, #0]
 80060cc:	f002 f9b2 	bl	8008434 <memcpy>
	}
}
 80060d0:	bf00      	nop
 80060d2:	3708      	adds	r7, #8
 80060d4:	46bd      	mov	sp, r7
 80060d6:	bd80      	pop	{r7, pc}

080060d8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b084      	sub	sp, #16
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80060e0:	f001 fddc 	bl	8007c9c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80060ea:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80060ec:	e011      	b.n	8006112 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d012      	beq.n	800611c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	3324      	adds	r3, #36	@ 0x24
 80060fa:	4618      	mov	r0, r3
 80060fc:	f000 fd9e 	bl	8006c3c <xTaskRemoveFromEventList>
 8006100:	4603      	mov	r3, r0
 8006102:	2b00      	cmp	r3, #0
 8006104:	d001      	beq.n	800610a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006106:	f000 fe7d 	bl	8006e04 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800610a:	7bfb      	ldrb	r3, [r7, #15]
 800610c:	3b01      	subs	r3, #1
 800610e:	b2db      	uxtb	r3, r3
 8006110:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006112:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006116:	2b00      	cmp	r3, #0
 8006118:	dce9      	bgt.n	80060ee <prvUnlockQueue+0x16>
 800611a:	e000      	b.n	800611e <prvUnlockQueue+0x46>
					break;
 800611c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	22ff      	movs	r2, #255	@ 0xff
 8006122:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8006126:	f001 fdef 	bl	8007d08 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800612a:	f001 fdb7 	bl	8007c9c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006134:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006136:	e011      	b.n	800615c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	691b      	ldr	r3, [r3, #16]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d012      	beq.n	8006166 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	3310      	adds	r3, #16
 8006144:	4618      	mov	r0, r3
 8006146:	f000 fd79 	bl	8006c3c <xTaskRemoveFromEventList>
 800614a:	4603      	mov	r3, r0
 800614c:	2b00      	cmp	r3, #0
 800614e:	d001      	beq.n	8006154 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006150:	f000 fe58 	bl	8006e04 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006154:	7bbb      	ldrb	r3, [r7, #14]
 8006156:	3b01      	subs	r3, #1
 8006158:	b2db      	uxtb	r3, r3
 800615a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800615c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006160:	2b00      	cmp	r3, #0
 8006162:	dce9      	bgt.n	8006138 <prvUnlockQueue+0x60>
 8006164:	e000      	b.n	8006168 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006166:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	22ff      	movs	r2, #255	@ 0xff
 800616c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8006170:	f001 fdca 	bl	8007d08 <vPortExitCritical>
}
 8006174:	bf00      	nop
 8006176:	3710      	adds	r7, #16
 8006178:	46bd      	mov	sp, r7
 800617a:	bd80      	pop	{r7, pc}

0800617c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800617c:	b580      	push	{r7, lr}
 800617e:	b084      	sub	sp, #16
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006184:	f001 fd8a 	bl	8007c9c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800618c:	2b00      	cmp	r3, #0
 800618e:	d102      	bne.n	8006196 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006190:	2301      	movs	r3, #1
 8006192:	60fb      	str	r3, [r7, #12]
 8006194:	e001      	b.n	800619a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006196:	2300      	movs	r3, #0
 8006198:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800619a:	f001 fdb5 	bl	8007d08 <vPortExitCritical>

	return xReturn;
 800619e:	68fb      	ldr	r3, [r7, #12]
}
 80061a0:	4618      	mov	r0, r3
 80061a2:	3710      	adds	r7, #16
 80061a4:	46bd      	mov	sp, r7
 80061a6:	bd80      	pop	{r7, pc}

080061a8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b084      	sub	sp, #16
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80061b0:	f001 fd74 	bl	8007c9c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061bc:	429a      	cmp	r2, r3
 80061be:	d102      	bne.n	80061c6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80061c0:	2301      	movs	r3, #1
 80061c2:	60fb      	str	r3, [r7, #12]
 80061c4:	e001      	b.n	80061ca <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80061c6:	2300      	movs	r3, #0
 80061c8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80061ca:	f001 fd9d 	bl	8007d08 <vPortExitCritical>

	return xReturn;
 80061ce:	68fb      	ldr	r3, [r7, #12]
}
 80061d0:	4618      	mov	r0, r3
 80061d2:	3710      	adds	r7, #16
 80061d4:	46bd      	mov	sp, r7
 80061d6:	bd80      	pop	{r7, pc}

080061d8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80061d8:	b480      	push	{r7}
 80061da:	b085      	sub	sp, #20
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
 80061e0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80061e2:	2300      	movs	r3, #0
 80061e4:	60fb      	str	r3, [r7, #12]
 80061e6:	e014      	b.n	8006212 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80061e8:	4a0f      	ldr	r2, [pc, #60]	@ (8006228 <vQueueAddToRegistry+0x50>)
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d10b      	bne.n	800620c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80061f4:	490c      	ldr	r1, [pc, #48]	@ (8006228 <vQueueAddToRegistry+0x50>)
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	683a      	ldr	r2, [r7, #0]
 80061fa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80061fe:	4a0a      	ldr	r2, [pc, #40]	@ (8006228 <vQueueAddToRegistry+0x50>)
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	00db      	lsls	r3, r3, #3
 8006204:	4413      	add	r3, r2
 8006206:	687a      	ldr	r2, [r7, #4]
 8006208:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800620a:	e006      	b.n	800621a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	3301      	adds	r3, #1
 8006210:	60fb      	str	r3, [r7, #12]
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	2b07      	cmp	r3, #7
 8006216:	d9e7      	bls.n	80061e8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006218:	bf00      	nop
 800621a:	bf00      	nop
 800621c:	3714      	adds	r7, #20
 800621e:	46bd      	mov	sp, r7
 8006220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006224:	4770      	bx	lr
 8006226:	bf00      	nop
 8006228:	20000fd0 	.word	0x20000fd0

0800622c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800622c:	b480      	push	{r7}
 800622e:	b085      	sub	sp, #20
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006234:	2300      	movs	r3, #0
 8006236:	60fb      	str	r3, [r7, #12]
 8006238:	e016      	b.n	8006268 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800623a:	4a10      	ldr	r2, [pc, #64]	@ (800627c <vQueueUnregisterQueue+0x50>)
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	00db      	lsls	r3, r3, #3
 8006240:	4413      	add	r3, r2
 8006242:	685b      	ldr	r3, [r3, #4]
 8006244:	687a      	ldr	r2, [r7, #4]
 8006246:	429a      	cmp	r2, r3
 8006248:	d10b      	bne.n	8006262 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800624a:	4a0c      	ldr	r2, [pc, #48]	@ (800627c <vQueueUnregisterQueue+0x50>)
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	2100      	movs	r1, #0
 8006250:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8006254:	4a09      	ldr	r2, [pc, #36]	@ (800627c <vQueueUnregisterQueue+0x50>)
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	00db      	lsls	r3, r3, #3
 800625a:	4413      	add	r3, r2
 800625c:	2200      	movs	r2, #0
 800625e:	605a      	str	r2, [r3, #4]
				break;
 8006260:	e006      	b.n	8006270 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	3301      	adds	r3, #1
 8006266:	60fb      	str	r3, [r7, #12]
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	2b07      	cmp	r3, #7
 800626c:	d9e5      	bls.n	800623a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800626e:	bf00      	nop
 8006270:	bf00      	nop
 8006272:	3714      	adds	r7, #20
 8006274:	46bd      	mov	sp, r7
 8006276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627a:	4770      	bx	lr
 800627c:	20000fd0 	.word	0x20000fd0

08006280 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006280:	b580      	push	{r7, lr}
 8006282:	b086      	sub	sp, #24
 8006284:	af00      	add	r7, sp, #0
 8006286:	60f8      	str	r0, [r7, #12]
 8006288:	60b9      	str	r1, [r7, #8]
 800628a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006290:	f001 fd04 	bl	8007c9c <vPortEnterCritical>
 8006294:	697b      	ldr	r3, [r7, #20]
 8006296:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800629a:	b25b      	sxtb	r3, r3
 800629c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062a0:	d103      	bne.n	80062aa <vQueueWaitForMessageRestricted+0x2a>
 80062a2:	697b      	ldr	r3, [r7, #20]
 80062a4:	2200      	movs	r2, #0
 80062a6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80062aa:	697b      	ldr	r3, [r7, #20]
 80062ac:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80062b0:	b25b      	sxtb	r3, r3
 80062b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062b6:	d103      	bne.n	80062c0 <vQueueWaitForMessageRestricted+0x40>
 80062b8:	697b      	ldr	r3, [r7, #20]
 80062ba:	2200      	movs	r2, #0
 80062bc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80062c0:	f001 fd22 	bl	8007d08 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80062c4:	697b      	ldr	r3, [r7, #20]
 80062c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d106      	bne.n	80062da <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80062cc:	697b      	ldr	r3, [r7, #20]
 80062ce:	3324      	adds	r3, #36	@ 0x24
 80062d0:	687a      	ldr	r2, [r7, #4]
 80062d2:	68b9      	ldr	r1, [r7, #8]
 80062d4:	4618      	mov	r0, r3
 80062d6:	f000 fc83 	bl	8006be0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80062da:	6978      	ldr	r0, [r7, #20]
 80062dc:	f7ff fefc 	bl	80060d8 <prvUnlockQueue>
	}
 80062e0:	bf00      	nop
 80062e2:	3718      	adds	r7, #24
 80062e4:	46bd      	mov	sp, r7
 80062e6:	bd80      	pop	{r7, pc}

080062e8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b08e      	sub	sp, #56	@ 0x38
 80062ec:	af04      	add	r7, sp, #16
 80062ee:	60f8      	str	r0, [r7, #12]
 80062f0:	60b9      	str	r1, [r7, #8]
 80062f2:	607a      	str	r2, [r7, #4]
 80062f4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80062f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d10d      	bne.n	8006318 <xTaskCreateStatic+0x30>
	__asm volatile
 80062fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006300:	b672      	cpsid	i
 8006302:	f383 8811 	msr	BASEPRI, r3
 8006306:	f3bf 8f6f 	isb	sy
 800630a:	f3bf 8f4f 	dsb	sy
 800630e:	b662      	cpsie	i
 8006310:	623b      	str	r3, [r7, #32]
}
 8006312:	bf00      	nop
 8006314:	bf00      	nop
 8006316:	e7fd      	b.n	8006314 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8006318:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800631a:	2b00      	cmp	r3, #0
 800631c:	d10d      	bne.n	800633a <xTaskCreateStatic+0x52>
	__asm volatile
 800631e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006322:	b672      	cpsid	i
 8006324:	f383 8811 	msr	BASEPRI, r3
 8006328:	f3bf 8f6f 	isb	sy
 800632c:	f3bf 8f4f 	dsb	sy
 8006330:	b662      	cpsie	i
 8006332:	61fb      	str	r3, [r7, #28]
}
 8006334:	bf00      	nop
 8006336:	bf00      	nop
 8006338:	e7fd      	b.n	8006336 <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800633a:	23a8      	movs	r3, #168	@ 0xa8
 800633c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800633e:	693b      	ldr	r3, [r7, #16]
 8006340:	2ba8      	cmp	r3, #168	@ 0xa8
 8006342:	d00d      	beq.n	8006360 <xTaskCreateStatic+0x78>
	__asm volatile
 8006344:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006348:	b672      	cpsid	i
 800634a:	f383 8811 	msr	BASEPRI, r3
 800634e:	f3bf 8f6f 	isb	sy
 8006352:	f3bf 8f4f 	dsb	sy
 8006356:	b662      	cpsie	i
 8006358:	61bb      	str	r3, [r7, #24]
}
 800635a:	bf00      	nop
 800635c:	bf00      	nop
 800635e:	e7fd      	b.n	800635c <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006360:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006362:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006364:	2b00      	cmp	r3, #0
 8006366:	d01e      	beq.n	80063a6 <xTaskCreateStatic+0xbe>
 8006368:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800636a:	2b00      	cmp	r3, #0
 800636c:	d01b      	beq.n	80063a6 <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800636e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006370:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006372:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006374:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006376:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006378:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800637a:	2202      	movs	r2, #2
 800637c:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006380:	2300      	movs	r3, #0
 8006382:	9303      	str	r3, [sp, #12]
 8006384:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006386:	9302      	str	r3, [sp, #8]
 8006388:	f107 0314 	add.w	r3, r7, #20
 800638c:	9301      	str	r3, [sp, #4]
 800638e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006390:	9300      	str	r3, [sp, #0]
 8006392:	683b      	ldr	r3, [r7, #0]
 8006394:	687a      	ldr	r2, [r7, #4]
 8006396:	68b9      	ldr	r1, [r7, #8]
 8006398:	68f8      	ldr	r0, [r7, #12]
 800639a:	f000 f851 	bl	8006440 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800639e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80063a0:	f000 f8f8 	bl	8006594 <prvAddNewTaskToReadyList>
 80063a4:	e001      	b.n	80063aa <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 80063a6:	2300      	movs	r3, #0
 80063a8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80063aa:	697b      	ldr	r3, [r7, #20]
	}
 80063ac:	4618      	mov	r0, r3
 80063ae:	3728      	adds	r7, #40	@ 0x28
 80063b0:	46bd      	mov	sp, r7
 80063b2:	bd80      	pop	{r7, pc}

080063b4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b08c      	sub	sp, #48	@ 0x30
 80063b8:	af04      	add	r7, sp, #16
 80063ba:	60f8      	str	r0, [r7, #12]
 80063bc:	60b9      	str	r1, [r7, #8]
 80063be:	603b      	str	r3, [r7, #0]
 80063c0:	4613      	mov	r3, r2
 80063c2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80063c4:	88fb      	ldrh	r3, [r7, #6]
 80063c6:	009b      	lsls	r3, r3, #2
 80063c8:	4618      	mov	r0, r3
 80063ca:	f001 fd95 	bl	8007ef8 <pvPortMalloc>
 80063ce:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80063d0:	697b      	ldr	r3, [r7, #20]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d00e      	beq.n	80063f4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80063d6:	20a8      	movs	r0, #168	@ 0xa8
 80063d8:	f001 fd8e 	bl	8007ef8 <pvPortMalloc>
 80063dc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80063de:	69fb      	ldr	r3, [r7, #28]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d003      	beq.n	80063ec <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80063e4:	69fb      	ldr	r3, [r7, #28]
 80063e6:	697a      	ldr	r2, [r7, #20]
 80063e8:	631a      	str	r2, [r3, #48]	@ 0x30
 80063ea:	e005      	b.n	80063f8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80063ec:	6978      	ldr	r0, [r7, #20]
 80063ee:	f001 fe51 	bl	8008094 <vPortFree>
 80063f2:	e001      	b.n	80063f8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80063f4:	2300      	movs	r3, #0
 80063f6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80063f8:	69fb      	ldr	r3, [r7, #28]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d017      	beq.n	800642e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80063fe:	69fb      	ldr	r3, [r7, #28]
 8006400:	2200      	movs	r2, #0
 8006402:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006406:	88fa      	ldrh	r2, [r7, #6]
 8006408:	2300      	movs	r3, #0
 800640a:	9303      	str	r3, [sp, #12]
 800640c:	69fb      	ldr	r3, [r7, #28]
 800640e:	9302      	str	r3, [sp, #8]
 8006410:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006412:	9301      	str	r3, [sp, #4]
 8006414:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006416:	9300      	str	r3, [sp, #0]
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	68b9      	ldr	r1, [r7, #8]
 800641c:	68f8      	ldr	r0, [r7, #12]
 800641e:	f000 f80f 	bl	8006440 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006422:	69f8      	ldr	r0, [r7, #28]
 8006424:	f000 f8b6 	bl	8006594 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006428:	2301      	movs	r3, #1
 800642a:	61bb      	str	r3, [r7, #24]
 800642c:	e002      	b.n	8006434 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800642e:	f04f 33ff 	mov.w	r3, #4294967295
 8006432:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006434:	69bb      	ldr	r3, [r7, #24]
	}
 8006436:	4618      	mov	r0, r3
 8006438:	3720      	adds	r7, #32
 800643a:	46bd      	mov	sp, r7
 800643c:	bd80      	pop	{r7, pc}
	...

08006440 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b088      	sub	sp, #32
 8006444:	af00      	add	r7, sp, #0
 8006446:	60f8      	str	r0, [r7, #12]
 8006448:	60b9      	str	r1, [r7, #8]
 800644a:	607a      	str	r2, [r7, #4]
 800644c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800644e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006450:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	009b      	lsls	r3, r3, #2
 8006456:	461a      	mov	r2, r3
 8006458:	21a5      	movs	r1, #165	@ 0xa5
 800645a:	f001 ff59 	bl	8008310 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800645e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006460:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006462:	6879      	ldr	r1, [r7, #4]
 8006464:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8006468:	440b      	add	r3, r1
 800646a:	009b      	lsls	r3, r3, #2
 800646c:	4413      	add	r3, r2
 800646e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006470:	69bb      	ldr	r3, [r7, #24]
 8006472:	f023 0307 	bic.w	r3, r3, #7
 8006476:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006478:	69bb      	ldr	r3, [r7, #24]
 800647a:	f003 0307 	and.w	r3, r3, #7
 800647e:	2b00      	cmp	r3, #0
 8006480:	d00d      	beq.n	800649e <prvInitialiseNewTask+0x5e>
	__asm volatile
 8006482:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006486:	b672      	cpsid	i
 8006488:	f383 8811 	msr	BASEPRI, r3
 800648c:	f3bf 8f6f 	isb	sy
 8006490:	f3bf 8f4f 	dsb	sy
 8006494:	b662      	cpsie	i
 8006496:	617b      	str	r3, [r7, #20]
}
 8006498:	bf00      	nop
 800649a:	bf00      	nop
 800649c:	e7fd      	b.n	800649a <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800649e:	68bb      	ldr	r3, [r7, #8]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d01f      	beq.n	80064e4 <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80064a4:	2300      	movs	r3, #0
 80064a6:	61fb      	str	r3, [r7, #28]
 80064a8:	e012      	b.n	80064d0 <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80064aa:	68ba      	ldr	r2, [r7, #8]
 80064ac:	69fb      	ldr	r3, [r7, #28]
 80064ae:	4413      	add	r3, r2
 80064b0:	7819      	ldrb	r1, [r3, #0]
 80064b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80064b4:	69fb      	ldr	r3, [r7, #28]
 80064b6:	4413      	add	r3, r2
 80064b8:	3334      	adds	r3, #52	@ 0x34
 80064ba:	460a      	mov	r2, r1
 80064bc:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80064be:	68ba      	ldr	r2, [r7, #8]
 80064c0:	69fb      	ldr	r3, [r7, #28]
 80064c2:	4413      	add	r3, r2
 80064c4:	781b      	ldrb	r3, [r3, #0]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d006      	beq.n	80064d8 <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80064ca:	69fb      	ldr	r3, [r7, #28]
 80064cc:	3301      	adds	r3, #1
 80064ce:	61fb      	str	r3, [r7, #28]
 80064d0:	69fb      	ldr	r3, [r7, #28]
 80064d2:	2b0f      	cmp	r3, #15
 80064d4:	d9e9      	bls.n	80064aa <prvInitialiseNewTask+0x6a>
 80064d6:	e000      	b.n	80064da <prvInitialiseNewTask+0x9a>
			{
				break;
 80064d8:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80064da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064dc:	2200      	movs	r2, #0
 80064de:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80064e2:	e003      	b.n	80064ec <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80064e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064e6:	2200      	movs	r2, #0
 80064e8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80064ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064ee:	2b37      	cmp	r3, #55	@ 0x37
 80064f0:	d901      	bls.n	80064f6 <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80064f2:	2337      	movs	r3, #55	@ 0x37
 80064f4:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80064f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064f8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80064fa:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80064fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064fe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006500:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006502:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006504:	2200      	movs	r2, #0
 8006506:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006508:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800650a:	3304      	adds	r3, #4
 800650c:	4618      	mov	r0, r3
 800650e:	f7fe fda1 	bl	8005054 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006512:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006514:	3318      	adds	r3, #24
 8006516:	4618      	mov	r0, r3
 8006518:	f7fe fd9c 	bl	8005054 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800651c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800651e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006520:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006522:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006524:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006528:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800652a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800652c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800652e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006530:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006532:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006534:	2200      	movs	r2, #0
 8006536:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800653a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800653c:	2200      	movs	r2, #0
 800653e:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006542:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006544:	3354      	adds	r3, #84	@ 0x54
 8006546:	224c      	movs	r2, #76	@ 0x4c
 8006548:	2100      	movs	r1, #0
 800654a:	4618      	mov	r0, r3
 800654c:	f001 fee0 	bl	8008310 <memset>
 8006550:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006552:	4a0d      	ldr	r2, [pc, #52]	@ (8006588 <prvInitialiseNewTask+0x148>)
 8006554:	659a      	str	r2, [r3, #88]	@ 0x58
 8006556:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006558:	4a0c      	ldr	r2, [pc, #48]	@ (800658c <prvInitialiseNewTask+0x14c>)
 800655a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800655c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800655e:	4a0c      	ldr	r2, [pc, #48]	@ (8006590 <prvInitialiseNewTask+0x150>)
 8006560:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006562:	683a      	ldr	r2, [r7, #0]
 8006564:	68f9      	ldr	r1, [r7, #12]
 8006566:	69b8      	ldr	r0, [r7, #24]
 8006568:	f001 fa88 	bl	8007a7c <pxPortInitialiseStack>
 800656c:	4602      	mov	r2, r0
 800656e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006570:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006572:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006574:	2b00      	cmp	r3, #0
 8006576:	d002      	beq.n	800657e <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006578:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800657a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800657c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800657e:	bf00      	nop
 8006580:	3720      	adds	r7, #32
 8006582:	46bd      	mov	sp, r7
 8006584:	bd80      	pop	{r7, pc}
 8006586:	bf00      	nop
 8006588:	2000525c 	.word	0x2000525c
 800658c:	200052c4 	.word	0x200052c4
 8006590:	2000532c 	.word	0x2000532c

08006594 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006594:	b580      	push	{r7, lr}
 8006596:	b082      	sub	sp, #8
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800659c:	f001 fb7e 	bl	8007c9c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80065a0:	4b2d      	ldr	r3, [pc, #180]	@ (8006658 <prvAddNewTaskToReadyList+0xc4>)
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	3301      	adds	r3, #1
 80065a6:	4a2c      	ldr	r2, [pc, #176]	@ (8006658 <prvAddNewTaskToReadyList+0xc4>)
 80065a8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80065aa:	4b2c      	ldr	r3, [pc, #176]	@ (800665c <prvAddNewTaskToReadyList+0xc8>)
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d109      	bne.n	80065c6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80065b2:	4a2a      	ldr	r2, [pc, #168]	@ (800665c <prvAddNewTaskToReadyList+0xc8>)
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80065b8:	4b27      	ldr	r3, [pc, #156]	@ (8006658 <prvAddNewTaskToReadyList+0xc4>)
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	2b01      	cmp	r3, #1
 80065be:	d110      	bne.n	80065e2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80065c0:	f000 fc44 	bl	8006e4c <prvInitialiseTaskLists>
 80065c4:	e00d      	b.n	80065e2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80065c6:	4b26      	ldr	r3, [pc, #152]	@ (8006660 <prvAddNewTaskToReadyList+0xcc>)
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d109      	bne.n	80065e2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80065ce:	4b23      	ldr	r3, [pc, #140]	@ (800665c <prvAddNewTaskToReadyList+0xc8>)
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065d8:	429a      	cmp	r2, r3
 80065da:	d802      	bhi.n	80065e2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80065dc:	4a1f      	ldr	r2, [pc, #124]	@ (800665c <prvAddNewTaskToReadyList+0xc8>)
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80065e2:	4b20      	ldr	r3, [pc, #128]	@ (8006664 <prvAddNewTaskToReadyList+0xd0>)
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	3301      	adds	r3, #1
 80065e8:	4a1e      	ldr	r2, [pc, #120]	@ (8006664 <prvAddNewTaskToReadyList+0xd0>)
 80065ea:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80065ec:	4b1d      	ldr	r3, [pc, #116]	@ (8006664 <prvAddNewTaskToReadyList+0xd0>)
 80065ee:	681a      	ldr	r2, [r3, #0]
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80065f8:	4b1b      	ldr	r3, [pc, #108]	@ (8006668 <prvAddNewTaskToReadyList+0xd4>)
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	429a      	cmp	r2, r3
 80065fe:	d903      	bls.n	8006608 <prvAddNewTaskToReadyList+0x74>
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006604:	4a18      	ldr	r2, [pc, #96]	@ (8006668 <prvAddNewTaskToReadyList+0xd4>)
 8006606:	6013      	str	r3, [r2, #0]
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800660c:	4613      	mov	r3, r2
 800660e:	009b      	lsls	r3, r3, #2
 8006610:	4413      	add	r3, r2
 8006612:	009b      	lsls	r3, r3, #2
 8006614:	4a15      	ldr	r2, [pc, #84]	@ (800666c <prvAddNewTaskToReadyList+0xd8>)
 8006616:	441a      	add	r2, r3
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	3304      	adds	r3, #4
 800661c:	4619      	mov	r1, r3
 800661e:	4610      	mov	r0, r2
 8006620:	f7fe fd25 	bl	800506e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006624:	f001 fb70 	bl	8007d08 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006628:	4b0d      	ldr	r3, [pc, #52]	@ (8006660 <prvAddNewTaskToReadyList+0xcc>)
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d00e      	beq.n	800664e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006630:	4b0a      	ldr	r3, [pc, #40]	@ (800665c <prvAddNewTaskToReadyList+0xc8>)
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800663a:	429a      	cmp	r2, r3
 800663c:	d207      	bcs.n	800664e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800663e:	4b0c      	ldr	r3, [pc, #48]	@ (8006670 <prvAddNewTaskToReadyList+0xdc>)
 8006640:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006644:	601a      	str	r2, [r3, #0]
 8006646:	f3bf 8f4f 	dsb	sy
 800664a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800664e:	bf00      	nop
 8006650:	3708      	adds	r7, #8
 8006652:	46bd      	mov	sp, r7
 8006654:	bd80      	pop	{r7, pc}
 8006656:	bf00      	nop
 8006658:	200014e4 	.word	0x200014e4
 800665c:	20001010 	.word	0x20001010
 8006660:	200014f0 	.word	0x200014f0
 8006664:	20001500 	.word	0x20001500
 8006668:	200014ec 	.word	0x200014ec
 800666c:	20001014 	.word	0x20001014
 8006670:	e000ed04 	.word	0xe000ed04

08006674 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006674:	b580      	push	{r7, lr}
 8006676:	b084      	sub	sp, #16
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800667c:	2300      	movs	r3, #0
 800667e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2b00      	cmp	r3, #0
 8006684:	d01a      	beq.n	80066bc <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006686:	4b15      	ldr	r3, [pc, #84]	@ (80066dc <vTaskDelay+0x68>)
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d00d      	beq.n	80066aa <vTaskDelay+0x36>
	__asm volatile
 800668e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006692:	b672      	cpsid	i
 8006694:	f383 8811 	msr	BASEPRI, r3
 8006698:	f3bf 8f6f 	isb	sy
 800669c:	f3bf 8f4f 	dsb	sy
 80066a0:	b662      	cpsie	i
 80066a2:	60bb      	str	r3, [r7, #8]
}
 80066a4:	bf00      	nop
 80066a6:	bf00      	nop
 80066a8:	e7fd      	b.n	80066a6 <vTaskDelay+0x32>
			vTaskSuspendAll();
 80066aa:	f000 f88f 	bl	80067cc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80066ae:	2100      	movs	r1, #0
 80066b0:	6878      	ldr	r0, [r7, #4]
 80066b2:	f000 fe27 	bl	8007304 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80066b6:	f000 f897 	bl	80067e8 <xTaskResumeAll>
 80066ba:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d107      	bne.n	80066d2 <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 80066c2:	4b07      	ldr	r3, [pc, #28]	@ (80066e0 <vTaskDelay+0x6c>)
 80066c4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80066c8:	601a      	str	r2, [r3, #0]
 80066ca:	f3bf 8f4f 	dsb	sy
 80066ce:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80066d2:	bf00      	nop
 80066d4:	3710      	adds	r7, #16
 80066d6:	46bd      	mov	sp, r7
 80066d8:	bd80      	pop	{r7, pc}
 80066da:	bf00      	nop
 80066dc:	2000150c 	.word	0x2000150c
 80066e0:	e000ed04 	.word	0xe000ed04

080066e4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80066e4:	b580      	push	{r7, lr}
 80066e6:	b08a      	sub	sp, #40	@ 0x28
 80066e8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80066ea:	2300      	movs	r3, #0
 80066ec:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80066ee:	2300      	movs	r3, #0
 80066f0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80066f2:	463a      	mov	r2, r7
 80066f4:	1d39      	adds	r1, r7, #4
 80066f6:	f107 0308 	add.w	r3, r7, #8
 80066fa:	4618      	mov	r0, r3
 80066fc:	f7fe fc56 	bl	8004fac <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006700:	6839      	ldr	r1, [r7, #0]
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	68ba      	ldr	r2, [r7, #8]
 8006706:	9202      	str	r2, [sp, #8]
 8006708:	9301      	str	r3, [sp, #4]
 800670a:	2300      	movs	r3, #0
 800670c:	9300      	str	r3, [sp, #0]
 800670e:	2300      	movs	r3, #0
 8006710:	460a      	mov	r2, r1
 8006712:	4926      	ldr	r1, [pc, #152]	@ (80067ac <vTaskStartScheduler+0xc8>)
 8006714:	4826      	ldr	r0, [pc, #152]	@ (80067b0 <vTaskStartScheduler+0xcc>)
 8006716:	f7ff fde7 	bl	80062e8 <xTaskCreateStatic>
 800671a:	4603      	mov	r3, r0
 800671c:	4a25      	ldr	r2, [pc, #148]	@ (80067b4 <vTaskStartScheduler+0xd0>)
 800671e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006720:	4b24      	ldr	r3, [pc, #144]	@ (80067b4 <vTaskStartScheduler+0xd0>)
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	2b00      	cmp	r3, #0
 8006726:	d002      	beq.n	800672e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006728:	2301      	movs	r3, #1
 800672a:	617b      	str	r3, [r7, #20]
 800672c:	e001      	b.n	8006732 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800672e:	2300      	movs	r3, #0
 8006730:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006732:	697b      	ldr	r3, [r7, #20]
 8006734:	2b01      	cmp	r3, #1
 8006736:	d102      	bne.n	800673e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006738:	f000 fe38 	bl	80073ac <xTimerCreateTimerTask>
 800673c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800673e:	697b      	ldr	r3, [r7, #20]
 8006740:	2b01      	cmp	r3, #1
 8006742:	d11d      	bne.n	8006780 <vTaskStartScheduler+0x9c>
	__asm volatile
 8006744:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006748:	b672      	cpsid	i
 800674a:	f383 8811 	msr	BASEPRI, r3
 800674e:	f3bf 8f6f 	isb	sy
 8006752:	f3bf 8f4f 	dsb	sy
 8006756:	b662      	cpsie	i
 8006758:	613b      	str	r3, [r7, #16]
}
 800675a:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800675c:	4b16      	ldr	r3, [pc, #88]	@ (80067b8 <vTaskStartScheduler+0xd4>)
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	3354      	adds	r3, #84	@ 0x54
 8006762:	4a16      	ldr	r2, [pc, #88]	@ (80067bc <vTaskStartScheduler+0xd8>)
 8006764:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006766:	4b16      	ldr	r3, [pc, #88]	@ (80067c0 <vTaskStartScheduler+0xdc>)
 8006768:	f04f 32ff 	mov.w	r2, #4294967295
 800676c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800676e:	4b15      	ldr	r3, [pc, #84]	@ (80067c4 <vTaskStartScheduler+0xe0>)
 8006770:	2201      	movs	r2, #1
 8006772:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006774:	4b14      	ldr	r3, [pc, #80]	@ (80067c8 <vTaskStartScheduler+0xe4>)
 8006776:	2200      	movs	r2, #0
 8006778:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800677a:	f001 fa11 	bl	8007ba0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800677e:	e011      	b.n	80067a4 <vTaskStartScheduler+0xc0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006780:	697b      	ldr	r3, [r7, #20]
 8006782:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006786:	d10d      	bne.n	80067a4 <vTaskStartScheduler+0xc0>
	__asm volatile
 8006788:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800678c:	b672      	cpsid	i
 800678e:	f383 8811 	msr	BASEPRI, r3
 8006792:	f3bf 8f6f 	isb	sy
 8006796:	f3bf 8f4f 	dsb	sy
 800679a:	b662      	cpsie	i
 800679c:	60fb      	str	r3, [r7, #12]
}
 800679e:	bf00      	nop
 80067a0:	bf00      	nop
 80067a2:	e7fd      	b.n	80067a0 <vTaskStartScheduler+0xbc>
}
 80067a4:	bf00      	nop
 80067a6:	3718      	adds	r7, #24
 80067a8:	46bd      	mov	sp, r7
 80067aa:	bd80      	pop	{r7, pc}
 80067ac:	08008dac 	.word	0x08008dac
 80067b0:	08006e1d 	.word	0x08006e1d
 80067b4:	20001508 	.word	0x20001508
 80067b8:	20001010 	.word	0x20001010
 80067bc:	20000010 	.word	0x20000010
 80067c0:	20001504 	.word	0x20001504
 80067c4:	200014f0 	.word	0x200014f0
 80067c8:	200014e8 	.word	0x200014e8

080067cc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80067cc:	b480      	push	{r7}
 80067ce:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80067d0:	4b04      	ldr	r3, [pc, #16]	@ (80067e4 <vTaskSuspendAll+0x18>)
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	3301      	adds	r3, #1
 80067d6:	4a03      	ldr	r2, [pc, #12]	@ (80067e4 <vTaskSuspendAll+0x18>)
 80067d8:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80067da:	bf00      	nop
 80067dc:	46bd      	mov	sp, r7
 80067de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e2:	4770      	bx	lr
 80067e4:	2000150c 	.word	0x2000150c

080067e8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b084      	sub	sp, #16
 80067ec:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80067ee:	2300      	movs	r3, #0
 80067f0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80067f2:	2300      	movs	r3, #0
 80067f4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80067f6:	4b43      	ldr	r3, [pc, #268]	@ (8006904 <xTaskResumeAll+0x11c>)
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d10d      	bne.n	800681a <xTaskResumeAll+0x32>
	__asm volatile
 80067fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006802:	b672      	cpsid	i
 8006804:	f383 8811 	msr	BASEPRI, r3
 8006808:	f3bf 8f6f 	isb	sy
 800680c:	f3bf 8f4f 	dsb	sy
 8006810:	b662      	cpsie	i
 8006812:	603b      	str	r3, [r7, #0]
}
 8006814:	bf00      	nop
 8006816:	bf00      	nop
 8006818:	e7fd      	b.n	8006816 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800681a:	f001 fa3f 	bl	8007c9c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800681e:	4b39      	ldr	r3, [pc, #228]	@ (8006904 <xTaskResumeAll+0x11c>)
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	3b01      	subs	r3, #1
 8006824:	4a37      	ldr	r2, [pc, #220]	@ (8006904 <xTaskResumeAll+0x11c>)
 8006826:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006828:	4b36      	ldr	r3, [pc, #216]	@ (8006904 <xTaskResumeAll+0x11c>)
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d162      	bne.n	80068f6 <xTaskResumeAll+0x10e>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006830:	4b35      	ldr	r3, [pc, #212]	@ (8006908 <xTaskResumeAll+0x120>)
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d05e      	beq.n	80068f6 <xTaskResumeAll+0x10e>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006838:	e02f      	b.n	800689a <xTaskResumeAll+0xb2>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800683a:	4b34      	ldr	r3, [pc, #208]	@ (800690c <xTaskResumeAll+0x124>)
 800683c:	68db      	ldr	r3, [r3, #12]
 800683e:	68db      	ldr	r3, [r3, #12]
 8006840:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	3318      	adds	r3, #24
 8006846:	4618      	mov	r0, r3
 8006848:	f7fe fc6e 	bl	8005128 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	3304      	adds	r3, #4
 8006850:	4618      	mov	r0, r3
 8006852:	f7fe fc69 	bl	8005128 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800685a:	4b2d      	ldr	r3, [pc, #180]	@ (8006910 <xTaskResumeAll+0x128>)
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	429a      	cmp	r2, r3
 8006860:	d903      	bls.n	800686a <xTaskResumeAll+0x82>
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006866:	4a2a      	ldr	r2, [pc, #168]	@ (8006910 <xTaskResumeAll+0x128>)
 8006868:	6013      	str	r3, [r2, #0]
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800686e:	4613      	mov	r3, r2
 8006870:	009b      	lsls	r3, r3, #2
 8006872:	4413      	add	r3, r2
 8006874:	009b      	lsls	r3, r3, #2
 8006876:	4a27      	ldr	r2, [pc, #156]	@ (8006914 <xTaskResumeAll+0x12c>)
 8006878:	441a      	add	r2, r3
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	3304      	adds	r3, #4
 800687e:	4619      	mov	r1, r3
 8006880:	4610      	mov	r0, r2
 8006882:	f7fe fbf4 	bl	800506e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800688a:	4b23      	ldr	r3, [pc, #140]	@ (8006918 <xTaskResumeAll+0x130>)
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006890:	429a      	cmp	r2, r3
 8006892:	d302      	bcc.n	800689a <xTaskResumeAll+0xb2>
					{
						xYieldPending = pdTRUE;
 8006894:	4b21      	ldr	r3, [pc, #132]	@ (800691c <xTaskResumeAll+0x134>)
 8006896:	2201      	movs	r2, #1
 8006898:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800689a:	4b1c      	ldr	r3, [pc, #112]	@ (800690c <xTaskResumeAll+0x124>)
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d1cb      	bne.n	800683a <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d001      	beq.n	80068ac <xTaskResumeAll+0xc4>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80068a8:	f000 fb76 	bl	8006f98 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80068ac:	4b1c      	ldr	r3, [pc, #112]	@ (8006920 <xTaskResumeAll+0x138>)
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d010      	beq.n	80068da <xTaskResumeAll+0xf2>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80068b8:	f000 f846 	bl	8006948 <xTaskIncrementTick>
 80068bc:	4603      	mov	r3, r0
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d002      	beq.n	80068c8 <xTaskResumeAll+0xe0>
							{
								xYieldPending = pdTRUE;
 80068c2:	4b16      	ldr	r3, [pc, #88]	@ (800691c <xTaskResumeAll+0x134>)
 80068c4:	2201      	movs	r2, #1
 80068c6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	3b01      	subs	r3, #1
 80068cc:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d1f1      	bne.n	80068b8 <xTaskResumeAll+0xd0>

						uxPendedTicks = 0;
 80068d4:	4b12      	ldr	r3, [pc, #72]	@ (8006920 <xTaskResumeAll+0x138>)
 80068d6:	2200      	movs	r2, #0
 80068d8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80068da:	4b10      	ldr	r3, [pc, #64]	@ (800691c <xTaskResumeAll+0x134>)
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d009      	beq.n	80068f6 <xTaskResumeAll+0x10e>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80068e2:	2301      	movs	r3, #1
 80068e4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80068e6:	4b0f      	ldr	r3, [pc, #60]	@ (8006924 <xTaskResumeAll+0x13c>)
 80068e8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80068ec:	601a      	str	r2, [r3, #0]
 80068ee:	f3bf 8f4f 	dsb	sy
 80068f2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80068f6:	f001 fa07 	bl	8007d08 <vPortExitCritical>

	return xAlreadyYielded;
 80068fa:	68bb      	ldr	r3, [r7, #8]
}
 80068fc:	4618      	mov	r0, r3
 80068fe:	3710      	adds	r7, #16
 8006900:	46bd      	mov	sp, r7
 8006902:	bd80      	pop	{r7, pc}
 8006904:	2000150c 	.word	0x2000150c
 8006908:	200014e4 	.word	0x200014e4
 800690c:	200014a4 	.word	0x200014a4
 8006910:	200014ec 	.word	0x200014ec
 8006914:	20001014 	.word	0x20001014
 8006918:	20001010 	.word	0x20001010
 800691c:	200014f8 	.word	0x200014f8
 8006920:	200014f4 	.word	0x200014f4
 8006924:	e000ed04 	.word	0xe000ed04

08006928 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006928:	b480      	push	{r7}
 800692a:	b083      	sub	sp, #12
 800692c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800692e:	4b05      	ldr	r3, [pc, #20]	@ (8006944 <xTaskGetTickCount+0x1c>)
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006934:	687b      	ldr	r3, [r7, #4]
}
 8006936:	4618      	mov	r0, r3
 8006938:	370c      	adds	r7, #12
 800693a:	46bd      	mov	sp, r7
 800693c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006940:	4770      	bx	lr
 8006942:	bf00      	nop
 8006944:	200014e8 	.word	0x200014e8

08006948 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006948:	b580      	push	{r7, lr}
 800694a:	b086      	sub	sp, #24
 800694c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800694e:	2300      	movs	r3, #0
 8006950:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006952:	4b50      	ldr	r3, [pc, #320]	@ (8006a94 <xTaskIncrementTick+0x14c>)
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	2b00      	cmp	r3, #0
 8006958:	f040 808c 	bne.w	8006a74 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800695c:	4b4e      	ldr	r3, [pc, #312]	@ (8006a98 <xTaskIncrementTick+0x150>)
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	3301      	adds	r3, #1
 8006962:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006964:	4a4c      	ldr	r2, [pc, #304]	@ (8006a98 <xTaskIncrementTick+0x150>)
 8006966:	693b      	ldr	r3, [r7, #16]
 8006968:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800696a:	693b      	ldr	r3, [r7, #16]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d123      	bne.n	80069b8 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 8006970:	4b4a      	ldr	r3, [pc, #296]	@ (8006a9c <xTaskIncrementTick+0x154>)
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d00d      	beq.n	8006996 <xTaskIncrementTick+0x4e>
	__asm volatile
 800697a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800697e:	b672      	cpsid	i
 8006980:	f383 8811 	msr	BASEPRI, r3
 8006984:	f3bf 8f6f 	isb	sy
 8006988:	f3bf 8f4f 	dsb	sy
 800698c:	b662      	cpsie	i
 800698e:	603b      	str	r3, [r7, #0]
}
 8006990:	bf00      	nop
 8006992:	bf00      	nop
 8006994:	e7fd      	b.n	8006992 <xTaskIncrementTick+0x4a>
 8006996:	4b41      	ldr	r3, [pc, #260]	@ (8006a9c <xTaskIncrementTick+0x154>)
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	60fb      	str	r3, [r7, #12]
 800699c:	4b40      	ldr	r3, [pc, #256]	@ (8006aa0 <xTaskIncrementTick+0x158>)
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	4a3e      	ldr	r2, [pc, #248]	@ (8006a9c <xTaskIncrementTick+0x154>)
 80069a2:	6013      	str	r3, [r2, #0]
 80069a4:	4a3e      	ldr	r2, [pc, #248]	@ (8006aa0 <xTaskIncrementTick+0x158>)
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	6013      	str	r3, [r2, #0]
 80069aa:	4b3e      	ldr	r3, [pc, #248]	@ (8006aa4 <xTaskIncrementTick+0x15c>)
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	3301      	adds	r3, #1
 80069b0:	4a3c      	ldr	r2, [pc, #240]	@ (8006aa4 <xTaskIncrementTick+0x15c>)
 80069b2:	6013      	str	r3, [r2, #0]
 80069b4:	f000 faf0 	bl	8006f98 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80069b8:	4b3b      	ldr	r3, [pc, #236]	@ (8006aa8 <xTaskIncrementTick+0x160>)
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	693a      	ldr	r2, [r7, #16]
 80069be:	429a      	cmp	r2, r3
 80069c0:	d349      	bcc.n	8006a56 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80069c2:	4b36      	ldr	r3, [pc, #216]	@ (8006a9c <xTaskIncrementTick+0x154>)
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d104      	bne.n	80069d6 <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80069cc:	4b36      	ldr	r3, [pc, #216]	@ (8006aa8 <xTaskIncrementTick+0x160>)
 80069ce:	f04f 32ff 	mov.w	r2, #4294967295
 80069d2:	601a      	str	r2, [r3, #0]
					break;
 80069d4:	e03f      	b.n	8006a56 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80069d6:	4b31      	ldr	r3, [pc, #196]	@ (8006a9c <xTaskIncrementTick+0x154>)
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	68db      	ldr	r3, [r3, #12]
 80069dc:	68db      	ldr	r3, [r3, #12]
 80069de:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80069e0:	68bb      	ldr	r3, [r7, #8]
 80069e2:	685b      	ldr	r3, [r3, #4]
 80069e4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80069e6:	693a      	ldr	r2, [r7, #16]
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	429a      	cmp	r2, r3
 80069ec:	d203      	bcs.n	80069f6 <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80069ee:	4a2e      	ldr	r2, [pc, #184]	@ (8006aa8 <xTaskIncrementTick+0x160>)
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80069f4:	e02f      	b.n	8006a56 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80069f6:	68bb      	ldr	r3, [r7, #8]
 80069f8:	3304      	adds	r3, #4
 80069fa:	4618      	mov	r0, r3
 80069fc:	f7fe fb94 	bl	8005128 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006a00:	68bb      	ldr	r3, [r7, #8]
 8006a02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d004      	beq.n	8006a12 <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006a08:	68bb      	ldr	r3, [r7, #8]
 8006a0a:	3318      	adds	r3, #24
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	f7fe fb8b 	bl	8005128 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006a12:	68bb      	ldr	r3, [r7, #8]
 8006a14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a16:	4b25      	ldr	r3, [pc, #148]	@ (8006aac <xTaskIncrementTick+0x164>)
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	429a      	cmp	r2, r3
 8006a1c:	d903      	bls.n	8006a26 <xTaskIncrementTick+0xde>
 8006a1e:	68bb      	ldr	r3, [r7, #8]
 8006a20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a22:	4a22      	ldr	r2, [pc, #136]	@ (8006aac <xTaskIncrementTick+0x164>)
 8006a24:	6013      	str	r3, [r2, #0]
 8006a26:	68bb      	ldr	r3, [r7, #8]
 8006a28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a2a:	4613      	mov	r3, r2
 8006a2c:	009b      	lsls	r3, r3, #2
 8006a2e:	4413      	add	r3, r2
 8006a30:	009b      	lsls	r3, r3, #2
 8006a32:	4a1f      	ldr	r2, [pc, #124]	@ (8006ab0 <xTaskIncrementTick+0x168>)
 8006a34:	441a      	add	r2, r3
 8006a36:	68bb      	ldr	r3, [r7, #8]
 8006a38:	3304      	adds	r3, #4
 8006a3a:	4619      	mov	r1, r3
 8006a3c:	4610      	mov	r0, r2
 8006a3e:	f7fe fb16 	bl	800506e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006a42:	68bb      	ldr	r3, [r7, #8]
 8006a44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a46:	4b1b      	ldr	r3, [pc, #108]	@ (8006ab4 <xTaskIncrementTick+0x16c>)
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a4c:	429a      	cmp	r2, r3
 8006a4e:	d3b8      	bcc.n	80069c2 <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 8006a50:	2301      	movs	r3, #1
 8006a52:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006a54:	e7b5      	b.n	80069c2 <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006a56:	4b17      	ldr	r3, [pc, #92]	@ (8006ab4 <xTaskIncrementTick+0x16c>)
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a5c:	4914      	ldr	r1, [pc, #80]	@ (8006ab0 <xTaskIncrementTick+0x168>)
 8006a5e:	4613      	mov	r3, r2
 8006a60:	009b      	lsls	r3, r3, #2
 8006a62:	4413      	add	r3, r2
 8006a64:	009b      	lsls	r3, r3, #2
 8006a66:	440b      	add	r3, r1
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	2b01      	cmp	r3, #1
 8006a6c:	d907      	bls.n	8006a7e <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8006a6e:	2301      	movs	r3, #1
 8006a70:	617b      	str	r3, [r7, #20]
 8006a72:	e004      	b.n	8006a7e <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006a74:	4b10      	ldr	r3, [pc, #64]	@ (8006ab8 <xTaskIncrementTick+0x170>)
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	3301      	adds	r3, #1
 8006a7a:	4a0f      	ldr	r2, [pc, #60]	@ (8006ab8 <xTaskIncrementTick+0x170>)
 8006a7c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006a7e:	4b0f      	ldr	r3, [pc, #60]	@ (8006abc <xTaskIncrementTick+0x174>)
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d001      	beq.n	8006a8a <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8006a86:	2301      	movs	r3, #1
 8006a88:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006a8a:	697b      	ldr	r3, [r7, #20]
}
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	3718      	adds	r7, #24
 8006a90:	46bd      	mov	sp, r7
 8006a92:	bd80      	pop	{r7, pc}
 8006a94:	2000150c 	.word	0x2000150c
 8006a98:	200014e8 	.word	0x200014e8
 8006a9c:	2000149c 	.word	0x2000149c
 8006aa0:	200014a0 	.word	0x200014a0
 8006aa4:	200014fc 	.word	0x200014fc
 8006aa8:	20001504 	.word	0x20001504
 8006aac:	200014ec 	.word	0x200014ec
 8006ab0:	20001014 	.word	0x20001014
 8006ab4:	20001010 	.word	0x20001010
 8006ab8:	200014f4 	.word	0x200014f4
 8006abc:	200014f8 	.word	0x200014f8

08006ac0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006ac0:	b480      	push	{r7}
 8006ac2:	b085      	sub	sp, #20
 8006ac4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006ac6:	4b2c      	ldr	r3, [pc, #176]	@ (8006b78 <vTaskSwitchContext+0xb8>)
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d003      	beq.n	8006ad6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006ace:	4b2b      	ldr	r3, [pc, #172]	@ (8006b7c <vTaskSwitchContext+0xbc>)
 8006ad0:	2201      	movs	r2, #1
 8006ad2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006ad4:	e049      	b.n	8006b6a <vTaskSwitchContext+0xaa>
		xYieldPending = pdFALSE;
 8006ad6:	4b29      	ldr	r3, [pc, #164]	@ (8006b7c <vTaskSwitchContext+0xbc>)
 8006ad8:	2200      	movs	r2, #0
 8006ada:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006adc:	4b28      	ldr	r3, [pc, #160]	@ (8006b80 <vTaskSwitchContext+0xc0>)
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	60fb      	str	r3, [r7, #12]
 8006ae2:	e013      	b.n	8006b0c <vTaskSwitchContext+0x4c>
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d10d      	bne.n	8006b06 <vTaskSwitchContext+0x46>
	__asm volatile
 8006aea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006aee:	b672      	cpsid	i
 8006af0:	f383 8811 	msr	BASEPRI, r3
 8006af4:	f3bf 8f6f 	isb	sy
 8006af8:	f3bf 8f4f 	dsb	sy
 8006afc:	b662      	cpsie	i
 8006afe:	607b      	str	r3, [r7, #4]
}
 8006b00:	bf00      	nop
 8006b02:	bf00      	nop
 8006b04:	e7fd      	b.n	8006b02 <vTaskSwitchContext+0x42>
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	3b01      	subs	r3, #1
 8006b0a:	60fb      	str	r3, [r7, #12]
 8006b0c:	491d      	ldr	r1, [pc, #116]	@ (8006b84 <vTaskSwitchContext+0xc4>)
 8006b0e:	68fa      	ldr	r2, [r7, #12]
 8006b10:	4613      	mov	r3, r2
 8006b12:	009b      	lsls	r3, r3, #2
 8006b14:	4413      	add	r3, r2
 8006b16:	009b      	lsls	r3, r3, #2
 8006b18:	440b      	add	r3, r1
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d0e1      	beq.n	8006ae4 <vTaskSwitchContext+0x24>
 8006b20:	68fa      	ldr	r2, [r7, #12]
 8006b22:	4613      	mov	r3, r2
 8006b24:	009b      	lsls	r3, r3, #2
 8006b26:	4413      	add	r3, r2
 8006b28:	009b      	lsls	r3, r3, #2
 8006b2a:	4a16      	ldr	r2, [pc, #88]	@ (8006b84 <vTaskSwitchContext+0xc4>)
 8006b2c:	4413      	add	r3, r2
 8006b2e:	60bb      	str	r3, [r7, #8]
 8006b30:	68bb      	ldr	r3, [r7, #8]
 8006b32:	685b      	ldr	r3, [r3, #4]
 8006b34:	685a      	ldr	r2, [r3, #4]
 8006b36:	68bb      	ldr	r3, [r7, #8]
 8006b38:	605a      	str	r2, [r3, #4]
 8006b3a:	68bb      	ldr	r3, [r7, #8]
 8006b3c:	685a      	ldr	r2, [r3, #4]
 8006b3e:	68bb      	ldr	r3, [r7, #8]
 8006b40:	3308      	adds	r3, #8
 8006b42:	429a      	cmp	r2, r3
 8006b44:	d104      	bne.n	8006b50 <vTaskSwitchContext+0x90>
 8006b46:	68bb      	ldr	r3, [r7, #8]
 8006b48:	685b      	ldr	r3, [r3, #4]
 8006b4a:	685a      	ldr	r2, [r3, #4]
 8006b4c:	68bb      	ldr	r3, [r7, #8]
 8006b4e:	605a      	str	r2, [r3, #4]
 8006b50:	68bb      	ldr	r3, [r7, #8]
 8006b52:	685b      	ldr	r3, [r3, #4]
 8006b54:	68db      	ldr	r3, [r3, #12]
 8006b56:	4a0c      	ldr	r2, [pc, #48]	@ (8006b88 <vTaskSwitchContext+0xc8>)
 8006b58:	6013      	str	r3, [r2, #0]
 8006b5a:	4a09      	ldr	r2, [pc, #36]	@ (8006b80 <vTaskSwitchContext+0xc0>)
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006b60:	4b09      	ldr	r3, [pc, #36]	@ (8006b88 <vTaskSwitchContext+0xc8>)
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	3354      	adds	r3, #84	@ 0x54
 8006b66:	4a09      	ldr	r2, [pc, #36]	@ (8006b8c <vTaskSwitchContext+0xcc>)
 8006b68:	6013      	str	r3, [r2, #0]
}
 8006b6a:	bf00      	nop
 8006b6c:	3714      	adds	r7, #20
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b74:	4770      	bx	lr
 8006b76:	bf00      	nop
 8006b78:	2000150c 	.word	0x2000150c
 8006b7c:	200014f8 	.word	0x200014f8
 8006b80:	200014ec 	.word	0x200014ec
 8006b84:	20001014 	.word	0x20001014
 8006b88:	20001010 	.word	0x20001010
 8006b8c:	20000010 	.word	0x20000010

08006b90 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006b90:	b580      	push	{r7, lr}
 8006b92:	b084      	sub	sp, #16
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
 8006b98:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d10d      	bne.n	8006bbc <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 8006ba0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ba4:	b672      	cpsid	i
 8006ba6:	f383 8811 	msr	BASEPRI, r3
 8006baa:	f3bf 8f6f 	isb	sy
 8006bae:	f3bf 8f4f 	dsb	sy
 8006bb2:	b662      	cpsie	i
 8006bb4:	60fb      	str	r3, [r7, #12]
}
 8006bb6:	bf00      	nop
 8006bb8:	bf00      	nop
 8006bba:	e7fd      	b.n	8006bb8 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006bbc:	4b07      	ldr	r3, [pc, #28]	@ (8006bdc <vTaskPlaceOnEventList+0x4c>)
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	3318      	adds	r3, #24
 8006bc2:	4619      	mov	r1, r3
 8006bc4:	6878      	ldr	r0, [r7, #4]
 8006bc6:	f7fe fa76 	bl	80050b6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006bca:	2101      	movs	r1, #1
 8006bcc:	6838      	ldr	r0, [r7, #0]
 8006bce:	f000 fb99 	bl	8007304 <prvAddCurrentTaskToDelayedList>
}
 8006bd2:	bf00      	nop
 8006bd4:	3710      	adds	r7, #16
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	bd80      	pop	{r7, pc}
 8006bda:	bf00      	nop
 8006bdc:	20001010 	.word	0x20001010

08006be0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b086      	sub	sp, #24
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	60f8      	str	r0, [r7, #12]
 8006be8:	60b9      	str	r1, [r7, #8]
 8006bea:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d10d      	bne.n	8006c0e <vTaskPlaceOnEventListRestricted+0x2e>
	__asm volatile
 8006bf2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bf6:	b672      	cpsid	i
 8006bf8:	f383 8811 	msr	BASEPRI, r3
 8006bfc:	f3bf 8f6f 	isb	sy
 8006c00:	f3bf 8f4f 	dsb	sy
 8006c04:	b662      	cpsie	i
 8006c06:	617b      	str	r3, [r7, #20]
}
 8006c08:	bf00      	nop
 8006c0a:	bf00      	nop
 8006c0c:	e7fd      	b.n	8006c0a <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006c0e:	4b0a      	ldr	r3, [pc, #40]	@ (8006c38 <vTaskPlaceOnEventListRestricted+0x58>)
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	3318      	adds	r3, #24
 8006c14:	4619      	mov	r1, r3
 8006c16:	68f8      	ldr	r0, [r7, #12]
 8006c18:	f7fe fa29 	bl	800506e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d002      	beq.n	8006c28 <vTaskPlaceOnEventListRestricted+0x48>
		{
			xTicksToWait = portMAX_DELAY;
 8006c22:	f04f 33ff 	mov.w	r3, #4294967295
 8006c26:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006c28:	6879      	ldr	r1, [r7, #4]
 8006c2a:	68b8      	ldr	r0, [r7, #8]
 8006c2c:	f000 fb6a 	bl	8007304 <prvAddCurrentTaskToDelayedList>
	}
 8006c30:	bf00      	nop
 8006c32:	3718      	adds	r7, #24
 8006c34:	46bd      	mov	sp, r7
 8006c36:	bd80      	pop	{r7, pc}
 8006c38:	20001010 	.word	0x20001010

08006c3c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	b086      	sub	sp, #24
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	68db      	ldr	r3, [r3, #12]
 8006c48:	68db      	ldr	r3, [r3, #12]
 8006c4a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006c4c:	693b      	ldr	r3, [r7, #16]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d10d      	bne.n	8006c6e <xTaskRemoveFromEventList+0x32>
	__asm volatile
 8006c52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c56:	b672      	cpsid	i
 8006c58:	f383 8811 	msr	BASEPRI, r3
 8006c5c:	f3bf 8f6f 	isb	sy
 8006c60:	f3bf 8f4f 	dsb	sy
 8006c64:	b662      	cpsie	i
 8006c66:	60fb      	str	r3, [r7, #12]
}
 8006c68:	bf00      	nop
 8006c6a:	bf00      	nop
 8006c6c:	e7fd      	b.n	8006c6a <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006c6e:	693b      	ldr	r3, [r7, #16]
 8006c70:	3318      	adds	r3, #24
 8006c72:	4618      	mov	r0, r3
 8006c74:	f7fe fa58 	bl	8005128 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006c78:	4b1d      	ldr	r3, [pc, #116]	@ (8006cf0 <xTaskRemoveFromEventList+0xb4>)
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d11d      	bne.n	8006cbc <xTaskRemoveFromEventList+0x80>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006c80:	693b      	ldr	r3, [r7, #16]
 8006c82:	3304      	adds	r3, #4
 8006c84:	4618      	mov	r0, r3
 8006c86:	f7fe fa4f 	bl	8005128 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006c8a:	693b      	ldr	r3, [r7, #16]
 8006c8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c8e:	4b19      	ldr	r3, [pc, #100]	@ (8006cf4 <xTaskRemoveFromEventList+0xb8>)
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	429a      	cmp	r2, r3
 8006c94:	d903      	bls.n	8006c9e <xTaskRemoveFromEventList+0x62>
 8006c96:	693b      	ldr	r3, [r7, #16]
 8006c98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c9a:	4a16      	ldr	r2, [pc, #88]	@ (8006cf4 <xTaskRemoveFromEventList+0xb8>)
 8006c9c:	6013      	str	r3, [r2, #0]
 8006c9e:	693b      	ldr	r3, [r7, #16]
 8006ca0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ca2:	4613      	mov	r3, r2
 8006ca4:	009b      	lsls	r3, r3, #2
 8006ca6:	4413      	add	r3, r2
 8006ca8:	009b      	lsls	r3, r3, #2
 8006caa:	4a13      	ldr	r2, [pc, #76]	@ (8006cf8 <xTaskRemoveFromEventList+0xbc>)
 8006cac:	441a      	add	r2, r3
 8006cae:	693b      	ldr	r3, [r7, #16]
 8006cb0:	3304      	adds	r3, #4
 8006cb2:	4619      	mov	r1, r3
 8006cb4:	4610      	mov	r0, r2
 8006cb6:	f7fe f9da 	bl	800506e <vListInsertEnd>
 8006cba:	e005      	b.n	8006cc8 <xTaskRemoveFromEventList+0x8c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006cbc:	693b      	ldr	r3, [r7, #16]
 8006cbe:	3318      	adds	r3, #24
 8006cc0:	4619      	mov	r1, r3
 8006cc2:	480e      	ldr	r0, [pc, #56]	@ (8006cfc <xTaskRemoveFromEventList+0xc0>)
 8006cc4:	f7fe f9d3 	bl	800506e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006cc8:	693b      	ldr	r3, [r7, #16]
 8006cca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ccc:	4b0c      	ldr	r3, [pc, #48]	@ (8006d00 <xTaskRemoveFromEventList+0xc4>)
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cd2:	429a      	cmp	r2, r3
 8006cd4:	d905      	bls.n	8006ce2 <xTaskRemoveFromEventList+0xa6>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006cd6:	2301      	movs	r3, #1
 8006cd8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006cda:	4b0a      	ldr	r3, [pc, #40]	@ (8006d04 <xTaskRemoveFromEventList+0xc8>)
 8006cdc:	2201      	movs	r2, #1
 8006cde:	601a      	str	r2, [r3, #0]
 8006ce0:	e001      	b.n	8006ce6 <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		xReturn = pdFALSE;
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006ce6:	697b      	ldr	r3, [r7, #20]
}
 8006ce8:	4618      	mov	r0, r3
 8006cea:	3718      	adds	r7, #24
 8006cec:	46bd      	mov	sp, r7
 8006cee:	bd80      	pop	{r7, pc}
 8006cf0:	2000150c 	.word	0x2000150c
 8006cf4:	200014ec 	.word	0x200014ec
 8006cf8:	20001014 	.word	0x20001014
 8006cfc:	200014a4 	.word	0x200014a4
 8006d00:	20001010 	.word	0x20001010
 8006d04:	200014f8 	.word	0x200014f8

08006d08 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006d08:	b480      	push	{r7}
 8006d0a:	b083      	sub	sp, #12
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006d10:	4b06      	ldr	r3, [pc, #24]	@ (8006d2c <vTaskInternalSetTimeOutState+0x24>)
 8006d12:	681a      	ldr	r2, [r3, #0]
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006d18:	4b05      	ldr	r3, [pc, #20]	@ (8006d30 <vTaskInternalSetTimeOutState+0x28>)
 8006d1a:	681a      	ldr	r2, [r3, #0]
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	605a      	str	r2, [r3, #4]
}
 8006d20:	bf00      	nop
 8006d22:	370c      	adds	r7, #12
 8006d24:	46bd      	mov	sp, r7
 8006d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2a:	4770      	bx	lr
 8006d2c:	200014fc 	.word	0x200014fc
 8006d30:	200014e8 	.word	0x200014e8

08006d34 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b088      	sub	sp, #32
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
 8006d3c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d10d      	bne.n	8006d60 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 8006d44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d48:	b672      	cpsid	i
 8006d4a:	f383 8811 	msr	BASEPRI, r3
 8006d4e:	f3bf 8f6f 	isb	sy
 8006d52:	f3bf 8f4f 	dsb	sy
 8006d56:	b662      	cpsie	i
 8006d58:	613b      	str	r3, [r7, #16]
}
 8006d5a:	bf00      	nop
 8006d5c:	bf00      	nop
 8006d5e:	e7fd      	b.n	8006d5c <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8006d60:	683b      	ldr	r3, [r7, #0]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d10d      	bne.n	8006d82 <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 8006d66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d6a:	b672      	cpsid	i
 8006d6c:	f383 8811 	msr	BASEPRI, r3
 8006d70:	f3bf 8f6f 	isb	sy
 8006d74:	f3bf 8f4f 	dsb	sy
 8006d78:	b662      	cpsie	i
 8006d7a:	60fb      	str	r3, [r7, #12]
}
 8006d7c:	bf00      	nop
 8006d7e:	bf00      	nop
 8006d80:	e7fd      	b.n	8006d7e <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 8006d82:	f000 ff8b 	bl	8007c9c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006d86:	4b1d      	ldr	r3, [pc, #116]	@ (8006dfc <xTaskCheckForTimeOut+0xc8>)
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	685b      	ldr	r3, [r3, #4]
 8006d90:	69ba      	ldr	r2, [r7, #24]
 8006d92:	1ad3      	subs	r3, r2, r3
 8006d94:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d9e:	d102      	bne.n	8006da6 <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006da0:	2300      	movs	r3, #0
 8006da2:	61fb      	str	r3, [r7, #28]
 8006da4:	e023      	b.n	8006dee <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681a      	ldr	r2, [r3, #0]
 8006daa:	4b15      	ldr	r3, [pc, #84]	@ (8006e00 <xTaskCheckForTimeOut+0xcc>)
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	429a      	cmp	r2, r3
 8006db0:	d007      	beq.n	8006dc2 <xTaskCheckForTimeOut+0x8e>
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	685b      	ldr	r3, [r3, #4]
 8006db6:	69ba      	ldr	r2, [r7, #24]
 8006db8:	429a      	cmp	r2, r3
 8006dba:	d302      	bcc.n	8006dc2 <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006dbc:	2301      	movs	r3, #1
 8006dbe:	61fb      	str	r3, [r7, #28]
 8006dc0:	e015      	b.n	8006dee <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006dc2:	683b      	ldr	r3, [r7, #0]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	697a      	ldr	r2, [r7, #20]
 8006dc8:	429a      	cmp	r2, r3
 8006dca:	d20b      	bcs.n	8006de4 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006dcc:	683b      	ldr	r3, [r7, #0]
 8006dce:	681a      	ldr	r2, [r3, #0]
 8006dd0:	697b      	ldr	r3, [r7, #20]
 8006dd2:	1ad2      	subs	r2, r2, r3
 8006dd4:	683b      	ldr	r3, [r7, #0]
 8006dd6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006dd8:	6878      	ldr	r0, [r7, #4]
 8006dda:	f7ff ff95 	bl	8006d08 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006dde:	2300      	movs	r3, #0
 8006de0:	61fb      	str	r3, [r7, #28]
 8006de2:	e004      	b.n	8006dee <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	2200      	movs	r2, #0
 8006de8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006dea:	2301      	movs	r3, #1
 8006dec:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006dee:	f000 ff8b 	bl	8007d08 <vPortExitCritical>

	return xReturn;
 8006df2:	69fb      	ldr	r3, [r7, #28]
}
 8006df4:	4618      	mov	r0, r3
 8006df6:	3720      	adds	r7, #32
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	bd80      	pop	{r7, pc}
 8006dfc:	200014e8 	.word	0x200014e8
 8006e00:	200014fc 	.word	0x200014fc

08006e04 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006e04:	b480      	push	{r7}
 8006e06:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006e08:	4b03      	ldr	r3, [pc, #12]	@ (8006e18 <vTaskMissedYield+0x14>)
 8006e0a:	2201      	movs	r2, #1
 8006e0c:	601a      	str	r2, [r3, #0]
}
 8006e0e:	bf00      	nop
 8006e10:	46bd      	mov	sp, r7
 8006e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e16:	4770      	bx	lr
 8006e18:	200014f8 	.word	0x200014f8

08006e1c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	b082      	sub	sp, #8
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006e24:	f000 f852 	bl	8006ecc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006e28:	4b06      	ldr	r3, [pc, #24]	@ (8006e44 <prvIdleTask+0x28>)
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	2b01      	cmp	r3, #1
 8006e2e:	d9f9      	bls.n	8006e24 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006e30:	4b05      	ldr	r3, [pc, #20]	@ (8006e48 <prvIdleTask+0x2c>)
 8006e32:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006e36:	601a      	str	r2, [r3, #0]
 8006e38:	f3bf 8f4f 	dsb	sy
 8006e3c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006e40:	e7f0      	b.n	8006e24 <prvIdleTask+0x8>
 8006e42:	bf00      	nop
 8006e44:	20001014 	.word	0x20001014
 8006e48:	e000ed04 	.word	0xe000ed04

08006e4c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b082      	sub	sp, #8
 8006e50:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006e52:	2300      	movs	r3, #0
 8006e54:	607b      	str	r3, [r7, #4]
 8006e56:	e00c      	b.n	8006e72 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006e58:	687a      	ldr	r2, [r7, #4]
 8006e5a:	4613      	mov	r3, r2
 8006e5c:	009b      	lsls	r3, r3, #2
 8006e5e:	4413      	add	r3, r2
 8006e60:	009b      	lsls	r3, r3, #2
 8006e62:	4a12      	ldr	r2, [pc, #72]	@ (8006eac <prvInitialiseTaskLists+0x60>)
 8006e64:	4413      	add	r3, r2
 8006e66:	4618      	mov	r0, r3
 8006e68:	f7fe f8d4 	bl	8005014 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	3301      	adds	r3, #1
 8006e70:	607b      	str	r3, [r7, #4]
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	2b37      	cmp	r3, #55	@ 0x37
 8006e76:	d9ef      	bls.n	8006e58 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006e78:	480d      	ldr	r0, [pc, #52]	@ (8006eb0 <prvInitialiseTaskLists+0x64>)
 8006e7a:	f7fe f8cb 	bl	8005014 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006e7e:	480d      	ldr	r0, [pc, #52]	@ (8006eb4 <prvInitialiseTaskLists+0x68>)
 8006e80:	f7fe f8c8 	bl	8005014 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006e84:	480c      	ldr	r0, [pc, #48]	@ (8006eb8 <prvInitialiseTaskLists+0x6c>)
 8006e86:	f7fe f8c5 	bl	8005014 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006e8a:	480c      	ldr	r0, [pc, #48]	@ (8006ebc <prvInitialiseTaskLists+0x70>)
 8006e8c:	f7fe f8c2 	bl	8005014 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006e90:	480b      	ldr	r0, [pc, #44]	@ (8006ec0 <prvInitialiseTaskLists+0x74>)
 8006e92:	f7fe f8bf 	bl	8005014 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006e96:	4b0b      	ldr	r3, [pc, #44]	@ (8006ec4 <prvInitialiseTaskLists+0x78>)
 8006e98:	4a05      	ldr	r2, [pc, #20]	@ (8006eb0 <prvInitialiseTaskLists+0x64>)
 8006e9a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006e9c:	4b0a      	ldr	r3, [pc, #40]	@ (8006ec8 <prvInitialiseTaskLists+0x7c>)
 8006e9e:	4a05      	ldr	r2, [pc, #20]	@ (8006eb4 <prvInitialiseTaskLists+0x68>)
 8006ea0:	601a      	str	r2, [r3, #0]
}
 8006ea2:	bf00      	nop
 8006ea4:	3708      	adds	r7, #8
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	bd80      	pop	{r7, pc}
 8006eaa:	bf00      	nop
 8006eac:	20001014 	.word	0x20001014
 8006eb0:	20001474 	.word	0x20001474
 8006eb4:	20001488 	.word	0x20001488
 8006eb8:	200014a4 	.word	0x200014a4
 8006ebc:	200014b8 	.word	0x200014b8
 8006ec0:	200014d0 	.word	0x200014d0
 8006ec4:	2000149c 	.word	0x2000149c
 8006ec8:	200014a0 	.word	0x200014a0

08006ecc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b082      	sub	sp, #8
 8006ed0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006ed2:	e019      	b.n	8006f08 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006ed4:	f000 fee2 	bl	8007c9c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ed8:	4b10      	ldr	r3, [pc, #64]	@ (8006f1c <prvCheckTasksWaitingTermination+0x50>)
 8006eda:	68db      	ldr	r3, [r3, #12]
 8006edc:	68db      	ldr	r3, [r3, #12]
 8006ede:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	3304      	adds	r3, #4
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	f7fe f91f 	bl	8005128 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006eea:	4b0d      	ldr	r3, [pc, #52]	@ (8006f20 <prvCheckTasksWaitingTermination+0x54>)
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	3b01      	subs	r3, #1
 8006ef0:	4a0b      	ldr	r2, [pc, #44]	@ (8006f20 <prvCheckTasksWaitingTermination+0x54>)
 8006ef2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006ef4:	4b0b      	ldr	r3, [pc, #44]	@ (8006f24 <prvCheckTasksWaitingTermination+0x58>)
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	3b01      	subs	r3, #1
 8006efa:	4a0a      	ldr	r2, [pc, #40]	@ (8006f24 <prvCheckTasksWaitingTermination+0x58>)
 8006efc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006efe:	f000 ff03 	bl	8007d08 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006f02:	6878      	ldr	r0, [r7, #4]
 8006f04:	f000 f810 	bl	8006f28 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006f08:	4b06      	ldr	r3, [pc, #24]	@ (8006f24 <prvCheckTasksWaitingTermination+0x58>)
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d1e1      	bne.n	8006ed4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006f10:	bf00      	nop
 8006f12:	bf00      	nop
 8006f14:	3708      	adds	r7, #8
 8006f16:	46bd      	mov	sp, r7
 8006f18:	bd80      	pop	{r7, pc}
 8006f1a:	bf00      	nop
 8006f1c:	200014b8 	.word	0x200014b8
 8006f20:	200014e4 	.word	0x200014e4
 8006f24:	200014cc 	.word	0x200014cc

08006f28 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b084      	sub	sp, #16
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	3354      	adds	r3, #84	@ 0x54
 8006f34:	4618      	mov	r0, r3
 8006f36:	f001 f9f3 	bl	8008320 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d108      	bne.n	8006f56 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f48:	4618      	mov	r0, r3
 8006f4a:	f001 f8a3 	bl	8008094 <vPortFree>
				vPortFree( pxTCB );
 8006f4e:	6878      	ldr	r0, [r7, #4]
 8006f50:	f001 f8a0 	bl	8008094 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006f54:	e01b      	b.n	8006f8e <prvDeleteTCB+0x66>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006f5c:	2b01      	cmp	r3, #1
 8006f5e:	d103      	bne.n	8006f68 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006f60:	6878      	ldr	r0, [r7, #4]
 8006f62:	f001 f897 	bl	8008094 <vPortFree>
	}
 8006f66:	e012      	b.n	8006f8e <prvDeleteTCB+0x66>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006f6e:	2b02      	cmp	r3, #2
 8006f70:	d00d      	beq.n	8006f8e <prvDeleteTCB+0x66>
	__asm volatile
 8006f72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f76:	b672      	cpsid	i
 8006f78:	f383 8811 	msr	BASEPRI, r3
 8006f7c:	f3bf 8f6f 	isb	sy
 8006f80:	f3bf 8f4f 	dsb	sy
 8006f84:	b662      	cpsie	i
 8006f86:	60fb      	str	r3, [r7, #12]
}
 8006f88:	bf00      	nop
 8006f8a:	bf00      	nop
 8006f8c:	e7fd      	b.n	8006f8a <prvDeleteTCB+0x62>
	}
 8006f8e:	bf00      	nop
 8006f90:	3710      	adds	r7, #16
 8006f92:	46bd      	mov	sp, r7
 8006f94:	bd80      	pop	{r7, pc}
	...

08006f98 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006f98:	b480      	push	{r7}
 8006f9a:	b083      	sub	sp, #12
 8006f9c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006f9e:	4b0c      	ldr	r3, [pc, #48]	@ (8006fd0 <prvResetNextTaskUnblockTime+0x38>)
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d104      	bne.n	8006fb2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006fa8:	4b0a      	ldr	r3, [pc, #40]	@ (8006fd4 <prvResetNextTaskUnblockTime+0x3c>)
 8006faa:	f04f 32ff 	mov.w	r2, #4294967295
 8006fae:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006fb0:	e008      	b.n	8006fc4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006fb2:	4b07      	ldr	r3, [pc, #28]	@ (8006fd0 <prvResetNextTaskUnblockTime+0x38>)
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	68db      	ldr	r3, [r3, #12]
 8006fb8:	68db      	ldr	r3, [r3, #12]
 8006fba:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	685b      	ldr	r3, [r3, #4]
 8006fc0:	4a04      	ldr	r2, [pc, #16]	@ (8006fd4 <prvResetNextTaskUnblockTime+0x3c>)
 8006fc2:	6013      	str	r3, [r2, #0]
}
 8006fc4:	bf00      	nop
 8006fc6:	370c      	adds	r7, #12
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fce:	4770      	bx	lr
 8006fd0:	2000149c 	.word	0x2000149c
 8006fd4:	20001504 	.word	0x20001504

08006fd8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006fd8:	b480      	push	{r7}
 8006fda:	b083      	sub	sp, #12
 8006fdc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006fde:	4b0b      	ldr	r3, [pc, #44]	@ (800700c <xTaskGetSchedulerState+0x34>)
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d102      	bne.n	8006fec <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006fe6:	2301      	movs	r3, #1
 8006fe8:	607b      	str	r3, [r7, #4]
 8006fea:	e008      	b.n	8006ffe <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006fec:	4b08      	ldr	r3, [pc, #32]	@ (8007010 <xTaskGetSchedulerState+0x38>)
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d102      	bne.n	8006ffa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006ff4:	2302      	movs	r3, #2
 8006ff6:	607b      	str	r3, [r7, #4]
 8006ff8:	e001      	b.n	8006ffe <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006ffe:	687b      	ldr	r3, [r7, #4]
	}
 8007000:	4618      	mov	r0, r3
 8007002:	370c      	adds	r7, #12
 8007004:	46bd      	mov	sp, r7
 8007006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700a:	4770      	bx	lr
 800700c:	200014f0 	.word	0x200014f0
 8007010:	2000150c 	.word	0x2000150c

08007014 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007014:	b580      	push	{r7, lr}
 8007016:	b084      	sub	sp, #16
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007020:	2300      	movs	r3, #0
 8007022:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d051      	beq.n	80070ce <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800702a:	68bb      	ldr	r3, [r7, #8]
 800702c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800702e:	4b2a      	ldr	r3, [pc, #168]	@ (80070d8 <xTaskPriorityInherit+0xc4>)
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007034:	429a      	cmp	r2, r3
 8007036:	d241      	bcs.n	80070bc <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007038:	68bb      	ldr	r3, [r7, #8]
 800703a:	699b      	ldr	r3, [r3, #24]
 800703c:	2b00      	cmp	r3, #0
 800703e:	db06      	blt.n	800704e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007040:	4b25      	ldr	r3, [pc, #148]	@ (80070d8 <xTaskPriorityInherit+0xc4>)
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007046:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800704a:	68bb      	ldr	r3, [r7, #8]
 800704c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800704e:	68bb      	ldr	r3, [r7, #8]
 8007050:	6959      	ldr	r1, [r3, #20]
 8007052:	68bb      	ldr	r3, [r7, #8]
 8007054:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007056:	4613      	mov	r3, r2
 8007058:	009b      	lsls	r3, r3, #2
 800705a:	4413      	add	r3, r2
 800705c:	009b      	lsls	r3, r3, #2
 800705e:	4a1f      	ldr	r2, [pc, #124]	@ (80070dc <xTaskPriorityInherit+0xc8>)
 8007060:	4413      	add	r3, r2
 8007062:	4299      	cmp	r1, r3
 8007064:	d122      	bne.n	80070ac <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007066:	68bb      	ldr	r3, [r7, #8]
 8007068:	3304      	adds	r3, #4
 800706a:	4618      	mov	r0, r3
 800706c:	f7fe f85c 	bl	8005128 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007070:	4b19      	ldr	r3, [pc, #100]	@ (80070d8 <xTaskPriorityInherit+0xc4>)
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007076:	68bb      	ldr	r3, [r7, #8]
 8007078:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800707a:	68bb      	ldr	r3, [r7, #8]
 800707c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800707e:	4b18      	ldr	r3, [pc, #96]	@ (80070e0 <xTaskPriorityInherit+0xcc>)
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	429a      	cmp	r2, r3
 8007084:	d903      	bls.n	800708e <xTaskPriorityInherit+0x7a>
 8007086:	68bb      	ldr	r3, [r7, #8]
 8007088:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800708a:	4a15      	ldr	r2, [pc, #84]	@ (80070e0 <xTaskPriorityInherit+0xcc>)
 800708c:	6013      	str	r3, [r2, #0]
 800708e:	68bb      	ldr	r3, [r7, #8]
 8007090:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007092:	4613      	mov	r3, r2
 8007094:	009b      	lsls	r3, r3, #2
 8007096:	4413      	add	r3, r2
 8007098:	009b      	lsls	r3, r3, #2
 800709a:	4a10      	ldr	r2, [pc, #64]	@ (80070dc <xTaskPriorityInherit+0xc8>)
 800709c:	441a      	add	r2, r3
 800709e:	68bb      	ldr	r3, [r7, #8]
 80070a0:	3304      	adds	r3, #4
 80070a2:	4619      	mov	r1, r3
 80070a4:	4610      	mov	r0, r2
 80070a6:	f7fd ffe2 	bl	800506e <vListInsertEnd>
 80070aa:	e004      	b.n	80070b6 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80070ac:	4b0a      	ldr	r3, [pc, #40]	@ (80070d8 <xTaskPriorityInherit+0xc4>)
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80070b2:	68bb      	ldr	r3, [r7, #8]
 80070b4:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80070b6:	2301      	movs	r3, #1
 80070b8:	60fb      	str	r3, [r7, #12]
 80070ba:	e008      	b.n	80070ce <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80070bc:	68bb      	ldr	r3, [r7, #8]
 80070be:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80070c0:	4b05      	ldr	r3, [pc, #20]	@ (80070d8 <xTaskPriorityInherit+0xc4>)
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070c6:	429a      	cmp	r2, r3
 80070c8:	d201      	bcs.n	80070ce <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80070ca:	2301      	movs	r3, #1
 80070cc:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80070ce:	68fb      	ldr	r3, [r7, #12]
	}
 80070d0:	4618      	mov	r0, r3
 80070d2:	3710      	adds	r7, #16
 80070d4:	46bd      	mov	sp, r7
 80070d6:	bd80      	pop	{r7, pc}
 80070d8:	20001010 	.word	0x20001010
 80070dc:	20001014 	.word	0x20001014
 80070e0:	200014ec 	.word	0x200014ec

080070e4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b086      	sub	sp, #24
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80070f0:	2300      	movs	r3, #0
 80070f2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d05c      	beq.n	80071b4 <xTaskPriorityDisinherit+0xd0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80070fa:	4b31      	ldr	r3, [pc, #196]	@ (80071c0 <xTaskPriorityDisinherit+0xdc>)
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	693a      	ldr	r2, [r7, #16]
 8007100:	429a      	cmp	r2, r3
 8007102:	d00d      	beq.n	8007120 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 8007104:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007108:	b672      	cpsid	i
 800710a:	f383 8811 	msr	BASEPRI, r3
 800710e:	f3bf 8f6f 	isb	sy
 8007112:	f3bf 8f4f 	dsb	sy
 8007116:	b662      	cpsie	i
 8007118:	60fb      	str	r3, [r7, #12]
}
 800711a:	bf00      	nop
 800711c:	bf00      	nop
 800711e:	e7fd      	b.n	800711c <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8007120:	693b      	ldr	r3, [r7, #16]
 8007122:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007124:	2b00      	cmp	r3, #0
 8007126:	d10d      	bne.n	8007144 <xTaskPriorityDisinherit+0x60>
	__asm volatile
 8007128:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800712c:	b672      	cpsid	i
 800712e:	f383 8811 	msr	BASEPRI, r3
 8007132:	f3bf 8f6f 	isb	sy
 8007136:	f3bf 8f4f 	dsb	sy
 800713a:	b662      	cpsie	i
 800713c:	60bb      	str	r3, [r7, #8]
}
 800713e:	bf00      	nop
 8007140:	bf00      	nop
 8007142:	e7fd      	b.n	8007140 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 8007144:	693b      	ldr	r3, [r7, #16]
 8007146:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007148:	1e5a      	subs	r2, r3, #1
 800714a:	693b      	ldr	r3, [r7, #16]
 800714c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800714e:	693b      	ldr	r3, [r7, #16]
 8007150:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007152:	693b      	ldr	r3, [r7, #16]
 8007154:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007156:	429a      	cmp	r2, r3
 8007158:	d02c      	beq.n	80071b4 <xTaskPriorityDisinherit+0xd0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800715a:	693b      	ldr	r3, [r7, #16]
 800715c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800715e:	2b00      	cmp	r3, #0
 8007160:	d128      	bne.n	80071b4 <xTaskPriorityDisinherit+0xd0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007162:	693b      	ldr	r3, [r7, #16]
 8007164:	3304      	adds	r3, #4
 8007166:	4618      	mov	r0, r3
 8007168:	f7fd ffde 	bl	8005128 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800716c:	693b      	ldr	r3, [r7, #16]
 800716e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007170:	693b      	ldr	r3, [r7, #16]
 8007172:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007174:	693b      	ldr	r3, [r7, #16]
 8007176:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007178:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800717c:	693b      	ldr	r3, [r7, #16]
 800717e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007180:	693b      	ldr	r3, [r7, #16]
 8007182:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007184:	4b0f      	ldr	r3, [pc, #60]	@ (80071c4 <xTaskPriorityDisinherit+0xe0>)
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	429a      	cmp	r2, r3
 800718a:	d903      	bls.n	8007194 <xTaskPriorityDisinherit+0xb0>
 800718c:	693b      	ldr	r3, [r7, #16]
 800718e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007190:	4a0c      	ldr	r2, [pc, #48]	@ (80071c4 <xTaskPriorityDisinherit+0xe0>)
 8007192:	6013      	str	r3, [r2, #0]
 8007194:	693b      	ldr	r3, [r7, #16]
 8007196:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007198:	4613      	mov	r3, r2
 800719a:	009b      	lsls	r3, r3, #2
 800719c:	4413      	add	r3, r2
 800719e:	009b      	lsls	r3, r3, #2
 80071a0:	4a09      	ldr	r2, [pc, #36]	@ (80071c8 <xTaskPriorityDisinherit+0xe4>)
 80071a2:	441a      	add	r2, r3
 80071a4:	693b      	ldr	r3, [r7, #16]
 80071a6:	3304      	adds	r3, #4
 80071a8:	4619      	mov	r1, r3
 80071aa:	4610      	mov	r0, r2
 80071ac:	f7fd ff5f 	bl	800506e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80071b0:	2301      	movs	r3, #1
 80071b2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80071b4:	697b      	ldr	r3, [r7, #20]
	}
 80071b6:	4618      	mov	r0, r3
 80071b8:	3718      	adds	r7, #24
 80071ba:	46bd      	mov	sp, r7
 80071bc:	bd80      	pop	{r7, pc}
 80071be:	bf00      	nop
 80071c0:	20001010 	.word	0x20001010
 80071c4:	200014ec 	.word	0x200014ec
 80071c8:	20001014 	.word	0x20001014

080071cc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80071cc:	b580      	push	{r7, lr}
 80071ce:	b088      	sub	sp, #32
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
 80071d4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80071da:	2301      	movs	r3, #1
 80071dc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d070      	beq.n	80072c6 <vTaskPriorityDisinheritAfterTimeout+0xfa>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80071e4:	69bb      	ldr	r3, [r7, #24]
 80071e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d10d      	bne.n	8007208 <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 80071ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071f0:	b672      	cpsid	i
 80071f2:	f383 8811 	msr	BASEPRI, r3
 80071f6:	f3bf 8f6f 	isb	sy
 80071fa:	f3bf 8f4f 	dsb	sy
 80071fe:	b662      	cpsie	i
 8007200:	60fb      	str	r3, [r7, #12]
}
 8007202:	bf00      	nop
 8007204:	bf00      	nop
 8007206:	e7fd      	b.n	8007204 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007208:	69bb      	ldr	r3, [r7, #24]
 800720a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800720c:	683a      	ldr	r2, [r7, #0]
 800720e:	429a      	cmp	r2, r3
 8007210:	d902      	bls.n	8007218 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007212:	683b      	ldr	r3, [r7, #0]
 8007214:	61fb      	str	r3, [r7, #28]
 8007216:	e002      	b.n	800721e <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007218:	69bb      	ldr	r3, [r7, #24]
 800721a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800721c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800721e:	69bb      	ldr	r3, [r7, #24]
 8007220:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007222:	69fa      	ldr	r2, [r7, #28]
 8007224:	429a      	cmp	r2, r3
 8007226:	d04e      	beq.n	80072c6 <vTaskPriorityDisinheritAfterTimeout+0xfa>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007228:	69bb      	ldr	r3, [r7, #24]
 800722a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800722c:	697a      	ldr	r2, [r7, #20]
 800722e:	429a      	cmp	r2, r3
 8007230:	d149      	bne.n	80072c6 <vTaskPriorityDisinheritAfterTimeout+0xfa>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007232:	4b27      	ldr	r3, [pc, #156]	@ (80072d0 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	69ba      	ldr	r2, [r7, #24]
 8007238:	429a      	cmp	r2, r3
 800723a:	d10d      	bne.n	8007258 <vTaskPriorityDisinheritAfterTimeout+0x8c>
	__asm volatile
 800723c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007240:	b672      	cpsid	i
 8007242:	f383 8811 	msr	BASEPRI, r3
 8007246:	f3bf 8f6f 	isb	sy
 800724a:	f3bf 8f4f 	dsb	sy
 800724e:	b662      	cpsie	i
 8007250:	60bb      	str	r3, [r7, #8]
}
 8007252:	bf00      	nop
 8007254:	bf00      	nop
 8007256:	e7fd      	b.n	8007254 <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007258:	69bb      	ldr	r3, [r7, #24]
 800725a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800725c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800725e:	69bb      	ldr	r3, [r7, #24]
 8007260:	69fa      	ldr	r2, [r7, #28]
 8007262:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007264:	69bb      	ldr	r3, [r7, #24]
 8007266:	699b      	ldr	r3, [r3, #24]
 8007268:	2b00      	cmp	r3, #0
 800726a:	db04      	blt.n	8007276 <vTaskPriorityDisinheritAfterTimeout+0xaa>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800726c:	69fb      	ldr	r3, [r7, #28]
 800726e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007272:	69bb      	ldr	r3, [r7, #24]
 8007274:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007276:	69bb      	ldr	r3, [r7, #24]
 8007278:	6959      	ldr	r1, [r3, #20]
 800727a:	693a      	ldr	r2, [r7, #16]
 800727c:	4613      	mov	r3, r2
 800727e:	009b      	lsls	r3, r3, #2
 8007280:	4413      	add	r3, r2
 8007282:	009b      	lsls	r3, r3, #2
 8007284:	4a13      	ldr	r2, [pc, #76]	@ (80072d4 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8007286:	4413      	add	r3, r2
 8007288:	4299      	cmp	r1, r3
 800728a:	d11c      	bne.n	80072c6 <vTaskPriorityDisinheritAfterTimeout+0xfa>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800728c:	69bb      	ldr	r3, [r7, #24]
 800728e:	3304      	adds	r3, #4
 8007290:	4618      	mov	r0, r3
 8007292:	f7fd ff49 	bl	8005128 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8007296:	69bb      	ldr	r3, [r7, #24]
 8007298:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800729a:	4b0f      	ldr	r3, [pc, #60]	@ (80072d8 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	429a      	cmp	r2, r3
 80072a0:	d903      	bls.n	80072aa <vTaskPriorityDisinheritAfterTimeout+0xde>
 80072a2:	69bb      	ldr	r3, [r7, #24]
 80072a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072a6:	4a0c      	ldr	r2, [pc, #48]	@ (80072d8 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 80072a8:	6013      	str	r3, [r2, #0]
 80072aa:	69bb      	ldr	r3, [r7, #24]
 80072ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80072ae:	4613      	mov	r3, r2
 80072b0:	009b      	lsls	r3, r3, #2
 80072b2:	4413      	add	r3, r2
 80072b4:	009b      	lsls	r3, r3, #2
 80072b6:	4a07      	ldr	r2, [pc, #28]	@ (80072d4 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 80072b8:	441a      	add	r2, r3
 80072ba:	69bb      	ldr	r3, [r7, #24]
 80072bc:	3304      	adds	r3, #4
 80072be:	4619      	mov	r1, r3
 80072c0:	4610      	mov	r0, r2
 80072c2:	f7fd fed4 	bl	800506e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80072c6:	bf00      	nop
 80072c8:	3720      	adds	r7, #32
 80072ca:	46bd      	mov	sp, r7
 80072cc:	bd80      	pop	{r7, pc}
 80072ce:	bf00      	nop
 80072d0:	20001010 	.word	0x20001010
 80072d4:	20001014 	.word	0x20001014
 80072d8:	200014ec 	.word	0x200014ec

080072dc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80072dc:	b480      	push	{r7}
 80072de:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80072e0:	4b07      	ldr	r3, [pc, #28]	@ (8007300 <pvTaskIncrementMutexHeldCount+0x24>)
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d004      	beq.n	80072f2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80072e8:	4b05      	ldr	r3, [pc, #20]	@ (8007300 <pvTaskIncrementMutexHeldCount+0x24>)
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80072ee:	3201      	adds	r2, #1
 80072f0:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 80072f2:	4b03      	ldr	r3, [pc, #12]	@ (8007300 <pvTaskIncrementMutexHeldCount+0x24>)
 80072f4:	681b      	ldr	r3, [r3, #0]
	}
 80072f6:	4618      	mov	r0, r3
 80072f8:	46bd      	mov	sp, r7
 80072fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fe:	4770      	bx	lr
 8007300:	20001010 	.word	0x20001010

08007304 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007304:	b580      	push	{r7, lr}
 8007306:	b084      	sub	sp, #16
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
 800730c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800730e:	4b21      	ldr	r3, [pc, #132]	@ (8007394 <prvAddCurrentTaskToDelayedList+0x90>)
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007314:	4b20      	ldr	r3, [pc, #128]	@ (8007398 <prvAddCurrentTaskToDelayedList+0x94>)
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	3304      	adds	r3, #4
 800731a:	4618      	mov	r0, r3
 800731c:	f7fd ff04 	bl	8005128 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007326:	d10a      	bne.n	800733e <prvAddCurrentTaskToDelayedList+0x3a>
 8007328:	683b      	ldr	r3, [r7, #0]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d007      	beq.n	800733e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800732e:	4b1a      	ldr	r3, [pc, #104]	@ (8007398 <prvAddCurrentTaskToDelayedList+0x94>)
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	3304      	adds	r3, #4
 8007334:	4619      	mov	r1, r3
 8007336:	4819      	ldr	r0, [pc, #100]	@ (800739c <prvAddCurrentTaskToDelayedList+0x98>)
 8007338:	f7fd fe99 	bl	800506e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800733c:	e026      	b.n	800738c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800733e:	68fa      	ldr	r2, [r7, #12]
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	4413      	add	r3, r2
 8007344:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007346:	4b14      	ldr	r3, [pc, #80]	@ (8007398 <prvAddCurrentTaskToDelayedList+0x94>)
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	68ba      	ldr	r2, [r7, #8]
 800734c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800734e:	68ba      	ldr	r2, [r7, #8]
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	429a      	cmp	r2, r3
 8007354:	d209      	bcs.n	800736a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007356:	4b12      	ldr	r3, [pc, #72]	@ (80073a0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007358:	681a      	ldr	r2, [r3, #0]
 800735a:	4b0f      	ldr	r3, [pc, #60]	@ (8007398 <prvAddCurrentTaskToDelayedList+0x94>)
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	3304      	adds	r3, #4
 8007360:	4619      	mov	r1, r3
 8007362:	4610      	mov	r0, r2
 8007364:	f7fd fea7 	bl	80050b6 <vListInsert>
}
 8007368:	e010      	b.n	800738c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800736a:	4b0e      	ldr	r3, [pc, #56]	@ (80073a4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800736c:	681a      	ldr	r2, [r3, #0]
 800736e:	4b0a      	ldr	r3, [pc, #40]	@ (8007398 <prvAddCurrentTaskToDelayedList+0x94>)
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	3304      	adds	r3, #4
 8007374:	4619      	mov	r1, r3
 8007376:	4610      	mov	r0, r2
 8007378:	f7fd fe9d 	bl	80050b6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800737c:	4b0a      	ldr	r3, [pc, #40]	@ (80073a8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	68ba      	ldr	r2, [r7, #8]
 8007382:	429a      	cmp	r2, r3
 8007384:	d202      	bcs.n	800738c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007386:	4a08      	ldr	r2, [pc, #32]	@ (80073a8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007388:	68bb      	ldr	r3, [r7, #8]
 800738a:	6013      	str	r3, [r2, #0]
}
 800738c:	bf00      	nop
 800738e:	3710      	adds	r7, #16
 8007390:	46bd      	mov	sp, r7
 8007392:	bd80      	pop	{r7, pc}
 8007394:	200014e8 	.word	0x200014e8
 8007398:	20001010 	.word	0x20001010
 800739c:	200014d0 	.word	0x200014d0
 80073a0:	200014a0 	.word	0x200014a0
 80073a4:	2000149c 	.word	0x2000149c
 80073a8:	20001504 	.word	0x20001504

080073ac <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80073ac:	b580      	push	{r7, lr}
 80073ae:	b08a      	sub	sp, #40	@ 0x28
 80073b0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80073b2:	2300      	movs	r3, #0
 80073b4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80073b6:	f000 fb21 	bl	80079fc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80073ba:	4b1e      	ldr	r3, [pc, #120]	@ (8007434 <xTimerCreateTimerTask+0x88>)
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d021      	beq.n	8007406 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80073c2:	2300      	movs	r3, #0
 80073c4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80073c6:	2300      	movs	r3, #0
 80073c8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80073ca:	1d3a      	adds	r2, r7, #4
 80073cc:	f107 0108 	add.w	r1, r7, #8
 80073d0:	f107 030c 	add.w	r3, r7, #12
 80073d4:	4618      	mov	r0, r3
 80073d6:	f7fd fe03 	bl	8004fe0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80073da:	6879      	ldr	r1, [r7, #4]
 80073dc:	68bb      	ldr	r3, [r7, #8]
 80073de:	68fa      	ldr	r2, [r7, #12]
 80073e0:	9202      	str	r2, [sp, #8]
 80073e2:	9301      	str	r3, [sp, #4]
 80073e4:	2302      	movs	r3, #2
 80073e6:	9300      	str	r3, [sp, #0]
 80073e8:	2300      	movs	r3, #0
 80073ea:	460a      	mov	r2, r1
 80073ec:	4912      	ldr	r1, [pc, #72]	@ (8007438 <xTimerCreateTimerTask+0x8c>)
 80073ee:	4813      	ldr	r0, [pc, #76]	@ (800743c <xTimerCreateTimerTask+0x90>)
 80073f0:	f7fe ff7a 	bl	80062e8 <xTaskCreateStatic>
 80073f4:	4603      	mov	r3, r0
 80073f6:	4a12      	ldr	r2, [pc, #72]	@ (8007440 <xTimerCreateTimerTask+0x94>)
 80073f8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80073fa:	4b11      	ldr	r3, [pc, #68]	@ (8007440 <xTimerCreateTimerTask+0x94>)
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d001      	beq.n	8007406 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007402:	2301      	movs	r3, #1
 8007404:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007406:	697b      	ldr	r3, [r7, #20]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d10d      	bne.n	8007428 <xTimerCreateTimerTask+0x7c>
	__asm volatile
 800740c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007410:	b672      	cpsid	i
 8007412:	f383 8811 	msr	BASEPRI, r3
 8007416:	f3bf 8f6f 	isb	sy
 800741a:	f3bf 8f4f 	dsb	sy
 800741e:	b662      	cpsie	i
 8007420:	613b      	str	r3, [r7, #16]
}
 8007422:	bf00      	nop
 8007424:	bf00      	nop
 8007426:	e7fd      	b.n	8007424 <xTimerCreateTimerTask+0x78>
	return xReturn;
 8007428:	697b      	ldr	r3, [r7, #20]
}
 800742a:	4618      	mov	r0, r3
 800742c:	3718      	adds	r7, #24
 800742e:	46bd      	mov	sp, r7
 8007430:	bd80      	pop	{r7, pc}
 8007432:	bf00      	nop
 8007434:	20001540 	.word	0x20001540
 8007438:	08008db4 	.word	0x08008db4
 800743c:	08007585 	.word	0x08007585
 8007440:	20001544 	.word	0x20001544

08007444 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007444:	b580      	push	{r7, lr}
 8007446:	b08a      	sub	sp, #40	@ 0x28
 8007448:	af00      	add	r7, sp, #0
 800744a:	60f8      	str	r0, [r7, #12]
 800744c:	60b9      	str	r1, [r7, #8]
 800744e:	607a      	str	r2, [r7, #4]
 8007450:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007452:	2300      	movs	r3, #0
 8007454:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d10d      	bne.n	8007478 <xTimerGenericCommand+0x34>
	__asm volatile
 800745c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007460:	b672      	cpsid	i
 8007462:	f383 8811 	msr	BASEPRI, r3
 8007466:	f3bf 8f6f 	isb	sy
 800746a:	f3bf 8f4f 	dsb	sy
 800746e:	b662      	cpsie	i
 8007470:	623b      	str	r3, [r7, #32]
}
 8007472:	bf00      	nop
 8007474:	bf00      	nop
 8007476:	e7fd      	b.n	8007474 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007478:	4b19      	ldr	r3, [pc, #100]	@ (80074e0 <xTimerGenericCommand+0x9c>)
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	2b00      	cmp	r3, #0
 800747e:	d02a      	beq.n	80074d6 <xTimerGenericCommand+0x92>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007480:	68bb      	ldr	r3, [r7, #8]
 8007482:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800748c:	68bb      	ldr	r3, [r7, #8]
 800748e:	2b05      	cmp	r3, #5
 8007490:	dc18      	bgt.n	80074c4 <xTimerGenericCommand+0x80>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007492:	f7ff fda1 	bl	8006fd8 <xTaskGetSchedulerState>
 8007496:	4603      	mov	r3, r0
 8007498:	2b02      	cmp	r3, #2
 800749a:	d109      	bne.n	80074b0 <xTimerGenericCommand+0x6c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800749c:	4b10      	ldr	r3, [pc, #64]	@ (80074e0 <xTimerGenericCommand+0x9c>)
 800749e:	6818      	ldr	r0, [r3, #0]
 80074a0:	f107 0110 	add.w	r1, r7, #16
 80074a4:	2300      	movs	r3, #0
 80074a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80074a8:	f7fe f838 	bl	800551c <xQueueGenericSend>
 80074ac:	6278      	str	r0, [r7, #36]	@ 0x24
 80074ae:	e012      	b.n	80074d6 <xTimerGenericCommand+0x92>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80074b0:	4b0b      	ldr	r3, [pc, #44]	@ (80074e0 <xTimerGenericCommand+0x9c>)
 80074b2:	6818      	ldr	r0, [r3, #0]
 80074b4:	f107 0110 	add.w	r1, r7, #16
 80074b8:	2300      	movs	r3, #0
 80074ba:	2200      	movs	r2, #0
 80074bc:	f7fe f82e 	bl	800551c <xQueueGenericSend>
 80074c0:	6278      	str	r0, [r7, #36]	@ 0x24
 80074c2:	e008      	b.n	80074d6 <xTimerGenericCommand+0x92>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80074c4:	4b06      	ldr	r3, [pc, #24]	@ (80074e0 <xTimerGenericCommand+0x9c>)
 80074c6:	6818      	ldr	r0, [r3, #0]
 80074c8:	f107 0110 	add.w	r1, r7, #16
 80074cc:	2300      	movs	r3, #0
 80074ce:	683a      	ldr	r2, [r7, #0]
 80074d0:	f7fe f92e 	bl	8005730 <xQueueGenericSendFromISR>
 80074d4:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80074d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80074d8:	4618      	mov	r0, r3
 80074da:	3728      	adds	r7, #40	@ 0x28
 80074dc:	46bd      	mov	sp, r7
 80074de:	bd80      	pop	{r7, pc}
 80074e0:	20001540 	.word	0x20001540

080074e4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80074e4:	b580      	push	{r7, lr}
 80074e6:	b088      	sub	sp, #32
 80074e8:	af02      	add	r7, sp, #8
 80074ea:	6078      	str	r0, [r7, #4]
 80074ec:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80074ee:	4b24      	ldr	r3, [pc, #144]	@ (8007580 <prvProcessExpiredTimer+0x9c>)
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	68db      	ldr	r3, [r3, #12]
 80074f4:	68db      	ldr	r3, [r3, #12]
 80074f6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80074f8:	697b      	ldr	r3, [r7, #20]
 80074fa:	3304      	adds	r3, #4
 80074fc:	4618      	mov	r0, r3
 80074fe:	f7fd fe13 	bl	8005128 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007502:	697b      	ldr	r3, [r7, #20]
 8007504:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007508:	f003 0304 	and.w	r3, r3, #4
 800750c:	2b00      	cmp	r3, #0
 800750e:	d025      	beq.n	800755c <prvProcessExpiredTimer+0x78>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007510:	697b      	ldr	r3, [r7, #20]
 8007512:	699a      	ldr	r2, [r3, #24]
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	18d1      	adds	r1, r2, r3
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	683a      	ldr	r2, [r7, #0]
 800751c:	6978      	ldr	r0, [r7, #20]
 800751e:	f000 f8d7 	bl	80076d0 <prvInsertTimerInActiveList>
 8007522:	4603      	mov	r3, r0
 8007524:	2b00      	cmp	r3, #0
 8007526:	d022      	beq.n	800756e <prvProcessExpiredTimer+0x8a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007528:	2300      	movs	r3, #0
 800752a:	9300      	str	r3, [sp, #0]
 800752c:	2300      	movs	r3, #0
 800752e:	687a      	ldr	r2, [r7, #4]
 8007530:	2100      	movs	r1, #0
 8007532:	6978      	ldr	r0, [r7, #20]
 8007534:	f7ff ff86 	bl	8007444 <xTimerGenericCommand>
 8007538:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800753a:	693b      	ldr	r3, [r7, #16]
 800753c:	2b00      	cmp	r3, #0
 800753e:	d116      	bne.n	800756e <prvProcessExpiredTimer+0x8a>
	__asm volatile
 8007540:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007544:	b672      	cpsid	i
 8007546:	f383 8811 	msr	BASEPRI, r3
 800754a:	f3bf 8f6f 	isb	sy
 800754e:	f3bf 8f4f 	dsb	sy
 8007552:	b662      	cpsie	i
 8007554:	60fb      	str	r3, [r7, #12]
}
 8007556:	bf00      	nop
 8007558:	bf00      	nop
 800755a:	e7fd      	b.n	8007558 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800755c:	697b      	ldr	r3, [r7, #20]
 800755e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007562:	f023 0301 	bic.w	r3, r3, #1
 8007566:	b2da      	uxtb	r2, r3
 8007568:	697b      	ldr	r3, [r7, #20]
 800756a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800756e:	697b      	ldr	r3, [r7, #20]
 8007570:	6a1b      	ldr	r3, [r3, #32]
 8007572:	6978      	ldr	r0, [r7, #20]
 8007574:	4798      	blx	r3
}
 8007576:	bf00      	nop
 8007578:	3718      	adds	r7, #24
 800757a:	46bd      	mov	sp, r7
 800757c:	bd80      	pop	{r7, pc}
 800757e:	bf00      	nop
 8007580:	20001538 	.word	0x20001538

08007584 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007584:	b580      	push	{r7, lr}
 8007586:	b084      	sub	sp, #16
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800758c:	f107 0308 	add.w	r3, r7, #8
 8007590:	4618      	mov	r0, r3
 8007592:	f000 f859 	bl	8007648 <prvGetNextExpireTime>
 8007596:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007598:	68bb      	ldr	r3, [r7, #8]
 800759a:	4619      	mov	r1, r3
 800759c:	68f8      	ldr	r0, [r7, #12]
 800759e:	f000 f805 	bl	80075ac <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80075a2:	f000 f8d7 	bl	8007754 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80075a6:	bf00      	nop
 80075a8:	e7f0      	b.n	800758c <prvTimerTask+0x8>
	...

080075ac <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80075ac:	b580      	push	{r7, lr}
 80075ae:	b084      	sub	sp, #16
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
 80075b4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80075b6:	f7ff f909 	bl	80067cc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80075ba:	f107 0308 	add.w	r3, r7, #8
 80075be:	4618      	mov	r0, r3
 80075c0:	f000 f866 	bl	8007690 <prvSampleTimeNow>
 80075c4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80075c6:	68bb      	ldr	r3, [r7, #8]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d130      	bne.n	800762e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80075cc:	683b      	ldr	r3, [r7, #0]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d10a      	bne.n	80075e8 <prvProcessTimerOrBlockTask+0x3c>
 80075d2:	687a      	ldr	r2, [r7, #4]
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	429a      	cmp	r2, r3
 80075d8:	d806      	bhi.n	80075e8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80075da:	f7ff f905 	bl	80067e8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80075de:	68f9      	ldr	r1, [r7, #12]
 80075e0:	6878      	ldr	r0, [r7, #4]
 80075e2:	f7ff ff7f 	bl	80074e4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80075e6:	e024      	b.n	8007632 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80075e8:	683b      	ldr	r3, [r7, #0]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d008      	beq.n	8007600 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80075ee:	4b13      	ldr	r3, [pc, #76]	@ (800763c <prvProcessTimerOrBlockTask+0x90>)
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d101      	bne.n	80075fc <prvProcessTimerOrBlockTask+0x50>
 80075f8:	2301      	movs	r3, #1
 80075fa:	e000      	b.n	80075fe <prvProcessTimerOrBlockTask+0x52>
 80075fc:	2300      	movs	r3, #0
 80075fe:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007600:	4b0f      	ldr	r3, [pc, #60]	@ (8007640 <prvProcessTimerOrBlockTask+0x94>)
 8007602:	6818      	ldr	r0, [r3, #0]
 8007604:	687a      	ldr	r2, [r7, #4]
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	1ad3      	subs	r3, r2, r3
 800760a:	683a      	ldr	r2, [r7, #0]
 800760c:	4619      	mov	r1, r3
 800760e:	f7fe fe37 	bl	8006280 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007612:	f7ff f8e9 	bl	80067e8 <xTaskResumeAll>
 8007616:	4603      	mov	r3, r0
 8007618:	2b00      	cmp	r3, #0
 800761a:	d10a      	bne.n	8007632 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800761c:	4b09      	ldr	r3, [pc, #36]	@ (8007644 <prvProcessTimerOrBlockTask+0x98>)
 800761e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007622:	601a      	str	r2, [r3, #0]
 8007624:	f3bf 8f4f 	dsb	sy
 8007628:	f3bf 8f6f 	isb	sy
}
 800762c:	e001      	b.n	8007632 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800762e:	f7ff f8db 	bl	80067e8 <xTaskResumeAll>
}
 8007632:	bf00      	nop
 8007634:	3710      	adds	r7, #16
 8007636:	46bd      	mov	sp, r7
 8007638:	bd80      	pop	{r7, pc}
 800763a:	bf00      	nop
 800763c:	2000153c 	.word	0x2000153c
 8007640:	20001540 	.word	0x20001540
 8007644:	e000ed04 	.word	0xe000ed04

08007648 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007648:	b480      	push	{r7}
 800764a:	b085      	sub	sp, #20
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007650:	4b0e      	ldr	r3, [pc, #56]	@ (800768c <prvGetNextExpireTime+0x44>)
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d101      	bne.n	800765e <prvGetNextExpireTime+0x16>
 800765a:	2201      	movs	r2, #1
 800765c:	e000      	b.n	8007660 <prvGetNextExpireTime+0x18>
 800765e:	2200      	movs	r2, #0
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	2b00      	cmp	r3, #0
 800766a:	d105      	bne.n	8007678 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800766c:	4b07      	ldr	r3, [pc, #28]	@ (800768c <prvGetNextExpireTime+0x44>)
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	68db      	ldr	r3, [r3, #12]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	60fb      	str	r3, [r7, #12]
 8007676:	e001      	b.n	800767c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007678:	2300      	movs	r3, #0
 800767a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800767c:	68fb      	ldr	r3, [r7, #12]
}
 800767e:	4618      	mov	r0, r3
 8007680:	3714      	adds	r7, #20
 8007682:	46bd      	mov	sp, r7
 8007684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007688:	4770      	bx	lr
 800768a:	bf00      	nop
 800768c:	20001538 	.word	0x20001538

08007690 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007690:	b580      	push	{r7, lr}
 8007692:	b084      	sub	sp, #16
 8007694:	af00      	add	r7, sp, #0
 8007696:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007698:	f7ff f946 	bl	8006928 <xTaskGetTickCount>
 800769c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800769e:	4b0b      	ldr	r3, [pc, #44]	@ (80076cc <prvSampleTimeNow+0x3c>)
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	68fa      	ldr	r2, [r7, #12]
 80076a4:	429a      	cmp	r2, r3
 80076a6:	d205      	bcs.n	80076b4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80076a8:	f000 f940 	bl	800792c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	2201      	movs	r2, #1
 80076b0:	601a      	str	r2, [r3, #0]
 80076b2:	e002      	b.n	80076ba <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	2200      	movs	r2, #0
 80076b8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80076ba:	4a04      	ldr	r2, [pc, #16]	@ (80076cc <prvSampleTimeNow+0x3c>)
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80076c0:	68fb      	ldr	r3, [r7, #12]
}
 80076c2:	4618      	mov	r0, r3
 80076c4:	3710      	adds	r7, #16
 80076c6:	46bd      	mov	sp, r7
 80076c8:	bd80      	pop	{r7, pc}
 80076ca:	bf00      	nop
 80076cc:	20001548 	.word	0x20001548

080076d0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b086      	sub	sp, #24
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	60f8      	str	r0, [r7, #12]
 80076d8:	60b9      	str	r1, [r7, #8]
 80076da:	607a      	str	r2, [r7, #4]
 80076dc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80076de:	2300      	movs	r3, #0
 80076e0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	68ba      	ldr	r2, [r7, #8]
 80076e6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	68fa      	ldr	r2, [r7, #12]
 80076ec:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80076ee:	68ba      	ldr	r2, [r7, #8]
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	429a      	cmp	r2, r3
 80076f4:	d812      	bhi.n	800771c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80076f6:	687a      	ldr	r2, [r7, #4]
 80076f8:	683b      	ldr	r3, [r7, #0]
 80076fa:	1ad2      	subs	r2, r2, r3
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	699b      	ldr	r3, [r3, #24]
 8007700:	429a      	cmp	r2, r3
 8007702:	d302      	bcc.n	800770a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007704:	2301      	movs	r3, #1
 8007706:	617b      	str	r3, [r7, #20]
 8007708:	e01b      	b.n	8007742 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800770a:	4b10      	ldr	r3, [pc, #64]	@ (800774c <prvInsertTimerInActiveList+0x7c>)
 800770c:	681a      	ldr	r2, [r3, #0]
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	3304      	adds	r3, #4
 8007712:	4619      	mov	r1, r3
 8007714:	4610      	mov	r0, r2
 8007716:	f7fd fcce 	bl	80050b6 <vListInsert>
 800771a:	e012      	b.n	8007742 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800771c:	687a      	ldr	r2, [r7, #4]
 800771e:	683b      	ldr	r3, [r7, #0]
 8007720:	429a      	cmp	r2, r3
 8007722:	d206      	bcs.n	8007732 <prvInsertTimerInActiveList+0x62>
 8007724:	68ba      	ldr	r2, [r7, #8]
 8007726:	683b      	ldr	r3, [r7, #0]
 8007728:	429a      	cmp	r2, r3
 800772a:	d302      	bcc.n	8007732 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800772c:	2301      	movs	r3, #1
 800772e:	617b      	str	r3, [r7, #20]
 8007730:	e007      	b.n	8007742 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007732:	4b07      	ldr	r3, [pc, #28]	@ (8007750 <prvInsertTimerInActiveList+0x80>)
 8007734:	681a      	ldr	r2, [r3, #0]
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	3304      	adds	r3, #4
 800773a:	4619      	mov	r1, r3
 800773c:	4610      	mov	r0, r2
 800773e:	f7fd fcba 	bl	80050b6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007742:	697b      	ldr	r3, [r7, #20]
}
 8007744:	4618      	mov	r0, r3
 8007746:	3718      	adds	r7, #24
 8007748:	46bd      	mov	sp, r7
 800774a:	bd80      	pop	{r7, pc}
 800774c:	2000153c 	.word	0x2000153c
 8007750:	20001538 	.word	0x20001538

08007754 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007754:	b580      	push	{r7, lr}
 8007756:	b08e      	sub	sp, #56	@ 0x38
 8007758:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800775a:	e0d4      	b.n	8007906 <prvProcessReceivedCommands+0x1b2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2b00      	cmp	r3, #0
 8007760:	da1b      	bge.n	800779a <prvProcessReceivedCommands+0x46>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007762:	1d3b      	adds	r3, r7, #4
 8007764:	3304      	adds	r3, #4
 8007766:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007768:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800776a:	2b00      	cmp	r3, #0
 800776c:	d10d      	bne.n	800778a <prvProcessReceivedCommands+0x36>
	__asm volatile
 800776e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007772:	b672      	cpsid	i
 8007774:	f383 8811 	msr	BASEPRI, r3
 8007778:	f3bf 8f6f 	isb	sy
 800777c:	f3bf 8f4f 	dsb	sy
 8007780:	b662      	cpsie	i
 8007782:	61fb      	str	r3, [r7, #28]
}
 8007784:	bf00      	nop
 8007786:	bf00      	nop
 8007788:	e7fd      	b.n	8007786 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800778a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007790:	6850      	ldr	r0, [r2, #4]
 8007792:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007794:	6892      	ldr	r2, [r2, #8]
 8007796:	4611      	mov	r1, r2
 8007798:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	2b00      	cmp	r3, #0
 800779e:	f2c0 80b2 	blt.w	8007906 <prvProcessReceivedCommands+0x1b2>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80077a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077a8:	695b      	ldr	r3, [r3, #20]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d004      	beq.n	80077b8 <prvProcessReceivedCommands+0x64>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80077ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077b0:	3304      	adds	r3, #4
 80077b2:	4618      	mov	r0, r3
 80077b4:	f7fd fcb8 	bl	8005128 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80077b8:	463b      	mov	r3, r7
 80077ba:	4618      	mov	r0, r3
 80077bc:	f7ff ff68 	bl	8007690 <prvSampleTimeNow>
 80077c0:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	2b09      	cmp	r3, #9
 80077c6:	f200 809b 	bhi.w	8007900 <prvProcessReceivedCommands+0x1ac>
 80077ca:	a201      	add	r2, pc, #4	@ (adr r2, 80077d0 <prvProcessReceivedCommands+0x7c>)
 80077cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077d0:	080077f9 	.word	0x080077f9
 80077d4:	080077f9 	.word	0x080077f9
 80077d8:	080077f9 	.word	0x080077f9
 80077dc:	08007873 	.word	0x08007873
 80077e0:	08007887 	.word	0x08007887
 80077e4:	080078d7 	.word	0x080078d7
 80077e8:	080077f9 	.word	0x080077f9
 80077ec:	080077f9 	.word	0x080077f9
 80077f0:	08007873 	.word	0x08007873
 80077f4:	08007887 	.word	0x08007887
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80077f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077fa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80077fe:	f043 0301 	orr.w	r3, r3, #1
 8007802:	b2da      	uxtb	r2, r3
 8007804:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007806:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800780a:	68ba      	ldr	r2, [r7, #8]
 800780c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800780e:	699b      	ldr	r3, [r3, #24]
 8007810:	18d1      	adds	r1, r2, r3
 8007812:	68bb      	ldr	r3, [r7, #8]
 8007814:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007816:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007818:	f7ff ff5a 	bl	80076d0 <prvInsertTimerInActiveList>
 800781c:	4603      	mov	r3, r0
 800781e:	2b00      	cmp	r3, #0
 8007820:	d070      	beq.n	8007904 <prvProcessReceivedCommands+0x1b0>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007822:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007824:	6a1b      	ldr	r3, [r3, #32]
 8007826:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007828:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800782a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800782c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007830:	f003 0304 	and.w	r3, r3, #4
 8007834:	2b00      	cmp	r3, #0
 8007836:	d065      	beq.n	8007904 <prvProcessReceivedCommands+0x1b0>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007838:	68ba      	ldr	r2, [r7, #8]
 800783a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800783c:	699b      	ldr	r3, [r3, #24]
 800783e:	441a      	add	r2, r3
 8007840:	2300      	movs	r3, #0
 8007842:	9300      	str	r3, [sp, #0]
 8007844:	2300      	movs	r3, #0
 8007846:	2100      	movs	r1, #0
 8007848:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800784a:	f7ff fdfb 	bl	8007444 <xTimerGenericCommand>
 800784e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007850:	6a3b      	ldr	r3, [r7, #32]
 8007852:	2b00      	cmp	r3, #0
 8007854:	d156      	bne.n	8007904 <prvProcessReceivedCommands+0x1b0>
	__asm volatile
 8007856:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800785a:	b672      	cpsid	i
 800785c:	f383 8811 	msr	BASEPRI, r3
 8007860:	f3bf 8f6f 	isb	sy
 8007864:	f3bf 8f4f 	dsb	sy
 8007868:	b662      	cpsie	i
 800786a:	61bb      	str	r3, [r7, #24]
}
 800786c:	bf00      	nop
 800786e:	bf00      	nop
 8007870:	e7fd      	b.n	800786e <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007872:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007874:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007878:	f023 0301 	bic.w	r3, r3, #1
 800787c:	b2da      	uxtb	r2, r3
 800787e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007880:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007884:	e03f      	b.n	8007906 <prvProcessReceivedCommands+0x1b2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007886:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007888:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800788c:	f043 0301 	orr.w	r3, r3, #1
 8007890:	b2da      	uxtb	r2, r3
 8007892:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007894:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007898:	68ba      	ldr	r2, [r7, #8]
 800789a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800789c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800789e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078a0:	699b      	ldr	r3, [r3, #24]
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d10d      	bne.n	80078c2 <prvProcessReceivedCommands+0x16e>
	__asm volatile
 80078a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078aa:	b672      	cpsid	i
 80078ac:	f383 8811 	msr	BASEPRI, r3
 80078b0:	f3bf 8f6f 	isb	sy
 80078b4:	f3bf 8f4f 	dsb	sy
 80078b8:	b662      	cpsie	i
 80078ba:	617b      	str	r3, [r7, #20]
}
 80078bc:	bf00      	nop
 80078be:	bf00      	nop
 80078c0:	e7fd      	b.n	80078be <prvProcessReceivedCommands+0x16a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80078c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078c4:	699a      	ldr	r2, [r3, #24]
 80078c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078c8:	18d1      	adds	r1, r2, r3
 80078ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80078ce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80078d0:	f7ff fefe 	bl	80076d0 <prvInsertTimerInActiveList>
					break;
 80078d4:	e017      	b.n	8007906 <prvProcessReceivedCommands+0x1b2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80078d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078d8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80078dc:	f003 0302 	and.w	r3, r3, #2
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d103      	bne.n	80078ec <prvProcessReceivedCommands+0x198>
						{
							vPortFree( pxTimer );
 80078e4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80078e6:	f000 fbd5 	bl	8008094 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80078ea:	e00c      	b.n	8007906 <prvProcessReceivedCommands+0x1b2>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80078ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078ee:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80078f2:	f023 0301 	bic.w	r3, r3, #1
 80078f6:	b2da      	uxtb	r2, r3
 80078f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078fa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80078fe:	e002      	b.n	8007906 <prvProcessReceivedCommands+0x1b2>

				default	:
					/* Don't expect to get here. */
					break;
 8007900:	bf00      	nop
 8007902:	e000      	b.n	8007906 <prvProcessReceivedCommands+0x1b2>
					break;
 8007904:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007906:	4b08      	ldr	r3, [pc, #32]	@ (8007928 <prvProcessReceivedCommands+0x1d4>)
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	1d39      	adds	r1, r7, #4
 800790c:	2200      	movs	r2, #0
 800790e:	4618      	mov	r0, r3
 8007910:	f7fe f84a 	bl	80059a8 <xQueueReceive>
 8007914:	4603      	mov	r3, r0
 8007916:	2b00      	cmp	r3, #0
 8007918:	f47f af20 	bne.w	800775c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800791c:	bf00      	nop
 800791e:	bf00      	nop
 8007920:	3730      	adds	r7, #48	@ 0x30
 8007922:	46bd      	mov	sp, r7
 8007924:	bd80      	pop	{r7, pc}
 8007926:	bf00      	nop
 8007928:	20001540 	.word	0x20001540

0800792c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800792c:	b580      	push	{r7, lr}
 800792e:	b088      	sub	sp, #32
 8007930:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007932:	e04b      	b.n	80079cc <prvSwitchTimerLists+0xa0>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007934:	4b2f      	ldr	r3, [pc, #188]	@ (80079f4 <prvSwitchTimerLists+0xc8>)
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	68db      	ldr	r3, [r3, #12]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800793e:	4b2d      	ldr	r3, [pc, #180]	@ (80079f4 <prvSwitchTimerLists+0xc8>)
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	68db      	ldr	r3, [r3, #12]
 8007944:	68db      	ldr	r3, [r3, #12]
 8007946:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	3304      	adds	r3, #4
 800794c:	4618      	mov	r0, r3
 800794e:	f7fd fbeb 	bl	8005128 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	6a1b      	ldr	r3, [r3, #32]
 8007956:	68f8      	ldr	r0, [r7, #12]
 8007958:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007960:	f003 0304 	and.w	r3, r3, #4
 8007964:	2b00      	cmp	r3, #0
 8007966:	d031      	beq.n	80079cc <prvSwitchTimerLists+0xa0>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	699b      	ldr	r3, [r3, #24]
 800796c:	693a      	ldr	r2, [r7, #16]
 800796e:	4413      	add	r3, r2
 8007970:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007972:	68ba      	ldr	r2, [r7, #8]
 8007974:	693b      	ldr	r3, [r7, #16]
 8007976:	429a      	cmp	r2, r3
 8007978:	d90e      	bls.n	8007998 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	68ba      	ldr	r2, [r7, #8]
 800797e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	68fa      	ldr	r2, [r7, #12]
 8007984:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007986:	4b1b      	ldr	r3, [pc, #108]	@ (80079f4 <prvSwitchTimerLists+0xc8>)
 8007988:	681a      	ldr	r2, [r3, #0]
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	3304      	adds	r3, #4
 800798e:	4619      	mov	r1, r3
 8007990:	4610      	mov	r0, r2
 8007992:	f7fd fb90 	bl	80050b6 <vListInsert>
 8007996:	e019      	b.n	80079cc <prvSwitchTimerLists+0xa0>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007998:	2300      	movs	r3, #0
 800799a:	9300      	str	r3, [sp, #0]
 800799c:	2300      	movs	r3, #0
 800799e:	693a      	ldr	r2, [r7, #16]
 80079a0:	2100      	movs	r1, #0
 80079a2:	68f8      	ldr	r0, [r7, #12]
 80079a4:	f7ff fd4e 	bl	8007444 <xTimerGenericCommand>
 80079a8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d10d      	bne.n	80079cc <prvSwitchTimerLists+0xa0>
	__asm volatile
 80079b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079b4:	b672      	cpsid	i
 80079b6:	f383 8811 	msr	BASEPRI, r3
 80079ba:	f3bf 8f6f 	isb	sy
 80079be:	f3bf 8f4f 	dsb	sy
 80079c2:	b662      	cpsie	i
 80079c4:	603b      	str	r3, [r7, #0]
}
 80079c6:	bf00      	nop
 80079c8:	bf00      	nop
 80079ca:	e7fd      	b.n	80079c8 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80079cc:	4b09      	ldr	r3, [pc, #36]	@ (80079f4 <prvSwitchTimerLists+0xc8>)
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d1ae      	bne.n	8007934 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80079d6:	4b07      	ldr	r3, [pc, #28]	@ (80079f4 <prvSwitchTimerLists+0xc8>)
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80079dc:	4b06      	ldr	r3, [pc, #24]	@ (80079f8 <prvSwitchTimerLists+0xcc>)
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	4a04      	ldr	r2, [pc, #16]	@ (80079f4 <prvSwitchTimerLists+0xc8>)
 80079e2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80079e4:	4a04      	ldr	r2, [pc, #16]	@ (80079f8 <prvSwitchTimerLists+0xcc>)
 80079e6:	697b      	ldr	r3, [r7, #20]
 80079e8:	6013      	str	r3, [r2, #0]
}
 80079ea:	bf00      	nop
 80079ec:	3718      	adds	r7, #24
 80079ee:	46bd      	mov	sp, r7
 80079f0:	bd80      	pop	{r7, pc}
 80079f2:	bf00      	nop
 80079f4:	20001538 	.word	0x20001538
 80079f8:	2000153c 	.word	0x2000153c

080079fc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80079fc:	b580      	push	{r7, lr}
 80079fe:	b082      	sub	sp, #8
 8007a00:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007a02:	f000 f94b 	bl	8007c9c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007a06:	4b15      	ldr	r3, [pc, #84]	@ (8007a5c <prvCheckForValidListAndQueue+0x60>)
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d120      	bne.n	8007a50 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007a0e:	4814      	ldr	r0, [pc, #80]	@ (8007a60 <prvCheckForValidListAndQueue+0x64>)
 8007a10:	f7fd fb00 	bl	8005014 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007a14:	4813      	ldr	r0, [pc, #76]	@ (8007a64 <prvCheckForValidListAndQueue+0x68>)
 8007a16:	f7fd fafd 	bl	8005014 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007a1a:	4b13      	ldr	r3, [pc, #76]	@ (8007a68 <prvCheckForValidListAndQueue+0x6c>)
 8007a1c:	4a10      	ldr	r2, [pc, #64]	@ (8007a60 <prvCheckForValidListAndQueue+0x64>)
 8007a1e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007a20:	4b12      	ldr	r3, [pc, #72]	@ (8007a6c <prvCheckForValidListAndQueue+0x70>)
 8007a22:	4a10      	ldr	r2, [pc, #64]	@ (8007a64 <prvCheckForValidListAndQueue+0x68>)
 8007a24:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007a26:	2300      	movs	r3, #0
 8007a28:	9300      	str	r3, [sp, #0]
 8007a2a:	4b11      	ldr	r3, [pc, #68]	@ (8007a70 <prvCheckForValidListAndQueue+0x74>)
 8007a2c:	4a11      	ldr	r2, [pc, #68]	@ (8007a74 <prvCheckForValidListAndQueue+0x78>)
 8007a2e:	2110      	movs	r1, #16
 8007a30:	200a      	movs	r0, #10
 8007a32:	f7fd fc0f 	bl	8005254 <xQueueGenericCreateStatic>
 8007a36:	4603      	mov	r3, r0
 8007a38:	4a08      	ldr	r2, [pc, #32]	@ (8007a5c <prvCheckForValidListAndQueue+0x60>)
 8007a3a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007a3c:	4b07      	ldr	r3, [pc, #28]	@ (8007a5c <prvCheckForValidListAndQueue+0x60>)
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d005      	beq.n	8007a50 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007a44:	4b05      	ldr	r3, [pc, #20]	@ (8007a5c <prvCheckForValidListAndQueue+0x60>)
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	490b      	ldr	r1, [pc, #44]	@ (8007a78 <prvCheckForValidListAndQueue+0x7c>)
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	f7fe fbc4 	bl	80061d8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007a50:	f000 f95a 	bl	8007d08 <vPortExitCritical>
}
 8007a54:	bf00      	nop
 8007a56:	46bd      	mov	sp, r7
 8007a58:	bd80      	pop	{r7, pc}
 8007a5a:	bf00      	nop
 8007a5c:	20001540 	.word	0x20001540
 8007a60:	20001510 	.word	0x20001510
 8007a64:	20001524 	.word	0x20001524
 8007a68:	20001538 	.word	0x20001538
 8007a6c:	2000153c 	.word	0x2000153c
 8007a70:	200015ec 	.word	0x200015ec
 8007a74:	2000154c 	.word	0x2000154c
 8007a78:	08008dbc 	.word	0x08008dbc

08007a7c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007a7c:	b480      	push	{r7}
 8007a7e:	b085      	sub	sp, #20
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	60f8      	str	r0, [r7, #12]
 8007a84:	60b9      	str	r1, [r7, #8]
 8007a86:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	3b04      	subs	r3, #4
 8007a8c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007a94:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	3b04      	subs	r3, #4
 8007a9a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007a9c:	68bb      	ldr	r3, [r7, #8]
 8007a9e:	f023 0201 	bic.w	r2, r3, #1
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	3b04      	subs	r3, #4
 8007aaa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007aac:	4a0c      	ldr	r2, [pc, #48]	@ (8007ae0 <pxPortInitialiseStack+0x64>)
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	3b14      	subs	r3, #20
 8007ab6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007ab8:	687a      	ldr	r2, [r7, #4]
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	3b04      	subs	r3, #4
 8007ac2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	f06f 0202 	mvn.w	r2, #2
 8007aca:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	3b20      	subs	r3, #32
 8007ad0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007ad2:	68fb      	ldr	r3, [r7, #12]
}
 8007ad4:	4618      	mov	r0, r3
 8007ad6:	3714      	adds	r7, #20
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ade:	4770      	bx	lr
 8007ae0:	08007ae5 	.word	0x08007ae5

08007ae4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007ae4:	b480      	push	{r7}
 8007ae6:	b085      	sub	sp, #20
 8007ae8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007aea:	2300      	movs	r3, #0
 8007aec:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007aee:	4b15      	ldr	r3, [pc, #84]	@ (8007b44 <prvTaskExitError+0x60>)
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007af6:	d00d      	beq.n	8007b14 <prvTaskExitError+0x30>
	__asm volatile
 8007af8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007afc:	b672      	cpsid	i
 8007afe:	f383 8811 	msr	BASEPRI, r3
 8007b02:	f3bf 8f6f 	isb	sy
 8007b06:	f3bf 8f4f 	dsb	sy
 8007b0a:	b662      	cpsie	i
 8007b0c:	60fb      	str	r3, [r7, #12]
}
 8007b0e:	bf00      	nop
 8007b10:	bf00      	nop
 8007b12:	e7fd      	b.n	8007b10 <prvTaskExitError+0x2c>
	__asm volatile
 8007b14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b18:	b672      	cpsid	i
 8007b1a:	f383 8811 	msr	BASEPRI, r3
 8007b1e:	f3bf 8f6f 	isb	sy
 8007b22:	f3bf 8f4f 	dsb	sy
 8007b26:	b662      	cpsie	i
 8007b28:	60bb      	str	r3, [r7, #8]
}
 8007b2a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007b2c:	bf00      	nop
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d0fc      	beq.n	8007b2e <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007b34:	bf00      	nop
 8007b36:	bf00      	nop
 8007b38:	3714      	adds	r7, #20
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b40:	4770      	bx	lr
 8007b42:	bf00      	nop
 8007b44:	2000000c 	.word	0x2000000c
	...

08007b50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007b50:	4b07      	ldr	r3, [pc, #28]	@ (8007b70 <pxCurrentTCBConst2>)
 8007b52:	6819      	ldr	r1, [r3, #0]
 8007b54:	6808      	ldr	r0, [r1, #0]
 8007b56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b5a:	f380 8809 	msr	PSP, r0
 8007b5e:	f3bf 8f6f 	isb	sy
 8007b62:	f04f 0000 	mov.w	r0, #0
 8007b66:	f380 8811 	msr	BASEPRI, r0
 8007b6a:	4770      	bx	lr
 8007b6c:	f3af 8000 	nop.w

08007b70 <pxCurrentTCBConst2>:
 8007b70:	20001010 	.word	0x20001010
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007b74:	bf00      	nop
 8007b76:	bf00      	nop

08007b78 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007b78:	4808      	ldr	r0, [pc, #32]	@ (8007b9c <prvPortStartFirstTask+0x24>)
 8007b7a:	6800      	ldr	r0, [r0, #0]
 8007b7c:	6800      	ldr	r0, [r0, #0]
 8007b7e:	f380 8808 	msr	MSP, r0
 8007b82:	f04f 0000 	mov.w	r0, #0
 8007b86:	f380 8814 	msr	CONTROL, r0
 8007b8a:	b662      	cpsie	i
 8007b8c:	b661      	cpsie	f
 8007b8e:	f3bf 8f4f 	dsb	sy
 8007b92:	f3bf 8f6f 	isb	sy
 8007b96:	df00      	svc	0
 8007b98:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007b9a:	bf00      	nop
 8007b9c:	e000ed08 	.word	0xe000ed08

08007ba0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007ba0:	b580      	push	{r7, lr}
 8007ba2:	b084      	sub	sp, #16
 8007ba4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007ba6:	4b37      	ldr	r3, [pc, #220]	@ (8007c84 <xPortStartScheduler+0xe4>)
 8007ba8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	781b      	ldrb	r3, [r3, #0]
 8007bae:	b2db      	uxtb	r3, r3
 8007bb0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	22ff      	movs	r2, #255	@ 0xff
 8007bb6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	781b      	ldrb	r3, [r3, #0]
 8007bbc:	b2db      	uxtb	r3, r3
 8007bbe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007bc0:	78fb      	ldrb	r3, [r7, #3]
 8007bc2:	b2db      	uxtb	r3, r3
 8007bc4:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8007bc8:	b2da      	uxtb	r2, r3
 8007bca:	4b2f      	ldr	r3, [pc, #188]	@ (8007c88 <xPortStartScheduler+0xe8>)
 8007bcc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007bce:	4b2f      	ldr	r3, [pc, #188]	@ (8007c8c <xPortStartScheduler+0xec>)
 8007bd0:	2207      	movs	r2, #7
 8007bd2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007bd4:	e009      	b.n	8007bea <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8007bd6:	4b2d      	ldr	r3, [pc, #180]	@ (8007c8c <xPortStartScheduler+0xec>)
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	3b01      	subs	r3, #1
 8007bdc:	4a2b      	ldr	r2, [pc, #172]	@ (8007c8c <xPortStartScheduler+0xec>)
 8007bde:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007be0:	78fb      	ldrb	r3, [r7, #3]
 8007be2:	b2db      	uxtb	r3, r3
 8007be4:	005b      	lsls	r3, r3, #1
 8007be6:	b2db      	uxtb	r3, r3
 8007be8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007bea:	78fb      	ldrb	r3, [r7, #3]
 8007bec:	b2db      	uxtb	r3, r3
 8007bee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007bf2:	2b80      	cmp	r3, #128	@ 0x80
 8007bf4:	d0ef      	beq.n	8007bd6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007bf6:	4b25      	ldr	r3, [pc, #148]	@ (8007c8c <xPortStartScheduler+0xec>)
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	f1c3 0307 	rsb	r3, r3, #7
 8007bfe:	2b04      	cmp	r3, #4
 8007c00:	d00d      	beq.n	8007c1e <xPortStartScheduler+0x7e>
	__asm volatile
 8007c02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c06:	b672      	cpsid	i
 8007c08:	f383 8811 	msr	BASEPRI, r3
 8007c0c:	f3bf 8f6f 	isb	sy
 8007c10:	f3bf 8f4f 	dsb	sy
 8007c14:	b662      	cpsie	i
 8007c16:	60bb      	str	r3, [r7, #8]
}
 8007c18:	bf00      	nop
 8007c1a:	bf00      	nop
 8007c1c:	e7fd      	b.n	8007c1a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007c1e:	4b1b      	ldr	r3, [pc, #108]	@ (8007c8c <xPortStartScheduler+0xec>)
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	021b      	lsls	r3, r3, #8
 8007c24:	4a19      	ldr	r2, [pc, #100]	@ (8007c8c <xPortStartScheduler+0xec>)
 8007c26:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007c28:	4b18      	ldr	r3, [pc, #96]	@ (8007c8c <xPortStartScheduler+0xec>)
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007c30:	4a16      	ldr	r2, [pc, #88]	@ (8007c8c <xPortStartScheduler+0xec>)
 8007c32:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	b2da      	uxtb	r2, r3
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007c3c:	4b14      	ldr	r3, [pc, #80]	@ (8007c90 <xPortStartScheduler+0xf0>)
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	4a13      	ldr	r2, [pc, #76]	@ (8007c90 <xPortStartScheduler+0xf0>)
 8007c42:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007c46:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007c48:	4b11      	ldr	r3, [pc, #68]	@ (8007c90 <xPortStartScheduler+0xf0>)
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	4a10      	ldr	r2, [pc, #64]	@ (8007c90 <xPortStartScheduler+0xf0>)
 8007c4e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007c52:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007c54:	f000 f8dc 	bl	8007e10 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007c58:	4b0e      	ldr	r3, [pc, #56]	@ (8007c94 <xPortStartScheduler+0xf4>)
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007c5e:	f000 f8fb 	bl	8007e58 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007c62:	4b0d      	ldr	r3, [pc, #52]	@ (8007c98 <xPortStartScheduler+0xf8>)
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	4a0c      	ldr	r2, [pc, #48]	@ (8007c98 <xPortStartScheduler+0xf8>)
 8007c68:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8007c6c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007c6e:	f7ff ff83 	bl	8007b78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007c72:	f7fe ff25 	bl	8006ac0 <vTaskSwitchContext>
	prvTaskExitError();
 8007c76:	f7ff ff35 	bl	8007ae4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007c7a:	2300      	movs	r3, #0
}
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	3710      	adds	r7, #16
 8007c80:	46bd      	mov	sp, r7
 8007c82:	bd80      	pop	{r7, pc}
 8007c84:	e000e400 	.word	0xe000e400
 8007c88:	2000163c 	.word	0x2000163c
 8007c8c:	20001640 	.word	0x20001640
 8007c90:	e000ed20 	.word	0xe000ed20
 8007c94:	2000000c 	.word	0x2000000c
 8007c98:	e000ef34 	.word	0xe000ef34

08007c9c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007c9c:	b480      	push	{r7}
 8007c9e:	b083      	sub	sp, #12
 8007ca0:	af00      	add	r7, sp, #0
	__asm volatile
 8007ca2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ca6:	b672      	cpsid	i
 8007ca8:	f383 8811 	msr	BASEPRI, r3
 8007cac:	f3bf 8f6f 	isb	sy
 8007cb0:	f3bf 8f4f 	dsb	sy
 8007cb4:	b662      	cpsie	i
 8007cb6:	607b      	str	r3, [r7, #4]
}
 8007cb8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007cba:	4b11      	ldr	r3, [pc, #68]	@ (8007d00 <vPortEnterCritical+0x64>)
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	3301      	adds	r3, #1
 8007cc0:	4a0f      	ldr	r2, [pc, #60]	@ (8007d00 <vPortEnterCritical+0x64>)
 8007cc2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007cc4:	4b0e      	ldr	r3, [pc, #56]	@ (8007d00 <vPortEnterCritical+0x64>)
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	2b01      	cmp	r3, #1
 8007cca:	d112      	bne.n	8007cf2 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007ccc:	4b0d      	ldr	r3, [pc, #52]	@ (8007d04 <vPortEnterCritical+0x68>)
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	b2db      	uxtb	r3, r3
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d00d      	beq.n	8007cf2 <vPortEnterCritical+0x56>
	__asm volatile
 8007cd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cda:	b672      	cpsid	i
 8007cdc:	f383 8811 	msr	BASEPRI, r3
 8007ce0:	f3bf 8f6f 	isb	sy
 8007ce4:	f3bf 8f4f 	dsb	sy
 8007ce8:	b662      	cpsie	i
 8007cea:	603b      	str	r3, [r7, #0]
}
 8007cec:	bf00      	nop
 8007cee:	bf00      	nop
 8007cf0:	e7fd      	b.n	8007cee <vPortEnterCritical+0x52>
	}
}
 8007cf2:	bf00      	nop
 8007cf4:	370c      	adds	r7, #12
 8007cf6:	46bd      	mov	sp, r7
 8007cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfc:	4770      	bx	lr
 8007cfe:	bf00      	nop
 8007d00:	2000000c 	.word	0x2000000c
 8007d04:	e000ed04 	.word	0xe000ed04

08007d08 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007d08:	b480      	push	{r7}
 8007d0a:	b083      	sub	sp, #12
 8007d0c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007d0e:	4b13      	ldr	r3, [pc, #76]	@ (8007d5c <vPortExitCritical+0x54>)
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d10d      	bne.n	8007d32 <vPortExitCritical+0x2a>
	__asm volatile
 8007d16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d1a:	b672      	cpsid	i
 8007d1c:	f383 8811 	msr	BASEPRI, r3
 8007d20:	f3bf 8f6f 	isb	sy
 8007d24:	f3bf 8f4f 	dsb	sy
 8007d28:	b662      	cpsie	i
 8007d2a:	607b      	str	r3, [r7, #4]
}
 8007d2c:	bf00      	nop
 8007d2e:	bf00      	nop
 8007d30:	e7fd      	b.n	8007d2e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8007d32:	4b0a      	ldr	r3, [pc, #40]	@ (8007d5c <vPortExitCritical+0x54>)
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	3b01      	subs	r3, #1
 8007d38:	4a08      	ldr	r2, [pc, #32]	@ (8007d5c <vPortExitCritical+0x54>)
 8007d3a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007d3c:	4b07      	ldr	r3, [pc, #28]	@ (8007d5c <vPortExitCritical+0x54>)
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d105      	bne.n	8007d50 <vPortExitCritical+0x48>
 8007d44:	2300      	movs	r3, #0
 8007d46:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	f383 8811 	msr	BASEPRI, r3
}
 8007d4e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007d50:	bf00      	nop
 8007d52:	370c      	adds	r7, #12
 8007d54:	46bd      	mov	sp, r7
 8007d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5a:	4770      	bx	lr
 8007d5c:	2000000c 	.word	0x2000000c

08007d60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007d60:	f3ef 8009 	mrs	r0, PSP
 8007d64:	f3bf 8f6f 	isb	sy
 8007d68:	4b15      	ldr	r3, [pc, #84]	@ (8007dc0 <pxCurrentTCBConst>)
 8007d6a:	681a      	ldr	r2, [r3, #0]
 8007d6c:	f01e 0f10 	tst.w	lr, #16
 8007d70:	bf08      	it	eq
 8007d72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007d76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d7a:	6010      	str	r0, [r2, #0]
 8007d7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007d80:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007d84:	b672      	cpsid	i
 8007d86:	f380 8811 	msr	BASEPRI, r0
 8007d8a:	f3bf 8f4f 	dsb	sy
 8007d8e:	f3bf 8f6f 	isb	sy
 8007d92:	b662      	cpsie	i
 8007d94:	f7fe fe94 	bl	8006ac0 <vTaskSwitchContext>
 8007d98:	f04f 0000 	mov.w	r0, #0
 8007d9c:	f380 8811 	msr	BASEPRI, r0
 8007da0:	bc09      	pop	{r0, r3}
 8007da2:	6819      	ldr	r1, [r3, #0]
 8007da4:	6808      	ldr	r0, [r1, #0]
 8007da6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007daa:	f01e 0f10 	tst.w	lr, #16
 8007dae:	bf08      	it	eq
 8007db0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007db4:	f380 8809 	msr	PSP, r0
 8007db8:	f3bf 8f6f 	isb	sy
 8007dbc:	4770      	bx	lr
 8007dbe:	bf00      	nop

08007dc0 <pxCurrentTCBConst>:
 8007dc0:	20001010 	.word	0x20001010
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007dc4:	bf00      	nop
 8007dc6:	bf00      	nop

08007dc8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007dc8:	b580      	push	{r7, lr}
 8007dca:	b082      	sub	sp, #8
 8007dcc:	af00      	add	r7, sp, #0
	__asm volatile
 8007dce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007dd2:	b672      	cpsid	i
 8007dd4:	f383 8811 	msr	BASEPRI, r3
 8007dd8:	f3bf 8f6f 	isb	sy
 8007ddc:	f3bf 8f4f 	dsb	sy
 8007de0:	b662      	cpsie	i
 8007de2:	607b      	str	r3, [r7, #4]
}
 8007de4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007de6:	f7fe fdaf 	bl	8006948 <xTaskIncrementTick>
 8007dea:	4603      	mov	r3, r0
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d003      	beq.n	8007df8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007df0:	4b06      	ldr	r3, [pc, #24]	@ (8007e0c <SysTick_Handler+0x44>)
 8007df2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007df6:	601a      	str	r2, [r3, #0]
 8007df8:	2300      	movs	r3, #0
 8007dfa:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007dfc:	683b      	ldr	r3, [r7, #0]
 8007dfe:	f383 8811 	msr	BASEPRI, r3
}
 8007e02:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007e04:	bf00      	nop
 8007e06:	3708      	adds	r7, #8
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	bd80      	pop	{r7, pc}
 8007e0c:	e000ed04 	.word	0xe000ed04

08007e10 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007e10:	b480      	push	{r7}
 8007e12:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007e14:	4b0b      	ldr	r3, [pc, #44]	@ (8007e44 <vPortSetupTimerInterrupt+0x34>)
 8007e16:	2200      	movs	r2, #0
 8007e18:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007e1a:	4b0b      	ldr	r3, [pc, #44]	@ (8007e48 <vPortSetupTimerInterrupt+0x38>)
 8007e1c:	2200      	movs	r2, #0
 8007e1e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007e20:	4b0a      	ldr	r3, [pc, #40]	@ (8007e4c <vPortSetupTimerInterrupt+0x3c>)
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	4a0a      	ldr	r2, [pc, #40]	@ (8007e50 <vPortSetupTimerInterrupt+0x40>)
 8007e26:	fba2 2303 	umull	r2, r3, r2, r3
 8007e2a:	099b      	lsrs	r3, r3, #6
 8007e2c:	4a09      	ldr	r2, [pc, #36]	@ (8007e54 <vPortSetupTimerInterrupt+0x44>)
 8007e2e:	3b01      	subs	r3, #1
 8007e30:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007e32:	4b04      	ldr	r3, [pc, #16]	@ (8007e44 <vPortSetupTimerInterrupt+0x34>)
 8007e34:	2207      	movs	r2, #7
 8007e36:	601a      	str	r2, [r3, #0]
}
 8007e38:	bf00      	nop
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e40:	4770      	bx	lr
 8007e42:	bf00      	nop
 8007e44:	e000e010 	.word	0xe000e010
 8007e48:	e000e018 	.word	0xe000e018
 8007e4c:	20000000 	.word	0x20000000
 8007e50:	10624dd3 	.word	0x10624dd3
 8007e54:	e000e014 	.word	0xe000e014

08007e58 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007e58:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007e68 <vPortEnableVFP+0x10>
 8007e5c:	6801      	ldr	r1, [r0, #0]
 8007e5e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8007e62:	6001      	str	r1, [r0, #0]
 8007e64:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007e66:	bf00      	nop
 8007e68:	e000ed88 	.word	0xe000ed88

08007e6c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007e6c:	b480      	push	{r7}
 8007e6e:	b085      	sub	sp, #20
 8007e70:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007e72:	f3ef 8305 	mrs	r3, IPSR
 8007e76:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	2b0f      	cmp	r3, #15
 8007e7c:	d917      	bls.n	8007eae <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007e7e:	4a1a      	ldr	r2, [pc, #104]	@ (8007ee8 <vPortValidateInterruptPriority+0x7c>)
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	4413      	add	r3, r2
 8007e84:	781b      	ldrb	r3, [r3, #0]
 8007e86:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007e88:	4b18      	ldr	r3, [pc, #96]	@ (8007eec <vPortValidateInterruptPriority+0x80>)
 8007e8a:	781b      	ldrb	r3, [r3, #0]
 8007e8c:	7afa      	ldrb	r2, [r7, #11]
 8007e8e:	429a      	cmp	r2, r3
 8007e90:	d20d      	bcs.n	8007eae <vPortValidateInterruptPriority+0x42>
	__asm volatile
 8007e92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e96:	b672      	cpsid	i
 8007e98:	f383 8811 	msr	BASEPRI, r3
 8007e9c:	f3bf 8f6f 	isb	sy
 8007ea0:	f3bf 8f4f 	dsb	sy
 8007ea4:	b662      	cpsie	i
 8007ea6:	607b      	str	r3, [r7, #4]
}
 8007ea8:	bf00      	nop
 8007eaa:	bf00      	nop
 8007eac:	e7fd      	b.n	8007eaa <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007eae:	4b10      	ldr	r3, [pc, #64]	@ (8007ef0 <vPortValidateInterruptPriority+0x84>)
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8007eb6:	4b0f      	ldr	r3, [pc, #60]	@ (8007ef4 <vPortValidateInterruptPriority+0x88>)
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	429a      	cmp	r2, r3
 8007ebc:	d90d      	bls.n	8007eda <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 8007ebe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ec2:	b672      	cpsid	i
 8007ec4:	f383 8811 	msr	BASEPRI, r3
 8007ec8:	f3bf 8f6f 	isb	sy
 8007ecc:	f3bf 8f4f 	dsb	sy
 8007ed0:	b662      	cpsie	i
 8007ed2:	603b      	str	r3, [r7, #0]
}
 8007ed4:	bf00      	nop
 8007ed6:	bf00      	nop
 8007ed8:	e7fd      	b.n	8007ed6 <vPortValidateInterruptPriority+0x6a>
	}
 8007eda:	bf00      	nop
 8007edc:	3714      	adds	r7, #20
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee4:	4770      	bx	lr
 8007ee6:	bf00      	nop
 8007ee8:	e000e3f0 	.word	0xe000e3f0
 8007eec:	2000163c 	.word	0x2000163c
 8007ef0:	e000ed0c 	.word	0xe000ed0c
 8007ef4:	20001640 	.word	0x20001640

08007ef8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b08a      	sub	sp, #40	@ 0x28
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007f00:	2300      	movs	r3, #0
 8007f02:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007f04:	f7fe fc62 	bl	80067cc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007f08:	4b5d      	ldr	r3, [pc, #372]	@ (8008080 <pvPortMalloc+0x188>)
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d101      	bne.n	8007f14 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007f10:	f000 f920 	bl	8008154 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007f14:	4b5b      	ldr	r3, [pc, #364]	@ (8008084 <pvPortMalloc+0x18c>)
 8007f16:	681a      	ldr	r2, [r3, #0]
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	4013      	ands	r3, r2
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	f040 8094 	bne.w	800804a <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d020      	beq.n	8007f6a <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 8007f28:	2208      	movs	r2, #8
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	4413      	add	r3, r2
 8007f2e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	f003 0307 	and.w	r3, r3, #7
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d017      	beq.n	8007f6a <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	f023 0307 	bic.w	r3, r3, #7
 8007f40:	3308      	adds	r3, #8
 8007f42:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	f003 0307 	and.w	r3, r3, #7
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d00d      	beq.n	8007f6a <pvPortMalloc+0x72>
	__asm volatile
 8007f4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f52:	b672      	cpsid	i
 8007f54:	f383 8811 	msr	BASEPRI, r3
 8007f58:	f3bf 8f6f 	isb	sy
 8007f5c:	f3bf 8f4f 	dsb	sy
 8007f60:	b662      	cpsie	i
 8007f62:	617b      	str	r3, [r7, #20]
}
 8007f64:	bf00      	nop
 8007f66:	bf00      	nop
 8007f68:	e7fd      	b.n	8007f66 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d06c      	beq.n	800804a <pvPortMalloc+0x152>
 8007f70:	4b45      	ldr	r3, [pc, #276]	@ (8008088 <pvPortMalloc+0x190>)
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	687a      	ldr	r2, [r7, #4]
 8007f76:	429a      	cmp	r2, r3
 8007f78:	d867      	bhi.n	800804a <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007f7a:	4b44      	ldr	r3, [pc, #272]	@ (800808c <pvPortMalloc+0x194>)
 8007f7c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007f7e:	4b43      	ldr	r3, [pc, #268]	@ (800808c <pvPortMalloc+0x194>)
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007f84:	e004      	b.n	8007f90 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 8007f86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f88:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007f8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007f90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f92:	685b      	ldr	r3, [r3, #4]
 8007f94:	687a      	ldr	r2, [r7, #4]
 8007f96:	429a      	cmp	r2, r3
 8007f98:	d903      	bls.n	8007fa2 <pvPortMalloc+0xaa>
 8007f9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d1f1      	bne.n	8007f86 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007fa2:	4b37      	ldr	r3, [pc, #220]	@ (8008080 <pvPortMalloc+0x188>)
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007fa8:	429a      	cmp	r2, r3
 8007faa:	d04e      	beq.n	800804a <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007fac:	6a3b      	ldr	r3, [r7, #32]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	2208      	movs	r2, #8
 8007fb2:	4413      	add	r3, r2
 8007fb4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007fb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fb8:	681a      	ldr	r2, [r3, #0]
 8007fba:	6a3b      	ldr	r3, [r7, #32]
 8007fbc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007fbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fc0:	685a      	ldr	r2, [r3, #4]
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	1ad2      	subs	r2, r2, r3
 8007fc6:	2308      	movs	r3, #8
 8007fc8:	005b      	lsls	r3, r3, #1
 8007fca:	429a      	cmp	r2, r3
 8007fcc:	d922      	bls.n	8008014 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007fce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	4413      	add	r3, r2
 8007fd4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007fd6:	69bb      	ldr	r3, [r7, #24]
 8007fd8:	f003 0307 	and.w	r3, r3, #7
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d00d      	beq.n	8007ffc <pvPortMalloc+0x104>
	__asm volatile
 8007fe0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fe4:	b672      	cpsid	i
 8007fe6:	f383 8811 	msr	BASEPRI, r3
 8007fea:	f3bf 8f6f 	isb	sy
 8007fee:	f3bf 8f4f 	dsb	sy
 8007ff2:	b662      	cpsie	i
 8007ff4:	613b      	str	r3, [r7, #16]
}
 8007ff6:	bf00      	nop
 8007ff8:	bf00      	nop
 8007ffa:	e7fd      	b.n	8007ff8 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007ffc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ffe:	685a      	ldr	r2, [r3, #4]
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	1ad2      	subs	r2, r2, r3
 8008004:	69bb      	ldr	r3, [r7, #24]
 8008006:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008008:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800800a:	687a      	ldr	r2, [r7, #4]
 800800c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800800e:	69b8      	ldr	r0, [r7, #24]
 8008010:	f000 f902 	bl	8008218 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008014:	4b1c      	ldr	r3, [pc, #112]	@ (8008088 <pvPortMalloc+0x190>)
 8008016:	681a      	ldr	r2, [r3, #0]
 8008018:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800801a:	685b      	ldr	r3, [r3, #4]
 800801c:	1ad3      	subs	r3, r2, r3
 800801e:	4a1a      	ldr	r2, [pc, #104]	@ (8008088 <pvPortMalloc+0x190>)
 8008020:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008022:	4b19      	ldr	r3, [pc, #100]	@ (8008088 <pvPortMalloc+0x190>)
 8008024:	681a      	ldr	r2, [r3, #0]
 8008026:	4b1a      	ldr	r3, [pc, #104]	@ (8008090 <pvPortMalloc+0x198>)
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	429a      	cmp	r2, r3
 800802c:	d203      	bcs.n	8008036 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800802e:	4b16      	ldr	r3, [pc, #88]	@ (8008088 <pvPortMalloc+0x190>)
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	4a17      	ldr	r2, [pc, #92]	@ (8008090 <pvPortMalloc+0x198>)
 8008034:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008038:	685a      	ldr	r2, [r3, #4]
 800803a:	4b12      	ldr	r3, [pc, #72]	@ (8008084 <pvPortMalloc+0x18c>)
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	431a      	orrs	r2, r3
 8008040:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008042:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008044:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008046:	2200      	movs	r2, #0
 8008048:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800804a:	f7fe fbcd 	bl	80067e8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800804e:	69fb      	ldr	r3, [r7, #28]
 8008050:	f003 0307 	and.w	r3, r3, #7
 8008054:	2b00      	cmp	r3, #0
 8008056:	d00d      	beq.n	8008074 <pvPortMalloc+0x17c>
	__asm volatile
 8008058:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800805c:	b672      	cpsid	i
 800805e:	f383 8811 	msr	BASEPRI, r3
 8008062:	f3bf 8f6f 	isb	sy
 8008066:	f3bf 8f4f 	dsb	sy
 800806a:	b662      	cpsie	i
 800806c:	60fb      	str	r3, [r7, #12]
}
 800806e:	bf00      	nop
 8008070:	bf00      	nop
 8008072:	e7fd      	b.n	8008070 <pvPortMalloc+0x178>
	return pvReturn;
 8008074:	69fb      	ldr	r3, [r7, #28]
}
 8008076:	4618      	mov	r0, r3
 8008078:	3728      	adds	r7, #40	@ 0x28
 800807a:	46bd      	mov	sp, r7
 800807c:	bd80      	pop	{r7, pc}
 800807e:	bf00      	nop
 8008080:	2000524c 	.word	0x2000524c
 8008084:	20005258 	.word	0x20005258
 8008088:	20005250 	.word	0x20005250
 800808c:	20005244 	.word	0x20005244
 8008090:	20005254 	.word	0x20005254

08008094 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008094:	b580      	push	{r7, lr}
 8008096:	b086      	sub	sp, #24
 8008098:	af00      	add	r7, sp, #0
 800809a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d04e      	beq.n	8008144 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80080a6:	2308      	movs	r3, #8
 80080a8:	425b      	negs	r3, r3
 80080aa:	697a      	ldr	r2, [r7, #20]
 80080ac:	4413      	add	r3, r2
 80080ae:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80080b0:	697b      	ldr	r3, [r7, #20]
 80080b2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80080b4:	693b      	ldr	r3, [r7, #16]
 80080b6:	685a      	ldr	r2, [r3, #4]
 80080b8:	4b24      	ldr	r3, [pc, #144]	@ (800814c <vPortFree+0xb8>)
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	4013      	ands	r3, r2
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d10d      	bne.n	80080de <vPortFree+0x4a>
	__asm volatile
 80080c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080c6:	b672      	cpsid	i
 80080c8:	f383 8811 	msr	BASEPRI, r3
 80080cc:	f3bf 8f6f 	isb	sy
 80080d0:	f3bf 8f4f 	dsb	sy
 80080d4:	b662      	cpsie	i
 80080d6:	60fb      	str	r3, [r7, #12]
}
 80080d8:	bf00      	nop
 80080da:	bf00      	nop
 80080dc:	e7fd      	b.n	80080da <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80080de:	693b      	ldr	r3, [r7, #16]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d00d      	beq.n	8008102 <vPortFree+0x6e>
	__asm volatile
 80080e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080ea:	b672      	cpsid	i
 80080ec:	f383 8811 	msr	BASEPRI, r3
 80080f0:	f3bf 8f6f 	isb	sy
 80080f4:	f3bf 8f4f 	dsb	sy
 80080f8:	b662      	cpsie	i
 80080fa:	60bb      	str	r3, [r7, #8]
}
 80080fc:	bf00      	nop
 80080fe:	bf00      	nop
 8008100:	e7fd      	b.n	80080fe <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008102:	693b      	ldr	r3, [r7, #16]
 8008104:	685a      	ldr	r2, [r3, #4]
 8008106:	4b11      	ldr	r3, [pc, #68]	@ (800814c <vPortFree+0xb8>)
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	4013      	ands	r3, r2
 800810c:	2b00      	cmp	r3, #0
 800810e:	d019      	beq.n	8008144 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008110:	693b      	ldr	r3, [r7, #16]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	2b00      	cmp	r3, #0
 8008116:	d115      	bne.n	8008144 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008118:	693b      	ldr	r3, [r7, #16]
 800811a:	685a      	ldr	r2, [r3, #4]
 800811c:	4b0b      	ldr	r3, [pc, #44]	@ (800814c <vPortFree+0xb8>)
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	43db      	mvns	r3, r3
 8008122:	401a      	ands	r2, r3
 8008124:	693b      	ldr	r3, [r7, #16]
 8008126:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008128:	f7fe fb50 	bl	80067cc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800812c:	693b      	ldr	r3, [r7, #16]
 800812e:	685a      	ldr	r2, [r3, #4]
 8008130:	4b07      	ldr	r3, [pc, #28]	@ (8008150 <vPortFree+0xbc>)
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	4413      	add	r3, r2
 8008136:	4a06      	ldr	r2, [pc, #24]	@ (8008150 <vPortFree+0xbc>)
 8008138:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800813a:	6938      	ldr	r0, [r7, #16]
 800813c:	f000 f86c 	bl	8008218 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008140:	f7fe fb52 	bl	80067e8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008144:	bf00      	nop
 8008146:	3718      	adds	r7, #24
 8008148:	46bd      	mov	sp, r7
 800814a:	bd80      	pop	{r7, pc}
 800814c:	20005258 	.word	0x20005258
 8008150:	20005250 	.word	0x20005250

08008154 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008154:	b480      	push	{r7}
 8008156:	b085      	sub	sp, #20
 8008158:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800815a:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800815e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008160:	4b27      	ldr	r3, [pc, #156]	@ (8008200 <prvHeapInit+0xac>)
 8008162:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	f003 0307 	and.w	r3, r3, #7
 800816a:	2b00      	cmp	r3, #0
 800816c:	d00c      	beq.n	8008188 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	3307      	adds	r3, #7
 8008172:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	f023 0307 	bic.w	r3, r3, #7
 800817a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800817c:	68ba      	ldr	r2, [r7, #8]
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	1ad3      	subs	r3, r2, r3
 8008182:	4a1f      	ldr	r2, [pc, #124]	@ (8008200 <prvHeapInit+0xac>)
 8008184:	4413      	add	r3, r2
 8008186:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800818c:	4a1d      	ldr	r2, [pc, #116]	@ (8008204 <prvHeapInit+0xb0>)
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008192:	4b1c      	ldr	r3, [pc, #112]	@ (8008204 <prvHeapInit+0xb0>)
 8008194:	2200      	movs	r2, #0
 8008196:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	68ba      	ldr	r2, [r7, #8]
 800819c:	4413      	add	r3, r2
 800819e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80081a0:	2208      	movs	r2, #8
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	1a9b      	subs	r3, r3, r2
 80081a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	f023 0307 	bic.w	r3, r3, #7
 80081ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	4a15      	ldr	r2, [pc, #84]	@ (8008208 <prvHeapInit+0xb4>)
 80081b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80081b6:	4b14      	ldr	r3, [pc, #80]	@ (8008208 <prvHeapInit+0xb4>)
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	2200      	movs	r2, #0
 80081bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80081be:	4b12      	ldr	r3, [pc, #72]	@ (8008208 <prvHeapInit+0xb4>)
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	2200      	movs	r2, #0
 80081c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80081ca:	683b      	ldr	r3, [r7, #0]
 80081cc:	68fa      	ldr	r2, [r7, #12]
 80081ce:	1ad2      	subs	r2, r2, r3
 80081d0:	683b      	ldr	r3, [r7, #0]
 80081d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80081d4:	4b0c      	ldr	r3, [pc, #48]	@ (8008208 <prvHeapInit+0xb4>)
 80081d6:	681a      	ldr	r2, [r3, #0]
 80081d8:	683b      	ldr	r3, [r7, #0]
 80081da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80081dc:	683b      	ldr	r3, [r7, #0]
 80081de:	685b      	ldr	r3, [r3, #4]
 80081e0:	4a0a      	ldr	r2, [pc, #40]	@ (800820c <prvHeapInit+0xb8>)
 80081e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80081e4:	683b      	ldr	r3, [r7, #0]
 80081e6:	685b      	ldr	r3, [r3, #4]
 80081e8:	4a09      	ldr	r2, [pc, #36]	@ (8008210 <prvHeapInit+0xbc>)
 80081ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80081ec:	4b09      	ldr	r3, [pc, #36]	@ (8008214 <prvHeapInit+0xc0>)
 80081ee:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80081f2:	601a      	str	r2, [r3, #0]
}
 80081f4:	bf00      	nop
 80081f6:	3714      	adds	r7, #20
 80081f8:	46bd      	mov	sp, r7
 80081fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fe:	4770      	bx	lr
 8008200:	20001644 	.word	0x20001644
 8008204:	20005244 	.word	0x20005244
 8008208:	2000524c 	.word	0x2000524c
 800820c:	20005254 	.word	0x20005254
 8008210:	20005250 	.word	0x20005250
 8008214:	20005258 	.word	0x20005258

08008218 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008218:	b480      	push	{r7}
 800821a:	b085      	sub	sp, #20
 800821c:	af00      	add	r7, sp, #0
 800821e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008220:	4b28      	ldr	r3, [pc, #160]	@ (80082c4 <prvInsertBlockIntoFreeList+0xac>)
 8008222:	60fb      	str	r3, [r7, #12]
 8008224:	e002      	b.n	800822c <prvInsertBlockIntoFreeList+0x14>
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	60fb      	str	r3, [r7, #12]
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	687a      	ldr	r2, [r7, #4]
 8008232:	429a      	cmp	r2, r3
 8008234:	d8f7      	bhi.n	8008226 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	685b      	ldr	r3, [r3, #4]
 800823e:	68ba      	ldr	r2, [r7, #8]
 8008240:	4413      	add	r3, r2
 8008242:	687a      	ldr	r2, [r7, #4]
 8008244:	429a      	cmp	r2, r3
 8008246:	d108      	bne.n	800825a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	685a      	ldr	r2, [r3, #4]
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	685b      	ldr	r3, [r3, #4]
 8008250:	441a      	add	r2, r3
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	685b      	ldr	r3, [r3, #4]
 8008262:	68ba      	ldr	r2, [r7, #8]
 8008264:	441a      	add	r2, r3
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	429a      	cmp	r2, r3
 800826c:	d118      	bne.n	80082a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	681a      	ldr	r2, [r3, #0]
 8008272:	4b15      	ldr	r3, [pc, #84]	@ (80082c8 <prvInsertBlockIntoFreeList+0xb0>)
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	429a      	cmp	r2, r3
 8008278:	d00d      	beq.n	8008296 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	685a      	ldr	r2, [r3, #4]
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	685b      	ldr	r3, [r3, #4]
 8008284:	441a      	add	r2, r3
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	681a      	ldr	r2, [r3, #0]
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	601a      	str	r2, [r3, #0]
 8008294:	e008      	b.n	80082a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008296:	4b0c      	ldr	r3, [pc, #48]	@ (80082c8 <prvInsertBlockIntoFreeList+0xb0>)
 8008298:	681a      	ldr	r2, [r3, #0]
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	601a      	str	r2, [r3, #0]
 800829e:	e003      	b.n	80082a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	681a      	ldr	r2, [r3, #0]
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80082a8:	68fa      	ldr	r2, [r7, #12]
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	429a      	cmp	r2, r3
 80082ae:	d002      	beq.n	80082b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	687a      	ldr	r2, [r7, #4]
 80082b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80082b6:	bf00      	nop
 80082b8:	3714      	adds	r7, #20
 80082ba:	46bd      	mov	sp, r7
 80082bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c0:	4770      	bx	lr
 80082c2:	bf00      	nop
 80082c4:	20005244 	.word	0x20005244
 80082c8:	2000524c 	.word	0x2000524c

080082cc <siprintf>:
 80082cc:	b40e      	push	{r1, r2, r3}
 80082ce:	b510      	push	{r4, lr}
 80082d0:	b09d      	sub	sp, #116	@ 0x74
 80082d2:	ab1f      	add	r3, sp, #124	@ 0x7c
 80082d4:	9002      	str	r0, [sp, #8]
 80082d6:	9006      	str	r0, [sp, #24]
 80082d8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80082dc:	480a      	ldr	r0, [pc, #40]	@ (8008308 <siprintf+0x3c>)
 80082de:	9107      	str	r1, [sp, #28]
 80082e0:	9104      	str	r1, [sp, #16]
 80082e2:	490a      	ldr	r1, [pc, #40]	@ (800830c <siprintf+0x40>)
 80082e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80082e8:	9105      	str	r1, [sp, #20]
 80082ea:	2400      	movs	r4, #0
 80082ec:	a902      	add	r1, sp, #8
 80082ee:	6800      	ldr	r0, [r0, #0]
 80082f0:	9301      	str	r3, [sp, #4]
 80082f2:	941b      	str	r4, [sp, #108]	@ 0x6c
 80082f4:	f000 fa00 	bl	80086f8 <_svfiprintf_r>
 80082f8:	9b02      	ldr	r3, [sp, #8]
 80082fa:	701c      	strb	r4, [r3, #0]
 80082fc:	b01d      	add	sp, #116	@ 0x74
 80082fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008302:	b003      	add	sp, #12
 8008304:	4770      	bx	lr
 8008306:	bf00      	nop
 8008308:	20000010 	.word	0x20000010
 800830c:	ffff0208 	.word	0xffff0208

08008310 <memset>:
 8008310:	4402      	add	r2, r0
 8008312:	4603      	mov	r3, r0
 8008314:	4293      	cmp	r3, r2
 8008316:	d100      	bne.n	800831a <memset+0xa>
 8008318:	4770      	bx	lr
 800831a:	f803 1b01 	strb.w	r1, [r3], #1
 800831e:	e7f9      	b.n	8008314 <memset+0x4>

08008320 <_reclaim_reent>:
 8008320:	4b2d      	ldr	r3, [pc, #180]	@ (80083d8 <_reclaim_reent+0xb8>)
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	4283      	cmp	r3, r0
 8008326:	b570      	push	{r4, r5, r6, lr}
 8008328:	4604      	mov	r4, r0
 800832a:	d053      	beq.n	80083d4 <_reclaim_reent+0xb4>
 800832c:	69c3      	ldr	r3, [r0, #28]
 800832e:	b31b      	cbz	r3, 8008378 <_reclaim_reent+0x58>
 8008330:	68db      	ldr	r3, [r3, #12]
 8008332:	b163      	cbz	r3, 800834e <_reclaim_reent+0x2e>
 8008334:	2500      	movs	r5, #0
 8008336:	69e3      	ldr	r3, [r4, #28]
 8008338:	68db      	ldr	r3, [r3, #12]
 800833a:	5959      	ldr	r1, [r3, r5]
 800833c:	b9b1      	cbnz	r1, 800836c <_reclaim_reent+0x4c>
 800833e:	3504      	adds	r5, #4
 8008340:	2d80      	cmp	r5, #128	@ 0x80
 8008342:	d1f8      	bne.n	8008336 <_reclaim_reent+0x16>
 8008344:	69e3      	ldr	r3, [r4, #28]
 8008346:	4620      	mov	r0, r4
 8008348:	68d9      	ldr	r1, [r3, #12]
 800834a:	f000 f881 	bl	8008450 <_free_r>
 800834e:	69e3      	ldr	r3, [r4, #28]
 8008350:	6819      	ldr	r1, [r3, #0]
 8008352:	b111      	cbz	r1, 800835a <_reclaim_reent+0x3a>
 8008354:	4620      	mov	r0, r4
 8008356:	f000 f87b 	bl	8008450 <_free_r>
 800835a:	69e3      	ldr	r3, [r4, #28]
 800835c:	689d      	ldr	r5, [r3, #8]
 800835e:	b15d      	cbz	r5, 8008378 <_reclaim_reent+0x58>
 8008360:	4629      	mov	r1, r5
 8008362:	4620      	mov	r0, r4
 8008364:	682d      	ldr	r5, [r5, #0]
 8008366:	f000 f873 	bl	8008450 <_free_r>
 800836a:	e7f8      	b.n	800835e <_reclaim_reent+0x3e>
 800836c:	680e      	ldr	r6, [r1, #0]
 800836e:	4620      	mov	r0, r4
 8008370:	f000 f86e 	bl	8008450 <_free_r>
 8008374:	4631      	mov	r1, r6
 8008376:	e7e1      	b.n	800833c <_reclaim_reent+0x1c>
 8008378:	6961      	ldr	r1, [r4, #20]
 800837a:	b111      	cbz	r1, 8008382 <_reclaim_reent+0x62>
 800837c:	4620      	mov	r0, r4
 800837e:	f000 f867 	bl	8008450 <_free_r>
 8008382:	69e1      	ldr	r1, [r4, #28]
 8008384:	b111      	cbz	r1, 800838c <_reclaim_reent+0x6c>
 8008386:	4620      	mov	r0, r4
 8008388:	f000 f862 	bl	8008450 <_free_r>
 800838c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800838e:	b111      	cbz	r1, 8008396 <_reclaim_reent+0x76>
 8008390:	4620      	mov	r0, r4
 8008392:	f000 f85d 	bl	8008450 <_free_r>
 8008396:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008398:	b111      	cbz	r1, 80083a0 <_reclaim_reent+0x80>
 800839a:	4620      	mov	r0, r4
 800839c:	f000 f858 	bl	8008450 <_free_r>
 80083a0:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80083a2:	b111      	cbz	r1, 80083aa <_reclaim_reent+0x8a>
 80083a4:	4620      	mov	r0, r4
 80083a6:	f000 f853 	bl	8008450 <_free_r>
 80083aa:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80083ac:	b111      	cbz	r1, 80083b4 <_reclaim_reent+0x94>
 80083ae:	4620      	mov	r0, r4
 80083b0:	f000 f84e 	bl	8008450 <_free_r>
 80083b4:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80083b6:	b111      	cbz	r1, 80083be <_reclaim_reent+0x9e>
 80083b8:	4620      	mov	r0, r4
 80083ba:	f000 f849 	bl	8008450 <_free_r>
 80083be:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80083c0:	b111      	cbz	r1, 80083c8 <_reclaim_reent+0xa8>
 80083c2:	4620      	mov	r0, r4
 80083c4:	f000 f844 	bl	8008450 <_free_r>
 80083c8:	6a23      	ldr	r3, [r4, #32]
 80083ca:	b11b      	cbz	r3, 80083d4 <_reclaim_reent+0xb4>
 80083cc:	4620      	mov	r0, r4
 80083ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80083d2:	4718      	bx	r3
 80083d4:	bd70      	pop	{r4, r5, r6, pc}
 80083d6:	bf00      	nop
 80083d8:	20000010 	.word	0x20000010

080083dc <__errno>:
 80083dc:	4b01      	ldr	r3, [pc, #4]	@ (80083e4 <__errno+0x8>)
 80083de:	6818      	ldr	r0, [r3, #0]
 80083e0:	4770      	bx	lr
 80083e2:	bf00      	nop
 80083e4:	20000010 	.word	0x20000010

080083e8 <__libc_init_array>:
 80083e8:	b570      	push	{r4, r5, r6, lr}
 80083ea:	4d0d      	ldr	r5, [pc, #52]	@ (8008420 <__libc_init_array+0x38>)
 80083ec:	4c0d      	ldr	r4, [pc, #52]	@ (8008424 <__libc_init_array+0x3c>)
 80083ee:	1b64      	subs	r4, r4, r5
 80083f0:	10a4      	asrs	r4, r4, #2
 80083f2:	2600      	movs	r6, #0
 80083f4:	42a6      	cmp	r6, r4
 80083f6:	d109      	bne.n	800840c <__libc_init_array+0x24>
 80083f8:	4d0b      	ldr	r5, [pc, #44]	@ (8008428 <__libc_init_array+0x40>)
 80083fa:	4c0c      	ldr	r4, [pc, #48]	@ (800842c <__libc_init_array+0x44>)
 80083fc:	f000 fc64 	bl	8008cc8 <_init>
 8008400:	1b64      	subs	r4, r4, r5
 8008402:	10a4      	asrs	r4, r4, #2
 8008404:	2600      	movs	r6, #0
 8008406:	42a6      	cmp	r6, r4
 8008408:	d105      	bne.n	8008416 <__libc_init_array+0x2e>
 800840a:	bd70      	pop	{r4, r5, r6, pc}
 800840c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008410:	4798      	blx	r3
 8008412:	3601      	adds	r6, #1
 8008414:	e7ee      	b.n	80083f4 <__libc_init_array+0xc>
 8008416:	f855 3b04 	ldr.w	r3, [r5], #4
 800841a:	4798      	blx	r3
 800841c:	3601      	adds	r6, #1
 800841e:	e7f2      	b.n	8008406 <__libc_init_array+0x1e>
 8008420:	08008e94 	.word	0x08008e94
 8008424:	08008e94 	.word	0x08008e94
 8008428:	08008e94 	.word	0x08008e94
 800842c:	08008e98 	.word	0x08008e98

08008430 <__retarget_lock_acquire_recursive>:
 8008430:	4770      	bx	lr

08008432 <__retarget_lock_release_recursive>:
 8008432:	4770      	bx	lr

08008434 <memcpy>:
 8008434:	440a      	add	r2, r1
 8008436:	4291      	cmp	r1, r2
 8008438:	f100 33ff 	add.w	r3, r0, #4294967295
 800843c:	d100      	bne.n	8008440 <memcpy+0xc>
 800843e:	4770      	bx	lr
 8008440:	b510      	push	{r4, lr}
 8008442:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008446:	f803 4f01 	strb.w	r4, [r3, #1]!
 800844a:	4291      	cmp	r1, r2
 800844c:	d1f9      	bne.n	8008442 <memcpy+0xe>
 800844e:	bd10      	pop	{r4, pc}

08008450 <_free_r>:
 8008450:	b538      	push	{r3, r4, r5, lr}
 8008452:	4605      	mov	r5, r0
 8008454:	2900      	cmp	r1, #0
 8008456:	d041      	beq.n	80084dc <_free_r+0x8c>
 8008458:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800845c:	1f0c      	subs	r4, r1, #4
 800845e:	2b00      	cmp	r3, #0
 8008460:	bfb8      	it	lt
 8008462:	18e4      	addlt	r4, r4, r3
 8008464:	f000 f8e0 	bl	8008628 <__malloc_lock>
 8008468:	4a1d      	ldr	r2, [pc, #116]	@ (80084e0 <_free_r+0x90>)
 800846a:	6813      	ldr	r3, [r2, #0]
 800846c:	b933      	cbnz	r3, 800847c <_free_r+0x2c>
 800846e:	6063      	str	r3, [r4, #4]
 8008470:	6014      	str	r4, [r2, #0]
 8008472:	4628      	mov	r0, r5
 8008474:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008478:	f000 b8dc 	b.w	8008634 <__malloc_unlock>
 800847c:	42a3      	cmp	r3, r4
 800847e:	d908      	bls.n	8008492 <_free_r+0x42>
 8008480:	6820      	ldr	r0, [r4, #0]
 8008482:	1821      	adds	r1, r4, r0
 8008484:	428b      	cmp	r3, r1
 8008486:	bf01      	itttt	eq
 8008488:	6819      	ldreq	r1, [r3, #0]
 800848a:	685b      	ldreq	r3, [r3, #4]
 800848c:	1809      	addeq	r1, r1, r0
 800848e:	6021      	streq	r1, [r4, #0]
 8008490:	e7ed      	b.n	800846e <_free_r+0x1e>
 8008492:	461a      	mov	r2, r3
 8008494:	685b      	ldr	r3, [r3, #4]
 8008496:	b10b      	cbz	r3, 800849c <_free_r+0x4c>
 8008498:	42a3      	cmp	r3, r4
 800849a:	d9fa      	bls.n	8008492 <_free_r+0x42>
 800849c:	6811      	ldr	r1, [r2, #0]
 800849e:	1850      	adds	r0, r2, r1
 80084a0:	42a0      	cmp	r0, r4
 80084a2:	d10b      	bne.n	80084bc <_free_r+0x6c>
 80084a4:	6820      	ldr	r0, [r4, #0]
 80084a6:	4401      	add	r1, r0
 80084a8:	1850      	adds	r0, r2, r1
 80084aa:	4283      	cmp	r3, r0
 80084ac:	6011      	str	r1, [r2, #0]
 80084ae:	d1e0      	bne.n	8008472 <_free_r+0x22>
 80084b0:	6818      	ldr	r0, [r3, #0]
 80084b2:	685b      	ldr	r3, [r3, #4]
 80084b4:	6053      	str	r3, [r2, #4]
 80084b6:	4408      	add	r0, r1
 80084b8:	6010      	str	r0, [r2, #0]
 80084ba:	e7da      	b.n	8008472 <_free_r+0x22>
 80084bc:	d902      	bls.n	80084c4 <_free_r+0x74>
 80084be:	230c      	movs	r3, #12
 80084c0:	602b      	str	r3, [r5, #0]
 80084c2:	e7d6      	b.n	8008472 <_free_r+0x22>
 80084c4:	6820      	ldr	r0, [r4, #0]
 80084c6:	1821      	adds	r1, r4, r0
 80084c8:	428b      	cmp	r3, r1
 80084ca:	bf04      	itt	eq
 80084cc:	6819      	ldreq	r1, [r3, #0]
 80084ce:	685b      	ldreq	r3, [r3, #4]
 80084d0:	6063      	str	r3, [r4, #4]
 80084d2:	bf04      	itt	eq
 80084d4:	1809      	addeq	r1, r1, r0
 80084d6:	6021      	streq	r1, [r4, #0]
 80084d8:	6054      	str	r4, [r2, #4]
 80084da:	e7ca      	b.n	8008472 <_free_r+0x22>
 80084dc:	bd38      	pop	{r3, r4, r5, pc}
 80084de:	bf00      	nop
 80084e0:	200053a0 	.word	0x200053a0

080084e4 <sbrk_aligned>:
 80084e4:	b570      	push	{r4, r5, r6, lr}
 80084e6:	4e0f      	ldr	r6, [pc, #60]	@ (8008524 <sbrk_aligned+0x40>)
 80084e8:	460c      	mov	r4, r1
 80084ea:	6831      	ldr	r1, [r6, #0]
 80084ec:	4605      	mov	r5, r0
 80084ee:	b911      	cbnz	r1, 80084f6 <sbrk_aligned+0x12>
 80084f0:	f000 fba4 	bl	8008c3c <_sbrk_r>
 80084f4:	6030      	str	r0, [r6, #0]
 80084f6:	4621      	mov	r1, r4
 80084f8:	4628      	mov	r0, r5
 80084fa:	f000 fb9f 	bl	8008c3c <_sbrk_r>
 80084fe:	1c43      	adds	r3, r0, #1
 8008500:	d103      	bne.n	800850a <sbrk_aligned+0x26>
 8008502:	f04f 34ff 	mov.w	r4, #4294967295
 8008506:	4620      	mov	r0, r4
 8008508:	bd70      	pop	{r4, r5, r6, pc}
 800850a:	1cc4      	adds	r4, r0, #3
 800850c:	f024 0403 	bic.w	r4, r4, #3
 8008510:	42a0      	cmp	r0, r4
 8008512:	d0f8      	beq.n	8008506 <sbrk_aligned+0x22>
 8008514:	1a21      	subs	r1, r4, r0
 8008516:	4628      	mov	r0, r5
 8008518:	f000 fb90 	bl	8008c3c <_sbrk_r>
 800851c:	3001      	adds	r0, #1
 800851e:	d1f2      	bne.n	8008506 <sbrk_aligned+0x22>
 8008520:	e7ef      	b.n	8008502 <sbrk_aligned+0x1e>
 8008522:	bf00      	nop
 8008524:	2000539c 	.word	0x2000539c

08008528 <_malloc_r>:
 8008528:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800852c:	1ccd      	adds	r5, r1, #3
 800852e:	f025 0503 	bic.w	r5, r5, #3
 8008532:	3508      	adds	r5, #8
 8008534:	2d0c      	cmp	r5, #12
 8008536:	bf38      	it	cc
 8008538:	250c      	movcc	r5, #12
 800853a:	2d00      	cmp	r5, #0
 800853c:	4606      	mov	r6, r0
 800853e:	db01      	blt.n	8008544 <_malloc_r+0x1c>
 8008540:	42a9      	cmp	r1, r5
 8008542:	d904      	bls.n	800854e <_malloc_r+0x26>
 8008544:	230c      	movs	r3, #12
 8008546:	6033      	str	r3, [r6, #0]
 8008548:	2000      	movs	r0, #0
 800854a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800854e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008624 <_malloc_r+0xfc>
 8008552:	f000 f869 	bl	8008628 <__malloc_lock>
 8008556:	f8d8 3000 	ldr.w	r3, [r8]
 800855a:	461c      	mov	r4, r3
 800855c:	bb44      	cbnz	r4, 80085b0 <_malloc_r+0x88>
 800855e:	4629      	mov	r1, r5
 8008560:	4630      	mov	r0, r6
 8008562:	f7ff ffbf 	bl	80084e4 <sbrk_aligned>
 8008566:	1c43      	adds	r3, r0, #1
 8008568:	4604      	mov	r4, r0
 800856a:	d158      	bne.n	800861e <_malloc_r+0xf6>
 800856c:	f8d8 4000 	ldr.w	r4, [r8]
 8008570:	4627      	mov	r7, r4
 8008572:	2f00      	cmp	r7, #0
 8008574:	d143      	bne.n	80085fe <_malloc_r+0xd6>
 8008576:	2c00      	cmp	r4, #0
 8008578:	d04b      	beq.n	8008612 <_malloc_r+0xea>
 800857a:	6823      	ldr	r3, [r4, #0]
 800857c:	4639      	mov	r1, r7
 800857e:	4630      	mov	r0, r6
 8008580:	eb04 0903 	add.w	r9, r4, r3
 8008584:	f000 fb5a 	bl	8008c3c <_sbrk_r>
 8008588:	4581      	cmp	r9, r0
 800858a:	d142      	bne.n	8008612 <_malloc_r+0xea>
 800858c:	6821      	ldr	r1, [r4, #0]
 800858e:	1a6d      	subs	r5, r5, r1
 8008590:	4629      	mov	r1, r5
 8008592:	4630      	mov	r0, r6
 8008594:	f7ff ffa6 	bl	80084e4 <sbrk_aligned>
 8008598:	3001      	adds	r0, #1
 800859a:	d03a      	beq.n	8008612 <_malloc_r+0xea>
 800859c:	6823      	ldr	r3, [r4, #0]
 800859e:	442b      	add	r3, r5
 80085a0:	6023      	str	r3, [r4, #0]
 80085a2:	f8d8 3000 	ldr.w	r3, [r8]
 80085a6:	685a      	ldr	r2, [r3, #4]
 80085a8:	bb62      	cbnz	r2, 8008604 <_malloc_r+0xdc>
 80085aa:	f8c8 7000 	str.w	r7, [r8]
 80085ae:	e00f      	b.n	80085d0 <_malloc_r+0xa8>
 80085b0:	6822      	ldr	r2, [r4, #0]
 80085b2:	1b52      	subs	r2, r2, r5
 80085b4:	d420      	bmi.n	80085f8 <_malloc_r+0xd0>
 80085b6:	2a0b      	cmp	r2, #11
 80085b8:	d917      	bls.n	80085ea <_malloc_r+0xc2>
 80085ba:	1961      	adds	r1, r4, r5
 80085bc:	42a3      	cmp	r3, r4
 80085be:	6025      	str	r5, [r4, #0]
 80085c0:	bf18      	it	ne
 80085c2:	6059      	strne	r1, [r3, #4]
 80085c4:	6863      	ldr	r3, [r4, #4]
 80085c6:	bf08      	it	eq
 80085c8:	f8c8 1000 	streq.w	r1, [r8]
 80085cc:	5162      	str	r2, [r4, r5]
 80085ce:	604b      	str	r3, [r1, #4]
 80085d0:	4630      	mov	r0, r6
 80085d2:	f000 f82f 	bl	8008634 <__malloc_unlock>
 80085d6:	f104 000b 	add.w	r0, r4, #11
 80085da:	1d23      	adds	r3, r4, #4
 80085dc:	f020 0007 	bic.w	r0, r0, #7
 80085e0:	1ac2      	subs	r2, r0, r3
 80085e2:	bf1c      	itt	ne
 80085e4:	1a1b      	subne	r3, r3, r0
 80085e6:	50a3      	strne	r3, [r4, r2]
 80085e8:	e7af      	b.n	800854a <_malloc_r+0x22>
 80085ea:	6862      	ldr	r2, [r4, #4]
 80085ec:	42a3      	cmp	r3, r4
 80085ee:	bf0c      	ite	eq
 80085f0:	f8c8 2000 	streq.w	r2, [r8]
 80085f4:	605a      	strne	r2, [r3, #4]
 80085f6:	e7eb      	b.n	80085d0 <_malloc_r+0xa8>
 80085f8:	4623      	mov	r3, r4
 80085fa:	6864      	ldr	r4, [r4, #4]
 80085fc:	e7ae      	b.n	800855c <_malloc_r+0x34>
 80085fe:	463c      	mov	r4, r7
 8008600:	687f      	ldr	r7, [r7, #4]
 8008602:	e7b6      	b.n	8008572 <_malloc_r+0x4a>
 8008604:	461a      	mov	r2, r3
 8008606:	685b      	ldr	r3, [r3, #4]
 8008608:	42a3      	cmp	r3, r4
 800860a:	d1fb      	bne.n	8008604 <_malloc_r+0xdc>
 800860c:	2300      	movs	r3, #0
 800860e:	6053      	str	r3, [r2, #4]
 8008610:	e7de      	b.n	80085d0 <_malloc_r+0xa8>
 8008612:	230c      	movs	r3, #12
 8008614:	6033      	str	r3, [r6, #0]
 8008616:	4630      	mov	r0, r6
 8008618:	f000 f80c 	bl	8008634 <__malloc_unlock>
 800861c:	e794      	b.n	8008548 <_malloc_r+0x20>
 800861e:	6005      	str	r5, [r0, #0]
 8008620:	e7d6      	b.n	80085d0 <_malloc_r+0xa8>
 8008622:	bf00      	nop
 8008624:	200053a0 	.word	0x200053a0

08008628 <__malloc_lock>:
 8008628:	4801      	ldr	r0, [pc, #4]	@ (8008630 <__malloc_lock+0x8>)
 800862a:	f7ff bf01 	b.w	8008430 <__retarget_lock_acquire_recursive>
 800862e:	bf00      	nop
 8008630:	20005398 	.word	0x20005398

08008634 <__malloc_unlock>:
 8008634:	4801      	ldr	r0, [pc, #4]	@ (800863c <__malloc_unlock+0x8>)
 8008636:	f7ff befc 	b.w	8008432 <__retarget_lock_release_recursive>
 800863a:	bf00      	nop
 800863c:	20005398 	.word	0x20005398

08008640 <__ssputs_r>:
 8008640:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008644:	688e      	ldr	r6, [r1, #8]
 8008646:	461f      	mov	r7, r3
 8008648:	42be      	cmp	r6, r7
 800864a:	680b      	ldr	r3, [r1, #0]
 800864c:	4682      	mov	sl, r0
 800864e:	460c      	mov	r4, r1
 8008650:	4690      	mov	r8, r2
 8008652:	d82d      	bhi.n	80086b0 <__ssputs_r+0x70>
 8008654:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008658:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800865c:	d026      	beq.n	80086ac <__ssputs_r+0x6c>
 800865e:	6965      	ldr	r5, [r4, #20]
 8008660:	6909      	ldr	r1, [r1, #16]
 8008662:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008666:	eba3 0901 	sub.w	r9, r3, r1
 800866a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800866e:	1c7b      	adds	r3, r7, #1
 8008670:	444b      	add	r3, r9
 8008672:	106d      	asrs	r5, r5, #1
 8008674:	429d      	cmp	r5, r3
 8008676:	bf38      	it	cc
 8008678:	461d      	movcc	r5, r3
 800867a:	0553      	lsls	r3, r2, #21
 800867c:	d527      	bpl.n	80086ce <__ssputs_r+0x8e>
 800867e:	4629      	mov	r1, r5
 8008680:	f7ff ff52 	bl	8008528 <_malloc_r>
 8008684:	4606      	mov	r6, r0
 8008686:	b360      	cbz	r0, 80086e2 <__ssputs_r+0xa2>
 8008688:	6921      	ldr	r1, [r4, #16]
 800868a:	464a      	mov	r2, r9
 800868c:	f7ff fed2 	bl	8008434 <memcpy>
 8008690:	89a3      	ldrh	r3, [r4, #12]
 8008692:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008696:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800869a:	81a3      	strh	r3, [r4, #12]
 800869c:	6126      	str	r6, [r4, #16]
 800869e:	6165      	str	r5, [r4, #20]
 80086a0:	444e      	add	r6, r9
 80086a2:	eba5 0509 	sub.w	r5, r5, r9
 80086a6:	6026      	str	r6, [r4, #0]
 80086a8:	60a5      	str	r5, [r4, #8]
 80086aa:	463e      	mov	r6, r7
 80086ac:	42be      	cmp	r6, r7
 80086ae:	d900      	bls.n	80086b2 <__ssputs_r+0x72>
 80086b0:	463e      	mov	r6, r7
 80086b2:	6820      	ldr	r0, [r4, #0]
 80086b4:	4632      	mov	r2, r6
 80086b6:	4641      	mov	r1, r8
 80086b8:	f000 faa6 	bl	8008c08 <memmove>
 80086bc:	68a3      	ldr	r3, [r4, #8]
 80086be:	1b9b      	subs	r3, r3, r6
 80086c0:	60a3      	str	r3, [r4, #8]
 80086c2:	6823      	ldr	r3, [r4, #0]
 80086c4:	4433      	add	r3, r6
 80086c6:	6023      	str	r3, [r4, #0]
 80086c8:	2000      	movs	r0, #0
 80086ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086ce:	462a      	mov	r2, r5
 80086d0:	f000 fac4 	bl	8008c5c <_realloc_r>
 80086d4:	4606      	mov	r6, r0
 80086d6:	2800      	cmp	r0, #0
 80086d8:	d1e0      	bne.n	800869c <__ssputs_r+0x5c>
 80086da:	6921      	ldr	r1, [r4, #16]
 80086dc:	4650      	mov	r0, sl
 80086de:	f7ff feb7 	bl	8008450 <_free_r>
 80086e2:	230c      	movs	r3, #12
 80086e4:	f8ca 3000 	str.w	r3, [sl]
 80086e8:	89a3      	ldrh	r3, [r4, #12]
 80086ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80086ee:	81a3      	strh	r3, [r4, #12]
 80086f0:	f04f 30ff 	mov.w	r0, #4294967295
 80086f4:	e7e9      	b.n	80086ca <__ssputs_r+0x8a>
	...

080086f8 <_svfiprintf_r>:
 80086f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086fc:	4698      	mov	r8, r3
 80086fe:	898b      	ldrh	r3, [r1, #12]
 8008700:	061b      	lsls	r3, r3, #24
 8008702:	b09d      	sub	sp, #116	@ 0x74
 8008704:	4607      	mov	r7, r0
 8008706:	460d      	mov	r5, r1
 8008708:	4614      	mov	r4, r2
 800870a:	d510      	bpl.n	800872e <_svfiprintf_r+0x36>
 800870c:	690b      	ldr	r3, [r1, #16]
 800870e:	b973      	cbnz	r3, 800872e <_svfiprintf_r+0x36>
 8008710:	2140      	movs	r1, #64	@ 0x40
 8008712:	f7ff ff09 	bl	8008528 <_malloc_r>
 8008716:	6028      	str	r0, [r5, #0]
 8008718:	6128      	str	r0, [r5, #16]
 800871a:	b930      	cbnz	r0, 800872a <_svfiprintf_r+0x32>
 800871c:	230c      	movs	r3, #12
 800871e:	603b      	str	r3, [r7, #0]
 8008720:	f04f 30ff 	mov.w	r0, #4294967295
 8008724:	b01d      	add	sp, #116	@ 0x74
 8008726:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800872a:	2340      	movs	r3, #64	@ 0x40
 800872c:	616b      	str	r3, [r5, #20]
 800872e:	2300      	movs	r3, #0
 8008730:	9309      	str	r3, [sp, #36]	@ 0x24
 8008732:	2320      	movs	r3, #32
 8008734:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008738:	f8cd 800c 	str.w	r8, [sp, #12]
 800873c:	2330      	movs	r3, #48	@ 0x30
 800873e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80088dc <_svfiprintf_r+0x1e4>
 8008742:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008746:	f04f 0901 	mov.w	r9, #1
 800874a:	4623      	mov	r3, r4
 800874c:	469a      	mov	sl, r3
 800874e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008752:	b10a      	cbz	r2, 8008758 <_svfiprintf_r+0x60>
 8008754:	2a25      	cmp	r2, #37	@ 0x25
 8008756:	d1f9      	bne.n	800874c <_svfiprintf_r+0x54>
 8008758:	ebba 0b04 	subs.w	fp, sl, r4
 800875c:	d00b      	beq.n	8008776 <_svfiprintf_r+0x7e>
 800875e:	465b      	mov	r3, fp
 8008760:	4622      	mov	r2, r4
 8008762:	4629      	mov	r1, r5
 8008764:	4638      	mov	r0, r7
 8008766:	f7ff ff6b 	bl	8008640 <__ssputs_r>
 800876a:	3001      	adds	r0, #1
 800876c:	f000 80a7 	beq.w	80088be <_svfiprintf_r+0x1c6>
 8008770:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008772:	445a      	add	r2, fp
 8008774:	9209      	str	r2, [sp, #36]	@ 0x24
 8008776:	f89a 3000 	ldrb.w	r3, [sl]
 800877a:	2b00      	cmp	r3, #0
 800877c:	f000 809f 	beq.w	80088be <_svfiprintf_r+0x1c6>
 8008780:	2300      	movs	r3, #0
 8008782:	f04f 32ff 	mov.w	r2, #4294967295
 8008786:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800878a:	f10a 0a01 	add.w	sl, sl, #1
 800878e:	9304      	str	r3, [sp, #16]
 8008790:	9307      	str	r3, [sp, #28]
 8008792:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008796:	931a      	str	r3, [sp, #104]	@ 0x68
 8008798:	4654      	mov	r4, sl
 800879a:	2205      	movs	r2, #5
 800879c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80087a0:	484e      	ldr	r0, [pc, #312]	@ (80088dc <_svfiprintf_r+0x1e4>)
 80087a2:	f7f7 fd55 	bl	8000250 <memchr>
 80087a6:	9a04      	ldr	r2, [sp, #16]
 80087a8:	b9d8      	cbnz	r0, 80087e2 <_svfiprintf_r+0xea>
 80087aa:	06d0      	lsls	r0, r2, #27
 80087ac:	bf44      	itt	mi
 80087ae:	2320      	movmi	r3, #32
 80087b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80087b4:	0711      	lsls	r1, r2, #28
 80087b6:	bf44      	itt	mi
 80087b8:	232b      	movmi	r3, #43	@ 0x2b
 80087ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80087be:	f89a 3000 	ldrb.w	r3, [sl]
 80087c2:	2b2a      	cmp	r3, #42	@ 0x2a
 80087c4:	d015      	beq.n	80087f2 <_svfiprintf_r+0xfa>
 80087c6:	9a07      	ldr	r2, [sp, #28]
 80087c8:	4654      	mov	r4, sl
 80087ca:	2000      	movs	r0, #0
 80087cc:	f04f 0c0a 	mov.w	ip, #10
 80087d0:	4621      	mov	r1, r4
 80087d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80087d6:	3b30      	subs	r3, #48	@ 0x30
 80087d8:	2b09      	cmp	r3, #9
 80087da:	d94b      	bls.n	8008874 <_svfiprintf_r+0x17c>
 80087dc:	b1b0      	cbz	r0, 800880c <_svfiprintf_r+0x114>
 80087de:	9207      	str	r2, [sp, #28]
 80087e0:	e014      	b.n	800880c <_svfiprintf_r+0x114>
 80087e2:	eba0 0308 	sub.w	r3, r0, r8
 80087e6:	fa09 f303 	lsl.w	r3, r9, r3
 80087ea:	4313      	orrs	r3, r2
 80087ec:	9304      	str	r3, [sp, #16]
 80087ee:	46a2      	mov	sl, r4
 80087f0:	e7d2      	b.n	8008798 <_svfiprintf_r+0xa0>
 80087f2:	9b03      	ldr	r3, [sp, #12]
 80087f4:	1d19      	adds	r1, r3, #4
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	9103      	str	r1, [sp, #12]
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	bfbb      	ittet	lt
 80087fe:	425b      	neglt	r3, r3
 8008800:	f042 0202 	orrlt.w	r2, r2, #2
 8008804:	9307      	strge	r3, [sp, #28]
 8008806:	9307      	strlt	r3, [sp, #28]
 8008808:	bfb8      	it	lt
 800880a:	9204      	strlt	r2, [sp, #16]
 800880c:	7823      	ldrb	r3, [r4, #0]
 800880e:	2b2e      	cmp	r3, #46	@ 0x2e
 8008810:	d10a      	bne.n	8008828 <_svfiprintf_r+0x130>
 8008812:	7863      	ldrb	r3, [r4, #1]
 8008814:	2b2a      	cmp	r3, #42	@ 0x2a
 8008816:	d132      	bne.n	800887e <_svfiprintf_r+0x186>
 8008818:	9b03      	ldr	r3, [sp, #12]
 800881a:	1d1a      	adds	r2, r3, #4
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	9203      	str	r2, [sp, #12]
 8008820:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008824:	3402      	adds	r4, #2
 8008826:	9305      	str	r3, [sp, #20]
 8008828:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80088ec <_svfiprintf_r+0x1f4>
 800882c:	7821      	ldrb	r1, [r4, #0]
 800882e:	2203      	movs	r2, #3
 8008830:	4650      	mov	r0, sl
 8008832:	f7f7 fd0d 	bl	8000250 <memchr>
 8008836:	b138      	cbz	r0, 8008848 <_svfiprintf_r+0x150>
 8008838:	9b04      	ldr	r3, [sp, #16]
 800883a:	eba0 000a 	sub.w	r0, r0, sl
 800883e:	2240      	movs	r2, #64	@ 0x40
 8008840:	4082      	lsls	r2, r0
 8008842:	4313      	orrs	r3, r2
 8008844:	3401      	adds	r4, #1
 8008846:	9304      	str	r3, [sp, #16]
 8008848:	f814 1b01 	ldrb.w	r1, [r4], #1
 800884c:	4824      	ldr	r0, [pc, #144]	@ (80088e0 <_svfiprintf_r+0x1e8>)
 800884e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008852:	2206      	movs	r2, #6
 8008854:	f7f7 fcfc 	bl	8000250 <memchr>
 8008858:	2800      	cmp	r0, #0
 800885a:	d036      	beq.n	80088ca <_svfiprintf_r+0x1d2>
 800885c:	4b21      	ldr	r3, [pc, #132]	@ (80088e4 <_svfiprintf_r+0x1ec>)
 800885e:	bb1b      	cbnz	r3, 80088a8 <_svfiprintf_r+0x1b0>
 8008860:	9b03      	ldr	r3, [sp, #12]
 8008862:	3307      	adds	r3, #7
 8008864:	f023 0307 	bic.w	r3, r3, #7
 8008868:	3308      	adds	r3, #8
 800886a:	9303      	str	r3, [sp, #12]
 800886c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800886e:	4433      	add	r3, r6
 8008870:	9309      	str	r3, [sp, #36]	@ 0x24
 8008872:	e76a      	b.n	800874a <_svfiprintf_r+0x52>
 8008874:	fb0c 3202 	mla	r2, ip, r2, r3
 8008878:	460c      	mov	r4, r1
 800887a:	2001      	movs	r0, #1
 800887c:	e7a8      	b.n	80087d0 <_svfiprintf_r+0xd8>
 800887e:	2300      	movs	r3, #0
 8008880:	3401      	adds	r4, #1
 8008882:	9305      	str	r3, [sp, #20]
 8008884:	4619      	mov	r1, r3
 8008886:	f04f 0c0a 	mov.w	ip, #10
 800888a:	4620      	mov	r0, r4
 800888c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008890:	3a30      	subs	r2, #48	@ 0x30
 8008892:	2a09      	cmp	r2, #9
 8008894:	d903      	bls.n	800889e <_svfiprintf_r+0x1a6>
 8008896:	2b00      	cmp	r3, #0
 8008898:	d0c6      	beq.n	8008828 <_svfiprintf_r+0x130>
 800889a:	9105      	str	r1, [sp, #20]
 800889c:	e7c4      	b.n	8008828 <_svfiprintf_r+0x130>
 800889e:	fb0c 2101 	mla	r1, ip, r1, r2
 80088a2:	4604      	mov	r4, r0
 80088a4:	2301      	movs	r3, #1
 80088a6:	e7f0      	b.n	800888a <_svfiprintf_r+0x192>
 80088a8:	ab03      	add	r3, sp, #12
 80088aa:	9300      	str	r3, [sp, #0]
 80088ac:	462a      	mov	r2, r5
 80088ae:	4b0e      	ldr	r3, [pc, #56]	@ (80088e8 <_svfiprintf_r+0x1f0>)
 80088b0:	a904      	add	r1, sp, #16
 80088b2:	4638      	mov	r0, r7
 80088b4:	f3af 8000 	nop.w
 80088b8:	1c42      	adds	r2, r0, #1
 80088ba:	4606      	mov	r6, r0
 80088bc:	d1d6      	bne.n	800886c <_svfiprintf_r+0x174>
 80088be:	89ab      	ldrh	r3, [r5, #12]
 80088c0:	065b      	lsls	r3, r3, #25
 80088c2:	f53f af2d 	bmi.w	8008720 <_svfiprintf_r+0x28>
 80088c6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80088c8:	e72c      	b.n	8008724 <_svfiprintf_r+0x2c>
 80088ca:	ab03      	add	r3, sp, #12
 80088cc:	9300      	str	r3, [sp, #0]
 80088ce:	462a      	mov	r2, r5
 80088d0:	4b05      	ldr	r3, [pc, #20]	@ (80088e8 <_svfiprintf_r+0x1f0>)
 80088d2:	a904      	add	r1, sp, #16
 80088d4:	4638      	mov	r0, r7
 80088d6:	f000 f879 	bl	80089cc <_printf_i>
 80088da:	e7ed      	b.n	80088b8 <_svfiprintf_r+0x1c0>
 80088dc:	08008e58 	.word	0x08008e58
 80088e0:	08008e62 	.word	0x08008e62
 80088e4:	00000000 	.word	0x00000000
 80088e8:	08008641 	.word	0x08008641
 80088ec:	08008e5e 	.word	0x08008e5e

080088f0 <_printf_common>:
 80088f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80088f4:	4616      	mov	r6, r2
 80088f6:	4698      	mov	r8, r3
 80088f8:	688a      	ldr	r2, [r1, #8]
 80088fa:	690b      	ldr	r3, [r1, #16]
 80088fc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008900:	4293      	cmp	r3, r2
 8008902:	bfb8      	it	lt
 8008904:	4613      	movlt	r3, r2
 8008906:	6033      	str	r3, [r6, #0]
 8008908:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800890c:	4607      	mov	r7, r0
 800890e:	460c      	mov	r4, r1
 8008910:	b10a      	cbz	r2, 8008916 <_printf_common+0x26>
 8008912:	3301      	adds	r3, #1
 8008914:	6033      	str	r3, [r6, #0]
 8008916:	6823      	ldr	r3, [r4, #0]
 8008918:	0699      	lsls	r1, r3, #26
 800891a:	bf42      	ittt	mi
 800891c:	6833      	ldrmi	r3, [r6, #0]
 800891e:	3302      	addmi	r3, #2
 8008920:	6033      	strmi	r3, [r6, #0]
 8008922:	6825      	ldr	r5, [r4, #0]
 8008924:	f015 0506 	ands.w	r5, r5, #6
 8008928:	d106      	bne.n	8008938 <_printf_common+0x48>
 800892a:	f104 0a19 	add.w	sl, r4, #25
 800892e:	68e3      	ldr	r3, [r4, #12]
 8008930:	6832      	ldr	r2, [r6, #0]
 8008932:	1a9b      	subs	r3, r3, r2
 8008934:	42ab      	cmp	r3, r5
 8008936:	dc26      	bgt.n	8008986 <_printf_common+0x96>
 8008938:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800893c:	6822      	ldr	r2, [r4, #0]
 800893e:	3b00      	subs	r3, #0
 8008940:	bf18      	it	ne
 8008942:	2301      	movne	r3, #1
 8008944:	0692      	lsls	r2, r2, #26
 8008946:	d42b      	bmi.n	80089a0 <_printf_common+0xb0>
 8008948:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800894c:	4641      	mov	r1, r8
 800894e:	4638      	mov	r0, r7
 8008950:	47c8      	blx	r9
 8008952:	3001      	adds	r0, #1
 8008954:	d01e      	beq.n	8008994 <_printf_common+0xa4>
 8008956:	6823      	ldr	r3, [r4, #0]
 8008958:	6922      	ldr	r2, [r4, #16]
 800895a:	f003 0306 	and.w	r3, r3, #6
 800895e:	2b04      	cmp	r3, #4
 8008960:	bf02      	ittt	eq
 8008962:	68e5      	ldreq	r5, [r4, #12]
 8008964:	6833      	ldreq	r3, [r6, #0]
 8008966:	1aed      	subeq	r5, r5, r3
 8008968:	68a3      	ldr	r3, [r4, #8]
 800896a:	bf0c      	ite	eq
 800896c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008970:	2500      	movne	r5, #0
 8008972:	4293      	cmp	r3, r2
 8008974:	bfc4      	itt	gt
 8008976:	1a9b      	subgt	r3, r3, r2
 8008978:	18ed      	addgt	r5, r5, r3
 800897a:	2600      	movs	r6, #0
 800897c:	341a      	adds	r4, #26
 800897e:	42b5      	cmp	r5, r6
 8008980:	d11a      	bne.n	80089b8 <_printf_common+0xc8>
 8008982:	2000      	movs	r0, #0
 8008984:	e008      	b.n	8008998 <_printf_common+0xa8>
 8008986:	2301      	movs	r3, #1
 8008988:	4652      	mov	r2, sl
 800898a:	4641      	mov	r1, r8
 800898c:	4638      	mov	r0, r7
 800898e:	47c8      	blx	r9
 8008990:	3001      	adds	r0, #1
 8008992:	d103      	bne.n	800899c <_printf_common+0xac>
 8008994:	f04f 30ff 	mov.w	r0, #4294967295
 8008998:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800899c:	3501      	adds	r5, #1
 800899e:	e7c6      	b.n	800892e <_printf_common+0x3e>
 80089a0:	18e1      	adds	r1, r4, r3
 80089a2:	1c5a      	adds	r2, r3, #1
 80089a4:	2030      	movs	r0, #48	@ 0x30
 80089a6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80089aa:	4422      	add	r2, r4
 80089ac:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80089b0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80089b4:	3302      	adds	r3, #2
 80089b6:	e7c7      	b.n	8008948 <_printf_common+0x58>
 80089b8:	2301      	movs	r3, #1
 80089ba:	4622      	mov	r2, r4
 80089bc:	4641      	mov	r1, r8
 80089be:	4638      	mov	r0, r7
 80089c0:	47c8      	blx	r9
 80089c2:	3001      	adds	r0, #1
 80089c4:	d0e6      	beq.n	8008994 <_printf_common+0xa4>
 80089c6:	3601      	adds	r6, #1
 80089c8:	e7d9      	b.n	800897e <_printf_common+0x8e>
	...

080089cc <_printf_i>:
 80089cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80089d0:	7e0f      	ldrb	r7, [r1, #24]
 80089d2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80089d4:	2f78      	cmp	r7, #120	@ 0x78
 80089d6:	4691      	mov	r9, r2
 80089d8:	4680      	mov	r8, r0
 80089da:	460c      	mov	r4, r1
 80089dc:	469a      	mov	sl, r3
 80089de:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80089e2:	d807      	bhi.n	80089f4 <_printf_i+0x28>
 80089e4:	2f62      	cmp	r7, #98	@ 0x62
 80089e6:	d80a      	bhi.n	80089fe <_printf_i+0x32>
 80089e8:	2f00      	cmp	r7, #0
 80089ea:	f000 80d1 	beq.w	8008b90 <_printf_i+0x1c4>
 80089ee:	2f58      	cmp	r7, #88	@ 0x58
 80089f0:	f000 80b8 	beq.w	8008b64 <_printf_i+0x198>
 80089f4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80089f8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80089fc:	e03a      	b.n	8008a74 <_printf_i+0xa8>
 80089fe:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008a02:	2b15      	cmp	r3, #21
 8008a04:	d8f6      	bhi.n	80089f4 <_printf_i+0x28>
 8008a06:	a101      	add	r1, pc, #4	@ (adr r1, 8008a0c <_printf_i+0x40>)
 8008a08:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008a0c:	08008a65 	.word	0x08008a65
 8008a10:	08008a79 	.word	0x08008a79
 8008a14:	080089f5 	.word	0x080089f5
 8008a18:	080089f5 	.word	0x080089f5
 8008a1c:	080089f5 	.word	0x080089f5
 8008a20:	080089f5 	.word	0x080089f5
 8008a24:	08008a79 	.word	0x08008a79
 8008a28:	080089f5 	.word	0x080089f5
 8008a2c:	080089f5 	.word	0x080089f5
 8008a30:	080089f5 	.word	0x080089f5
 8008a34:	080089f5 	.word	0x080089f5
 8008a38:	08008b77 	.word	0x08008b77
 8008a3c:	08008aa3 	.word	0x08008aa3
 8008a40:	08008b31 	.word	0x08008b31
 8008a44:	080089f5 	.word	0x080089f5
 8008a48:	080089f5 	.word	0x080089f5
 8008a4c:	08008b99 	.word	0x08008b99
 8008a50:	080089f5 	.word	0x080089f5
 8008a54:	08008aa3 	.word	0x08008aa3
 8008a58:	080089f5 	.word	0x080089f5
 8008a5c:	080089f5 	.word	0x080089f5
 8008a60:	08008b39 	.word	0x08008b39
 8008a64:	6833      	ldr	r3, [r6, #0]
 8008a66:	1d1a      	adds	r2, r3, #4
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	6032      	str	r2, [r6, #0]
 8008a6c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008a70:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008a74:	2301      	movs	r3, #1
 8008a76:	e09c      	b.n	8008bb2 <_printf_i+0x1e6>
 8008a78:	6833      	ldr	r3, [r6, #0]
 8008a7a:	6820      	ldr	r0, [r4, #0]
 8008a7c:	1d19      	adds	r1, r3, #4
 8008a7e:	6031      	str	r1, [r6, #0]
 8008a80:	0606      	lsls	r6, r0, #24
 8008a82:	d501      	bpl.n	8008a88 <_printf_i+0xbc>
 8008a84:	681d      	ldr	r5, [r3, #0]
 8008a86:	e003      	b.n	8008a90 <_printf_i+0xc4>
 8008a88:	0645      	lsls	r5, r0, #25
 8008a8a:	d5fb      	bpl.n	8008a84 <_printf_i+0xb8>
 8008a8c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008a90:	2d00      	cmp	r5, #0
 8008a92:	da03      	bge.n	8008a9c <_printf_i+0xd0>
 8008a94:	232d      	movs	r3, #45	@ 0x2d
 8008a96:	426d      	negs	r5, r5
 8008a98:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008a9c:	4858      	ldr	r0, [pc, #352]	@ (8008c00 <_printf_i+0x234>)
 8008a9e:	230a      	movs	r3, #10
 8008aa0:	e011      	b.n	8008ac6 <_printf_i+0xfa>
 8008aa2:	6821      	ldr	r1, [r4, #0]
 8008aa4:	6833      	ldr	r3, [r6, #0]
 8008aa6:	0608      	lsls	r0, r1, #24
 8008aa8:	f853 5b04 	ldr.w	r5, [r3], #4
 8008aac:	d402      	bmi.n	8008ab4 <_printf_i+0xe8>
 8008aae:	0649      	lsls	r1, r1, #25
 8008ab0:	bf48      	it	mi
 8008ab2:	b2ad      	uxthmi	r5, r5
 8008ab4:	2f6f      	cmp	r7, #111	@ 0x6f
 8008ab6:	4852      	ldr	r0, [pc, #328]	@ (8008c00 <_printf_i+0x234>)
 8008ab8:	6033      	str	r3, [r6, #0]
 8008aba:	bf14      	ite	ne
 8008abc:	230a      	movne	r3, #10
 8008abe:	2308      	moveq	r3, #8
 8008ac0:	2100      	movs	r1, #0
 8008ac2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008ac6:	6866      	ldr	r6, [r4, #4]
 8008ac8:	60a6      	str	r6, [r4, #8]
 8008aca:	2e00      	cmp	r6, #0
 8008acc:	db05      	blt.n	8008ada <_printf_i+0x10e>
 8008ace:	6821      	ldr	r1, [r4, #0]
 8008ad0:	432e      	orrs	r6, r5
 8008ad2:	f021 0104 	bic.w	r1, r1, #4
 8008ad6:	6021      	str	r1, [r4, #0]
 8008ad8:	d04b      	beq.n	8008b72 <_printf_i+0x1a6>
 8008ada:	4616      	mov	r6, r2
 8008adc:	fbb5 f1f3 	udiv	r1, r5, r3
 8008ae0:	fb03 5711 	mls	r7, r3, r1, r5
 8008ae4:	5dc7      	ldrb	r7, [r0, r7]
 8008ae6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008aea:	462f      	mov	r7, r5
 8008aec:	42bb      	cmp	r3, r7
 8008aee:	460d      	mov	r5, r1
 8008af0:	d9f4      	bls.n	8008adc <_printf_i+0x110>
 8008af2:	2b08      	cmp	r3, #8
 8008af4:	d10b      	bne.n	8008b0e <_printf_i+0x142>
 8008af6:	6823      	ldr	r3, [r4, #0]
 8008af8:	07df      	lsls	r7, r3, #31
 8008afa:	d508      	bpl.n	8008b0e <_printf_i+0x142>
 8008afc:	6923      	ldr	r3, [r4, #16]
 8008afe:	6861      	ldr	r1, [r4, #4]
 8008b00:	4299      	cmp	r1, r3
 8008b02:	bfde      	ittt	le
 8008b04:	2330      	movle	r3, #48	@ 0x30
 8008b06:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008b0a:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008b0e:	1b92      	subs	r2, r2, r6
 8008b10:	6122      	str	r2, [r4, #16]
 8008b12:	f8cd a000 	str.w	sl, [sp]
 8008b16:	464b      	mov	r3, r9
 8008b18:	aa03      	add	r2, sp, #12
 8008b1a:	4621      	mov	r1, r4
 8008b1c:	4640      	mov	r0, r8
 8008b1e:	f7ff fee7 	bl	80088f0 <_printf_common>
 8008b22:	3001      	adds	r0, #1
 8008b24:	d14a      	bne.n	8008bbc <_printf_i+0x1f0>
 8008b26:	f04f 30ff 	mov.w	r0, #4294967295
 8008b2a:	b004      	add	sp, #16
 8008b2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b30:	6823      	ldr	r3, [r4, #0]
 8008b32:	f043 0320 	orr.w	r3, r3, #32
 8008b36:	6023      	str	r3, [r4, #0]
 8008b38:	4832      	ldr	r0, [pc, #200]	@ (8008c04 <_printf_i+0x238>)
 8008b3a:	2778      	movs	r7, #120	@ 0x78
 8008b3c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008b40:	6823      	ldr	r3, [r4, #0]
 8008b42:	6831      	ldr	r1, [r6, #0]
 8008b44:	061f      	lsls	r7, r3, #24
 8008b46:	f851 5b04 	ldr.w	r5, [r1], #4
 8008b4a:	d402      	bmi.n	8008b52 <_printf_i+0x186>
 8008b4c:	065f      	lsls	r7, r3, #25
 8008b4e:	bf48      	it	mi
 8008b50:	b2ad      	uxthmi	r5, r5
 8008b52:	6031      	str	r1, [r6, #0]
 8008b54:	07d9      	lsls	r1, r3, #31
 8008b56:	bf44      	itt	mi
 8008b58:	f043 0320 	orrmi.w	r3, r3, #32
 8008b5c:	6023      	strmi	r3, [r4, #0]
 8008b5e:	b11d      	cbz	r5, 8008b68 <_printf_i+0x19c>
 8008b60:	2310      	movs	r3, #16
 8008b62:	e7ad      	b.n	8008ac0 <_printf_i+0xf4>
 8008b64:	4826      	ldr	r0, [pc, #152]	@ (8008c00 <_printf_i+0x234>)
 8008b66:	e7e9      	b.n	8008b3c <_printf_i+0x170>
 8008b68:	6823      	ldr	r3, [r4, #0]
 8008b6a:	f023 0320 	bic.w	r3, r3, #32
 8008b6e:	6023      	str	r3, [r4, #0]
 8008b70:	e7f6      	b.n	8008b60 <_printf_i+0x194>
 8008b72:	4616      	mov	r6, r2
 8008b74:	e7bd      	b.n	8008af2 <_printf_i+0x126>
 8008b76:	6833      	ldr	r3, [r6, #0]
 8008b78:	6825      	ldr	r5, [r4, #0]
 8008b7a:	6961      	ldr	r1, [r4, #20]
 8008b7c:	1d18      	adds	r0, r3, #4
 8008b7e:	6030      	str	r0, [r6, #0]
 8008b80:	062e      	lsls	r6, r5, #24
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	d501      	bpl.n	8008b8a <_printf_i+0x1be>
 8008b86:	6019      	str	r1, [r3, #0]
 8008b88:	e002      	b.n	8008b90 <_printf_i+0x1c4>
 8008b8a:	0668      	lsls	r0, r5, #25
 8008b8c:	d5fb      	bpl.n	8008b86 <_printf_i+0x1ba>
 8008b8e:	8019      	strh	r1, [r3, #0]
 8008b90:	2300      	movs	r3, #0
 8008b92:	6123      	str	r3, [r4, #16]
 8008b94:	4616      	mov	r6, r2
 8008b96:	e7bc      	b.n	8008b12 <_printf_i+0x146>
 8008b98:	6833      	ldr	r3, [r6, #0]
 8008b9a:	1d1a      	adds	r2, r3, #4
 8008b9c:	6032      	str	r2, [r6, #0]
 8008b9e:	681e      	ldr	r6, [r3, #0]
 8008ba0:	6862      	ldr	r2, [r4, #4]
 8008ba2:	2100      	movs	r1, #0
 8008ba4:	4630      	mov	r0, r6
 8008ba6:	f7f7 fb53 	bl	8000250 <memchr>
 8008baa:	b108      	cbz	r0, 8008bb0 <_printf_i+0x1e4>
 8008bac:	1b80      	subs	r0, r0, r6
 8008bae:	6060      	str	r0, [r4, #4]
 8008bb0:	6863      	ldr	r3, [r4, #4]
 8008bb2:	6123      	str	r3, [r4, #16]
 8008bb4:	2300      	movs	r3, #0
 8008bb6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008bba:	e7aa      	b.n	8008b12 <_printf_i+0x146>
 8008bbc:	6923      	ldr	r3, [r4, #16]
 8008bbe:	4632      	mov	r2, r6
 8008bc0:	4649      	mov	r1, r9
 8008bc2:	4640      	mov	r0, r8
 8008bc4:	47d0      	blx	sl
 8008bc6:	3001      	adds	r0, #1
 8008bc8:	d0ad      	beq.n	8008b26 <_printf_i+0x15a>
 8008bca:	6823      	ldr	r3, [r4, #0]
 8008bcc:	079b      	lsls	r3, r3, #30
 8008bce:	d413      	bmi.n	8008bf8 <_printf_i+0x22c>
 8008bd0:	68e0      	ldr	r0, [r4, #12]
 8008bd2:	9b03      	ldr	r3, [sp, #12]
 8008bd4:	4298      	cmp	r0, r3
 8008bd6:	bfb8      	it	lt
 8008bd8:	4618      	movlt	r0, r3
 8008bda:	e7a6      	b.n	8008b2a <_printf_i+0x15e>
 8008bdc:	2301      	movs	r3, #1
 8008bde:	4632      	mov	r2, r6
 8008be0:	4649      	mov	r1, r9
 8008be2:	4640      	mov	r0, r8
 8008be4:	47d0      	blx	sl
 8008be6:	3001      	adds	r0, #1
 8008be8:	d09d      	beq.n	8008b26 <_printf_i+0x15a>
 8008bea:	3501      	adds	r5, #1
 8008bec:	68e3      	ldr	r3, [r4, #12]
 8008bee:	9903      	ldr	r1, [sp, #12]
 8008bf0:	1a5b      	subs	r3, r3, r1
 8008bf2:	42ab      	cmp	r3, r5
 8008bf4:	dcf2      	bgt.n	8008bdc <_printf_i+0x210>
 8008bf6:	e7eb      	b.n	8008bd0 <_printf_i+0x204>
 8008bf8:	2500      	movs	r5, #0
 8008bfa:	f104 0619 	add.w	r6, r4, #25
 8008bfe:	e7f5      	b.n	8008bec <_printf_i+0x220>
 8008c00:	08008e69 	.word	0x08008e69
 8008c04:	08008e7a 	.word	0x08008e7a

08008c08 <memmove>:
 8008c08:	4288      	cmp	r0, r1
 8008c0a:	b510      	push	{r4, lr}
 8008c0c:	eb01 0402 	add.w	r4, r1, r2
 8008c10:	d902      	bls.n	8008c18 <memmove+0x10>
 8008c12:	4284      	cmp	r4, r0
 8008c14:	4623      	mov	r3, r4
 8008c16:	d807      	bhi.n	8008c28 <memmove+0x20>
 8008c18:	1e43      	subs	r3, r0, #1
 8008c1a:	42a1      	cmp	r1, r4
 8008c1c:	d008      	beq.n	8008c30 <memmove+0x28>
 8008c1e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008c22:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008c26:	e7f8      	b.n	8008c1a <memmove+0x12>
 8008c28:	4402      	add	r2, r0
 8008c2a:	4601      	mov	r1, r0
 8008c2c:	428a      	cmp	r2, r1
 8008c2e:	d100      	bne.n	8008c32 <memmove+0x2a>
 8008c30:	bd10      	pop	{r4, pc}
 8008c32:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008c36:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008c3a:	e7f7      	b.n	8008c2c <memmove+0x24>

08008c3c <_sbrk_r>:
 8008c3c:	b538      	push	{r3, r4, r5, lr}
 8008c3e:	4d06      	ldr	r5, [pc, #24]	@ (8008c58 <_sbrk_r+0x1c>)
 8008c40:	2300      	movs	r3, #0
 8008c42:	4604      	mov	r4, r0
 8008c44:	4608      	mov	r0, r1
 8008c46:	602b      	str	r3, [r5, #0]
 8008c48:	f7f8 fa42 	bl	80010d0 <_sbrk>
 8008c4c:	1c43      	adds	r3, r0, #1
 8008c4e:	d102      	bne.n	8008c56 <_sbrk_r+0x1a>
 8008c50:	682b      	ldr	r3, [r5, #0]
 8008c52:	b103      	cbz	r3, 8008c56 <_sbrk_r+0x1a>
 8008c54:	6023      	str	r3, [r4, #0]
 8008c56:	bd38      	pop	{r3, r4, r5, pc}
 8008c58:	20005394 	.word	0x20005394

08008c5c <_realloc_r>:
 8008c5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c60:	4607      	mov	r7, r0
 8008c62:	4614      	mov	r4, r2
 8008c64:	460d      	mov	r5, r1
 8008c66:	b921      	cbnz	r1, 8008c72 <_realloc_r+0x16>
 8008c68:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008c6c:	4611      	mov	r1, r2
 8008c6e:	f7ff bc5b 	b.w	8008528 <_malloc_r>
 8008c72:	b92a      	cbnz	r2, 8008c80 <_realloc_r+0x24>
 8008c74:	f7ff fbec 	bl	8008450 <_free_r>
 8008c78:	4625      	mov	r5, r4
 8008c7a:	4628      	mov	r0, r5
 8008c7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c80:	f000 f81a 	bl	8008cb8 <_malloc_usable_size_r>
 8008c84:	4284      	cmp	r4, r0
 8008c86:	4606      	mov	r6, r0
 8008c88:	d802      	bhi.n	8008c90 <_realloc_r+0x34>
 8008c8a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008c8e:	d8f4      	bhi.n	8008c7a <_realloc_r+0x1e>
 8008c90:	4621      	mov	r1, r4
 8008c92:	4638      	mov	r0, r7
 8008c94:	f7ff fc48 	bl	8008528 <_malloc_r>
 8008c98:	4680      	mov	r8, r0
 8008c9a:	b908      	cbnz	r0, 8008ca0 <_realloc_r+0x44>
 8008c9c:	4645      	mov	r5, r8
 8008c9e:	e7ec      	b.n	8008c7a <_realloc_r+0x1e>
 8008ca0:	42b4      	cmp	r4, r6
 8008ca2:	4622      	mov	r2, r4
 8008ca4:	4629      	mov	r1, r5
 8008ca6:	bf28      	it	cs
 8008ca8:	4632      	movcs	r2, r6
 8008caa:	f7ff fbc3 	bl	8008434 <memcpy>
 8008cae:	4629      	mov	r1, r5
 8008cb0:	4638      	mov	r0, r7
 8008cb2:	f7ff fbcd 	bl	8008450 <_free_r>
 8008cb6:	e7f1      	b.n	8008c9c <_realloc_r+0x40>

08008cb8 <_malloc_usable_size_r>:
 8008cb8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008cbc:	1f18      	subs	r0, r3, #4
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	bfbc      	itt	lt
 8008cc2:	580b      	ldrlt	r3, [r1, r0]
 8008cc4:	18c0      	addlt	r0, r0, r3
 8008cc6:	4770      	bx	lr

08008cc8 <_init>:
 8008cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cca:	bf00      	nop
 8008ccc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008cce:	bc08      	pop	{r3}
 8008cd0:	469e      	mov	lr, r3
 8008cd2:	4770      	bx	lr

08008cd4 <_fini>:
 8008cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cd6:	bf00      	nop
 8008cd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008cda:	bc08      	pop	{r3}
 8008cdc:	469e      	mov	lr, r3
 8008cde:	4770      	bx	lr
