
exercicio2_aula4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000081e4  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000134  080083e4  080083e4  000093e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008518  08008518  0000a1a0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008518  08008518  00009518  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008520  08008520  0000a1a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008520  08008520  00009520  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008524  08008524  00009524  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08008528  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000060  08008588  0000a060  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000100  08008628  0000a100  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000051f8  200001a0  080086c8  0000a1a0  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20005398  080086c8  0000a398  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  0000a1a0  2**0
                  CONTENTS, READONLY
 14 .debug_info   0002254b  00000000  00000000  0000a1ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000041e8  00000000  00000000  0002c719  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001a40  00000000  00000000  00030908  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001478  00000000  00000000  00032348  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0000407b  00000000  00000000  000337c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001eab0  00000000  00000000  0003783b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0010db03  00000000  00000000  000562eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  00163dee  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000072e8  00000000  00000000  00163e34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000064  00000000  00000000  0016b11c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001a0 	.word	0x200001a0
 800021c:	00000000 	.word	0x00000000
 8000220:	080083cc 	.word	0x080083cc

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001a4 	.word	0x200001a4
 800023c:	080083cc 	.word	0x080083cc

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <__aeabi_uldivmod>:
 8000250:	b953      	cbnz	r3, 8000268 <__aeabi_uldivmod+0x18>
 8000252:	b94a      	cbnz	r2, 8000268 <__aeabi_uldivmod+0x18>
 8000254:	2900      	cmp	r1, #0
 8000256:	bf08      	it	eq
 8000258:	2800      	cmpeq	r0, #0
 800025a:	bf1c      	itt	ne
 800025c:	f04f 31ff 	movne.w	r1, #4294967295
 8000260:	f04f 30ff 	movne.w	r0, #4294967295
 8000264:	f000 b988 	b.w	8000578 <__aeabi_idiv0>
 8000268:	f1ad 0c08 	sub.w	ip, sp, #8
 800026c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000270:	f000 f806 	bl	8000280 <__udivmoddi4>
 8000274:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000278:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800027c:	b004      	add	sp, #16
 800027e:	4770      	bx	lr

08000280 <__udivmoddi4>:
 8000280:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000284:	9d08      	ldr	r5, [sp, #32]
 8000286:	468e      	mov	lr, r1
 8000288:	4604      	mov	r4, r0
 800028a:	4688      	mov	r8, r1
 800028c:	2b00      	cmp	r3, #0
 800028e:	d14a      	bne.n	8000326 <__udivmoddi4+0xa6>
 8000290:	428a      	cmp	r2, r1
 8000292:	4617      	mov	r7, r2
 8000294:	d962      	bls.n	800035c <__udivmoddi4+0xdc>
 8000296:	fab2 f682 	clz	r6, r2
 800029a:	b14e      	cbz	r6, 80002b0 <__udivmoddi4+0x30>
 800029c:	f1c6 0320 	rsb	r3, r6, #32
 80002a0:	fa01 f806 	lsl.w	r8, r1, r6
 80002a4:	fa20 f303 	lsr.w	r3, r0, r3
 80002a8:	40b7      	lsls	r7, r6
 80002aa:	ea43 0808 	orr.w	r8, r3, r8
 80002ae:	40b4      	lsls	r4, r6
 80002b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b4:	fa1f fc87 	uxth.w	ip, r7
 80002b8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002bc:	0c23      	lsrs	r3, r4, #16
 80002be:	fb0e 8811 	mls	r8, lr, r1, r8
 80002c2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002c6:	fb01 f20c 	mul.w	r2, r1, ip
 80002ca:	429a      	cmp	r2, r3
 80002cc:	d909      	bls.n	80002e2 <__udivmoddi4+0x62>
 80002ce:	18fb      	adds	r3, r7, r3
 80002d0:	f101 30ff 	add.w	r0, r1, #4294967295
 80002d4:	f080 80ea 	bcs.w	80004ac <__udivmoddi4+0x22c>
 80002d8:	429a      	cmp	r2, r3
 80002da:	f240 80e7 	bls.w	80004ac <__udivmoddi4+0x22c>
 80002de:	3902      	subs	r1, #2
 80002e0:	443b      	add	r3, r7
 80002e2:	1a9a      	subs	r2, r3, r2
 80002e4:	b2a3      	uxth	r3, r4
 80002e6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002ea:	fb0e 2210 	mls	r2, lr, r0, r2
 80002ee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002f2:	fb00 fc0c 	mul.w	ip, r0, ip
 80002f6:	459c      	cmp	ip, r3
 80002f8:	d909      	bls.n	800030e <__udivmoddi4+0x8e>
 80002fa:	18fb      	adds	r3, r7, r3
 80002fc:	f100 32ff 	add.w	r2, r0, #4294967295
 8000300:	f080 80d6 	bcs.w	80004b0 <__udivmoddi4+0x230>
 8000304:	459c      	cmp	ip, r3
 8000306:	f240 80d3 	bls.w	80004b0 <__udivmoddi4+0x230>
 800030a:	443b      	add	r3, r7
 800030c:	3802      	subs	r0, #2
 800030e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000312:	eba3 030c 	sub.w	r3, r3, ip
 8000316:	2100      	movs	r1, #0
 8000318:	b11d      	cbz	r5, 8000322 <__udivmoddi4+0xa2>
 800031a:	40f3      	lsrs	r3, r6
 800031c:	2200      	movs	r2, #0
 800031e:	e9c5 3200 	strd	r3, r2, [r5]
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	428b      	cmp	r3, r1
 8000328:	d905      	bls.n	8000336 <__udivmoddi4+0xb6>
 800032a:	b10d      	cbz	r5, 8000330 <__udivmoddi4+0xb0>
 800032c:	e9c5 0100 	strd	r0, r1, [r5]
 8000330:	2100      	movs	r1, #0
 8000332:	4608      	mov	r0, r1
 8000334:	e7f5      	b.n	8000322 <__udivmoddi4+0xa2>
 8000336:	fab3 f183 	clz	r1, r3
 800033a:	2900      	cmp	r1, #0
 800033c:	d146      	bne.n	80003cc <__udivmoddi4+0x14c>
 800033e:	4573      	cmp	r3, lr
 8000340:	d302      	bcc.n	8000348 <__udivmoddi4+0xc8>
 8000342:	4282      	cmp	r2, r0
 8000344:	f200 8105 	bhi.w	8000552 <__udivmoddi4+0x2d2>
 8000348:	1a84      	subs	r4, r0, r2
 800034a:	eb6e 0203 	sbc.w	r2, lr, r3
 800034e:	2001      	movs	r0, #1
 8000350:	4690      	mov	r8, r2
 8000352:	2d00      	cmp	r5, #0
 8000354:	d0e5      	beq.n	8000322 <__udivmoddi4+0xa2>
 8000356:	e9c5 4800 	strd	r4, r8, [r5]
 800035a:	e7e2      	b.n	8000322 <__udivmoddi4+0xa2>
 800035c:	2a00      	cmp	r2, #0
 800035e:	f000 8090 	beq.w	8000482 <__udivmoddi4+0x202>
 8000362:	fab2 f682 	clz	r6, r2
 8000366:	2e00      	cmp	r6, #0
 8000368:	f040 80a4 	bne.w	80004b4 <__udivmoddi4+0x234>
 800036c:	1a8a      	subs	r2, r1, r2
 800036e:	0c03      	lsrs	r3, r0, #16
 8000370:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000374:	b280      	uxth	r0, r0
 8000376:	b2bc      	uxth	r4, r7
 8000378:	2101      	movs	r1, #1
 800037a:	fbb2 fcfe 	udiv	ip, r2, lr
 800037e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000382:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000386:	fb04 f20c 	mul.w	r2, r4, ip
 800038a:	429a      	cmp	r2, r3
 800038c:	d907      	bls.n	800039e <__udivmoddi4+0x11e>
 800038e:	18fb      	adds	r3, r7, r3
 8000390:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000394:	d202      	bcs.n	800039c <__udivmoddi4+0x11c>
 8000396:	429a      	cmp	r2, r3
 8000398:	f200 80e0 	bhi.w	800055c <__udivmoddi4+0x2dc>
 800039c:	46c4      	mov	ip, r8
 800039e:	1a9b      	subs	r3, r3, r2
 80003a0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003a4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003a8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003ac:	fb02 f404 	mul.w	r4, r2, r4
 80003b0:	429c      	cmp	r4, r3
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x144>
 80003b4:	18fb      	adds	r3, r7, r3
 80003b6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x142>
 80003bc:	429c      	cmp	r4, r3
 80003be:	f200 80ca 	bhi.w	8000556 <__udivmoddi4+0x2d6>
 80003c2:	4602      	mov	r2, r0
 80003c4:	1b1b      	subs	r3, r3, r4
 80003c6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003ca:	e7a5      	b.n	8000318 <__udivmoddi4+0x98>
 80003cc:	f1c1 0620 	rsb	r6, r1, #32
 80003d0:	408b      	lsls	r3, r1
 80003d2:	fa22 f706 	lsr.w	r7, r2, r6
 80003d6:	431f      	orrs	r7, r3
 80003d8:	fa0e f401 	lsl.w	r4, lr, r1
 80003dc:	fa20 f306 	lsr.w	r3, r0, r6
 80003e0:	fa2e fe06 	lsr.w	lr, lr, r6
 80003e4:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003e8:	4323      	orrs	r3, r4
 80003ea:	fa00 f801 	lsl.w	r8, r0, r1
 80003ee:	fa1f fc87 	uxth.w	ip, r7
 80003f2:	fbbe f0f9 	udiv	r0, lr, r9
 80003f6:	0c1c      	lsrs	r4, r3, #16
 80003f8:	fb09 ee10 	mls	lr, r9, r0, lr
 80003fc:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000400:	fb00 fe0c 	mul.w	lr, r0, ip
 8000404:	45a6      	cmp	lr, r4
 8000406:	fa02 f201 	lsl.w	r2, r2, r1
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x1a0>
 800040c:	193c      	adds	r4, r7, r4
 800040e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000412:	f080 809c 	bcs.w	800054e <__udivmoddi4+0x2ce>
 8000416:	45a6      	cmp	lr, r4
 8000418:	f240 8099 	bls.w	800054e <__udivmoddi4+0x2ce>
 800041c:	3802      	subs	r0, #2
 800041e:	443c      	add	r4, r7
 8000420:	eba4 040e 	sub.w	r4, r4, lr
 8000424:	fa1f fe83 	uxth.w	lr, r3
 8000428:	fbb4 f3f9 	udiv	r3, r4, r9
 800042c:	fb09 4413 	mls	r4, r9, r3, r4
 8000430:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000434:	fb03 fc0c 	mul.w	ip, r3, ip
 8000438:	45a4      	cmp	ip, r4
 800043a:	d908      	bls.n	800044e <__udivmoddi4+0x1ce>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000442:	f080 8082 	bcs.w	800054a <__udivmoddi4+0x2ca>
 8000446:	45a4      	cmp	ip, r4
 8000448:	d97f      	bls.n	800054a <__udivmoddi4+0x2ca>
 800044a:	3b02      	subs	r3, #2
 800044c:	443c      	add	r4, r7
 800044e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000452:	eba4 040c 	sub.w	r4, r4, ip
 8000456:	fba0 ec02 	umull	lr, ip, r0, r2
 800045a:	4564      	cmp	r4, ip
 800045c:	4673      	mov	r3, lr
 800045e:	46e1      	mov	r9, ip
 8000460:	d362      	bcc.n	8000528 <__udivmoddi4+0x2a8>
 8000462:	d05f      	beq.n	8000524 <__udivmoddi4+0x2a4>
 8000464:	b15d      	cbz	r5, 800047e <__udivmoddi4+0x1fe>
 8000466:	ebb8 0203 	subs.w	r2, r8, r3
 800046a:	eb64 0409 	sbc.w	r4, r4, r9
 800046e:	fa04 f606 	lsl.w	r6, r4, r6
 8000472:	fa22 f301 	lsr.w	r3, r2, r1
 8000476:	431e      	orrs	r6, r3
 8000478:	40cc      	lsrs	r4, r1
 800047a:	e9c5 6400 	strd	r6, r4, [r5]
 800047e:	2100      	movs	r1, #0
 8000480:	e74f      	b.n	8000322 <__udivmoddi4+0xa2>
 8000482:	fbb1 fcf2 	udiv	ip, r1, r2
 8000486:	0c01      	lsrs	r1, r0, #16
 8000488:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800048c:	b280      	uxth	r0, r0
 800048e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000492:	463b      	mov	r3, r7
 8000494:	4638      	mov	r0, r7
 8000496:	463c      	mov	r4, r7
 8000498:	46b8      	mov	r8, r7
 800049a:	46be      	mov	lr, r7
 800049c:	2620      	movs	r6, #32
 800049e:	fbb1 f1f7 	udiv	r1, r1, r7
 80004a2:	eba2 0208 	sub.w	r2, r2, r8
 80004a6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004aa:	e766      	b.n	800037a <__udivmoddi4+0xfa>
 80004ac:	4601      	mov	r1, r0
 80004ae:	e718      	b.n	80002e2 <__udivmoddi4+0x62>
 80004b0:	4610      	mov	r0, r2
 80004b2:	e72c      	b.n	800030e <__udivmoddi4+0x8e>
 80004b4:	f1c6 0220 	rsb	r2, r6, #32
 80004b8:	fa2e f302 	lsr.w	r3, lr, r2
 80004bc:	40b7      	lsls	r7, r6
 80004be:	40b1      	lsls	r1, r6
 80004c0:	fa20 f202 	lsr.w	r2, r0, r2
 80004c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004c8:	430a      	orrs	r2, r1
 80004ca:	fbb3 f8fe 	udiv	r8, r3, lr
 80004ce:	b2bc      	uxth	r4, r7
 80004d0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004da:	fb08 f904 	mul.w	r9, r8, r4
 80004de:	40b0      	lsls	r0, r6
 80004e0:	4589      	cmp	r9, r1
 80004e2:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004e6:	b280      	uxth	r0, r0
 80004e8:	d93e      	bls.n	8000568 <__udivmoddi4+0x2e8>
 80004ea:	1879      	adds	r1, r7, r1
 80004ec:	f108 3cff 	add.w	ip, r8, #4294967295
 80004f0:	d201      	bcs.n	80004f6 <__udivmoddi4+0x276>
 80004f2:	4589      	cmp	r9, r1
 80004f4:	d81f      	bhi.n	8000536 <__udivmoddi4+0x2b6>
 80004f6:	eba1 0109 	sub.w	r1, r1, r9
 80004fa:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fe:	fb09 f804 	mul.w	r8, r9, r4
 8000502:	fb0e 1119 	mls	r1, lr, r9, r1
 8000506:	b292      	uxth	r2, r2
 8000508:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800050c:	4542      	cmp	r2, r8
 800050e:	d229      	bcs.n	8000564 <__udivmoddi4+0x2e4>
 8000510:	18ba      	adds	r2, r7, r2
 8000512:	f109 31ff 	add.w	r1, r9, #4294967295
 8000516:	d2c4      	bcs.n	80004a2 <__udivmoddi4+0x222>
 8000518:	4542      	cmp	r2, r8
 800051a:	d2c2      	bcs.n	80004a2 <__udivmoddi4+0x222>
 800051c:	f1a9 0102 	sub.w	r1, r9, #2
 8000520:	443a      	add	r2, r7
 8000522:	e7be      	b.n	80004a2 <__udivmoddi4+0x222>
 8000524:	45f0      	cmp	r8, lr
 8000526:	d29d      	bcs.n	8000464 <__udivmoddi4+0x1e4>
 8000528:	ebbe 0302 	subs.w	r3, lr, r2
 800052c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000530:	3801      	subs	r0, #1
 8000532:	46e1      	mov	r9, ip
 8000534:	e796      	b.n	8000464 <__udivmoddi4+0x1e4>
 8000536:	eba7 0909 	sub.w	r9, r7, r9
 800053a:	4449      	add	r1, r9
 800053c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000540:	fbb1 f9fe 	udiv	r9, r1, lr
 8000544:	fb09 f804 	mul.w	r8, r9, r4
 8000548:	e7db      	b.n	8000502 <__udivmoddi4+0x282>
 800054a:	4673      	mov	r3, lr
 800054c:	e77f      	b.n	800044e <__udivmoddi4+0x1ce>
 800054e:	4650      	mov	r0, sl
 8000550:	e766      	b.n	8000420 <__udivmoddi4+0x1a0>
 8000552:	4608      	mov	r0, r1
 8000554:	e6fd      	b.n	8000352 <__udivmoddi4+0xd2>
 8000556:	443b      	add	r3, r7
 8000558:	3a02      	subs	r2, #2
 800055a:	e733      	b.n	80003c4 <__udivmoddi4+0x144>
 800055c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000560:	443b      	add	r3, r7
 8000562:	e71c      	b.n	800039e <__udivmoddi4+0x11e>
 8000564:	4649      	mov	r1, r9
 8000566:	e79c      	b.n	80004a2 <__udivmoddi4+0x222>
 8000568:	eba1 0109 	sub.w	r1, r1, r9
 800056c:	46c4      	mov	ip, r8
 800056e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000572:	fb09 f804 	mul.w	r8, r9, r4
 8000576:	e7c4      	b.n	8000502 <__udivmoddi4+0x282>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000580:	f000 fd93 	bl	80010aa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000584:	f000 f844 	bl	8000610 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000588:	f000 f960 	bl	800084c <MX_GPIO_Init>
  MX_ETH_Init();
 800058c:	f000 f8b2 	bl	80006f4 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000590:	f000 f8fe 	bl	8000790 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000594:	f000 f92c 	bl	80007f0 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000598:	f004 f9d2 	bl	8004940 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of Semaforocont */
  SemaforocontHandle = osSemaphoreNew(2, 0, &Semaforocont_attributes);
 800059c:	4a11      	ldr	r2, [pc, #68]	@ (80005e4 <main+0x68>)
 800059e:	2100      	movs	r1, #0
 80005a0:	2002      	movs	r0, #2
 80005a2:	f004 fb0b 	bl	8004bbc <osSemaphoreNew>
 80005a6:	4603      	mov	r3, r0
 80005a8:	4a0f      	ldr	r2, [pc, #60]	@ (80005e8 <main+0x6c>)
 80005aa:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Task01 */
  Task01Handle = osThreadNew(Task01Fun, NULL, &Task01_attributes);
 80005ac:	4a0f      	ldr	r2, [pc, #60]	@ (80005ec <main+0x70>)
 80005ae:	2100      	movs	r1, #0
 80005b0:	480f      	ldr	r0, [pc, #60]	@ (80005f0 <main+0x74>)
 80005b2:	f004 fa2f 	bl	8004a14 <osThreadNew>
 80005b6:	4603      	mov	r3, r0
 80005b8:	4a0e      	ldr	r2, [pc, #56]	@ (80005f4 <main+0x78>)
 80005ba:	6013      	str	r3, [r2, #0]

  /* creation of Task02 */
  Task02Handle = osThreadNew(Task02Fun, NULL, &Task02_attributes);
 80005bc:	4a0e      	ldr	r2, [pc, #56]	@ (80005f8 <main+0x7c>)
 80005be:	2100      	movs	r1, #0
 80005c0:	480e      	ldr	r0, [pc, #56]	@ (80005fc <main+0x80>)
 80005c2:	f004 fa27 	bl	8004a14 <osThreadNew>
 80005c6:	4603      	mov	r3, r0
 80005c8:	4a0d      	ldr	r2, [pc, #52]	@ (8000600 <main+0x84>)
 80005ca:	6013      	str	r3, [r2, #0]

  /* creation of Task03 */
  Task03Handle = osThreadNew(Task03Fun, NULL, &Task03_attributes);
 80005cc:	4a0d      	ldr	r2, [pc, #52]	@ (8000604 <main+0x88>)
 80005ce:	2100      	movs	r1, #0
 80005d0:	480d      	ldr	r0, [pc, #52]	@ (8000608 <main+0x8c>)
 80005d2:	f004 fa1f 	bl	8004a14 <osThreadNew>
 80005d6:	4603      	mov	r3, r0
 80005d8:	4a0c      	ldr	r2, [pc, #48]	@ (800060c <main+0x90>)
 80005da:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80005dc:	f004 f9e4 	bl	80049a8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005e0:	bf00      	nop
 80005e2:	e7fd      	b.n	80005e0 <main+0x64>
 80005e4:	080084f0 	.word	0x080084f0
 80005e8:	20000818 	.word	0x20000818
 80005ec:	08008484 	.word	0x08008484
 80005f0:	080009e9 	.word	0x080009e9
 80005f4:	2000080c 	.word	0x2000080c
 80005f8:	080084a8 	.word	0x080084a8
 80005fc:	08000a61 	.word	0x08000a61
 8000600:	20000810 	.word	0x20000810
 8000604:	080084cc 	.word	0x080084cc
 8000608:	08000add 	.word	0x08000add
 800060c:	20000814 	.word	0x20000814

08000610 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b094      	sub	sp, #80	@ 0x50
 8000614:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000616:	f107 031c 	add.w	r3, r7, #28
 800061a:	2234      	movs	r2, #52	@ 0x34
 800061c:	2100      	movs	r1, #0
 800061e:	4618      	mov	r0, r3
 8000620:	f007 fde4 	bl	80081ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000624:	f107 0308 	add.w	r3, r7, #8
 8000628:	2200      	movs	r2, #0
 800062a:	601a      	str	r2, [r3, #0]
 800062c:	605a      	str	r2, [r3, #4]
 800062e:	609a      	str	r2, [r3, #8]
 8000630:	60da      	str	r2, [r3, #12]
 8000632:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000634:	f001 fcd2 	bl	8001fdc <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000638:	4b2c      	ldr	r3, [pc, #176]	@ (80006ec <SystemClock_Config+0xdc>)
 800063a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800063c:	4a2b      	ldr	r2, [pc, #172]	@ (80006ec <SystemClock_Config+0xdc>)
 800063e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000642:	6413      	str	r3, [r2, #64]	@ 0x40
 8000644:	4b29      	ldr	r3, [pc, #164]	@ (80006ec <SystemClock_Config+0xdc>)
 8000646:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000648:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800064c:	607b      	str	r3, [r7, #4]
 800064e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000650:	4b27      	ldr	r3, [pc, #156]	@ (80006f0 <SystemClock_Config+0xe0>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000658:	4a25      	ldr	r2, [pc, #148]	@ (80006f0 <SystemClock_Config+0xe0>)
 800065a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800065e:	6013      	str	r3, [r2, #0]
 8000660:	4b23      	ldr	r3, [pc, #140]	@ (80006f0 <SystemClock_Config+0xe0>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000668:	603b      	str	r3, [r7, #0]
 800066a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800066c:	2301      	movs	r3, #1
 800066e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000670:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000674:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000676:	2302      	movs	r3, #2
 8000678:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800067a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800067e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000680:	2304      	movs	r3, #4
 8000682:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000684:	2360      	movs	r3, #96	@ 0x60
 8000686:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000688:	2302      	movs	r3, #2
 800068a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800068c:	2304      	movs	r3, #4
 800068e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000690:	2302      	movs	r3, #2
 8000692:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000694:	f107 031c 	add.w	r3, r7, #28
 8000698:	4618      	mov	r0, r3
 800069a:	f001 fcff 	bl	800209c <HAL_RCC_OscConfig>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d001      	beq.n	80006a8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80006a4:	f000 fa68 	bl	8000b78 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80006a8:	f001 fca8 	bl	8001ffc <HAL_PWREx_EnableOverDrive>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80006b2:	f000 fa61 	bl	8000b78 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006b6:	230f      	movs	r3, #15
 80006b8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ba:	2302      	movs	r3, #2
 80006bc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006be:	2300      	movs	r3, #0
 80006c0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006c2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006c6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006c8:	2300      	movs	r3, #0
 80006ca:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80006cc:	f107 0308 	add.w	r3, r7, #8
 80006d0:	2103      	movs	r1, #3
 80006d2:	4618      	mov	r0, r3
 80006d4:	f001 ff90 	bl	80025f8 <HAL_RCC_ClockConfig>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80006de:	f000 fa4b 	bl	8000b78 <Error_Handler>
  }
}
 80006e2:	bf00      	nop
 80006e4:	3750      	adds	r7, #80	@ 0x50
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	40023800 	.word	0x40023800
 80006f0:	40007000 	.word	0x40007000

080006f4 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80006f8:	4b1f      	ldr	r3, [pc, #124]	@ (8000778 <MX_ETH_Init+0x84>)
 80006fa:	4a20      	ldr	r2, [pc, #128]	@ (800077c <MX_ETH_Init+0x88>)
 80006fc:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80006fe:	4b20      	ldr	r3, [pc, #128]	@ (8000780 <MX_ETH_Init+0x8c>)
 8000700:	2200      	movs	r2, #0
 8000702:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000704:	4b1e      	ldr	r3, [pc, #120]	@ (8000780 <MX_ETH_Init+0x8c>)
 8000706:	2280      	movs	r2, #128	@ 0x80
 8000708:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800070a:	4b1d      	ldr	r3, [pc, #116]	@ (8000780 <MX_ETH_Init+0x8c>)
 800070c:	22e1      	movs	r2, #225	@ 0xe1
 800070e:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000710:	4b1b      	ldr	r3, [pc, #108]	@ (8000780 <MX_ETH_Init+0x8c>)
 8000712:	2200      	movs	r2, #0
 8000714:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000716:	4b1a      	ldr	r3, [pc, #104]	@ (8000780 <MX_ETH_Init+0x8c>)
 8000718:	2200      	movs	r2, #0
 800071a:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 800071c:	4b18      	ldr	r3, [pc, #96]	@ (8000780 <MX_ETH_Init+0x8c>)
 800071e:	2200      	movs	r2, #0
 8000720:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000722:	4b15      	ldr	r3, [pc, #84]	@ (8000778 <MX_ETH_Init+0x84>)
 8000724:	4a16      	ldr	r2, [pc, #88]	@ (8000780 <MX_ETH_Init+0x8c>)
 8000726:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000728:	4b13      	ldr	r3, [pc, #76]	@ (8000778 <MX_ETH_Init+0x84>)
 800072a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800072e:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000730:	4b11      	ldr	r3, [pc, #68]	@ (8000778 <MX_ETH_Init+0x84>)
 8000732:	4a14      	ldr	r2, [pc, #80]	@ (8000784 <MX_ETH_Init+0x90>)
 8000734:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000736:	4b10      	ldr	r3, [pc, #64]	@ (8000778 <MX_ETH_Init+0x84>)
 8000738:	4a13      	ldr	r2, [pc, #76]	@ (8000788 <MX_ETH_Init+0x94>)
 800073a:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800073c:	4b0e      	ldr	r3, [pc, #56]	@ (8000778 <MX_ETH_Init+0x84>)
 800073e:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8000742:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000744:	480c      	ldr	r0, [pc, #48]	@ (8000778 <MX_ETH_Init+0x84>)
 8000746:	f000 fde3 	bl	8001310 <HAL_ETH_Init>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000750:	f000 fa12 	bl	8000b78 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000754:	2238      	movs	r2, #56	@ 0x38
 8000756:	2100      	movs	r1, #0
 8000758:	480c      	ldr	r0, [pc, #48]	@ (800078c <MX_ETH_Init+0x98>)
 800075a:	f007 fd47 	bl	80081ec <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800075e:	4b0b      	ldr	r3, [pc, #44]	@ (800078c <MX_ETH_Init+0x98>)
 8000760:	2221      	movs	r2, #33	@ 0x21
 8000762:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000764:	4b09      	ldr	r3, [pc, #36]	@ (800078c <MX_ETH_Init+0x98>)
 8000766:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 800076a:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800076c:	4b07      	ldr	r3, [pc, #28]	@ (800078c <MX_ETH_Init+0x98>)
 800076e:	2200      	movs	r2, #0
 8000770:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000772:	bf00      	nop
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	200001f4 	.word	0x200001f4
 800077c:	40028000 	.word	0x40028000
 8000780:	20000820 	.word	0x20000820
 8000784:	20000100 	.word	0x20000100
 8000788:	20000060 	.word	0x20000060
 800078c:	200001bc 	.word	0x200001bc

08000790 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000794:	4b14      	ldr	r3, [pc, #80]	@ (80007e8 <MX_USART3_UART_Init+0x58>)
 8000796:	4a15      	ldr	r2, [pc, #84]	@ (80007ec <MX_USART3_UART_Init+0x5c>)
 8000798:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800079a:	4b13      	ldr	r3, [pc, #76]	@ (80007e8 <MX_USART3_UART_Init+0x58>)
 800079c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007a0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80007a2:	4b11      	ldr	r3, [pc, #68]	@ (80007e8 <MX_USART3_UART_Init+0x58>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80007a8:	4b0f      	ldr	r3, [pc, #60]	@ (80007e8 <MX_USART3_UART_Init+0x58>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80007ae:	4b0e      	ldr	r3, [pc, #56]	@ (80007e8 <MX_USART3_UART_Init+0x58>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80007b4:	4b0c      	ldr	r3, [pc, #48]	@ (80007e8 <MX_USART3_UART_Init+0x58>)
 80007b6:	220c      	movs	r2, #12
 80007b8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ba:	4b0b      	ldr	r3, [pc, #44]	@ (80007e8 <MX_USART3_UART_Init+0x58>)
 80007bc:	2200      	movs	r2, #0
 80007be:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80007c0:	4b09      	ldr	r3, [pc, #36]	@ (80007e8 <MX_USART3_UART_Init+0x58>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007c6:	4b08      	ldr	r3, [pc, #32]	@ (80007e8 <MX_USART3_UART_Init+0x58>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007cc:	4b06      	ldr	r3, [pc, #24]	@ (80007e8 <MX_USART3_UART_Init+0x58>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80007d2:	4805      	ldr	r0, [pc, #20]	@ (80007e8 <MX_USART3_UART_Init+0x58>)
 80007d4:	f003 f85e 	bl	8003894 <HAL_UART_Init>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80007de:	f000 f9cb 	bl	8000b78 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80007e2:	bf00      	nop
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	200002a4 	.word	0x200002a4
 80007ec:	40004800 	.word	0x40004800

080007f0 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80007f4:	4b14      	ldr	r3, [pc, #80]	@ (8000848 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007f6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80007fa:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80007fc:	4b12      	ldr	r3, [pc, #72]	@ (8000848 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007fe:	2206      	movs	r2, #6
 8000800:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000802:	4b11      	ldr	r3, [pc, #68]	@ (8000848 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000804:	2202      	movs	r2, #2
 8000806:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000808:	4b0f      	ldr	r3, [pc, #60]	@ (8000848 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800080a:	2200      	movs	r2, #0
 800080c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800080e:	4b0e      	ldr	r3, [pc, #56]	@ (8000848 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000810:	2202      	movs	r2, #2
 8000812:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000814:	4b0c      	ldr	r3, [pc, #48]	@ (8000848 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000816:	2201      	movs	r2, #1
 8000818:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800081a:	4b0b      	ldr	r3, [pc, #44]	@ (8000848 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800081c:	2200      	movs	r2, #0
 800081e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000820:	4b09      	ldr	r3, [pc, #36]	@ (8000848 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000822:	2200      	movs	r2, #0
 8000824:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000826:	4b08      	ldr	r3, [pc, #32]	@ (8000848 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000828:	2201      	movs	r2, #1
 800082a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800082c:	4b06      	ldr	r3, [pc, #24]	@ (8000848 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800082e:	2200      	movs	r2, #0
 8000830:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000832:	4805      	ldr	r0, [pc, #20]	@ (8000848 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000834:	f001 fa98 	bl	8001d68 <HAL_PCD_Init>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800083e:	f000 f99b 	bl	8000b78 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000842:	bf00      	nop
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	2000032c 	.word	0x2000032c

0800084c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b08c      	sub	sp, #48	@ 0x30
 8000850:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000852:	f107 031c 	add.w	r3, r7, #28
 8000856:	2200      	movs	r2, #0
 8000858:	601a      	str	r2, [r3, #0]
 800085a:	605a      	str	r2, [r3, #4]
 800085c:	609a      	str	r2, [r3, #8]
 800085e:	60da      	str	r2, [r3, #12]
 8000860:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000862:	4b4b      	ldr	r3, [pc, #300]	@ (8000990 <MX_GPIO_Init+0x144>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000866:	4a4a      	ldr	r2, [pc, #296]	@ (8000990 <MX_GPIO_Init+0x144>)
 8000868:	f043 0304 	orr.w	r3, r3, #4
 800086c:	6313      	str	r3, [r2, #48]	@ 0x30
 800086e:	4b48      	ldr	r3, [pc, #288]	@ (8000990 <MX_GPIO_Init+0x144>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000872:	f003 0304 	and.w	r3, r3, #4
 8000876:	61bb      	str	r3, [r7, #24]
 8000878:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800087a:	4b45      	ldr	r3, [pc, #276]	@ (8000990 <MX_GPIO_Init+0x144>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800087e:	4a44      	ldr	r2, [pc, #272]	@ (8000990 <MX_GPIO_Init+0x144>)
 8000880:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000884:	6313      	str	r3, [r2, #48]	@ 0x30
 8000886:	4b42      	ldr	r3, [pc, #264]	@ (8000990 <MX_GPIO_Init+0x144>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800088a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800088e:	617b      	str	r3, [r7, #20]
 8000890:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000892:	4b3f      	ldr	r3, [pc, #252]	@ (8000990 <MX_GPIO_Init+0x144>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000896:	4a3e      	ldr	r2, [pc, #248]	@ (8000990 <MX_GPIO_Init+0x144>)
 8000898:	f043 0301 	orr.w	r3, r3, #1
 800089c:	6313      	str	r3, [r2, #48]	@ 0x30
 800089e:	4b3c      	ldr	r3, [pc, #240]	@ (8000990 <MX_GPIO_Init+0x144>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008a2:	f003 0301 	and.w	r3, r3, #1
 80008a6:	613b      	str	r3, [r7, #16]
 80008a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008aa:	4b39      	ldr	r3, [pc, #228]	@ (8000990 <MX_GPIO_Init+0x144>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ae:	4a38      	ldr	r2, [pc, #224]	@ (8000990 <MX_GPIO_Init+0x144>)
 80008b0:	f043 0302 	orr.w	r3, r3, #2
 80008b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008b6:	4b36      	ldr	r3, [pc, #216]	@ (8000990 <MX_GPIO_Init+0x144>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ba:	f003 0302 	and.w	r3, r3, #2
 80008be:	60fb      	str	r3, [r7, #12]
 80008c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008c2:	4b33      	ldr	r3, [pc, #204]	@ (8000990 <MX_GPIO_Init+0x144>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008c6:	4a32      	ldr	r2, [pc, #200]	@ (8000990 <MX_GPIO_Init+0x144>)
 80008c8:	f043 0308 	orr.w	r3, r3, #8
 80008cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ce:	4b30      	ldr	r3, [pc, #192]	@ (8000990 <MX_GPIO_Init+0x144>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008d2:	f003 0308 	and.w	r3, r3, #8
 80008d6:	60bb      	str	r3, [r7, #8]
 80008d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008da:	4b2d      	ldr	r3, [pc, #180]	@ (8000990 <MX_GPIO_Init+0x144>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008de:	4a2c      	ldr	r2, [pc, #176]	@ (8000990 <MX_GPIO_Init+0x144>)
 80008e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80008e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008e6:	4b2a      	ldr	r3, [pc, #168]	@ (8000990 <MX_GPIO_Init+0x144>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80008ee:	607b      	str	r3, [r7, #4]
 80008f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80008f2:	2200      	movs	r2, #0
 80008f4:	f244 0181 	movw	r1, #16513	@ 0x4081
 80008f8:	4826      	ldr	r0, [pc, #152]	@ (8000994 <MX_GPIO_Init+0x148>)
 80008fa:	f001 fa03 	bl	8001d04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80008fe:	2200      	movs	r2, #0
 8000900:	2140      	movs	r1, #64	@ 0x40
 8000902:	4825      	ldr	r0, [pc, #148]	@ (8000998 <MX_GPIO_Init+0x14c>)
 8000904:	f001 f9fe 	bl	8001d04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000908:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800090c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800090e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000912:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000914:	2300      	movs	r3, #0
 8000916:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000918:	f107 031c 	add.w	r3, r7, #28
 800091c:	4619      	mov	r1, r3
 800091e:	481f      	ldr	r0, [pc, #124]	@ (800099c <MX_GPIO_Init+0x150>)
 8000920:	f001 f844 	bl	80019ac <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000924:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000928:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800092a:	2301      	movs	r3, #1
 800092c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092e:	2300      	movs	r3, #0
 8000930:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000932:	2300      	movs	r3, #0
 8000934:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000936:	f107 031c 	add.w	r3, r7, #28
 800093a:	4619      	mov	r1, r3
 800093c:	4815      	ldr	r0, [pc, #84]	@ (8000994 <MX_GPIO_Init+0x148>)
 800093e:	f001 f835 	bl	80019ac <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000942:	2340      	movs	r3, #64	@ 0x40
 8000944:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000946:	2301      	movs	r3, #1
 8000948:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094a:	2300      	movs	r3, #0
 800094c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800094e:	2300      	movs	r3, #0
 8000950:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000952:	f107 031c 	add.w	r3, r7, #28
 8000956:	4619      	mov	r1, r3
 8000958:	480f      	ldr	r0, [pc, #60]	@ (8000998 <MX_GPIO_Init+0x14c>)
 800095a:	f001 f827 	bl	80019ac <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800095e:	2380      	movs	r3, #128	@ 0x80
 8000960:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000962:	2300      	movs	r3, #0
 8000964:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000966:	2300      	movs	r3, #0
 8000968:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800096a:	f107 031c 	add.w	r3, r7, #28
 800096e:	4619      	mov	r1, r3
 8000970:	4809      	ldr	r0, [pc, #36]	@ (8000998 <MX_GPIO_Init+0x14c>)
 8000972:	f001 f81b 	bl	80019ac <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000976:	2200      	movs	r2, #0
 8000978:	2105      	movs	r1, #5
 800097a:	2028      	movs	r0, #40	@ 0x28
 800097c:	f000 fc9e 	bl	80012bc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000980:	2028      	movs	r0, #40	@ 0x28
 8000982:	f000 fcb7 	bl	80012f4 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000986:	bf00      	nop
 8000988:	3730      	adds	r7, #48	@ 0x30
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	40023800 	.word	0x40023800
 8000994:	40020400 	.word	0x40020400
 8000998:	40021800 	.word	0x40021800
 800099c:	40020800 	.word	0x40020800

080009a0 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b084      	sub	sp, #16
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	4603      	mov	r3, r0
 80009a8:	80fb      	strh	r3, [r7, #6]

	if (GPIO_Pin == GPIO_PIN_13) {
 80009aa:	88fb      	ldrh	r3, [r7, #6]
 80009ac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80009b0:	d110      	bne.n	80009d4 <HAL_GPIO_EXTI_Callback+0x34>
		char *str1 = "interrupcao ativada\n";
 80009b2:	4b0a      	ldr	r3, [pc, #40]	@ (80009dc <HAL_GPIO_EXTI_Callback+0x3c>)
 80009b4:	60fb      	str	r3, [r7, #12]

		HAL_UART_Transmit(&huart3, (uint8_t*) str1, strlen(str1), 100);
 80009b6:	68f8      	ldr	r0, [r7, #12]
 80009b8:	f7ff fc42 	bl	8000240 <strlen>
 80009bc:	4603      	mov	r3, r0
 80009be:	b29a      	uxth	r2, r3
 80009c0:	2364      	movs	r3, #100	@ 0x64
 80009c2:	68f9      	ldr	r1, [r7, #12]
 80009c4:	4806      	ldr	r0, [pc, #24]	@ (80009e0 <HAL_GPIO_EXTI_Callback+0x40>)
 80009c6:	f002 ffb3 	bl	8003930 <HAL_UART_Transmit>
		osSemaphoreRelease(SemaforocontHandle);
 80009ca:	4b06      	ldr	r3, [pc, #24]	@ (80009e4 <HAL_GPIO_EXTI_Callback+0x44>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	4618      	mov	r0, r3
 80009d0:	f004 f9f6 	bl	8004dc0 <osSemaphoreRelease>
		//osSemaphoreRelease(SemaforocontHandle);

	}

}
 80009d4:	bf00      	nop
 80009d6:	3710      	adds	r7, #16
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	0800840c 	.word	0x0800840c
 80009e0:	200002a4 	.word	0x200002a4
 80009e4:	20000818 	.word	0x20000818

080009e8 <Task01Fun>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_task01fun */
void Task01Fun(void *argument)
{
 80009e8:	b5b0      	push	{r4, r5, r7, lr}
 80009ea:	b088      	sub	sp, #32
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  char msg[] = "Executando Task1...\r\n";
 80009f0:	4b17      	ldr	r3, [pc, #92]	@ (8000a50 <Task01Fun+0x68>)
 80009f2:	f107 0408 	add.w	r4, r7, #8
 80009f6:	461d      	mov	r5, r3
 80009f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009fc:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000a00:	6020      	str	r0, [r4, #0]
 8000a02:	3404      	adds	r4, #4
 8000a04:	8021      	strh	r1, [r4, #0]

	  for(;;)
	  {
		osSemaphoreAcquire(SemaforocontHandle, osWaitForever);
 8000a06:	4b13      	ldr	r3, [pc, #76]	@ (8000a54 <Task01Fun+0x6c>)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	f04f 31ff 	mov.w	r1, #4294967295
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f004 f970 	bl	8004cf4 <osSemaphoreAcquire>
		cont = osSemaphoreGetCount(SemaforocontHandle);
 8000a14:	4b0f      	ldr	r3, [pc, #60]	@ (8000a54 <Task01Fun+0x6c>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f004 fa29 	bl	8004e70 <osSemaphoreGetCount>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	b2da      	uxtb	r2, r3
 8000a22:	4b0d      	ldr	r3, [pc, #52]	@ (8000a58 <Task01Fun+0x70>)
 8000a24:	701a      	strb	r2, [r3, #0]


		HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000a26:	f107 0308 	add.w	r3, r7, #8
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f7ff fc08 	bl	8000240 <strlen>
 8000a30:	4603      	mov	r3, r0
 8000a32:	b29a      	uxth	r2, r3
 8000a34:	f107 0108 	add.w	r1, r7, #8
 8000a38:	f04f 33ff 	mov.w	r3, #4294967295
 8000a3c:	4807      	ldr	r0, [pc, #28]	@ (8000a5c <Task01Fun+0x74>)
 8000a3e:	f002 ff77 	bl	8003930 <HAL_UART_Transmit>

		//cont = osSemaphoreGetCount(SemaforocontHandle);
		osDelay(500);
 8000a42:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000a46:	f004 f88b 	bl	8004b60 <osDelay>
		osSemaphoreAcquire(SemaforocontHandle, osWaitForever);
 8000a4a:	bf00      	nop
 8000a4c:	e7db      	b.n	8000a06 <Task01Fun+0x1e>
 8000a4e:	bf00      	nop
 8000a50:	08008424 	.word	0x08008424
 8000a54:	20000818 	.word	0x20000818
 8000a58:	2000081c 	.word	0x2000081c
 8000a5c:	200002a4 	.word	0x200002a4

08000a60 <Task02Fun>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task02Fun */
void Task02Fun(void *argument)
{
 8000a60:	b5b0      	push	{r4, r5, r7, lr}
 8000a62:	b088      	sub	sp, #32
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task02Fun */
  /* Infinite loop */
	char msg[] = "Executando Task2 ...\r\n";
 8000a68:	4b18      	ldr	r3, [pc, #96]	@ (8000acc <Task02Fun+0x6c>)
 8000a6a:	f107 0408 	add.w	r4, r7, #8
 8000a6e:	461d      	mov	r5, r3
 8000a70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a74:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000a78:	6020      	str	r0, [r4, #0]
 8000a7a:	3404      	adds	r4, #4
 8000a7c:	8021      	strh	r1, [r4, #0]
 8000a7e:	3402      	adds	r4, #2
 8000a80:	0c0b      	lsrs	r3, r1, #16
 8000a82:	7023      	strb	r3, [r4, #0]
	  for(;;)
	  {
		osSemaphoreAcquire(SemaforocontHandle, osWaitForever);
 8000a84:	4b12      	ldr	r3, [pc, #72]	@ (8000ad0 <Task02Fun+0x70>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	f04f 31ff 	mov.w	r1, #4294967295
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f004 f931 	bl	8004cf4 <osSemaphoreAcquire>
		cont = osSemaphoreGetCount(SemaforocontHandle);
 8000a92:	4b0f      	ldr	r3, [pc, #60]	@ (8000ad0 <Task02Fun+0x70>)
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	4618      	mov	r0, r3
 8000a98:	f004 f9ea 	bl	8004e70 <osSemaphoreGetCount>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	b2da      	uxtb	r2, r3
 8000aa0:	4b0c      	ldr	r3, [pc, #48]	@ (8000ad4 <Task02Fun+0x74>)
 8000aa2:	701a      	strb	r2, [r3, #0]

		//HAL_GPIO_TogglePin(GPIOB, LD2_Pin);

		HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000aa4:	f107 0308 	add.w	r3, r7, #8
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f7ff fbc9 	bl	8000240 <strlen>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	b29a      	uxth	r2, r3
 8000ab2:	f107 0108 	add.w	r1, r7, #8
 8000ab6:	f04f 33ff 	mov.w	r3, #4294967295
 8000aba:	4807      	ldr	r0, [pc, #28]	@ (8000ad8 <Task02Fun+0x78>)
 8000abc:	f002 ff38 	bl	8003930 <HAL_UART_Transmit>

		//osSemaphoreRelease(SemaforocontHandle);
		//cont = osSemaphoreGetCount(SemaforocontHandle);

	    osDelay(500);
 8000ac0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000ac4:	f004 f84c 	bl	8004b60 <osDelay>
		osSemaphoreAcquire(SemaforocontHandle, osWaitForever);
 8000ac8:	bf00      	nop
 8000aca:	e7db      	b.n	8000a84 <Task02Fun+0x24>
 8000acc:	0800843c 	.word	0x0800843c
 8000ad0:	20000818 	.word	0x20000818
 8000ad4:	2000081c 	.word	0x2000081c
 8000ad8:	200002a4 	.word	0x200002a4

08000adc <Task03Fun>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task03Fun */
void Task03Fun(void *argument)
{
 8000adc:	b5b0      	push	{r4, r5, r7, lr}
 8000ade:	b088      	sub	sp, #32
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task03Fun */
  /* Infinite loop */
	char msg[] = "Executando Task3...\r\n";
 8000ae4:	4b17      	ldr	r3, [pc, #92]	@ (8000b44 <Task03Fun+0x68>)
 8000ae6:	f107 0408 	add.w	r4, r7, #8
 8000aea:	461d      	mov	r5, r3
 8000aec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000aee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000af0:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000af4:	6020      	str	r0, [r4, #0]
 8000af6:	3404      	adds	r4, #4
 8000af8:	8021      	strh	r1, [r4, #0]
	  for(;;)
	  {
		osSemaphoreAcquire(SemaforocontHandle, osWaitForever);
 8000afa:	4b13      	ldr	r3, [pc, #76]	@ (8000b48 <Task03Fun+0x6c>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	f04f 31ff 	mov.w	r1, #4294967295
 8000b02:	4618      	mov	r0, r3
 8000b04:	f004 f8f6 	bl	8004cf4 <osSemaphoreAcquire>
		cont = osSemaphoreGetCount(SemaforocontHandle);
 8000b08:	4b0f      	ldr	r3, [pc, #60]	@ (8000b48 <Task03Fun+0x6c>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	f004 f9af 	bl	8004e70 <osSemaphoreGetCount>
 8000b12:	4603      	mov	r3, r0
 8000b14:	b2da      	uxtb	r2, r3
 8000b16:	4b0d      	ldr	r3, [pc, #52]	@ (8000b4c <Task03Fun+0x70>)
 8000b18:	701a      	strb	r2, [r3, #0]


		HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000b1a:	f107 0308 	add.w	r3, r7, #8
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f7ff fb8e 	bl	8000240 <strlen>
 8000b24:	4603      	mov	r3, r0
 8000b26:	b29a      	uxth	r2, r3
 8000b28:	f107 0108 	add.w	r1, r7, #8
 8000b2c:	f04f 33ff 	mov.w	r3, #4294967295
 8000b30:	4807      	ldr	r0, [pc, #28]	@ (8000b50 <Task03Fun+0x74>)
 8000b32:	f002 fefd 	bl	8003930 <HAL_UART_Transmit>

		//osSemaphoreRelease(SemaforocontHandle);
//		cont = osSemaphoreGetCount(SemaforocontHandle);

	    osDelay(500);
 8000b36:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000b3a:	f004 f811 	bl	8004b60 <osDelay>
		osSemaphoreAcquire(SemaforocontHandle, osWaitForever);
 8000b3e:	bf00      	nop
 8000b40:	e7db      	b.n	8000afa <Task03Fun+0x1e>
 8000b42:	bf00      	nop
 8000b44:	08008454 	.word	0x08008454
 8000b48:	20000818 	.word	0x20000818
 8000b4c:	2000081c 	.word	0x2000081c
 8000b50:	200002a4 	.word	0x200002a4

08000b54 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b082      	sub	sp, #8
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	4a04      	ldr	r2, [pc, #16]	@ (8000b74 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b62:	4293      	cmp	r3, r2
 8000b64:	d101      	bne.n	8000b6a <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000b66:	f000 faad 	bl	80010c4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b6a:	bf00      	nop
 8000b6c:	3708      	adds	r7, #8
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	40010000 	.word	0x40010000

08000b78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b7c:	b672      	cpsid	i
}
 8000b7e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b80:	bf00      	nop
 8000b82:	e7fd      	b.n	8000b80 <Error_Handler+0x8>

08000b84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b082      	sub	sp, #8
 8000b88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000b8a:	4b11      	ldr	r3, [pc, #68]	@ (8000bd0 <HAL_MspInit+0x4c>)
 8000b8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b8e:	4a10      	ldr	r2, [pc, #64]	@ (8000bd0 <HAL_MspInit+0x4c>)
 8000b90:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b94:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b96:	4b0e      	ldr	r3, [pc, #56]	@ (8000bd0 <HAL_MspInit+0x4c>)
 8000b98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b9e:	607b      	str	r3, [r7, #4]
 8000ba0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ba2:	4b0b      	ldr	r3, [pc, #44]	@ (8000bd0 <HAL_MspInit+0x4c>)
 8000ba4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ba6:	4a0a      	ldr	r2, [pc, #40]	@ (8000bd0 <HAL_MspInit+0x4c>)
 8000ba8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000bac:	6453      	str	r3, [r2, #68]	@ 0x44
 8000bae:	4b08      	ldr	r3, [pc, #32]	@ (8000bd0 <HAL_MspInit+0x4c>)
 8000bb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bb2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000bb6:	603b      	str	r3, [r7, #0]
 8000bb8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000bba:	2200      	movs	r2, #0
 8000bbc:	210f      	movs	r1, #15
 8000bbe:	f06f 0001 	mvn.w	r0, #1
 8000bc2:	f000 fb7b 	bl	80012bc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bc6:	bf00      	nop
 8000bc8:	3708      	adds	r7, #8
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	40023800 	.word	0x40023800

08000bd4 <HAL_ETH_MspInit>:
  * This function configures the hardware resources used in this example
  * @param heth: ETH handle pointer
  * @retval None
  */
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b08e      	sub	sp, #56	@ 0x38
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bdc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000be0:	2200      	movs	r2, #0
 8000be2:	601a      	str	r2, [r3, #0]
 8000be4:	605a      	str	r2, [r3, #4]
 8000be6:	609a      	str	r2, [r3, #8]
 8000be8:	60da      	str	r2, [r3, #12]
 8000bea:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	4a4e      	ldr	r2, [pc, #312]	@ (8000d2c <HAL_ETH_MspInit+0x158>)
 8000bf2:	4293      	cmp	r3, r2
 8000bf4:	f040 8096 	bne.w	8000d24 <HAL_ETH_MspInit+0x150>
  {
    /* USER CODE BEGIN ETH_MspInit 0 */

    /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000bf8:	4b4d      	ldr	r3, [pc, #308]	@ (8000d30 <HAL_ETH_MspInit+0x15c>)
 8000bfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bfc:	4a4c      	ldr	r2, [pc, #304]	@ (8000d30 <HAL_ETH_MspInit+0x15c>)
 8000bfe:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000c02:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c04:	4b4a      	ldr	r3, [pc, #296]	@ (8000d30 <HAL_ETH_MspInit+0x15c>)
 8000c06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c08:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000c0c:	623b      	str	r3, [r7, #32]
 8000c0e:	6a3b      	ldr	r3, [r7, #32]
 8000c10:	4b47      	ldr	r3, [pc, #284]	@ (8000d30 <HAL_ETH_MspInit+0x15c>)
 8000c12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c14:	4a46      	ldr	r2, [pc, #280]	@ (8000d30 <HAL_ETH_MspInit+0x15c>)
 8000c16:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000c1a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c1c:	4b44      	ldr	r3, [pc, #272]	@ (8000d30 <HAL_ETH_MspInit+0x15c>)
 8000c1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c20:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000c24:	61fb      	str	r3, [r7, #28]
 8000c26:	69fb      	ldr	r3, [r7, #28]
 8000c28:	4b41      	ldr	r3, [pc, #260]	@ (8000d30 <HAL_ETH_MspInit+0x15c>)
 8000c2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c2c:	4a40      	ldr	r2, [pc, #256]	@ (8000d30 <HAL_ETH_MspInit+0x15c>)
 8000c2e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8000c32:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c34:	4b3e      	ldr	r3, [pc, #248]	@ (8000d30 <HAL_ETH_MspInit+0x15c>)
 8000c36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c38:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000c3c:	61bb      	str	r3, [r7, #24]
 8000c3e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c40:	4b3b      	ldr	r3, [pc, #236]	@ (8000d30 <HAL_ETH_MspInit+0x15c>)
 8000c42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c44:	4a3a      	ldr	r2, [pc, #232]	@ (8000d30 <HAL_ETH_MspInit+0x15c>)
 8000c46:	f043 0304 	orr.w	r3, r3, #4
 8000c4a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c4c:	4b38      	ldr	r3, [pc, #224]	@ (8000d30 <HAL_ETH_MspInit+0x15c>)
 8000c4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c50:	f003 0304 	and.w	r3, r3, #4
 8000c54:	617b      	str	r3, [r7, #20]
 8000c56:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c58:	4b35      	ldr	r3, [pc, #212]	@ (8000d30 <HAL_ETH_MspInit+0x15c>)
 8000c5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c5c:	4a34      	ldr	r2, [pc, #208]	@ (8000d30 <HAL_ETH_MspInit+0x15c>)
 8000c5e:	f043 0301 	orr.w	r3, r3, #1
 8000c62:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c64:	4b32      	ldr	r3, [pc, #200]	@ (8000d30 <HAL_ETH_MspInit+0x15c>)
 8000c66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c68:	f003 0301 	and.w	r3, r3, #1
 8000c6c:	613b      	str	r3, [r7, #16]
 8000c6e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c70:	4b2f      	ldr	r3, [pc, #188]	@ (8000d30 <HAL_ETH_MspInit+0x15c>)
 8000c72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c74:	4a2e      	ldr	r2, [pc, #184]	@ (8000d30 <HAL_ETH_MspInit+0x15c>)
 8000c76:	f043 0302 	orr.w	r3, r3, #2
 8000c7a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c7c:	4b2c      	ldr	r3, [pc, #176]	@ (8000d30 <HAL_ETH_MspInit+0x15c>)
 8000c7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c80:	f003 0302 	and.w	r3, r3, #2
 8000c84:	60fb      	str	r3, [r7, #12]
 8000c86:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c88:	4b29      	ldr	r3, [pc, #164]	@ (8000d30 <HAL_ETH_MspInit+0x15c>)
 8000c8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c8c:	4a28      	ldr	r2, [pc, #160]	@ (8000d30 <HAL_ETH_MspInit+0x15c>)
 8000c8e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000c92:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c94:	4b26      	ldr	r3, [pc, #152]	@ (8000d30 <HAL_ETH_MspInit+0x15c>)
 8000c96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000c9c:	60bb      	str	r3, [r7, #8]
 8000c9e:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000ca0:	2332      	movs	r3, #50	@ 0x32
 8000ca2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca4:	2302      	movs	r3, #2
 8000ca6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cac:	2303      	movs	r3, #3
 8000cae:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000cb0:	230b      	movs	r3, #11
 8000cb2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cb4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cb8:	4619      	mov	r1, r3
 8000cba:	481e      	ldr	r0, [pc, #120]	@ (8000d34 <HAL_ETH_MspInit+0x160>)
 8000cbc:	f000 fe76 	bl	80019ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000cc0:	2386      	movs	r3, #134	@ 0x86
 8000cc2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc4:	2302      	movs	r3, #2
 8000cc6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ccc:	2303      	movs	r3, #3
 8000cce:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000cd0:	230b      	movs	r3, #11
 8000cd2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cd4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cd8:	4619      	mov	r1, r3
 8000cda:	4817      	ldr	r0, [pc, #92]	@ (8000d38 <HAL_ETH_MspInit+0x164>)
 8000cdc:	f000 fe66 	bl	80019ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000ce0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ce4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce6:	2302      	movs	r3, #2
 8000ce8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cea:	2300      	movs	r3, #0
 8000cec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cee:	2303      	movs	r3, #3
 8000cf0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000cf2:	230b      	movs	r3, #11
 8000cf4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000cf6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	480f      	ldr	r0, [pc, #60]	@ (8000d3c <HAL_ETH_MspInit+0x168>)
 8000cfe:	f000 fe55 	bl	80019ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000d02:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000d06:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d08:	2302      	movs	r3, #2
 8000d0a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d10:	2303      	movs	r3, #3
 8000d12:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d14:	230b      	movs	r3, #11
 8000d16:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d18:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	4808      	ldr	r0, [pc, #32]	@ (8000d40 <HAL_ETH_MspInit+0x16c>)
 8000d20:	f000 fe44 	bl	80019ac <HAL_GPIO_Init>

    /* USER CODE END ETH_MspInit 1 */

  }

}
 8000d24:	bf00      	nop
 8000d26:	3738      	adds	r7, #56	@ 0x38
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	40028000 	.word	0x40028000
 8000d30:	40023800 	.word	0x40023800
 8000d34:	40020800 	.word	0x40020800
 8000d38:	40020000 	.word	0x40020000
 8000d3c:	40020400 	.word	0x40020400
 8000d40:	40021800 	.word	0x40021800

08000d44 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b0ae      	sub	sp, #184	@ 0xb8
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d4c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000d50:	2200      	movs	r2, #0
 8000d52:	601a      	str	r2, [r3, #0]
 8000d54:	605a      	str	r2, [r3, #4]
 8000d56:	609a      	str	r2, [r3, #8]
 8000d58:	60da      	str	r2, [r3, #12]
 8000d5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d5c:	f107 0314 	add.w	r3, r7, #20
 8000d60:	2290      	movs	r2, #144	@ 0x90
 8000d62:	2100      	movs	r1, #0
 8000d64:	4618      	mov	r0, r3
 8000d66:	f007 fa41 	bl	80081ec <memset>
  if(huart->Instance==USART3)
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	4a22      	ldr	r2, [pc, #136]	@ (8000df8 <HAL_UART_MspInit+0xb4>)
 8000d70:	4293      	cmp	r3, r2
 8000d72:	d13c      	bne.n	8000dee <HAL_UART_MspInit+0xaa>

    /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000d74:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000d78:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d7e:	f107 0314 	add.w	r3, r7, #20
 8000d82:	4618      	mov	r0, r3
 8000d84:	f001 fe90 	bl	8002aa8 <HAL_RCCEx_PeriphCLKConfig>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d001      	beq.n	8000d92 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000d8e:	f7ff fef3 	bl	8000b78 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d92:	4b1a      	ldr	r3, [pc, #104]	@ (8000dfc <HAL_UART_MspInit+0xb8>)
 8000d94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d96:	4a19      	ldr	r2, [pc, #100]	@ (8000dfc <HAL_UART_MspInit+0xb8>)
 8000d98:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000d9c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d9e:	4b17      	ldr	r3, [pc, #92]	@ (8000dfc <HAL_UART_MspInit+0xb8>)
 8000da0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000da2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000da6:	613b      	str	r3, [r7, #16]
 8000da8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000daa:	4b14      	ldr	r3, [pc, #80]	@ (8000dfc <HAL_UART_MspInit+0xb8>)
 8000dac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dae:	4a13      	ldr	r2, [pc, #76]	@ (8000dfc <HAL_UART_MspInit+0xb8>)
 8000db0:	f043 0308 	orr.w	r3, r3, #8
 8000db4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000db6:	4b11      	ldr	r3, [pc, #68]	@ (8000dfc <HAL_UART_MspInit+0xb8>)
 8000db8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dba:	f003 0308 	and.w	r3, r3, #8
 8000dbe:	60fb      	str	r3, [r7, #12]
 8000dc0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000dc2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000dc6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dca:	2302      	movs	r3, #2
 8000dcc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dd6:	2303      	movs	r3, #3
 8000dd8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000ddc:	2307      	movs	r3, #7
 8000dde:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000de2:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000de6:	4619      	mov	r1, r3
 8000de8:	4805      	ldr	r0, [pc, #20]	@ (8000e00 <HAL_UART_MspInit+0xbc>)
 8000dea:	f000 fddf 	bl	80019ac <HAL_GPIO_Init>

    /* USER CODE END USART3_MspInit 1 */

  }

}
 8000dee:	bf00      	nop
 8000df0:	37b8      	adds	r7, #184	@ 0xb8
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	40004800 	.word	0x40004800
 8000dfc:	40023800 	.word	0x40023800
 8000e00:	40020c00 	.word	0x40020c00

08000e04 <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b0ae      	sub	sp, #184	@ 0xb8
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e0c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000e10:	2200      	movs	r2, #0
 8000e12:	601a      	str	r2, [r3, #0]
 8000e14:	605a      	str	r2, [r3, #4]
 8000e16:	609a      	str	r2, [r3, #8]
 8000e18:	60da      	str	r2, [r3, #12]
 8000e1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e1c:	f107 0314 	add.w	r3, r7, #20
 8000e20:	2290      	movs	r2, #144	@ 0x90
 8000e22:	2100      	movs	r1, #0
 8000e24:	4618      	mov	r0, r3
 8000e26:	f007 f9e1 	bl	80081ec <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000e32:	d159      	bne.n	8000ee8 <HAL_PCD_MspInit+0xe4>

    /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000e34:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8000e38:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e40:	f107 0314 	add.w	r3, r7, #20
 8000e44:	4618      	mov	r0, r3
 8000e46:	f001 fe2f 	bl	8002aa8 <HAL_RCCEx_PeriphCLKConfig>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d001      	beq.n	8000e54 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8000e50:	f7ff fe92 	bl	8000b78 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e54:	4b26      	ldr	r3, [pc, #152]	@ (8000ef0 <HAL_PCD_MspInit+0xec>)
 8000e56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e58:	4a25      	ldr	r2, [pc, #148]	@ (8000ef0 <HAL_PCD_MspInit+0xec>)
 8000e5a:	f043 0301 	orr.w	r3, r3, #1
 8000e5e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e60:	4b23      	ldr	r3, [pc, #140]	@ (8000ef0 <HAL_PCD_MspInit+0xec>)
 8000e62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e64:	f003 0301 	and.w	r3, r3, #1
 8000e68:	613b      	str	r3, [r7, #16]
 8000e6a:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000e6c:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8000e70:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e74:	2302      	movs	r3, #2
 8000e76:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e80:	2303      	movs	r3, #3
 8000e82:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000e86:	230a      	movs	r3, #10
 8000e88:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e8c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000e90:	4619      	mov	r1, r3
 8000e92:	4818      	ldr	r0, [pc, #96]	@ (8000ef4 <HAL_PCD_MspInit+0xf0>)
 8000e94:	f000 fd8a 	bl	80019ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000e98:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000e9c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000eac:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	4810      	ldr	r0, [pc, #64]	@ (8000ef4 <HAL_PCD_MspInit+0xf0>)
 8000eb4:	f000 fd7a 	bl	80019ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000eb8:	4b0d      	ldr	r3, [pc, #52]	@ (8000ef0 <HAL_PCD_MspInit+0xec>)
 8000eba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000ebc:	4a0c      	ldr	r2, [pc, #48]	@ (8000ef0 <HAL_PCD_MspInit+0xec>)
 8000ebe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ec2:	6353      	str	r3, [r2, #52]	@ 0x34
 8000ec4:	4b0a      	ldr	r3, [pc, #40]	@ (8000ef0 <HAL_PCD_MspInit+0xec>)
 8000ec6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000ec8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000ecc:	60fb      	str	r3, [r7, #12]
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	4b07      	ldr	r3, [pc, #28]	@ (8000ef0 <HAL_PCD_MspInit+0xec>)
 8000ed2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ed4:	4a06      	ldr	r2, [pc, #24]	@ (8000ef0 <HAL_PCD_MspInit+0xec>)
 8000ed6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000eda:	6453      	str	r3, [r2, #68]	@ 0x44
 8000edc:	4b04      	ldr	r3, [pc, #16]	@ (8000ef0 <HAL_PCD_MspInit+0xec>)
 8000ede:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ee0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ee4:	60bb      	str	r3, [r7, #8]
 8000ee6:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8000ee8:	bf00      	nop
 8000eea:	37b8      	adds	r7, #184	@ 0xb8
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	40023800 	.word	0x40023800
 8000ef4:	40020000 	.word	0x40020000

08000ef8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b08c      	sub	sp, #48	@ 0x30
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000f00:	2300      	movs	r3, #0
 8000f02:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000f04:	2300      	movs	r3, #0
 8000f06:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000f08:	4b2e      	ldr	r3, [pc, #184]	@ (8000fc4 <HAL_InitTick+0xcc>)
 8000f0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f0c:	4a2d      	ldr	r2, [pc, #180]	@ (8000fc4 <HAL_InitTick+0xcc>)
 8000f0e:	f043 0301 	orr.w	r3, r3, #1
 8000f12:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f14:	4b2b      	ldr	r3, [pc, #172]	@ (8000fc4 <HAL_InitTick+0xcc>)
 8000f16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f18:	f003 0301 	and.w	r3, r3, #1
 8000f1c:	60bb      	str	r3, [r7, #8]
 8000f1e:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000f20:	f107 020c 	add.w	r2, r7, #12
 8000f24:	f107 0310 	add.w	r3, r7, #16
 8000f28:	4611      	mov	r1, r2
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f001 fd8a 	bl	8002a44 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000f30:	f001 fd74 	bl	8002a1c <HAL_RCC_GetPCLK2Freq>
 8000f34:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000f36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f38:	4a23      	ldr	r2, [pc, #140]	@ (8000fc8 <HAL_InitTick+0xd0>)
 8000f3a:	fba2 2303 	umull	r2, r3, r2, r3
 8000f3e:	0c9b      	lsrs	r3, r3, #18
 8000f40:	3b01      	subs	r3, #1
 8000f42:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000f44:	4b21      	ldr	r3, [pc, #132]	@ (8000fcc <HAL_InitTick+0xd4>)
 8000f46:	4a22      	ldr	r2, [pc, #136]	@ (8000fd0 <HAL_InitTick+0xd8>)
 8000f48:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000f4a:	4b20      	ldr	r3, [pc, #128]	@ (8000fcc <HAL_InitTick+0xd4>)
 8000f4c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000f50:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000f52:	4a1e      	ldr	r2, [pc, #120]	@ (8000fcc <HAL_InitTick+0xd4>)
 8000f54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f56:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000f58:	4b1c      	ldr	r3, [pc, #112]	@ (8000fcc <HAL_InitTick+0xd4>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f5e:	4b1b      	ldr	r3, [pc, #108]	@ (8000fcc <HAL_InitTick+0xd4>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f64:	4b19      	ldr	r3, [pc, #100]	@ (8000fcc <HAL_InitTick+0xd4>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000f6a:	4818      	ldr	r0, [pc, #96]	@ (8000fcc <HAL_InitTick+0xd4>)
 8000f6c:	f002 f9c4 	bl	80032f8 <HAL_TIM_Base_Init>
 8000f70:	4603      	mov	r3, r0
 8000f72:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000f76:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d11b      	bne.n	8000fb6 <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000f7e:	4813      	ldr	r0, [pc, #76]	@ (8000fcc <HAL_InitTick+0xd4>)
 8000f80:	f002 fa1c 	bl	80033bc <HAL_TIM_Base_Start_IT>
 8000f84:	4603      	mov	r3, r0
 8000f86:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000f8a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d111      	bne.n	8000fb6 <HAL_InitTick+0xbe>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000f92:	2019      	movs	r0, #25
 8000f94:	f000 f9ae 	bl	80012f4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	2b0f      	cmp	r3, #15
 8000f9c:	d808      	bhi.n	8000fb0 <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	6879      	ldr	r1, [r7, #4]
 8000fa2:	2019      	movs	r0, #25
 8000fa4:	f000 f98a 	bl	80012bc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000fa8:	4a0a      	ldr	r2, [pc, #40]	@ (8000fd4 <HAL_InitTick+0xdc>)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	6013      	str	r3, [r2, #0]
 8000fae:	e002      	b.n	8000fb6 <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000fb6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	3730      	adds	r7, #48	@ 0x30
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	40023800 	.word	0x40023800
 8000fc8:	431bde83 	.word	0x431bde83
 8000fcc:	20000828 	.word	0x20000828
 8000fd0:	40010000 	.word	0x40010000
 8000fd4:	20000004 	.word	0x20000004

08000fd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000fdc:	bf00      	nop
 8000fde:	e7fd      	b.n	8000fdc <NMI_Handler+0x4>

08000fe0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fe4:	bf00      	nop
 8000fe6:	e7fd      	b.n	8000fe4 <HardFault_Handler+0x4>

08000fe8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fec:	bf00      	nop
 8000fee:	e7fd      	b.n	8000fec <MemManage_Handler+0x4>

08000ff0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ff4:	bf00      	nop
 8000ff6:	e7fd      	b.n	8000ff4 <BusFault_Handler+0x4>

08000ff8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ffc:	bf00      	nop
 8000ffe:	e7fd      	b.n	8000ffc <UsageFault_Handler+0x4>

08001000 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001004:	bf00      	nop
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr
	...

08001010 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001014:	4802      	ldr	r0, [pc, #8]	@ (8001020 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001016:	f002 fa49 	bl	80034ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800101a:	bf00      	nop
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	20000828 	.word	0x20000828

08001024 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8001028:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800102c:	f000 fe84 	bl	8001d38 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001030:	bf00      	nop
 8001032:	bd80      	pop	{r7, pc}

08001034 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001038:	4b06      	ldr	r3, [pc, #24]	@ (8001054 <SystemInit+0x20>)
 800103a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800103e:	4a05      	ldr	r2, [pc, #20]	@ (8001054 <SystemInit+0x20>)
 8001040:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001044:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001048:	bf00      	nop
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop
 8001054:	e000ed00 	.word	0xe000ed00

08001058 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001058:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001090 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800105c:	f7ff ffea 	bl	8001034 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001060:	480c      	ldr	r0, [pc, #48]	@ (8001094 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001062:	490d      	ldr	r1, [pc, #52]	@ (8001098 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001064:	4a0d      	ldr	r2, [pc, #52]	@ (800109c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001066:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001068:	e002      	b.n	8001070 <LoopCopyDataInit>

0800106a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800106a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800106c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800106e:	3304      	adds	r3, #4

08001070 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001070:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001072:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001074:	d3f9      	bcc.n	800106a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001076:	4a0a      	ldr	r2, [pc, #40]	@ (80010a0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001078:	4c0a      	ldr	r4, [pc, #40]	@ (80010a4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800107a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800107c:	e001      	b.n	8001082 <LoopFillZerobss>

0800107e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800107e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001080:	3204      	adds	r2, #4

08001082 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001082:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001084:	d3fb      	bcc.n	800107e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001086:	f007 f917 	bl	80082b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800108a:	f7ff fa77 	bl	800057c <main>
  bx  lr    
 800108e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001090:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001094:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001098:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 800109c:	08008528 	.word	0x08008528
  ldr r2, =_sbss
 80010a0:	200001a0 	.word	0x200001a0
  ldr r4, =_ebss
 80010a4:	20005398 	.word	0x20005398

080010a8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010a8:	e7fe      	b.n	80010a8 <ADC_IRQHandler>

080010aa <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010aa:	b580      	push	{r7, lr}
 80010ac:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010ae:	2003      	movs	r0, #3
 80010b0:	f000 f8f9 	bl	80012a6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010b4:	200f      	movs	r0, #15
 80010b6:	f7ff ff1f 	bl	8000ef8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010ba:	f7ff fd63 	bl	8000b84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010be:	2300      	movs	r3, #0
}
 80010c0:	4618      	mov	r0, r3
 80010c2:	bd80      	pop	{r7, pc}

080010c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010c8:	4b06      	ldr	r3, [pc, #24]	@ (80010e4 <HAL_IncTick+0x20>)
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	461a      	mov	r2, r3
 80010ce:	4b06      	ldr	r3, [pc, #24]	@ (80010e8 <HAL_IncTick+0x24>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	4413      	add	r3, r2
 80010d4:	4a04      	ldr	r2, [pc, #16]	@ (80010e8 <HAL_IncTick+0x24>)
 80010d6:	6013      	str	r3, [r2, #0]
}
 80010d8:	bf00      	nop
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr
 80010e2:	bf00      	nop
 80010e4:	20000008 	.word	0x20000008
 80010e8:	20000874 	.word	0x20000874

080010ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
  return uwTick;
 80010f0:	4b03      	ldr	r3, [pc, #12]	@ (8001100 <HAL_GetTick+0x14>)
 80010f2:	681b      	ldr	r3, [r3, #0]
}
 80010f4:	4618      	mov	r0, r3
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr
 80010fe:	bf00      	nop
 8001100:	20000874 	.word	0x20000874

08001104 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b084      	sub	sp, #16
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800110c:	f7ff ffee 	bl	80010ec <HAL_GetTick>
 8001110:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	f1b3 3fff 	cmp.w	r3, #4294967295
 800111c:	d005      	beq.n	800112a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800111e:	4b0a      	ldr	r3, [pc, #40]	@ (8001148 <HAL_Delay+0x44>)
 8001120:	781b      	ldrb	r3, [r3, #0]
 8001122:	461a      	mov	r2, r3
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	4413      	add	r3, r2
 8001128:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800112a:	bf00      	nop
 800112c:	f7ff ffde 	bl	80010ec <HAL_GetTick>
 8001130:	4602      	mov	r2, r0
 8001132:	68bb      	ldr	r3, [r7, #8]
 8001134:	1ad3      	subs	r3, r2, r3
 8001136:	68fa      	ldr	r2, [r7, #12]
 8001138:	429a      	cmp	r2, r3
 800113a:	d8f7      	bhi.n	800112c <HAL_Delay+0x28>
  {
  }
}
 800113c:	bf00      	nop
 800113e:	bf00      	nop
 8001140:	3710      	adds	r7, #16
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	20000008 	.word	0x20000008

0800114c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800114c:	b480      	push	{r7}
 800114e:	b085      	sub	sp, #20
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	f003 0307 	and.w	r3, r3, #7
 800115a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800115c:	4b0b      	ldr	r3, [pc, #44]	@ (800118c <__NVIC_SetPriorityGrouping+0x40>)
 800115e:	68db      	ldr	r3, [r3, #12]
 8001160:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001162:	68ba      	ldr	r2, [r7, #8]
 8001164:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001168:	4013      	ands	r3, r2
 800116a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001170:	68bb      	ldr	r3, [r7, #8]
 8001172:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001174:	4b06      	ldr	r3, [pc, #24]	@ (8001190 <__NVIC_SetPriorityGrouping+0x44>)
 8001176:	4313      	orrs	r3, r2
 8001178:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800117a:	4a04      	ldr	r2, [pc, #16]	@ (800118c <__NVIC_SetPriorityGrouping+0x40>)
 800117c:	68bb      	ldr	r3, [r7, #8]
 800117e:	60d3      	str	r3, [r2, #12]
}
 8001180:	bf00      	nop
 8001182:	3714      	adds	r7, #20
 8001184:	46bd      	mov	sp, r7
 8001186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118a:	4770      	bx	lr
 800118c:	e000ed00 	.word	0xe000ed00
 8001190:	05fa0000 	.word	0x05fa0000

08001194 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001198:	4b04      	ldr	r3, [pc, #16]	@ (80011ac <__NVIC_GetPriorityGrouping+0x18>)
 800119a:	68db      	ldr	r3, [r3, #12]
 800119c:	0a1b      	lsrs	r3, r3, #8
 800119e:	f003 0307 	and.w	r3, r3, #7
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr
 80011ac:	e000ed00 	.word	0xe000ed00

080011b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b083      	sub	sp, #12
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	4603      	mov	r3, r0
 80011b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	db0b      	blt.n	80011da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011c2:	79fb      	ldrb	r3, [r7, #7]
 80011c4:	f003 021f 	and.w	r2, r3, #31
 80011c8:	4907      	ldr	r1, [pc, #28]	@ (80011e8 <__NVIC_EnableIRQ+0x38>)
 80011ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ce:	095b      	lsrs	r3, r3, #5
 80011d0:	2001      	movs	r0, #1
 80011d2:	fa00 f202 	lsl.w	r2, r0, r2
 80011d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011da:	bf00      	nop
 80011dc:	370c      	adds	r7, #12
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr
 80011e6:	bf00      	nop
 80011e8:	e000e100 	.word	0xe000e100

080011ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b083      	sub	sp, #12
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	4603      	mov	r3, r0
 80011f4:	6039      	str	r1, [r7, #0]
 80011f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	db0a      	blt.n	8001216 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	b2da      	uxtb	r2, r3
 8001204:	490c      	ldr	r1, [pc, #48]	@ (8001238 <__NVIC_SetPriority+0x4c>)
 8001206:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800120a:	0112      	lsls	r2, r2, #4
 800120c:	b2d2      	uxtb	r2, r2
 800120e:	440b      	add	r3, r1
 8001210:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001214:	e00a      	b.n	800122c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	b2da      	uxtb	r2, r3
 800121a:	4908      	ldr	r1, [pc, #32]	@ (800123c <__NVIC_SetPriority+0x50>)
 800121c:	79fb      	ldrb	r3, [r7, #7]
 800121e:	f003 030f 	and.w	r3, r3, #15
 8001222:	3b04      	subs	r3, #4
 8001224:	0112      	lsls	r2, r2, #4
 8001226:	b2d2      	uxtb	r2, r2
 8001228:	440b      	add	r3, r1
 800122a:	761a      	strb	r2, [r3, #24]
}
 800122c:	bf00      	nop
 800122e:	370c      	adds	r7, #12
 8001230:	46bd      	mov	sp, r7
 8001232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001236:	4770      	bx	lr
 8001238:	e000e100 	.word	0xe000e100
 800123c:	e000ed00 	.word	0xe000ed00

08001240 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001240:	b480      	push	{r7}
 8001242:	b089      	sub	sp, #36	@ 0x24
 8001244:	af00      	add	r7, sp, #0
 8001246:	60f8      	str	r0, [r7, #12]
 8001248:	60b9      	str	r1, [r7, #8]
 800124a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	f003 0307 	and.w	r3, r3, #7
 8001252:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001254:	69fb      	ldr	r3, [r7, #28]
 8001256:	f1c3 0307 	rsb	r3, r3, #7
 800125a:	2b04      	cmp	r3, #4
 800125c:	bf28      	it	cs
 800125e:	2304      	movcs	r3, #4
 8001260:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001262:	69fb      	ldr	r3, [r7, #28]
 8001264:	3304      	adds	r3, #4
 8001266:	2b06      	cmp	r3, #6
 8001268:	d902      	bls.n	8001270 <NVIC_EncodePriority+0x30>
 800126a:	69fb      	ldr	r3, [r7, #28]
 800126c:	3b03      	subs	r3, #3
 800126e:	e000      	b.n	8001272 <NVIC_EncodePriority+0x32>
 8001270:	2300      	movs	r3, #0
 8001272:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001274:	f04f 32ff 	mov.w	r2, #4294967295
 8001278:	69bb      	ldr	r3, [r7, #24]
 800127a:	fa02 f303 	lsl.w	r3, r2, r3
 800127e:	43da      	mvns	r2, r3
 8001280:	68bb      	ldr	r3, [r7, #8]
 8001282:	401a      	ands	r2, r3
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001288:	f04f 31ff 	mov.w	r1, #4294967295
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	fa01 f303 	lsl.w	r3, r1, r3
 8001292:	43d9      	mvns	r1, r3
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001298:	4313      	orrs	r3, r2
         );
}
 800129a:	4618      	mov	r0, r3
 800129c:	3724      	adds	r7, #36	@ 0x24
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr

080012a6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012a6:	b580      	push	{r7, lr}
 80012a8:	b082      	sub	sp, #8
 80012aa:	af00      	add	r7, sp, #0
 80012ac:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012ae:	6878      	ldr	r0, [r7, #4]
 80012b0:	f7ff ff4c 	bl	800114c <__NVIC_SetPriorityGrouping>
}
 80012b4:	bf00      	nop
 80012b6:	3708      	adds	r7, #8
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}

080012bc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012bc:	b580      	push	{r7, lr}
 80012be:	b086      	sub	sp, #24
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	4603      	mov	r3, r0
 80012c4:	60b9      	str	r1, [r7, #8]
 80012c6:	607a      	str	r2, [r7, #4]
 80012c8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80012ca:	2300      	movs	r3, #0
 80012cc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012ce:	f7ff ff61 	bl	8001194 <__NVIC_GetPriorityGrouping>
 80012d2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012d4:	687a      	ldr	r2, [r7, #4]
 80012d6:	68b9      	ldr	r1, [r7, #8]
 80012d8:	6978      	ldr	r0, [r7, #20]
 80012da:	f7ff ffb1 	bl	8001240 <NVIC_EncodePriority>
 80012de:	4602      	mov	r2, r0
 80012e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012e4:	4611      	mov	r1, r2
 80012e6:	4618      	mov	r0, r3
 80012e8:	f7ff ff80 	bl	80011ec <__NVIC_SetPriority>
}
 80012ec:	bf00      	nop
 80012ee:	3718      	adds	r7, #24
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}

080012f4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	4603      	mov	r3, r0
 80012fc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001302:	4618      	mov	r0, r3
 8001304:	f7ff ff54 	bl	80011b0 <__NVIC_EnableIRQ>
}
 8001308:	bf00      	nop
 800130a:	3708      	adds	r7, #8
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}

08001310 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b084      	sub	sp, #16
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d101      	bne.n	8001322 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800131e:	2301      	movs	r3, #1
 8001320:	e086      	b.n	8001430 <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001328:	2b00      	cmp	r3, #0
 800132a:	d106      	bne.n	800133a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	2220      	movs	r2, #32
 8001330:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001334:	6878      	ldr	r0, [r7, #4]
 8001336:	f7ff fc4d 	bl	8000bd4 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800133a:	4b3f      	ldr	r3, [pc, #252]	@ (8001438 <HAL_ETH_Init+0x128>)
 800133c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800133e:	4a3e      	ldr	r2, [pc, #248]	@ (8001438 <HAL_ETH_Init+0x128>)
 8001340:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001344:	6453      	str	r3, [r2, #68]	@ 0x44
 8001346:	4b3c      	ldr	r3, [pc, #240]	@ (8001438 <HAL_ETH_Init+0x128>)
 8001348:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800134a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800134e:	60bb      	str	r3, [r7, #8]
 8001350:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001352:	4b3a      	ldr	r3, [pc, #232]	@ (800143c <HAL_ETH_Init+0x12c>)
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	4a39      	ldr	r2, [pc, #228]	@ (800143c <HAL_ETH_Init+0x12c>)
 8001358:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800135c:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800135e:	4b37      	ldr	r3, [pc, #220]	@ (800143c <HAL_ETH_Init+0x12c>)
 8001360:	685a      	ldr	r2, [r3, #4]
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	689b      	ldr	r3, [r3, #8]
 8001366:	4935      	ldr	r1, [pc, #212]	@ (800143c <HAL_ETH_Init+0x12c>)
 8001368:	4313      	orrs	r3, r2
 800136a:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 800136c:	4b33      	ldr	r3, [pc, #204]	@ (800143c <HAL_ETH_Init+0x12c>)
 800136e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	687a      	ldr	r2, [r7, #4]
 800137c:	6812      	ldr	r2, [r2, #0]
 800137e:	f043 0301 	orr.w	r3, r3, #1
 8001382:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001386:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001388:	f7ff feb0 	bl	80010ec <HAL_GetTick>
 800138c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800138e:	e011      	b.n	80013b4 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001390:	f7ff feac 	bl	80010ec <HAL_GetTick>
 8001394:	4602      	mov	r2, r0
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	1ad3      	subs	r3, r2, r3
 800139a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800139e:	d909      	bls.n	80013b4 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2204      	movs	r2, #4
 80013a4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	22e0      	movs	r2, #224	@ 0xe0
 80013ac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 80013b0:	2301      	movs	r3, #1
 80013b2:	e03d      	b.n	8001430 <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f003 0301 	and.w	r3, r3, #1
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d1e4      	bne.n	8001390 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80013c6:	6878      	ldr	r0, [r7, #4]
 80013c8:	f000 f97a 	bl	80016c0 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80013cc:	6878      	ldr	r0, [r7, #4]
 80013ce:	f000 fa25 	bl	800181c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80013d2:	6878      	ldr	r0, [r7, #4]
 80013d4:	f000 fa7b 	bl	80018ce <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	461a      	mov	r2, r3
 80013de:	2100      	movs	r1, #0
 80013e0:	6878      	ldr	r0, [r7, #4]
 80013e2:	f000 f9e3 	bl	80017ac <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 80013f4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681a      	ldr	r2, [r3, #0]
 8001402:	4b0f      	ldr	r3, [pc, #60]	@ (8001440 <HAL_ETH_Init+0x130>)
 8001404:	430b      	orrs	r3, r1
 8001406:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 800141a:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	2200      	movs	r2, #0
 8001422:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	2210      	movs	r2, #16
 800142a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800142e:	2300      	movs	r3, #0
}
 8001430:	4618      	mov	r0, r3
 8001432:	3710      	adds	r7, #16
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	40023800 	.word	0x40023800
 800143c:	40013800 	.word	0x40013800
 8001440:	00020060 	.word	0x00020060

08001444 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b084      	sub	sp, #16
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
 800144c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001456:	68fa      	ldr	r2, [r7, #12]
 8001458:	4b53      	ldr	r3, [pc, #332]	@ (80015a8 <ETH_SetMACConfig+0x164>)
 800145a:	4013      	ands	r3, r2
 800145c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	7b9b      	ldrb	r3, [r3, #14]
 8001462:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001464:	683a      	ldr	r2, [r7, #0]
 8001466:	7c12      	ldrb	r2, [r2, #16]
 8001468:	2a00      	cmp	r2, #0
 800146a:	d102      	bne.n	8001472 <ETH_SetMACConfig+0x2e>
 800146c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001470:	e000      	b.n	8001474 <ETH_SetMACConfig+0x30>
 8001472:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8001474:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001476:	683a      	ldr	r2, [r7, #0]
 8001478:	7c52      	ldrb	r2, [r2, #17]
 800147a:	2a00      	cmp	r2, #0
 800147c:	d102      	bne.n	8001484 <ETH_SetMACConfig+0x40>
 800147e:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001482:	e000      	b.n	8001486 <ETH_SetMACConfig+0x42>
 8001484:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001486:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800148c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	7fdb      	ldrb	r3, [r3, #31]
 8001492:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001494:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800149a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800149c:	683a      	ldr	r2, [r7, #0]
 800149e:	7f92      	ldrb	r2, [r2, #30]
 80014a0:	2a00      	cmp	r2, #0
 80014a2:	d102      	bne.n	80014aa <ETH_SetMACConfig+0x66>
 80014a4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80014a8:	e000      	b.n	80014ac <ETH_SetMACConfig+0x68>
 80014aa:	2200      	movs	r2, #0
                        macconf->Speed |
 80014ac:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	7f1b      	ldrb	r3, [r3, #28]
 80014b2:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80014b4:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80014ba:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	791b      	ldrb	r3, [r3, #4]
 80014c0:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80014c2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80014c4:	683a      	ldr	r2, [r7, #0]
 80014c6:	f892 2020 	ldrb.w	r2, [r2, #32]
 80014ca:	2a00      	cmp	r2, #0
 80014cc:	d102      	bne.n	80014d4 <ETH_SetMACConfig+0x90>
 80014ce:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80014d2:	e000      	b.n	80014d6 <ETH_SetMACConfig+0x92>
 80014d4:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80014d6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	7bdb      	ldrb	r3, [r3, #15]
 80014dc:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80014de:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80014e4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80014ec:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80014ee:	4313      	orrs	r3, r2
 80014f0:	68fa      	ldr	r2, [r7, #12]
 80014f2:	4313      	orrs	r3, r2
 80014f4:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	68fa      	ldr	r2, [r7, #12]
 80014fc:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001506:	2001      	movs	r0, #1
 8001508:	f7ff fdfc 	bl	8001104 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	68fa      	ldr	r2, [r7, #12]
 8001512:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	699b      	ldr	r3, [r3, #24]
 800151a:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800151c:	68fa      	ldr	r2, [r7, #12]
 800151e:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8001522:	4013      	ands	r3, r2
 8001524:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800152a:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800152c:	683a      	ldr	r2, [r7, #0]
 800152e:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8001532:	2a00      	cmp	r2, #0
 8001534:	d101      	bne.n	800153a <ETH_SetMACConfig+0xf6>
 8001536:	2280      	movs	r2, #128	@ 0x80
 8001538:	e000      	b.n	800153c <ETH_SetMACConfig+0xf8>
 800153a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800153c:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001542:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001544:	683a      	ldr	r2, [r7, #0]
 8001546:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 800154a:	2a01      	cmp	r2, #1
 800154c:	d101      	bne.n	8001552 <ETH_SetMACConfig+0x10e>
 800154e:	2208      	movs	r2, #8
 8001550:	e000      	b.n	8001554 <ETH_SetMACConfig+0x110>
 8001552:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001554:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8001556:	683a      	ldr	r2, [r7, #0]
 8001558:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 800155c:	2a01      	cmp	r2, #1
 800155e:	d101      	bne.n	8001564 <ETH_SetMACConfig+0x120>
 8001560:	2204      	movs	r2, #4
 8001562:	e000      	b.n	8001566 <ETH_SetMACConfig+0x122>
 8001564:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001566:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001568:	683a      	ldr	r2, [r7, #0]
 800156a:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 800156e:	2a01      	cmp	r2, #1
 8001570:	d101      	bne.n	8001576 <ETH_SetMACConfig+0x132>
 8001572:	2202      	movs	r2, #2
 8001574:	e000      	b.n	8001578 <ETH_SetMACConfig+0x134>
 8001576:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001578:	4313      	orrs	r3, r2
 800157a:	68fa      	ldr	r2, [r7, #12]
 800157c:	4313      	orrs	r3, r2
 800157e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	68fa      	ldr	r2, [r7, #12]
 8001586:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	699b      	ldr	r3, [r3, #24]
 800158e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001590:	2001      	movs	r0, #1
 8001592:	f7ff fdb7 	bl	8001104 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	68fa      	ldr	r2, [r7, #12]
 800159c:	619a      	str	r2, [r3, #24]
}
 800159e:	bf00      	nop
 80015a0:	3710      	adds	r7, #16
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	fd20810f 	.word	0xfd20810f

080015ac <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b084      	sub	sp, #16
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
 80015b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80015be:	699b      	ldr	r3, [r3, #24]
 80015c0:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80015c2:	68fa      	ldr	r2, [r7, #12]
 80015c4:	4b3d      	ldr	r3, [pc, #244]	@ (80016bc <ETH_SetDMAConfig+0x110>)
 80015c6:	4013      	ands	r3, r2
 80015c8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	7b1b      	ldrb	r3, [r3, #12]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d102      	bne.n	80015d8 <ETH_SetDMAConfig+0x2c>
 80015d2:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80015d6:	e000      	b.n	80015da <ETH_SetDMAConfig+0x2e>
 80015d8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	7b5b      	ldrb	r3, [r3, #13]
 80015de:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80015e0:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80015e2:	683a      	ldr	r2, [r7, #0]
 80015e4:	7f52      	ldrb	r2, [r2, #29]
 80015e6:	2a00      	cmp	r2, #0
 80015e8:	d102      	bne.n	80015f0 <ETH_SetDMAConfig+0x44>
 80015ea:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80015ee:	e000      	b.n	80015f2 <ETH_SetDMAConfig+0x46>
 80015f0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80015f2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	7b9b      	ldrb	r3, [r3, #14]
 80015f8:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80015fa:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001600:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	7f1b      	ldrb	r3, [r3, #28]
 8001606:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001608:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	7f9b      	ldrb	r3, [r3, #30]
 800160e:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001610:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001616:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800161e:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001620:	4313      	orrs	r3, r2
 8001622:	68fa      	ldr	r2, [r7, #12]
 8001624:	4313      	orrs	r3, r2
 8001626:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001630:	461a      	mov	r2, r3
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800163e:	699b      	ldr	r3, [r3, #24]
 8001640:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001642:	2001      	movs	r0, #1
 8001644:	f7ff fd5e 	bl	8001104 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001650:	461a      	mov	r2, r3
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	791b      	ldrb	r3, [r3, #4]
 800165a:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001660:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8001666:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800166c:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001674:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8001676:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800167c:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800167e:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001684:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001686:	687a      	ldr	r2, [r7, #4]
 8001688:	6812      	ldr	r2, [r2, #0]
 800168a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800168e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001692:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80016a0:	2001      	movs	r0, #1
 80016a2:	f7ff fd2f 	bl	8001104 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80016ae:	461a      	mov	r2, r3
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	6013      	str	r3, [r2, #0]
}
 80016b4:	bf00      	nop
 80016b6:	3710      	adds	r7, #16
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	f8de3f23 	.word	0xf8de3f23

080016c0 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b0a6      	sub	sp, #152	@ 0x98
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80016c8:	2301      	movs	r3, #1
 80016ca:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 80016ce:	2301      	movs	r3, #1
 80016d0:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80016d4:	2300      	movs	r3, #0
 80016d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80016d8:	2300      	movs	r3, #0
 80016da:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80016de:	2301      	movs	r3, #1
 80016e0:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80016e4:	2300      	movs	r3, #0
 80016e6:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80016ea:	2301      	movs	r3, #1
 80016ec:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 80016f0:	2301      	movs	r3, #1
 80016f2:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80016f6:	2300      	movs	r3, #0
 80016f8:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80016fc:	2300      	movs	r3, #0
 80016fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001702:	2300      	movs	r3, #0
 8001704:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001706:	2300      	movs	r3, #0
 8001708:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800170c:	2300      	movs	r3, #0
 800170e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8001710:	2300      	movs	r3, #0
 8001712:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001716:	2300      	movs	r3, #0
 8001718:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800171c:	2300      	movs	r3, #0
 800171e:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001722:	2300      	movs	r3, #0
 8001724:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001728:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800172c:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800172e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001732:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001734:	2300      	movs	r3, #0
 8001736:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800173a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800173e:	4619      	mov	r1, r3
 8001740:	6878      	ldr	r0, [r7, #4]
 8001742:	f7ff fe7f 	bl	8001444 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8001746:	2301      	movs	r3, #1
 8001748:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 800174a:	2301      	movs	r3, #1
 800174c:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 800174e:	2301      	movs	r3, #1
 8001750:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8001754:	2301      	movs	r3, #1
 8001756:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001758:	2300      	movs	r3, #0
 800175a:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800175c:	2300      	movs	r3, #0
 800175e:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001762:	2300      	movs	r3, #0
 8001764:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001768:	2300      	movs	r3, #0
 800176a:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800176c:	2301      	movs	r3, #1
 800176e:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001772:	2301      	movs	r3, #1
 8001774:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001776:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800177a:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800177c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001780:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001782:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001786:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8001788:	2301      	movs	r3, #1
 800178a:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 800178e:	2300      	movs	r3, #0
 8001790:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001792:	2300      	movs	r3, #0
 8001794:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001796:	f107 0308 	add.w	r3, r7, #8
 800179a:	4619      	mov	r1, r3
 800179c:	6878      	ldr	r0, [r7, #4]
 800179e:	f7ff ff05 	bl	80015ac <ETH_SetDMAConfig>
}
 80017a2:	bf00      	nop
 80017a4:	3798      	adds	r7, #152	@ 0x98
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
	...

080017ac <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b087      	sub	sp, #28
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	60f8      	str	r0, [r7, #12]
 80017b4:	60b9      	str	r1, [r7, #8]
 80017b6:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	3305      	adds	r3, #5
 80017bc:	781b      	ldrb	r3, [r3, #0]
 80017be:	021b      	lsls	r3, r3, #8
 80017c0:	687a      	ldr	r2, [r7, #4]
 80017c2:	3204      	adds	r2, #4
 80017c4:	7812      	ldrb	r2, [r2, #0]
 80017c6:	4313      	orrs	r3, r2
 80017c8:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80017ca:	68ba      	ldr	r2, [r7, #8]
 80017cc:	4b11      	ldr	r3, [pc, #68]	@ (8001814 <ETH_MACAddressConfig+0x68>)
 80017ce:	4413      	add	r3, r2
 80017d0:	461a      	mov	r2, r3
 80017d2:	697b      	ldr	r3, [r7, #20]
 80017d4:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	3303      	adds	r3, #3
 80017da:	781b      	ldrb	r3, [r3, #0]
 80017dc:	061a      	lsls	r2, r3, #24
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	3302      	adds	r3, #2
 80017e2:	781b      	ldrb	r3, [r3, #0]
 80017e4:	041b      	lsls	r3, r3, #16
 80017e6:	431a      	orrs	r2, r3
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	3301      	adds	r3, #1
 80017ec:	781b      	ldrb	r3, [r3, #0]
 80017ee:	021b      	lsls	r3, r3, #8
 80017f0:	4313      	orrs	r3, r2
 80017f2:	687a      	ldr	r2, [r7, #4]
 80017f4:	7812      	ldrb	r2, [r2, #0]
 80017f6:	4313      	orrs	r3, r2
 80017f8:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80017fa:	68ba      	ldr	r2, [r7, #8]
 80017fc:	4b06      	ldr	r3, [pc, #24]	@ (8001818 <ETH_MACAddressConfig+0x6c>)
 80017fe:	4413      	add	r3, r2
 8001800:	461a      	mov	r2, r3
 8001802:	697b      	ldr	r3, [r7, #20]
 8001804:	6013      	str	r3, [r2, #0]
}
 8001806:	bf00      	nop
 8001808:	371c      	adds	r7, #28
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr
 8001812:	bf00      	nop
 8001814:	40028040 	.word	0x40028040
 8001818:	40028044 	.word	0x40028044

0800181c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800181c:	b480      	push	{r7}
 800181e:	b085      	sub	sp, #20
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001824:	2300      	movs	r3, #0
 8001826:	60fb      	str	r3, [r7, #12]
 8001828:	e03e      	b.n	80018a8 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	68d9      	ldr	r1, [r3, #12]
 800182e:	68fa      	ldr	r2, [r7, #12]
 8001830:	4613      	mov	r3, r2
 8001832:	009b      	lsls	r3, r3, #2
 8001834:	4413      	add	r3, r2
 8001836:	00db      	lsls	r3, r3, #3
 8001838:	440b      	add	r3, r1
 800183a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 800183c:	68bb      	ldr	r3, [r7, #8]
 800183e:	2200      	movs	r2, #0
 8001840:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8001842:	68bb      	ldr	r3, [r7, #8]
 8001844:	2200      	movs	r2, #0
 8001846:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8001848:	68bb      	ldr	r3, [r7, #8]
 800184a:	2200      	movs	r2, #0
 800184c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 800184e:	68bb      	ldr	r3, [r7, #8]
 8001850:	2200      	movs	r2, #0
 8001852:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001854:	68b9      	ldr	r1, [r7, #8]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	68fa      	ldr	r2, [r7, #12]
 800185a:	3206      	adds	r2, #6
 800185c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8001860:	68bb      	ldr	r3, [r7, #8]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001868:	68bb      	ldr	r3, [r7, #8]
 800186a:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	2b02      	cmp	r3, #2
 8001870:	d80c      	bhi.n	800188c <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	68d9      	ldr	r1, [r3, #12]
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	1c5a      	adds	r2, r3, #1
 800187a:	4613      	mov	r3, r2
 800187c:	009b      	lsls	r3, r3, #2
 800187e:	4413      	add	r3, r2
 8001880:	00db      	lsls	r3, r3, #3
 8001882:	440b      	add	r3, r1
 8001884:	461a      	mov	r2, r3
 8001886:	68bb      	ldr	r3, [r7, #8]
 8001888:	60da      	str	r2, [r3, #12]
 800188a:	e004      	b.n	8001896 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	68db      	ldr	r3, [r3, #12]
 8001890:	461a      	mov	r2, r3
 8001892:	68bb      	ldr	r3, [r7, #8]
 8001894:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8001896:	68bb      	ldr	r3, [r7, #8]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 800189e:	68bb      	ldr	r3, [r7, #8]
 80018a0:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	3301      	adds	r3, #1
 80018a6:	60fb      	str	r3, [r7, #12]
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	2b03      	cmp	r3, #3
 80018ac:	d9bd      	bls.n	800182a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2200      	movs	r2, #0
 80018b2:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	68da      	ldr	r2, [r3, #12]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80018c0:	611a      	str	r2, [r3, #16]
}
 80018c2:	bf00      	nop
 80018c4:	3714      	adds	r7, #20
 80018c6:	46bd      	mov	sp, r7
 80018c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018cc:	4770      	bx	lr

080018ce <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80018ce:	b480      	push	{r7}
 80018d0:	b085      	sub	sp, #20
 80018d2:	af00      	add	r7, sp, #0
 80018d4:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80018d6:	2300      	movs	r3, #0
 80018d8:	60fb      	str	r3, [r7, #12]
 80018da:	e048      	b.n	800196e <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6919      	ldr	r1, [r3, #16]
 80018e0:	68fa      	ldr	r2, [r7, #12]
 80018e2:	4613      	mov	r3, r2
 80018e4:	009b      	lsls	r3, r3, #2
 80018e6:	4413      	add	r3, r2
 80018e8:	00db      	lsls	r3, r3, #3
 80018ea:	440b      	add	r3, r1
 80018ec:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 80018ee:	68bb      	ldr	r3, [r7, #8]
 80018f0:	2200      	movs	r2, #0
 80018f2:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 80018f4:	68bb      	ldr	r3, [r7, #8]
 80018f6:	2200      	movs	r2, #0
 80018f8:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 80018fa:	68bb      	ldr	r3, [r7, #8]
 80018fc:	2200      	movs	r2, #0
 80018fe:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8001900:	68bb      	ldr	r3, [r7, #8]
 8001902:	2200      	movs	r2, #0
 8001904:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8001906:	68bb      	ldr	r3, [r7, #8]
 8001908:	2200      	movs	r2, #0
 800190a:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 800190c:	68bb      	ldr	r3, [r7, #8]
 800190e:	2200      	movs	r2, #0
 8001910:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8001912:	68bb      	ldr	r3, [r7, #8]
 8001914:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8001918:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	695b      	ldr	r3, [r3, #20]
 800191e:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8001922:	68bb      	ldr	r3, [r7, #8]
 8001924:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8001926:	68bb      	ldr	r3, [r7, #8]
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800192e:	68bb      	ldr	r3, [r7, #8]
 8001930:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001932:	68b9      	ldr	r1, [r7, #8]
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	68fa      	ldr	r2, [r7, #12]
 8001938:	3212      	adds	r2, #18
 800193a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	2b02      	cmp	r3, #2
 8001942:	d80c      	bhi.n	800195e <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6919      	ldr	r1, [r3, #16]
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	1c5a      	adds	r2, r3, #1
 800194c:	4613      	mov	r3, r2
 800194e:	009b      	lsls	r3, r3, #2
 8001950:	4413      	add	r3, r2
 8001952:	00db      	lsls	r3, r3, #3
 8001954:	440b      	add	r3, r1
 8001956:	461a      	mov	r2, r3
 8001958:	68bb      	ldr	r3, [r7, #8]
 800195a:	60da      	str	r2, [r3, #12]
 800195c:	e004      	b.n	8001968 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	691b      	ldr	r3, [r3, #16]
 8001962:	461a      	mov	r2, r3
 8001964:	68bb      	ldr	r3, [r7, #8]
 8001966:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	3301      	adds	r3, #1
 800196c:	60fb      	str	r3, [r7, #12]
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	2b03      	cmp	r3, #3
 8001972:	d9b3      	bls.n	80018dc <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2200      	movs	r2, #0
 8001978:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2200      	movs	r2, #0
 800197e:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2200      	movs	r2, #0
 8001984:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2200      	movs	r2, #0
 800198a:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2200      	movs	r2, #0
 8001990:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	691a      	ldr	r2, [r3, #16]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800199e:	60da      	str	r2, [r3, #12]
}
 80019a0:	bf00      	nop
 80019a2:	3714      	adds	r7, #20
 80019a4:	46bd      	mov	sp, r7
 80019a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019aa:	4770      	bx	lr

080019ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b089      	sub	sp, #36	@ 0x24
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
 80019b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80019b6:	2300      	movs	r3, #0
 80019b8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80019ba:	2300      	movs	r3, #0
 80019bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80019be:	2300      	movs	r3, #0
 80019c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80019c2:	2300      	movs	r3, #0
 80019c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80019c6:	2300      	movs	r3, #0
 80019c8:	61fb      	str	r3, [r7, #28]
 80019ca:	e175      	b.n	8001cb8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80019cc:	2201      	movs	r2, #1
 80019ce:	69fb      	ldr	r3, [r7, #28]
 80019d0:	fa02 f303 	lsl.w	r3, r2, r3
 80019d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	697a      	ldr	r2, [r7, #20]
 80019dc:	4013      	ands	r3, r2
 80019de:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 80019e0:	693a      	ldr	r2, [r7, #16]
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	429a      	cmp	r2, r3
 80019e6:	f040 8164 	bne.w	8001cb2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	f003 0303 	and.w	r3, r3, #3
 80019f2:	2b01      	cmp	r3, #1
 80019f4:	d005      	beq.n	8001a02 <HAL_GPIO_Init+0x56>
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	f003 0303 	and.w	r3, r3, #3
 80019fe:	2b02      	cmp	r3, #2
 8001a00:	d130      	bne.n	8001a64 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	689b      	ldr	r3, [r3, #8]
 8001a06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001a08:	69fb      	ldr	r3, [r7, #28]
 8001a0a:	005b      	lsls	r3, r3, #1
 8001a0c:	2203      	movs	r2, #3
 8001a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a12:	43db      	mvns	r3, r3
 8001a14:	69ba      	ldr	r2, [r7, #24]
 8001a16:	4013      	ands	r3, r2
 8001a18:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	68da      	ldr	r2, [r3, #12]
 8001a1e:	69fb      	ldr	r3, [r7, #28]
 8001a20:	005b      	lsls	r3, r3, #1
 8001a22:	fa02 f303 	lsl.w	r3, r2, r3
 8001a26:	69ba      	ldr	r2, [r7, #24]
 8001a28:	4313      	orrs	r3, r2
 8001a2a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	69ba      	ldr	r2, [r7, #24]
 8001a30:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a38:	2201      	movs	r2, #1
 8001a3a:	69fb      	ldr	r3, [r7, #28]
 8001a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a40:	43db      	mvns	r3, r3
 8001a42:	69ba      	ldr	r2, [r7, #24]
 8001a44:	4013      	ands	r3, r2
 8001a46:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	091b      	lsrs	r3, r3, #4
 8001a4e:	f003 0201 	and.w	r2, r3, #1
 8001a52:	69fb      	ldr	r3, [r7, #28]
 8001a54:	fa02 f303 	lsl.w	r3, r2, r3
 8001a58:	69ba      	ldr	r2, [r7, #24]
 8001a5a:	4313      	orrs	r3, r2
 8001a5c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	69ba      	ldr	r2, [r7, #24]
 8001a62:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	f003 0303 	and.w	r3, r3, #3
 8001a6c:	2b03      	cmp	r3, #3
 8001a6e:	d017      	beq.n	8001aa0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	68db      	ldr	r3, [r3, #12]
 8001a74:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001a76:	69fb      	ldr	r3, [r7, #28]
 8001a78:	005b      	lsls	r3, r3, #1
 8001a7a:	2203      	movs	r2, #3
 8001a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a80:	43db      	mvns	r3, r3
 8001a82:	69ba      	ldr	r2, [r7, #24]
 8001a84:	4013      	ands	r3, r2
 8001a86:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	689a      	ldr	r2, [r3, #8]
 8001a8c:	69fb      	ldr	r3, [r7, #28]
 8001a8e:	005b      	lsls	r3, r3, #1
 8001a90:	fa02 f303 	lsl.w	r3, r2, r3
 8001a94:	69ba      	ldr	r2, [r7, #24]
 8001a96:	4313      	orrs	r3, r2
 8001a98:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	69ba      	ldr	r2, [r7, #24]
 8001a9e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	f003 0303 	and.w	r3, r3, #3
 8001aa8:	2b02      	cmp	r3, #2
 8001aaa:	d123      	bne.n	8001af4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001aac:	69fb      	ldr	r3, [r7, #28]
 8001aae:	08da      	lsrs	r2, r3, #3
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	3208      	adds	r2, #8
 8001ab4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ab8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001aba:	69fb      	ldr	r3, [r7, #28]
 8001abc:	f003 0307 	and.w	r3, r3, #7
 8001ac0:	009b      	lsls	r3, r3, #2
 8001ac2:	220f      	movs	r2, #15
 8001ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac8:	43db      	mvns	r3, r3
 8001aca:	69ba      	ldr	r2, [r7, #24]
 8001acc:	4013      	ands	r3, r2
 8001ace:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	691a      	ldr	r2, [r3, #16]
 8001ad4:	69fb      	ldr	r3, [r7, #28]
 8001ad6:	f003 0307 	and.w	r3, r3, #7
 8001ada:	009b      	lsls	r3, r3, #2
 8001adc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae0:	69ba      	ldr	r2, [r7, #24]
 8001ae2:	4313      	orrs	r3, r2
 8001ae4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001ae6:	69fb      	ldr	r3, [r7, #28]
 8001ae8:	08da      	lsrs	r2, r3, #3
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	3208      	adds	r2, #8
 8001aee:	69b9      	ldr	r1, [r7, #24]
 8001af0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001afa:	69fb      	ldr	r3, [r7, #28]
 8001afc:	005b      	lsls	r3, r3, #1
 8001afe:	2203      	movs	r2, #3
 8001b00:	fa02 f303 	lsl.w	r3, r2, r3
 8001b04:	43db      	mvns	r3, r3
 8001b06:	69ba      	ldr	r2, [r7, #24]
 8001b08:	4013      	ands	r3, r2
 8001b0a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	f003 0203 	and.w	r2, r3, #3
 8001b14:	69fb      	ldr	r3, [r7, #28]
 8001b16:	005b      	lsls	r3, r3, #1
 8001b18:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1c:	69ba      	ldr	r2, [r7, #24]
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	69ba      	ldr	r2, [r7, #24]
 8001b26:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	f000 80be 	beq.w	8001cb2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b36:	4b66      	ldr	r3, [pc, #408]	@ (8001cd0 <HAL_GPIO_Init+0x324>)
 8001b38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b3a:	4a65      	ldr	r2, [pc, #404]	@ (8001cd0 <HAL_GPIO_Init+0x324>)
 8001b3c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b40:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b42:	4b63      	ldr	r3, [pc, #396]	@ (8001cd0 <HAL_GPIO_Init+0x324>)
 8001b44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b46:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b4a:	60fb      	str	r3, [r7, #12]
 8001b4c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001b4e:	4a61      	ldr	r2, [pc, #388]	@ (8001cd4 <HAL_GPIO_Init+0x328>)
 8001b50:	69fb      	ldr	r3, [r7, #28]
 8001b52:	089b      	lsrs	r3, r3, #2
 8001b54:	3302      	adds	r3, #2
 8001b56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001b5c:	69fb      	ldr	r3, [r7, #28]
 8001b5e:	f003 0303 	and.w	r3, r3, #3
 8001b62:	009b      	lsls	r3, r3, #2
 8001b64:	220f      	movs	r2, #15
 8001b66:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6a:	43db      	mvns	r3, r3
 8001b6c:	69ba      	ldr	r2, [r7, #24]
 8001b6e:	4013      	ands	r3, r2
 8001b70:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	4a58      	ldr	r2, [pc, #352]	@ (8001cd8 <HAL_GPIO_Init+0x32c>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d037      	beq.n	8001bea <HAL_GPIO_Init+0x23e>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	4a57      	ldr	r2, [pc, #348]	@ (8001cdc <HAL_GPIO_Init+0x330>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d031      	beq.n	8001be6 <HAL_GPIO_Init+0x23a>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	4a56      	ldr	r2, [pc, #344]	@ (8001ce0 <HAL_GPIO_Init+0x334>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d02b      	beq.n	8001be2 <HAL_GPIO_Init+0x236>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	4a55      	ldr	r2, [pc, #340]	@ (8001ce4 <HAL_GPIO_Init+0x338>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d025      	beq.n	8001bde <HAL_GPIO_Init+0x232>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	4a54      	ldr	r2, [pc, #336]	@ (8001ce8 <HAL_GPIO_Init+0x33c>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d01f      	beq.n	8001bda <HAL_GPIO_Init+0x22e>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	4a53      	ldr	r2, [pc, #332]	@ (8001cec <HAL_GPIO_Init+0x340>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d019      	beq.n	8001bd6 <HAL_GPIO_Init+0x22a>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	4a52      	ldr	r2, [pc, #328]	@ (8001cf0 <HAL_GPIO_Init+0x344>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d013      	beq.n	8001bd2 <HAL_GPIO_Init+0x226>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	4a51      	ldr	r2, [pc, #324]	@ (8001cf4 <HAL_GPIO_Init+0x348>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d00d      	beq.n	8001bce <HAL_GPIO_Init+0x222>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	4a50      	ldr	r2, [pc, #320]	@ (8001cf8 <HAL_GPIO_Init+0x34c>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d007      	beq.n	8001bca <HAL_GPIO_Init+0x21e>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	4a4f      	ldr	r2, [pc, #316]	@ (8001cfc <HAL_GPIO_Init+0x350>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d101      	bne.n	8001bc6 <HAL_GPIO_Init+0x21a>
 8001bc2:	2309      	movs	r3, #9
 8001bc4:	e012      	b.n	8001bec <HAL_GPIO_Init+0x240>
 8001bc6:	230a      	movs	r3, #10
 8001bc8:	e010      	b.n	8001bec <HAL_GPIO_Init+0x240>
 8001bca:	2308      	movs	r3, #8
 8001bcc:	e00e      	b.n	8001bec <HAL_GPIO_Init+0x240>
 8001bce:	2307      	movs	r3, #7
 8001bd0:	e00c      	b.n	8001bec <HAL_GPIO_Init+0x240>
 8001bd2:	2306      	movs	r3, #6
 8001bd4:	e00a      	b.n	8001bec <HAL_GPIO_Init+0x240>
 8001bd6:	2305      	movs	r3, #5
 8001bd8:	e008      	b.n	8001bec <HAL_GPIO_Init+0x240>
 8001bda:	2304      	movs	r3, #4
 8001bdc:	e006      	b.n	8001bec <HAL_GPIO_Init+0x240>
 8001bde:	2303      	movs	r3, #3
 8001be0:	e004      	b.n	8001bec <HAL_GPIO_Init+0x240>
 8001be2:	2302      	movs	r3, #2
 8001be4:	e002      	b.n	8001bec <HAL_GPIO_Init+0x240>
 8001be6:	2301      	movs	r3, #1
 8001be8:	e000      	b.n	8001bec <HAL_GPIO_Init+0x240>
 8001bea:	2300      	movs	r3, #0
 8001bec:	69fa      	ldr	r2, [r7, #28]
 8001bee:	f002 0203 	and.w	r2, r2, #3
 8001bf2:	0092      	lsls	r2, r2, #2
 8001bf4:	4093      	lsls	r3, r2
 8001bf6:	69ba      	ldr	r2, [r7, #24]
 8001bf8:	4313      	orrs	r3, r2
 8001bfa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001bfc:	4935      	ldr	r1, [pc, #212]	@ (8001cd4 <HAL_GPIO_Init+0x328>)
 8001bfe:	69fb      	ldr	r3, [r7, #28]
 8001c00:	089b      	lsrs	r3, r3, #2
 8001c02:	3302      	adds	r3, #2
 8001c04:	69ba      	ldr	r2, [r7, #24]
 8001c06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c0a:	4b3d      	ldr	r3, [pc, #244]	@ (8001d00 <HAL_GPIO_Init+0x354>)
 8001c0c:	689b      	ldr	r3, [r3, #8]
 8001c0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c10:	693b      	ldr	r3, [r7, #16]
 8001c12:	43db      	mvns	r3, r3
 8001c14:	69ba      	ldr	r2, [r7, #24]
 8001c16:	4013      	ands	r3, r2
 8001c18:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d003      	beq.n	8001c2e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001c26:	69ba      	ldr	r2, [r7, #24]
 8001c28:	693b      	ldr	r3, [r7, #16]
 8001c2a:	4313      	orrs	r3, r2
 8001c2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c2e:	4a34      	ldr	r2, [pc, #208]	@ (8001d00 <HAL_GPIO_Init+0x354>)
 8001c30:	69bb      	ldr	r3, [r7, #24]
 8001c32:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c34:	4b32      	ldr	r3, [pc, #200]	@ (8001d00 <HAL_GPIO_Init+0x354>)
 8001c36:	68db      	ldr	r3, [r3, #12]
 8001c38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c3a:	693b      	ldr	r3, [r7, #16]
 8001c3c:	43db      	mvns	r3, r3
 8001c3e:	69ba      	ldr	r2, [r7, #24]
 8001c40:	4013      	ands	r3, r2
 8001c42:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d003      	beq.n	8001c58 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001c50:	69ba      	ldr	r2, [r7, #24]
 8001c52:	693b      	ldr	r3, [r7, #16]
 8001c54:	4313      	orrs	r3, r2
 8001c56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c58:	4a29      	ldr	r2, [pc, #164]	@ (8001d00 <HAL_GPIO_Init+0x354>)
 8001c5a:	69bb      	ldr	r3, [r7, #24]
 8001c5c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c5e:	4b28      	ldr	r3, [pc, #160]	@ (8001d00 <HAL_GPIO_Init+0x354>)
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	43db      	mvns	r3, r3
 8001c68:	69ba      	ldr	r2, [r7, #24]
 8001c6a:	4013      	ands	r3, r2
 8001c6c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d003      	beq.n	8001c82 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001c7a:	69ba      	ldr	r2, [r7, #24]
 8001c7c:	693b      	ldr	r3, [r7, #16]
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c82:	4a1f      	ldr	r2, [pc, #124]	@ (8001d00 <HAL_GPIO_Init+0x354>)
 8001c84:	69bb      	ldr	r3, [r7, #24]
 8001c86:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c88:	4b1d      	ldr	r3, [pc, #116]	@ (8001d00 <HAL_GPIO_Init+0x354>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	43db      	mvns	r3, r3
 8001c92:	69ba      	ldr	r2, [r7, #24]
 8001c94:	4013      	ands	r3, r2
 8001c96:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d003      	beq.n	8001cac <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001ca4:	69ba      	ldr	r2, [r7, #24]
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001cac:	4a14      	ldr	r2, [pc, #80]	@ (8001d00 <HAL_GPIO_Init+0x354>)
 8001cae:	69bb      	ldr	r3, [r7, #24]
 8001cb0:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8001cb2:	69fb      	ldr	r3, [r7, #28]
 8001cb4:	3301      	adds	r3, #1
 8001cb6:	61fb      	str	r3, [r7, #28]
 8001cb8:	69fb      	ldr	r3, [r7, #28]
 8001cba:	2b0f      	cmp	r3, #15
 8001cbc:	f67f ae86 	bls.w	80019cc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001cc0:	bf00      	nop
 8001cc2:	bf00      	nop
 8001cc4:	3724      	adds	r7, #36	@ 0x24
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr
 8001cce:	bf00      	nop
 8001cd0:	40023800 	.word	0x40023800
 8001cd4:	40013800 	.word	0x40013800
 8001cd8:	40020000 	.word	0x40020000
 8001cdc:	40020400 	.word	0x40020400
 8001ce0:	40020800 	.word	0x40020800
 8001ce4:	40020c00 	.word	0x40020c00
 8001ce8:	40021000 	.word	0x40021000
 8001cec:	40021400 	.word	0x40021400
 8001cf0:	40021800 	.word	0x40021800
 8001cf4:	40021c00 	.word	0x40021c00
 8001cf8:	40022000 	.word	0x40022000
 8001cfc:	40022400 	.word	0x40022400
 8001d00:	40013c00 	.word	0x40013c00

08001d04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b083      	sub	sp, #12
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
 8001d0c:	460b      	mov	r3, r1
 8001d0e:	807b      	strh	r3, [r7, #2]
 8001d10:	4613      	mov	r3, r2
 8001d12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d14:	787b      	ldrb	r3, [r7, #1]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d003      	beq.n	8001d22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d1a:	887a      	ldrh	r2, [r7, #2]
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001d20:	e003      	b.n	8001d2a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001d22:	887b      	ldrh	r3, [r7, #2]
 8001d24:	041a      	lsls	r2, r3, #16
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	619a      	str	r2, [r3, #24]
}
 8001d2a:	bf00      	nop
 8001d2c:	370c      	adds	r7, #12
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr
	...

08001d38 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b082      	sub	sp, #8
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	4603      	mov	r3, r0
 8001d40:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001d42:	4b08      	ldr	r3, [pc, #32]	@ (8001d64 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d44:	695a      	ldr	r2, [r3, #20]
 8001d46:	88fb      	ldrh	r3, [r7, #6]
 8001d48:	4013      	ands	r3, r2
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d006      	beq.n	8001d5c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001d4e:	4a05      	ldr	r2, [pc, #20]	@ (8001d64 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d50:	88fb      	ldrh	r3, [r7, #6]
 8001d52:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001d54:	88fb      	ldrh	r3, [r7, #6]
 8001d56:	4618      	mov	r0, r3
 8001d58:	f7fe fe22 	bl	80009a0 <HAL_GPIO_EXTI_Callback>
  }
}
 8001d5c:	bf00      	nop
 8001d5e:	3708      	adds	r7, #8
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}
 8001d64:	40013c00 	.word	0x40013c00

08001d68 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b086      	sub	sp, #24
 8001d6c:	af02      	add	r7, sp, #8
 8001d6e:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d101      	bne.n	8001d7a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001d76:	2301      	movs	r3, #1
 8001d78:	e108      	b.n	8001f8c <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001d86:	b2db      	uxtb	r3, r3
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d106      	bne.n	8001d9a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2200      	movs	r2, #0
 8001d90:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001d94:	6878      	ldr	r0, [r7, #4]
 8001d96:	f7ff f835 	bl	8000e04 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2203      	movs	r2, #3
 8001d9e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001da2:	68bb      	ldr	r3, [r7, #8]
 8001da4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001da8:	d102      	bne.n	8001db0 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2200      	movs	r2, #0
 8001dae:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4618      	mov	r0, r3
 8001db6:	f002 fb1f 	bl	80043f8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6818      	ldr	r0, [r3, #0]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	7c1a      	ldrb	r2, [r3, #16]
 8001dc2:	f88d 2000 	strb.w	r2, [sp]
 8001dc6:	3304      	adds	r3, #4
 8001dc8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001dca:	f002 fabb 	bl	8004344 <USB_CoreInit>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d005      	beq.n	8001de0 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2202      	movs	r2, #2
 8001dd8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	e0d5      	b.n	8001f8c <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	2100      	movs	r1, #0
 8001de6:	4618      	mov	r0, r3
 8001de8:	f002 fb17 	bl	800441a <USB_SetCurrentMode>
 8001dec:	4603      	mov	r3, r0
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d005      	beq.n	8001dfe <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2202      	movs	r2, #2
 8001df6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e0c6      	b.n	8001f8c <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001dfe:	2300      	movs	r3, #0
 8001e00:	73fb      	strb	r3, [r7, #15]
 8001e02:	e04a      	b.n	8001e9a <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001e04:	7bfa      	ldrb	r2, [r7, #15]
 8001e06:	6879      	ldr	r1, [r7, #4]
 8001e08:	4613      	mov	r3, r2
 8001e0a:	00db      	lsls	r3, r3, #3
 8001e0c:	4413      	add	r3, r2
 8001e0e:	009b      	lsls	r3, r3, #2
 8001e10:	440b      	add	r3, r1
 8001e12:	3315      	adds	r3, #21
 8001e14:	2201      	movs	r2, #1
 8001e16:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001e18:	7bfa      	ldrb	r2, [r7, #15]
 8001e1a:	6879      	ldr	r1, [r7, #4]
 8001e1c:	4613      	mov	r3, r2
 8001e1e:	00db      	lsls	r3, r3, #3
 8001e20:	4413      	add	r3, r2
 8001e22:	009b      	lsls	r3, r3, #2
 8001e24:	440b      	add	r3, r1
 8001e26:	3314      	adds	r3, #20
 8001e28:	7bfa      	ldrb	r2, [r7, #15]
 8001e2a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001e2c:	7bfa      	ldrb	r2, [r7, #15]
 8001e2e:	7bfb      	ldrb	r3, [r7, #15]
 8001e30:	b298      	uxth	r0, r3
 8001e32:	6879      	ldr	r1, [r7, #4]
 8001e34:	4613      	mov	r3, r2
 8001e36:	00db      	lsls	r3, r3, #3
 8001e38:	4413      	add	r3, r2
 8001e3a:	009b      	lsls	r3, r3, #2
 8001e3c:	440b      	add	r3, r1
 8001e3e:	332e      	adds	r3, #46	@ 0x2e
 8001e40:	4602      	mov	r2, r0
 8001e42:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001e44:	7bfa      	ldrb	r2, [r7, #15]
 8001e46:	6879      	ldr	r1, [r7, #4]
 8001e48:	4613      	mov	r3, r2
 8001e4a:	00db      	lsls	r3, r3, #3
 8001e4c:	4413      	add	r3, r2
 8001e4e:	009b      	lsls	r3, r3, #2
 8001e50:	440b      	add	r3, r1
 8001e52:	3318      	adds	r3, #24
 8001e54:	2200      	movs	r2, #0
 8001e56:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001e58:	7bfa      	ldrb	r2, [r7, #15]
 8001e5a:	6879      	ldr	r1, [r7, #4]
 8001e5c:	4613      	mov	r3, r2
 8001e5e:	00db      	lsls	r3, r3, #3
 8001e60:	4413      	add	r3, r2
 8001e62:	009b      	lsls	r3, r3, #2
 8001e64:	440b      	add	r3, r1
 8001e66:	331c      	adds	r3, #28
 8001e68:	2200      	movs	r2, #0
 8001e6a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001e6c:	7bfa      	ldrb	r2, [r7, #15]
 8001e6e:	6879      	ldr	r1, [r7, #4]
 8001e70:	4613      	mov	r3, r2
 8001e72:	00db      	lsls	r3, r3, #3
 8001e74:	4413      	add	r3, r2
 8001e76:	009b      	lsls	r3, r3, #2
 8001e78:	440b      	add	r3, r1
 8001e7a:	3320      	adds	r3, #32
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001e80:	7bfa      	ldrb	r2, [r7, #15]
 8001e82:	6879      	ldr	r1, [r7, #4]
 8001e84:	4613      	mov	r3, r2
 8001e86:	00db      	lsls	r3, r3, #3
 8001e88:	4413      	add	r3, r2
 8001e8a:	009b      	lsls	r3, r3, #2
 8001e8c:	440b      	add	r3, r1
 8001e8e:	3324      	adds	r3, #36	@ 0x24
 8001e90:	2200      	movs	r2, #0
 8001e92:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e94:	7bfb      	ldrb	r3, [r7, #15]
 8001e96:	3301      	adds	r3, #1
 8001e98:	73fb      	strb	r3, [r7, #15]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	791b      	ldrb	r3, [r3, #4]
 8001e9e:	7bfa      	ldrb	r2, [r7, #15]
 8001ea0:	429a      	cmp	r2, r3
 8001ea2:	d3af      	bcc.n	8001e04 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	73fb      	strb	r3, [r7, #15]
 8001ea8:	e044      	b.n	8001f34 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001eaa:	7bfa      	ldrb	r2, [r7, #15]
 8001eac:	6879      	ldr	r1, [r7, #4]
 8001eae:	4613      	mov	r3, r2
 8001eb0:	00db      	lsls	r3, r3, #3
 8001eb2:	4413      	add	r3, r2
 8001eb4:	009b      	lsls	r3, r3, #2
 8001eb6:	440b      	add	r3, r1
 8001eb8:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001ec0:	7bfa      	ldrb	r2, [r7, #15]
 8001ec2:	6879      	ldr	r1, [r7, #4]
 8001ec4:	4613      	mov	r3, r2
 8001ec6:	00db      	lsls	r3, r3, #3
 8001ec8:	4413      	add	r3, r2
 8001eca:	009b      	lsls	r3, r3, #2
 8001ecc:	440b      	add	r3, r1
 8001ece:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8001ed2:	7bfa      	ldrb	r2, [r7, #15]
 8001ed4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001ed6:	7bfa      	ldrb	r2, [r7, #15]
 8001ed8:	6879      	ldr	r1, [r7, #4]
 8001eda:	4613      	mov	r3, r2
 8001edc:	00db      	lsls	r3, r3, #3
 8001ede:	4413      	add	r3, r2
 8001ee0:	009b      	lsls	r3, r3, #2
 8001ee2:	440b      	add	r3, r1
 8001ee4:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001ee8:	2200      	movs	r2, #0
 8001eea:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001eec:	7bfa      	ldrb	r2, [r7, #15]
 8001eee:	6879      	ldr	r1, [r7, #4]
 8001ef0:	4613      	mov	r3, r2
 8001ef2:	00db      	lsls	r3, r3, #3
 8001ef4:	4413      	add	r3, r2
 8001ef6:	009b      	lsls	r3, r3, #2
 8001ef8:	440b      	add	r3, r1
 8001efa:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8001efe:	2200      	movs	r2, #0
 8001f00:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001f02:	7bfa      	ldrb	r2, [r7, #15]
 8001f04:	6879      	ldr	r1, [r7, #4]
 8001f06:	4613      	mov	r3, r2
 8001f08:	00db      	lsls	r3, r3, #3
 8001f0a:	4413      	add	r3, r2
 8001f0c:	009b      	lsls	r3, r3, #2
 8001f0e:	440b      	add	r3, r1
 8001f10:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8001f14:	2200      	movs	r2, #0
 8001f16:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001f18:	7bfa      	ldrb	r2, [r7, #15]
 8001f1a:	6879      	ldr	r1, [r7, #4]
 8001f1c:	4613      	mov	r3, r2
 8001f1e:	00db      	lsls	r3, r3, #3
 8001f20:	4413      	add	r3, r2
 8001f22:	009b      	lsls	r3, r3, #2
 8001f24:	440b      	add	r3, r1
 8001f26:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f2e:	7bfb      	ldrb	r3, [r7, #15]
 8001f30:	3301      	adds	r3, #1
 8001f32:	73fb      	strb	r3, [r7, #15]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	791b      	ldrb	r3, [r3, #4]
 8001f38:	7bfa      	ldrb	r2, [r7, #15]
 8001f3a:	429a      	cmp	r2, r3
 8001f3c:	d3b5      	bcc.n	8001eaa <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6818      	ldr	r0, [r3, #0]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	7c1a      	ldrb	r2, [r3, #16]
 8001f46:	f88d 2000 	strb.w	r2, [sp]
 8001f4a:	3304      	adds	r3, #4
 8001f4c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f4e:	f002 fab1 	bl	80044b4 <USB_DevInit>
 8001f52:	4603      	mov	r3, r0
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d005      	beq.n	8001f64 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2202      	movs	r2, #2
 8001f5c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001f60:	2301      	movs	r3, #1
 8001f62:	e013      	b.n	8001f8c <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2200      	movs	r2, #0
 8001f68:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2201      	movs	r2, #1
 8001f6e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	7b1b      	ldrb	r3, [r3, #12]
 8001f76:	2b01      	cmp	r3, #1
 8001f78:	d102      	bne.n	8001f80 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001f7a:	6878      	ldr	r0, [r7, #4]
 8001f7c:	f000 f80a 	bl	8001f94 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4618      	mov	r0, r3
 8001f86:	f002 fc6c 	bl	8004862 <USB_DevDisconnect>

  return HAL_OK;
 8001f8a:	2300      	movs	r3, #0
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	3710      	adds	r7, #16
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}

08001f94 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b085      	sub	sp, #20
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2200      	movs	r2, #0
 8001fae:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	699b      	ldr	r3, [r3, #24]
 8001fb6:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8001fc2:	4b05      	ldr	r3, [pc, #20]	@ (8001fd8 <HAL_PCDEx_ActivateLPM+0x44>)
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	68fa      	ldr	r2, [r7, #12]
 8001fc8:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8001fca:	2300      	movs	r3, #0
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	3714      	adds	r7, #20
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd6:	4770      	bx	lr
 8001fd8:	10000003 	.word	0x10000003

08001fdc <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001fe0:	4b05      	ldr	r3, [pc, #20]	@ (8001ff8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a04      	ldr	r2, [pc, #16]	@ (8001ff8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001fe6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fea:	6013      	str	r3, [r2, #0]
}
 8001fec:	bf00      	nop
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff4:	4770      	bx	lr
 8001ff6:	bf00      	nop
 8001ff8:	40007000 	.word	0x40007000

08001ffc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b082      	sub	sp, #8
 8002000:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002002:	2300      	movs	r3, #0
 8002004:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002006:	4b23      	ldr	r3, [pc, #140]	@ (8002094 <HAL_PWREx_EnableOverDrive+0x98>)
 8002008:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800200a:	4a22      	ldr	r2, [pc, #136]	@ (8002094 <HAL_PWREx_EnableOverDrive+0x98>)
 800200c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002010:	6413      	str	r3, [r2, #64]	@ 0x40
 8002012:	4b20      	ldr	r3, [pc, #128]	@ (8002094 <HAL_PWREx_EnableOverDrive+0x98>)
 8002014:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002016:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800201a:	603b      	str	r3, [r7, #0]
 800201c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800201e:	4b1e      	ldr	r3, [pc, #120]	@ (8002098 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4a1d      	ldr	r2, [pc, #116]	@ (8002098 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002024:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002028:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800202a:	f7ff f85f 	bl	80010ec <HAL_GetTick>
 800202e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002030:	e009      	b.n	8002046 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002032:	f7ff f85b 	bl	80010ec <HAL_GetTick>
 8002036:	4602      	mov	r2, r0
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	1ad3      	subs	r3, r2, r3
 800203c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002040:	d901      	bls.n	8002046 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002042:	2303      	movs	r3, #3
 8002044:	e022      	b.n	800208c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002046:	4b14      	ldr	r3, [pc, #80]	@ (8002098 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800204e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002052:	d1ee      	bne.n	8002032 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002054:	4b10      	ldr	r3, [pc, #64]	@ (8002098 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a0f      	ldr	r2, [pc, #60]	@ (8002098 <HAL_PWREx_EnableOverDrive+0x9c>)
 800205a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800205e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002060:	f7ff f844 	bl	80010ec <HAL_GetTick>
 8002064:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002066:	e009      	b.n	800207c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002068:	f7ff f840 	bl	80010ec <HAL_GetTick>
 800206c:	4602      	mov	r2, r0
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	1ad3      	subs	r3, r2, r3
 8002072:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002076:	d901      	bls.n	800207c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002078:	2303      	movs	r3, #3
 800207a:	e007      	b.n	800208c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800207c:	4b06      	ldr	r3, [pc, #24]	@ (8002098 <HAL_PWREx_EnableOverDrive+0x9c>)
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002084:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002088:	d1ee      	bne.n	8002068 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800208a:	2300      	movs	r3, #0
}
 800208c:	4618      	mov	r0, r3
 800208e:	3708      	adds	r7, #8
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}
 8002094:	40023800 	.word	0x40023800
 8002098:	40007000 	.word	0x40007000

0800209c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b086      	sub	sp, #24
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80020a4:	2300      	movs	r3, #0
 80020a6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d101      	bne.n	80020b2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	e29b      	b.n	80025ea <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f003 0301 	and.w	r3, r3, #1
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	f000 8087 	beq.w	80021ce <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80020c0:	4b96      	ldr	r3, [pc, #600]	@ (800231c <HAL_RCC_OscConfig+0x280>)
 80020c2:	689b      	ldr	r3, [r3, #8]
 80020c4:	f003 030c 	and.w	r3, r3, #12
 80020c8:	2b04      	cmp	r3, #4
 80020ca:	d00c      	beq.n	80020e6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80020cc:	4b93      	ldr	r3, [pc, #588]	@ (800231c <HAL_RCC_OscConfig+0x280>)
 80020ce:	689b      	ldr	r3, [r3, #8]
 80020d0:	f003 030c 	and.w	r3, r3, #12
 80020d4:	2b08      	cmp	r3, #8
 80020d6:	d112      	bne.n	80020fe <HAL_RCC_OscConfig+0x62>
 80020d8:	4b90      	ldr	r3, [pc, #576]	@ (800231c <HAL_RCC_OscConfig+0x280>)
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80020e0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80020e4:	d10b      	bne.n	80020fe <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020e6:	4b8d      	ldr	r3, [pc, #564]	@ (800231c <HAL_RCC_OscConfig+0x280>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d06c      	beq.n	80021cc <HAL_RCC_OscConfig+0x130>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d168      	bne.n	80021cc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	e275      	b.n	80025ea <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002106:	d106      	bne.n	8002116 <HAL_RCC_OscConfig+0x7a>
 8002108:	4b84      	ldr	r3, [pc, #528]	@ (800231c <HAL_RCC_OscConfig+0x280>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a83      	ldr	r2, [pc, #524]	@ (800231c <HAL_RCC_OscConfig+0x280>)
 800210e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002112:	6013      	str	r3, [r2, #0]
 8002114:	e02e      	b.n	8002174 <HAL_RCC_OscConfig+0xd8>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d10c      	bne.n	8002138 <HAL_RCC_OscConfig+0x9c>
 800211e:	4b7f      	ldr	r3, [pc, #508]	@ (800231c <HAL_RCC_OscConfig+0x280>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a7e      	ldr	r2, [pc, #504]	@ (800231c <HAL_RCC_OscConfig+0x280>)
 8002124:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002128:	6013      	str	r3, [r2, #0]
 800212a:	4b7c      	ldr	r3, [pc, #496]	@ (800231c <HAL_RCC_OscConfig+0x280>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a7b      	ldr	r2, [pc, #492]	@ (800231c <HAL_RCC_OscConfig+0x280>)
 8002130:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002134:	6013      	str	r3, [r2, #0]
 8002136:	e01d      	b.n	8002174 <HAL_RCC_OscConfig+0xd8>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002140:	d10c      	bne.n	800215c <HAL_RCC_OscConfig+0xc0>
 8002142:	4b76      	ldr	r3, [pc, #472]	@ (800231c <HAL_RCC_OscConfig+0x280>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a75      	ldr	r2, [pc, #468]	@ (800231c <HAL_RCC_OscConfig+0x280>)
 8002148:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800214c:	6013      	str	r3, [r2, #0]
 800214e:	4b73      	ldr	r3, [pc, #460]	@ (800231c <HAL_RCC_OscConfig+0x280>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a72      	ldr	r2, [pc, #456]	@ (800231c <HAL_RCC_OscConfig+0x280>)
 8002154:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002158:	6013      	str	r3, [r2, #0]
 800215a:	e00b      	b.n	8002174 <HAL_RCC_OscConfig+0xd8>
 800215c:	4b6f      	ldr	r3, [pc, #444]	@ (800231c <HAL_RCC_OscConfig+0x280>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a6e      	ldr	r2, [pc, #440]	@ (800231c <HAL_RCC_OscConfig+0x280>)
 8002162:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002166:	6013      	str	r3, [r2, #0]
 8002168:	4b6c      	ldr	r3, [pc, #432]	@ (800231c <HAL_RCC_OscConfig+0x280>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a6b      	ldr	r2, [pc, #428]	@ (800231c <HAL_RCC_OscConfig+0x280>)
 800216e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002172:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d013      	beq.n	80021a4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800217c:	f7fe ffb6 	bl	80010ec <HAL_GetTick>
 8002180:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002182:	e008      	b.n	8002196 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002184:	f7fe ffb2 	bl	80010ec <HAL_GetTick>
 8002188:	4602      	mov	r2, r0
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	1ad3      	subs	r3, r2, r3
 800218e:	2b64      	cmp	r3, #100	@ 0x64
 8002190:	d901      	bls.n	8002196 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002192:	2303      	movs	r3, #3
 8002194:	e229      	b.n	80025ea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002196:	4b61      	ldr	r3, [pc, #388]	@ (800231c <HAL_RCC_OscConfig+0x280>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d0f0      	beq.n	8002184 <HAL_RCC_OscConfig+0xe8>
 80021a2:	e014      	b.n	80021ce <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021a4:	f7fe ffa2 	bl	80010ec <HAL_GetTick>
 80021a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021aa:	e008      	b.n	80021be <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021ac:	f7fe ff9e 	bl	80010ec <HAL_GetTick>
 80021b0:	4602      	mov	r2, r0
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	1ad3      	subs	r3, r2, r3
 80021b6:	2b64      	cmp	r3, #100	@ 0x64
 80021b8:	d901      	bls.n	80021be <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80021ba:	2303      	movs	r3, #3
 80021bc:	e215      	b.n	80025ea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021be:	4b57      	ldr	r3, [pc, #348]	@ (800231c <HAL_RCC_OscConfig+0x280>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d1f0      	bne.n	80021ac <HAL_RCC_OscConfig+0x110>
 80021ca:	e000      	b.n	80021ce <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 0302 	and.w	r3, r3, #2
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d069      	beq.n	80022ae <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80021da:	4b50      	ldr	r3, [pc, #320]	@ (800231c <HAL_RCC_OscConfig+0x280>)
 80021dc:	689b      	ldr	r3, [r3, #8]
 80021de:	f003 030c 	and.w	r3, r3, #12
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d00b      	beq.n	80021fe <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80021e6:	4b4d      	ldr	r3, [pc, #308]	@ (800231c <HAL_RCC_OscConfig+0x280>)
 80021e8:	689b      	ldr	r3, [r3, #8]
 80021ea:	f003 030c 	and.w	r3, r3, #12
 80021ee:	2b08      	cmp	r3, #8
 80021f0:	d11c      	bne.n	800222c <HAL_RCC_OscConfig+0x190>
 80021f2:	4b4a      	ldr	r3, [pc, #296]	@ (800231c <HAL_RCC_OscConfig+0x280>)
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d116      	bne.n	800222c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021fe:	4b47      	ldr	r3, [pc, #284]	@ (800231c <HAL_RCC_OscConfig+0x280>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 0302 	and.w	r3, r3, #2
 8002206:	2b00      	cmp	r3, #0
 8002208:	d005      	beq.n	8002216 <HAL_RCC_OscConfig+0x17a>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	68db      	ldr	r3, [r3, #12]
 800220e:	2b01      	cmp	r3, #1
 8002210:	d001      	beq.n	8002216 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002212:	2301      	movs	r3, #1
 8002214:	e1e9      	b.n	80025ea <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002216:	4b41      	ldr	r3, [pc, #260]	@ (800231c <HAL_RCC_OscConfig+0x280>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	691b      	ldr	r3, [r3, #16]
 8002222:	00db      	lsls	r3, r3, #3
 8002224:	493d      	ldr	r1, [pc, #244]	@ (800231c <HAL_RCC_OscConfig+0x280>)
 8002226:	4313      	orrs	r3, r2
 8002228:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800222a:	e040      	b.n	80022ae <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	68db      	ldr	r3, [r3, #12]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d023      	beq.n	800227c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002234:	4b39      	ldr	r3, [pc, #228]	@ (800231c <HAL_RCC_OscConfig+0x280>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a38      	ldr	r2, [pc, #224]	@ (800231c <HAL_RCC_OscConfig+0x280>)
 800223a:	f043 0301 	orr.w	r3, r3, #1
 800223e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002240:	f7fe ff54 	bl	80010ec <HAL_GetTick>
 8002244:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002246:	e008      	b.n	800225a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002248:	f7fe ff50 	bl	80010ec <HAL_GetTick>
 800224c:	4602      	mov	r2, r0
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	1ad3      	subs	r3, r2, r3
 8002252:	2b02      	cmp	r3, #2
 8002254:	d901      	bls.n	800225a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002256:	2303      	movs	r3, #3
 8002258:	e1c7      	b.n	80025ea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800225a:	4b30      	ldr	r3, [pc, #192]	@ (800231c <HAL_RCC_OscConfig+0x280>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f003 0302 	and.w	r3, r3, #2
 8002262:	2b00      	cmp	r3, #0
 8002264:	d0f0      	beq.n	8002248 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002266:	4b2d      	ldr	r3, [pc, #180]	@ (800231c <HAL_RCC_OscConfig+0x280>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	691b      	ldr	r3, [r3, #16]
 8002272:	00db      	lsls	r3, r3, #3
 8002274:	4929      	ldr	r1, [pc, #164]	@ (800231c <HAL_RCC_OscConfig+0x280>)
 8002276:	4313      	orrs	r3, r2
 8002278:	600b      	str	r3, [r1, #0]
 800227a:	e018      	b.n	80022ae <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800227c:	4b27      	ldr	r3, [pc, #156]	@ (800231c <HAL_RCC_OscConfig+0x280>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a26      	ldr	r2, [pc, #152]	@ (800231c <HAL_RCC_OscConfig+0x280>)
 8002282:	f023 0301 	bic.w	r3, r3, #1
 8002286:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002288:	f7fe ff30 	bl	80010ec <HAL_GetTick>
 800228c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800228e:	e008      	b.n	80022a2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002290:	f7fe ff2c 	bl	80010ec <HAL_GetTick>
 8002294:	4602      	mov	r2, r0
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	1ad3      	subs	r3, r2, r3
 800229a:	2b02      	cmp	r3, #2
 800229c:	d901      	bls.n	80022a2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800229e:	2303      	movs	r3, #3
 80022a0:	e1a3      	b.n	80025ea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022a2:	4b1e      	ldr	r3, [pc, #120]	@ (800231c <HAL_RCC_OscConfig+0x280>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f003 0302 	and.w	r3, r3, #2
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d1f0      	bne.n	8002290 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 0308 	and.w	r3, r3, #8
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d038      	beq.n	800232c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	695b      	ldr	r3, [r3, #20]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d019      	beq.n	80022f6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022c2:	4b16      	ldr	r3, [pc, #88]	@ (800231c <HAL_RCC_OscConfig+0x280>)
 80022c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80022c6:	4a15      	ldr	r2, [pc, #84]	@ (800231c <HAL_RCC_OscConfig+0x280>)
 80022c8:	f043 0301 	orr.w	r3, r3, #1
 80022cc:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022ce:	f7fe ff0d 	bl	80010ec <HAL_GetTick>
 80022d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022d4:	e008      	b.n	80022e8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022d6:	f7fe ff09 	bl	80010ec <HAL_GetTick>
 80022da:	4602      	mov	r2, r0
 80022dc:	693b      	ldr	r3, [r7, #16]
 80022de:	1ad3      	subs	r3, r2, r3
 80022e0:	2b02      	cmp	r3, #2
 80022e2:	d901      	bls.n	80022e8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80022e4:	2303      	movs	r3, #3
 80022e6:	e180      	b.n	80025ea <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022e8:	4b0c      	ldr	r3, [pc, #48]	@ (800231c <HAL_RCC_OscConfig+0x280>)
 80022ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80022ec:	f003 0302 	and.w	r3, r3, #2
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d0f0      	beq.n	80022d6 <HAL_RCC_OscConfig+0x23a>
 80022f4:	e01a      	b.n	800232c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022f6:	4b09      	ldr	r3, [pc, #36]	@ (800231c <HAL_RCC_OscConfig+0x280>)
 80022f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80022fa:	4a08      	ldr	r2, [pc, #32]	@ (800231c <HAL_RCC_OscConfig+0x280>)
 80022fc:	f023 0301 	bic.w	r3, r3, #1
 8002300:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002302:	f7fe fef3 	bl	80010ec <HAL_GetTick>
 8002306:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002308:	e00a      	b.n	8002320 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800230a:	f7fe feef 	bl	80010ec <HAL_GetTick>
 800230e:	4602      	mov	r2, r0
 8002310:	693b      	ldr	r3, [r7, #16]
 8002312:	1ad3      	subs	r3, r2, r3
 8002314:	2b02      	cmp	r3, #2
 8002316:	d903      	bls.n	8002320 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002318:	2303      	movs	r3, #3
 800231a:	e166      	b.n	80025ea <HAL_RCC_OscConfig+0x54e>
 800231c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002320:	4b92      	ldr	r3, [pc, #584]	@ (800256c <HAL_RCC_OscConfig+0x4d0>)
 8002322:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002324:	f003 0302 	and.w	r3, r3, #2
 8002328:	2b00      	cmp	r3, #0
 800232a:	d1ee      	bne.n	800230a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f003 0304 	and.w	r3, r3, #4
 8002334:	2b00      	cmp	r3, #0
 8002336:	f000 80a4 	beq.w	8002482 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800233a:	4b8c      	ldr	r3, [pc, #560]	@ (800256c <HAL_RCC_OscConfig+0x4d0>)
 800233c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800233e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002342:	2b00      	cmp	r3, #0
 8002344:	d10d      	bne.n	8002362 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002346:	4b89      	ldr	r3, [pc, #548]	@ (800256c <HAL_RCC_OscConfig+0x4d0>)
 8002348:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800234a:	4a88      	ldr	r2, [pc, #544]	@ (800256c <HAL_RCC_OscConfig+0x4d0>)
 800234c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002350:	6413      	str	r3, [r2, #64]	@ 0x40
 8002352:	4b86      	ldr	r3, [pc, #536]	@ (800256c <HAL_RCC_OscConfig+0x4d0>)
 8002354:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002356:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800235a:	60bb      	str	r3, [r7, #8]
 800235c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800235e:	2301      	movs	r3, #1
 8002360:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002362:	4b83      	ldr	r3, [pc, #524]	@ (8002570 <HAL_RCC_OscConfig+0x4d4>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800236a:	2b00      	cmp	r3, #0
 800236c:	d118      	bne.n	80023a0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800236e:	4b80      	ldr	r3, [pc, #512]	@ (8002570 <HAL_RCC_OscConfig+0x4d4>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a7f      	ldr	r2, [pc, #508]	@ (8002570 <HAL_RCC_OscConfig+0x4d4>)
 8002374:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002378:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800237a:	f7fe feb7 	bl	80010ec <HAL_GetTick>
 800237e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002380:	e008      	b.n	8002394 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002382:	f7fe feb3 	bl	80010ec <HAL_GetTick>
 8002386:	4602      	mov	r2, r0
 8002388:	693b      	ldr	r3, [r7, #16]
 800238a:	1ad3      	subs	r3, r2, r3
 800238c:	2b64      	cmp	r3, #100	@ 0x64
 800238e:	d901      	bls.n	8002394 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002390:	2303      	movs	r3, #3
 8002392:	e12a      	b.n	80025ea <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002394:	4b76      	ldr	r3, [pc, #472]	@ (8002570 <HAL_RCC_OscConfig+0x4d4>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800239c:	2b00      	cmp	r3, #0
 800239e:	d0f0      	beq.n	8002382 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	689b      	ldr	r3, [r3, #8]
 80023a4:	2b01      	cmp	r3, #1
 80023a6:	d106      	bne.n	80023b6 <HAL_RCC_OscConfig+0x31a>
 80023a8:	4b70      	ldr	r3, [pc, #448]	@ (800256c <HAL_RCC_OscConfig+0x4d0>)
 80023aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023ac:	4a6f      	ldr	r2, [pc, #444]	@ (800256c <HAL_RCC_OscConfig+0x4d0>)
 80023ae:	f043 0301 	orr.w	r3, r3, #1
 80023b2:	6713      	str	r3, [r2, #112]	@ 0x70
 80023b4:	e02d      	b.n	8002412 <HAL_RCC_OscConfig+0x376>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	689b      	ldr	r3, [r3, #8]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d10c      	bne.n	80023d8 <HAL_RCC_OscConfig+0x33c>
 80023be:	4b6b      	ldr	r3, [pc, #428]	@ (800256c <HAL_RCC_OscConfig+0x4d0>)
 80023c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023c2:	4a6a      	ldr	r2, [pc, #424]	@ (800256c <HAL_RCC_OscConfig+0x4d0>)
 80023c4:	f023 0301 	bic.w	r3, r3, #1
 80023c8:	6713      	str	r3, [r2, #112]	@ 0x70
 80023ca:	4b68      	ldr	r3, [pc, #416]	@ (800256c <HAL_RCC_OscConfig+0x4d0>)
 80023cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023ce:	4a67      	ldr	r2, [pc, #412]	@ (800256c <HAL_RCC_OscConfig+0x4d0>)
 80023d0:	f023 0304 	bic.w	r3, r3, #4
 80023d4:	6713      	str	r3, [r2, #112]	@ 0x70
 80023d6:	e01c      	b.n	8002412 <HAL_RCC_OscConfig+0x376>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	2b05      	cmp	r3, #5
 80023de:	d10c      	bne.n	80023fa <HAL_RCC_OscConfig+0x35e>
 80023e0:	4b62      	ldr	r3, [pc, #392]	@ (800256c <HAL_RCC_OscConfig+0x4d0>)
 80023e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023e4:	4a61      	ldr	r2, [pc, #388]	@ (800256c <HAL_RCC_OscConfig+0x4d0>)
 80023e6:	f043 0304 	orr.w	r3, r3, #4
 80023ea:	6713      	str	r3, [r2, #112]	@ 0x70
 80023ec:	4b5f      	ldr	r3, [pc, #380]	@ (800256c <HAL_RCC_OscConfig+0x4d0>)
 80023ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023f0:	4a5e      	ldr	r2, [pc, #376]	@ (800256c <HAL_RCC_OscConfig+0x4d0>)
 80023f2:	f043 0301 	orr.w	r3, r3, #1
 80023f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80023f8:	e00b      	b.n	8002412 <HAL_RCC_OscConfig+0x376>
 80023fa:	4b5c      	ldr	r3, [pc, #368]	@ (800256c <HAL_RCC_OscConfig+0x4d0>)
 80023fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023fe:	4a5b      	ldr	r2, [pc, #364]	@ (800256c <HAL_RCC_OscConfig+0x4d0>)
 8002400:	f023 0301 	bic.w	r3, r3, #1
 8002404:	6713      	str	r3, [r2, #112]	@ 0x70
 8002406:	4b59      	ldr	r3, [pc, #356]	@ (800256c <HAL_RCC_OscConfig+0x4d0>)
 8002408:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800240a:	4a58      	ldr	r2, [pc, #352]	@ (800256c <HAL_RCC_OscConfig+0x4d0>)
 800240c:	f023 0304 	bic.w	r3, r3, #4
 8002410:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d015      	beq.n	8002446 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800241a:	f7fe fe67 	bl	80010ec <HAL_GetTick>
 800241e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002420:	e00a      	b.n	8002438 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002422:	f7fe fe63 	bl	80010ec <HAL_GetTick>
 8002426:	4602      	mov	r2, r0
 8002428:	693b      	ldr	r3, [r7, #16]
 800242a:	1ad3      	subs	r3, r2, r3
 800242c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002430:	4293      	cmp	r3, r2
 8002432:	d901      	bls.n	8002438 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002434:	2303      	movs	r3, #3
 8002436:	e0d8      	b.n	80025ea <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002438:	4b4c      	ldr	r3, [pc, #304]	@ (800256c <HAL_RCC_OscConfig+0x4d0>)
 800243a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800243c:	f003 0302 	and.w	r3, r3, #2
 8002440:	2b00      	cmp	r3, #0
 8002442:	d0ee      	beq.n	8002422 <HAL_RCC_OscConfig+0x386>
 8002444:	e014      	b.n	8002470 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002446:	f7fe fe51 	bl	80010ec <HAL_GetTick>
 800244a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800244c:	e00a      	b.n	8002464 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800244e:	f7fe fe4d 	bl	80010ec <HAL_GetTick>
 8002452:	4602      	mov	r2, r0
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	1ad3      	subs	r3, r2, r3
 8002458:	f241 3288 	movw	r2, #5000	@ 0x1388
 800245c:	4293      	cmp	r3, r2
 800245e:	d901      	bls.n	8002464 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002460:	2303      	movs	r3, #3
 8002462:	e0c2      	b.n	80025ea <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002464:	4b41      	ldr	r3, [pc, #260]	@ (800256c <HAL_RCC_OscConfig+0x4d0>)
 8002466:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002468:	f003 0302 	and.w	r3, r3, #2
 800246c:	2b00      	cmp	r3, #0
 800246e:	d1ee      	bne.n	800244e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002470:	7dfb      	ldrb	r3, [r7, #23]
 8002472:	2b01      	cmp	r3, #1
 8002474:	d105      	bne.n	8002482 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002476:	4b3d      	ldr	r3, [pc, #244]	@ (800256c <HAL_RCC_OscConfig+0x4d0>)
 8002478:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800247a:	4a3c      	ldr	r2, [pc, #240]	@ (800256c <HAL_RCC_OscConfig+0x4d0>)
 800247c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002480:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	699b      	ldr	r3, [r3, #24]
 8002486:	2b00      	cmp	r3, #0
 8002488:	f000 80ae 	beq.w	80025e8 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800248c:	4b37      	ldr	r3, [pc, #220]	@ (800256c <HAL_RCC_OscConfig+0x4d0>)
 800248e:	689b      	ldr	r3, [r3, #8]
 8002490:	f003 030c 	and.w	r3, r3, #12
 8002494:	2b08      	cmp	r3, #8
 8002496:	d06d      	beq.n	8002574 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	699b      	ldr	r3, [r3, #24]
 800249c:	2b02      	cmp	r3, #2
 800249e:	d14b      	bne.n	8002538 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024a0:	4b32      	ldr	r3, [pc, #200]	@ (800256c <HAL_RCC_OscConfig+0x4d0>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a31      	ldr	r2, [pc, #196]	@ (800256c <HAL_RCC_OscConfig+0x4d0>)
 80024a6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80024aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024ac:	f7fe fe1e 	bl	80010ec <HAL_GetTick>
 80024b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024b2:	e008      	b.n	80024c6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024b4:	f7fe fe1a 	bl	80010ec <HAL_GetTick>
 80024b8:	4602      	mov	r2, r0
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	1ad3      	subs	r3, r2, r3
 80024be:	2b02      	cmp	r3, #2
 80024c0:	d901      	bls.n	80024c6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80024c2:	2303      	movs	r3, #3
 80024c4:	e091      	b.n	80025ea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024c6:	4b29      	ldr	r3, [pc, #164]	@ (800256c <HAL_RCC_OscConfig+0x4d0>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d1f0      	bne.n	80024b4 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	69da      	ldr	r2, [r3, #28]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6a1b      	ldr	r3, [r3, #32]
 80024da:	431a      	orrs	r2, r3
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024e0:	019b      	lsls	r3, r3, #6
 80024e2:	431a      	orrs	r2, r3
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024e8:	085b      	lsrs	r3, r3, #1
 80024ea:	3b01      	subs	r3, #1
 80024ec:	041b      	lsls	r3, r3, #16
 80024ee:	431a      	orrs	r2, r3
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024f4:	061b      	lsls	r3, r3, #24
 80024f6:	431a      	orrs	r2, r3
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024fc:	071b      	lsls	r3, r3, #28
 80024fe:	491b      	ldr	r1, [pc, #108]	@ (800256c <HAL_RCC_OscConfig+0x4d0>)
 8002500:	4313      	orrs	r3, r2
 8002502:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002504:	4b19      	ldr	r3, [pc, #100]	@ (800256c <HAL_RCC_OscConfig+0x4d0>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a18      	ldr	r2, [pc, #96]	@ (800256c <HAL_RCC_OscConfig+0x4d0>)
 800250a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800250e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002510:	f7fe fdec 	bl	80010ec <HAL_GetTick>
 8002514:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002516:	e008      	b.n	800252a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002518:	f7fe fde8 	bl	80010ec <HAL_GetTick>
 800251c:	4602      	mov	r2, r0
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	1ad3      	subs	r3, r2, r3
 8002522:	2b02      	cmp	r3, #2
 8002524:	d901      	bls.n	800252a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002526:	2303      	movs	r3, #3
 8002528:	e05f      	b.n	80025ea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800252a:	4b10      	ldr	r3, [pc, #64]	@ (800256c <HAL_RCC_OscConfig+0x4d0>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002532:	2b00      	cmp	r3, #0
 8002534:	d0f0      	beq.n	8002518 <HAL_RCC_OscConfig+0x47c>
 8002536:	e057      	b.n	80025e8 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002538:	4b0c      	ldr	r3, [pc, #48]	@ (800256c <HAL_RCC_OscConfig+0x4d0>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a0b      	ldr	r2, [pc, #44]	@ (800256c <HAL_RCC_OscConfig+0x4d0>)
 800253e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002542:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002544:	f7fe fdd2 	bl	80010ec <HAL_GetTick>
 8002548:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800254a:	e008      	b.n	800255e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800254c:	f7fe fdce 	bl	80010ec <HAL_GetTick>
 8002550:	4602      	mov	r2, r0
 8002552:	693b      	ldr	r3, [r7, #16]
 8002554:	1ad3      	subs	r3, r2, r3
 8002556:	2b02      	cmp	r3, #2
 8002558:	d901      	bls.n	800255e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800255a:	2303      	movs	r3, #3
 800255c:	e045      	b.n	80025ea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800255e:	4b03      	ldr	r3, [pc, #12]	@ (800256c <HAL_RCC_OscConfig+0x4d0>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002566:	2b00      	cmp	r3, #0
 8002568:	d1f0      	bne.n	800254c <HAL_RCC_OscConfig+0x4b0>
 800256a:	e03d      	b.n	80025e8 <HAL_RCC_OscConfig+0x54c>
 800256c:	40023800 	.word	0x40023800
 8002570:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002574:	4b1f      	ldr	r3, [pc, #124]	@ (80025f4 <HAL_RCC_OscConfig+0x558>)
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	699b      	ldr	r3, [r3, #24]
 800257e:	2b01      	cmp	r3, #1
 8002580:	d030      	beq.n	80025e4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800258c:	429a      	cmp	r2, r3
 800258e:	d129      	bne.n	80025e4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800259a:	429a      	cmp	r2, r3
 800259c:	d122      	bne.n	80025e4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800259e:	68fa      	ldr	r2, [r7, #12]
 80025a0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80025a4:	4013      	ands	r3, r2
 80025a6:	687a      	ldr	r2, [r7, #4]
 80025a8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80025aa:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d119      	bne.n	80025e4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025ba:	085b      	lsrs	r3, r3, #1
 80025bc:	3b01      	subs	r3, #1
 80025be:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80025c0:	429a      	cmp	r2, r3
 80025c2:	d10f      	bne.n	80025e4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025ce:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80025d0:	429a      	cmp	r2, r3
 80025d2:	d107      	bne.n	80025e4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025de:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80025e0:	429a      	cmp	r2, r3
 80025e2:	d001      	beq.n	80025e8 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80025e4:	2301      	movs	r3, #1
 80025e6:	e000      	b.n	80025ea <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80025e8:	2300      	movs	r3, #0
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	3718      	adds	r7, #24
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	40023800 	.word	0x40023800

080025f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b084      	sub	sp, #16
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
 8002600:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002602:	2300      	movs	r3, #0
 8002604:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d101      	bne.n	8002610 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800260c:	2301      	movs	r3, #1
 800260e:	e0d0      	b.n	80027b2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002610:	4b6a      	ldr	r3, [pc, #424]	@ (80027bc <HAL_RCC_ClockConfig+0x1c4>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f003 030f 	and.w	r3, r3, #15
 8002618:	683a      	ldr	r2, [r7, #0]
 800261a:	429a      	cmp	r2, r3
 800261c:	d910      	bls.n	8002640 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800261e:	4b67      	ldr	r3, [pc, #412]	@ (80027bc <HAL_RCC_ClockConfig+0x1c4>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f023 020f 	bic.w	r2, r3, #15
 8002626:	4965      	ldr	r1, [pc, #404]	@ (80027bc <HAL_RCC_ClockConfig+0x1c4>)
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	4313      	orrs	r3, r2
 800262c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800262e:	4b63      	ldr	r3, [pc, #396]	@ (80027bc <HAL_RCC_ClockConfig+0x1c4>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f003 030f 	and.w	r3, r3, #15
 8002636:	683a      	ldr	r2, [r7, #0]
 8002638:	429a      	cmp	r2, r3
 800263a:	d001      	beq.n	8002640 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800263c:	2301      	movs	r3, #1
 800263e:	e0b8      	b.n	80027b2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f003 0302 	and.w	r3, r3, #2
 8002648:	2b00      	cmp	r3, #0
 800264a:	d020      	beq.n	800268e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f003 0304 	and.w	r3, r3, #4
 8002654:	2b00      	cmp	r3, #0
 8002656:	d005      	beq.n	8002664 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002658:	4b59      	ldr	r3, [pc, #356]	@ (80027c0 <HAL_RCC_ClockConfig+0x1c8>)
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	4a58      	ldr	r2, [pc, #352]	@ (80027c0 <HAL_RCC_ClockConfig+0x1c8>)
 800265e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002662:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f003 0308 	and.w	r3, r3, #8
 800266c:	2b00      	cmp	r3, #0
 800266e:	d005      	beq.n	800267c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002670:	4b53      	ldr	r3, [pc, #332]	@ (80027c0 <HAL_RCC_ClockConfig+0x1c8>)
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	4a52      	ldr	r2, [pc, #328]	@ (80027c0 <HAL_RCC_ClockConfig+0x1c8>)
 8002676:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800267a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800267c:	4b50      	ldr	r3, [pc, #320]	@ (80027c0 <HAL_RCC_ClockConfig+0x1c8>)
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	494d      	ldr	r1, [pc, #308]	@ (80027c0 <HAL_RCC_ClockConfig+0x1c8>)
 800268a:	4313      	orrs	r3, r2
 800268c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f003 0301 	and.w	r3, r3, #1
 8002696:	2b00      	cmp	r3, #0
 8002698:	d040      	beq.n	800271c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	2b01      	cmp	r3, #1
 80026a0:	d107      	bne.n	80026b2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026a2:	4b47      	ldr	r3, [pc, #284]	@ (80027c0 <HAL_RCC_ClockConfig+0x1c8>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d115      	bne.n	80026da <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	e07f      	b.n	80027b2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	2b02      	cmp	r3, #2
 80026b8:	d107      	bne.n	80026ca <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026ba:	4b41      	ldr	r3, [pc, #260]	@ (80027c0 <HAL_RCC_ClockConfig+0x1c8>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d109      	bne.n	80026da <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	e073      	b.n	80027b2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026ca:	4b3d      	ldr	r3, [pc, #244]	@ (80027c0 <HAL_RCC_ClockConfig+0x1c8>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f003 0302 	and.w	r3, r3, #2
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d101      	bne.n	80026da <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	e06b      	b.n	80027b2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026da:	4b39      	ldr	r3, [pc, #228]	@ (80027c0 <HAL_RCC_ClockConfig+0x1c8>)
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	f023 0203 	bic.w	r2, r3, #3
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	4936      	ldr	r1, [pc, #216]	@ (80027c0 <HAL_RCC_ClockConfig+0x1c8>)
 80026e8:	4313      	orrs	r3, r2
 80026ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026ec:	f7fe fcfe 	bl	80010ec <HAL_GetTick>
 80026f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026f2:	e00a      	b.n	800270a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026f4:	f7fe fcfa 	bl	80010ec <HAL_GetTick>
 80026f8:	4602      	mov	r2, r0
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	1ad3      	subs	r3, r2, r3
 80026fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002702:	4293      	cmp	r3, r2
 8002704:	d901      	bls.n	800270a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002706:	2303      	movs	r3, #3
 8002708:	e053      	b.n	80027b2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800270a:	4b2d      	ldr	r3, [pc, #180]	@ (80027c0 <HAL_RCC_ClockConfig+0x1c8>)
 800270c:	689b      	ldr	r3, [r3, #8]
 800270e:	f003 020c 	and.w	r2, r3, #12
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	009b      	lsls	r3, r3, #2
 8002718:	429a      	cmp	r2, r3
 800271a:	d1eb      	bne.n	80026f4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800271c:	4b27      	ldr	r3, [pc, #156]	@ (80027bc <HAL_RCC_ClockConfig+0x1c4>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f003 030f 	and.w	r3, r3, #15
 8002724:	683a      	ldr	r2, [r7, #0]
 8002726:	429a      	cmp	r2, r3
 8002728:	d210      	bcs.n	800274c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800272a:	4b24      	ldr	r3, [pc, #144]	@ (80027bc <HAL_RCC_ClockConfig+0x1c4>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f023 020f 	bic.w	r2, r3, #15
 8002732:	4922      	ldr	r1, [pc, #136]	@ (80027bc <HAL_RCC_ClockConfig+0x1c4>)
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	4313      	orrs	r3, r2
 8002738:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800273a:	4b20      	ldr	r3, [pc, #128]	@ (80027bc <HAL_RCC_ClockConfig+0x1c4>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 030f 	and.w	r3, r3, #15
 8002742:	683a      	ldr	r2, [r7, #0]
 8002744:	429a      	cmp	r2, r3
 8002746:	d001      	beq.n	800274c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002748:	2301      	movs	r3, #1
 800274a:	e032      	b.n	80027b2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f003 0304 	and.w	r3, r3, #4
 8002754:	2b00      	cmp	r3, #0
 8002756:	d008      	beq.n	800276a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002758:	4b19      	ldr	r3, [pc, #100]	@ (80027c0 <HAL_RCC_ClockConfig+0x1c8>)
 800275a:	689b      	ldr	r3, [r3, #8]
 800275c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	68db      	ldr	r3, [r3, #12]
 8002764:	4916      	ldr	r1, [pc, #88]	@ (80027c0 <HAL_RCC_ClockConfig+0x1c8>)
 8002766:	4313      	orrs	r3, r2
 8002768:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f003 0308 	and.w	r3, r3, #8
 8002772:	2b00      	cmp	r3, #0
 8002774:	d009      	beq.n	800278a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002776:	4b12      	ldr	r3, [pc, #72]	@ (80027c0 <HAL_RCC_ClockConfig+0x1c8>)
 8002778:	689b      	ldr	r3, [r3, #8]
 800277a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	691b      	ldr	r3, [r3, #16]
 8002782:	00db      	lsls	r3, r3, #3
 8002784:	490e      	ldr	r1, [pc, #56]	@ (80027c0 <HAL_RCC_ClockConfig+0x1c8>)
 8002786:	4313      	orrs	r3, r2
 8002788:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800278a:	f000 f821 	bl	80027d0 <HAL_RCC_GetSysClockFreq>
 800278e:	4602      	mov	r2, r0
 8002790:	4b0b      	ldr	r3, [pc, #44]	@ (80027c0 <HAL_RCC_ClockConfig+0x1c8>)
 8002792:	689b      	ldr	r3, [r3, #8]
 8002794:	091b      	lsrs	r3, r3, #4
 8002796:	f003 030f 	and.w	r3, r3, #15
 800279a:	490a      	ldr	r1, [pc, #40]	@ (80027c4 <HAL_RCC_ClockConfig+0x1cc>)
 800279c:	5ccb      	ldrb	r3, [r1, r3]
 800279e:	fa22 f303 	lsr.w	r3, r2, r3
 80027a2:	4a09      	ldr	r2, [pc, #36]	@ (80027c8 <HAL_RCC_ClockConfig+0x1d0>)
 80027a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80027a6:	4b09      	ldr	r3, [pc, #36]	@ (80027cc <HAL_RCC_ClockConfig+0x1d4>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4618      	mov	r0, r3
 80027ac:	f7fe fba4 	bl	8000ef8 <HAL_InitTick>

  return HAL_OK;
 80027b0:	2300      	movs	r3, #0
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	3710      	adds	r7, #16
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}
 80027ba:	bf00      	nop
 80027bc:	40023c00 	.word	0x40023c00
 80027c0:	40023800 	.word	0x40023800
 80027c4:	08008500 	.word	0x08008500
 80027c8:	20000000 	.word	0x20000000
 80027cc:	20000004 	.word	0x20000004

080027d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80027d4:	b094      	sub	sp, #80	@ 0x50
 80027d6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80027d8:	2300      	movs	r3, #0
 80027da:	647b      	str	r3, [r7, #68]	@ 0x44
 80027dc:	2300      	movs	r3, #0
 80027de:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80027e0:	2300      	movs	r3, #0
 80027e2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 80027e4:	2300      	movs	r3, #0
 80027e6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80027e8:	4b79      	ldr	r3, [pc, #484]	@ (80029d0 <HAL_RCC_GetSysClockFreq+0x200>)
 80027ea:	689b      	ldr	r3, [r3, #8]
 80027ec:	f003 030c 	and.w	r3, r3, #12
 80027f0:	2b08      	cmp	r3, #8
 80027f2:	d00d      	beq.n	8002810 <HAL_RCC_GetSysClockFreq+0x40>
 80027f4:	2b08      	cmp	r3, #8
 80027f6:	f200 80e1 	bhi.w	80029bc <HAL_RCC_GetSysClockFreq+0x1ec>
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d002      	beq.n	8002804 <HAL_RCC_GetSysClockFreq+0x34>
 80027fe:	2b04      	cmp	r3, #4
 8002800:	d003      	beq.n	800280a <HAL_RCC_GetSysClockFreq+0x3a>
 8002802:	e0db      	b.n	80029bc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002804:	4b73      	ldr	r3, [pc, #460]	@ (80029d4 <HAL_RCC_GetSysClockFreq+0x204>)
 8002806:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002808:	e0db      	b.n	80029c2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800280a:	4b73      	ldr	r3, [pc, #460]	@ (80029d8 <HAL_RCC_GetSysClockFreq+0x208>)
 800280c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800280e:	e0d8      	b.n	80029c2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002810:	4b6f      	ldr	r3, [pc, #444]	@ (80029d0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002818:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800281a:	4b6d      	ldr	r3, [pc, #436]	@ (80029d0 <HAL_RCC_GetSysClockFreq+0x200>)
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002822:	2b00      	cmp	r3, #0
 8002824:	d063      	beq.n	80028ee <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002826:	4b6a      	ldr	r3, [pc, #424]	@ (80029d0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	099b      	lsrs	r3, r3, #6
 800282c:	2200      	movs	r2, #0
 800282e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002830:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002832:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002834:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002838:	633b      	str	r3, [r7, #48]	@ 0x30
 800283a:	2300      	movs	r3, #0
 800283c:	637b      	str	r3, [r7, #52]	@ 0x34
 800283e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002842:	4622      	mov	r2, r4
 8002844:	462b      	mov	r3, r5
 8002846:	f04f 0000 	mov.w	r0, #0
 800284a:	f04f 0100 	mov.w	r1, #0
 800284e:	0159      	lsls	r1, r3, #5
 8002850:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002854:	0150      	lsls	r0, r2, #5
 8002856:	4602      	mov	r2, r0
 8002858:	460b      	mov	r3, r1
 800285a:	4621      	mov	r1, r4
 800285c:	1a51      	subs	r1, r2, r1
 800285e:	6139      	str	r1, [r7, #16]
 8002860:	4629      	mov	r1, r5
 8002862:	eb63 0301 	sbc.w	r3, r3, r1
 8002866:	617b      	str	r3, [r7, #20]
 8002868:	f04f 0200 	mov.w	r2, #0
 800286c:	f04f 0300 	mov.w	r3, #0
 8002870:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002874:	4659      	mov	r1, fp
 8002876:	018b      	lsls	r3, r1, #6
 8002878:	4651      	mov	r1, sl
 800287a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800287e:	4651      	mov	r1, sl
 8002880:	018a      	lsls	r2, r1, #6
 8002882:	4651      	mov	r1, sl
 8002884:	ebb2 0801 	subs.w	r8, r2, r1
 8002888:	4659      	mov	r1, fp
 800288a:	eb63 0901 	sbc.w	r9, r3, r1
 800288e:	f04f 0200 	mov.w	r2, #0
 8002892:	f04f 0300 	mov.w	r3, #0
 8002896:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800289a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800289e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80028a2:	4690      	mov	r8, r2
 80028a4:	4699      	mov	r9, r3
 80028a6:	4623      	mov	r3, r4
 80028a8:	eb18 0303 	adds.w	r3, r8, r3
 80028ac:	60bb      	str	r3, [r7, #8]
 80028ae:	462b      	mov	r3, r5
 80028b0:	eb49 0303 	adc.w	r3, r9, r3
 80028b4:	60fb      	str	r3, [r7, #12]
 80028b6:	f04f 0200 	mov.w	r2, #0
 80028ba:	f04f 0300 	mov.w	r3, #0
 80028be:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80028c2:	4629      	mov	r1, r5
 80028c4:	024b      	lsls	r3, r1, #9
 80028c6:	4621      	mov	r1, r4
 80028c8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80028cc:	4621      	mov	r1, r4
 80028ce:	024a      	lsls	r2, r1, #9
 80028d0:	4610      	mov	r0, r2
 80028d2:	4619      	mov	r1, r3
 80028d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80028d6:	2200      	movs	r2, #0
 80028d8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80028da:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80028dc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80028e0:	f7fd fcb6 	bl	8000250 <__aeabi_uldivmod>
 80028e4:	4602      	mov	r2, r0
 80028e6:	460b      	mov	r3, r1
 80028e8:	4613      	mov	r3, r2
 80028ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80028ec:	e058      	b.n	80029a0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028ee:	4b38      	ldr	r3, [pc, #224]	@ (80029d0 <HAL_RCC_GetSysClockFreq+0x200>)
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	099b      	lsrs	r3, r3, #6
 80028f4:	2200      	movs	r2, #0
 80028f6:	4618      	mov	r0, r3
 80028f8:	4611      	mov	r1, r2
 80028fa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80028fe:	623b      	str	r3, [r7, #32]
 8002900:	2300      	movs	r3, #0
 8002902:	627b      	str	r3, [r7, #36]	@ 0x24
 8002904:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002908:	4642      	mov	r2, r8
 800290a:	464b      	mov	r3, r9
 800290c:	f04f 0000 	mov.w	r0, #0
 8002910:	f04f 0100 	mov.w	r1, #0
 8002914:	0159      	lsls	r1, r3, #5
 8002916:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800291a:	0150      	lsls	r0, r2, #5
 800291c:	4602      	mov	r2, r0
 800291e:	460b      	mov	r3, r1
 8002920:	4641      	mov	r1, r8
 8002922:	ebb2 0a01 	subs.w	sl, r2, r1
 8002926:	4649      	mov	r1, r9
 8002928:	eb63 0b01 	sbc.w	fp, r3, r1
 800292c:	f04f 0200 	mov.w	r2, #0
 8002930:	f04f 0300 	mov.w	r3, #0
 8002934:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002938:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800293c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002940:	ebb2 040a 	subs.w	r4, r2, sl
 8002944:	eb63 050b 	sbc.w	r5, r3, fp
 8002948:	f04f 0200 	mov.w	r2, #0
 800294c:	f04f 0300 	mov.w	r3, #0
 8002950:	00eb      	lsls	r3, r5, #3
 8002952:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002956:	00e2      	lsls	r2, r4, #3
 8002958:	4614      	mov	r4, r2
 800295a:	461d      	mov	r5, r3
 800295c:	4643      	mov	r3, r8
 800295e:	18e3      	adds	r3, r4, r3
 8002960:	603b      	str	r3, [r7, #0]
 8002962:	464b      	mov	r3, r9
 8002964:	eb45 0303 	adc.w	r3, r5, r3
 8002968:	607b      	str	r3, [r7, #4]
 800296a:	f04f 0200 	mov.w	r2, #0
 800296e:	f04f 0300 	mov.w	r3, #0
 8002972:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002976:	4629      	mov	r1, r5
 8002978:	028b      	lsls	r3, r1, #10
 800297a:	4621      	mov	r1, r4
 800297c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002980:	4621      	mov	r1, r4
 8002982:	028a      	lsls	r2, r1, #10
 8002984:	4610      	mov	r0, r2
 8002986:	4619      	mov	r1, r3
 8002988:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800298a:	2200      	movs	r2, #0
 800298c:	61bb      	str	r3, [r7, #24]
 800298e:	61fa      	str	r2, [r7, #28]
 8002990:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002994:	f7fd fc5c 	bl	8000250 <__aeabi_uldivmod>
 8002998:	4602      	mov	r2, r0
 800299a:	460b      	mov	r3, r1
 800299c:	4613      	mov	r3, r2
 800299e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80029a0:	4b0b      	ldr	r3, [pc, #44]	@ (80029d0 <HAL_RCC_GetSysClockFreq+0x200>)
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	0c1b      	lsrs	r3, r3, #16
 80029a6:	f003 0303 	and.w	r3, r3, #3
 80029aa:	3301      	adds	r3, #1
 80029ac:	005b      	lsls	r3, r3, #1
 80029ae:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80029b0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80029b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80029b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80029b8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80029ba:	e002      	b.n	80029c2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80029bc:	4b05      	ldr	r3, [pc, #20]	@ (80029d4 <HAL_RCC_GetSysClockFreq+0x204>)
 80029be:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80029c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80029c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	3750      	adds	r7, #80	@ 0x50
 80029c8:	46bd      	mov	sp, r7
 80029ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80029ce:	bf00      	nop
 80029d0:	40023800 	.word	0x40023800
 80029d4:	00f42400 	.word	0x00f42400
 80029d8:	007a1200 	.word	0x007a1200

080029dc <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029dc:	b480      	push	{r7}
 80029de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029e0:	4b03      	ldr	r3, [pc, #12]	@ (80029f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80029e2:	681b      	ldr	r3, [r3, #0]
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	46bd      	mov	sp, r7
 80029e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ec:	4770      	bx	lr
 80029ee:	bf00      	nop
 80029f0:	20000000 	.word	0x20000000

080029f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80029f8:	f7ff fff0 	bl	80029dc <HAL_RCC_GetHCLKFreq>
 80029fc:	4602      	mov	r2, r0
 80029fe:	4b05      	ldr	r3, [pc, #20]	@ (8002a14 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a00:	689b      	ldr	r3, [r3, #8]
 8002a02:	0a9b      	lsrs	r3, r3, #10
 8002a04:	f003 0307 	and.w	r3, r3, #7
 8002a08:	4903      	ldr	r1, [pc, #12]	@ (8002a18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a0a:	5ccb      	ldrb	r3, [r1, r3]
 8002a0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	bd80      	pop	{r7, pc}
 8002a14:	40023800 	.word	0x40023800
 8002a18:	08008510 	.word	0x08008510

08002a1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002a20:	f7ff ffdc 	bl	80029dc <HAL_RCC_GetHCLKFreq>
 8002a24:	4602      	mov	r2, r0
 8002a26:	4b05      	ldr	r3, [pc, #20]	@ (8002a3c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a28:	689b      	ldr	r3, [r3, #8]
 8002a2a:	0b5b      	lsrs	r3, r3, #13
 8002a2c:	f003 0307 	and.w	r3, r3, #7
 8002a30:	4903      	ldr	r1, [pc, #12]	@ (8002a40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a32:	5ccb      	ldrb	r3, [r1, r3]
 8002a34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a38:	4618      	mov	r0, r3
 8002a3a:	bd80      	pop	{r7, pc}
 8002a3c:	40023800 	.word	0x40023800
 8002a40:	08008510 	.word	0x08008510

08002a44 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b083      	sub	sp, #12
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
 8002a4c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	220f      	movs	r2, #15
 8002a52:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002a54:	4b12      	ldr	r3, [pc, #72]	@ (8002aa0 <HAL_RCC_GetClockConfig+0x5c>)
 8002a56:	689b      	ldr	r3, [r3, #8]
 8002a58:	f003 0203 	and.w	r2, r3, #3
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002a60:	4b0f      	ldr	r3, [pc, #60]	@ (8002aa0 <HAL_RCC_GetClockConfig+0x5c>)
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002a6c:	4b0c      	ldr	r3, [pc, #48]	@ (8002aa0 <HAL_RCC_GetClockConfig+0x5c>)
 8002a6e:	689b      	ldr	r3, [r3, #8]
 8002a70:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002a78:	4b09      	ldr	r3, [pc, #36]	@ (8002aa0 <HAL_RCC_GetClockConfig+0x5c>)
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	08db      	lsrs	r3, r3, #3
 8002a7e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002a86:	4b07      	ldr	r3, [pc, #28]	@ (8002aa4 <HAL_RCC_GetClockConfig+0x60>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f003 020f 	and.w	r2, r3, #15
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	601a      	str	r2, [r3, #0]
}
 8002a92:	bf00      	nop
 8002a94:	370c      	adds	r7, #12
 8002a96:	46bd      	mov	sp, r7
 8002a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9c:	4770      	bx	lr
 8002a9e:	bf00      	nop
 8002aa0:	40023800 	.word	0x40023800
 8002aa4:	40023c00 	.word	0x40023c00

08002aa8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b088      	sub	sp, #32
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002abc:	2300      	movs	r3, #0
 8002abe:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f003 0301 	and.w	r3, r3, #1
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d012      	beq.n	8002af6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002ad0:	4b69      	ldr	r3, [pc, #420]	@ (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	4a68      	ldr	r2, [pc, #416]	@ (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ad6:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002ada:	6093      	str	r3, [r2, #8]
 8002adc:	4b66      	ldr	r3, [pc, #408]	@ (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ade:	689a      	ldr	r2, [r3, #8]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ae4:	4964      	ldr	r1, [pc, #400]	@ (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d101      	bne.n	8002af6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002af2:	2301      	movs	r3, #1
 8002af4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d017      	beq.n	8002b32 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002b02:	4b5d      	ldr	r3, [pc, #372]	@ (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b04:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002b08:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b10:	4959      	ldr	r1, [pc, #356]	@ (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b12:	4313      	orrs	r3, r2
 8002b14:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b1c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002b20:	d101      	bne.n	8002b26 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002b22:	2301      	movs	r3, #1
 8002b24:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d101      	bne.n	8002b32 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d017      	beq.n	8002b6e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002b3e:	4b4e      	ldr	r3, [pc, #312]	@ (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b40:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002b44:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b4c:	494a      	ldr	r1, [pc, #296]	@ (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b58:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002b5c:	d101      	bne.n	8002b62 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d101      	bne.n	8002b6e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d001      	beq.n	8002b7e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f003 0320 	and.w	r3, r3, #32
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	f000 808b 	beq.w	8002ca2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002b8c:	4b3a      	ldr	r3, [pc, #232]	@ (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b90:	4a39      	ldr	r2, [pc, #228]	@ (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b92:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b96:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b98:	4b37      	ldr	r3, [pc, #220]	@ (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b9c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ba0:	60bb      	str	r3, [r7, #8]
 8002ba2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002ba4:	4b35      	ldr	r3, [pc, #212]	@ (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a34      	ldr	r2, [pc, #208]	@ (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002baa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002bae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002bb0:	f7fe fa9c 	bl	80010ec <HAL_GetTick>
 8002bb4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002bb6:	e008      	b.n	8002bca <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bb8:	f7fe fa98 	bl	80010ec <HAL_GetTick>
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	697b      	ldr	r3, [r7, #20]
 8002bc0:	1ad3      	subs	r3, r2, r3
 8002bc2:	2b64      	cmp	r3, #100	@ 0x64
 8002bc4:	d901      	bls.n	8002bca <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002bc6:	2303      	movs	r3, #3
 8002bc8:	e38f      	b.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002bca:	4b2c      	ldr	r3, [pc, #176]	@ (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d0f0      	beq.n	8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002bd6:	4b28      	ldr	r3, [pc, #160]	@ (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bda:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002bde:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002be0:	693b      	ldr	r3, [r7, #16]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d035      	beq.n	8002c52 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002bee:	693a      	ldr	r2, [r7, #16]
 8002bf0:	429a      	cmp	r2, r3
 8002bf2:	d02e      	beq.n	8002c52 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002bf4:	4b20      	ldr	r3, [pc, #128]	@ (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bf6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bf8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002bfc:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002bfe:	4b1e      	ldr	r3, [pc, #120]	@ (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c02:	4a1d      	ldr	r2, [pc, #116]	@ (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c04:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c08:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002c0a:	4b1b      	ldr	r3, [pc, #108]	@ (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c0e:	4a1a      	ldr	r2, [pc, #104]	@ (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c10:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c14:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002c16:	4a18      	ldr	r2, [pc, #96]	@ (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c18:	693b      	ldr	r3, [r7, #16]
 8002c1a:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002c1c:	4b16      	ldr	r3, [pc, #88]	@ (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c20:	f003 0301 	and.w	r3, r3, #1
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	d114      	bne.n	8002c52 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c28:	f7fe fa60 	bl	80010ec <HAL_GetTick>
 8002c2c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c2e:	e00a      	b.n	8002c46 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c30:	f7fe fa5c 	bl	80010ec <HAL_GetTick>
 8002c34:	4602      	mov	r2, r0
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	1ad3      	subs	r3, r2, r3
 8002c3a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d901      	bls.n	8002c46 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002c42:	2303      	movs	r3, #3
 8002c44:	e351      	b.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c46:	4b0c      	ldr	r3, [pc, #48]	@ (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c4a:	f003 0302 	and.w	r3, r3, #2
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d0ee      	beq.n	8002c30 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c56:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002c5a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002c5e:	d111      	bne.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002c60:	4b05      	ldr	r3, [pc, #20]	@ (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c62:	689b      	ldr	r3, [r3, #8]
 8002c64:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002c6c:	4b04      	ldr	r3, [pc, #16]	@ (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002c6e:	400b      	ands	r3, r1
 8002c70:	4901      	ldr	r1, [pc, #4]	@ (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c72:	4313      	orrs	r3, r2
 8002c74:	608b      	str	r3, [r1, #8]
 8002c76:	e00b      	b.n	8002c90 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002c78:	40023800 	.word	0x40023800
 8002c7c:	40007000 	.word	0x40007000
 8002c80:	0ffffcff 	.word	0x0ffffcff
 8002c84:	4bac      	ldr	r3, [pc, #688]	@ (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c86:	689b      	ldr	r3, [r3, #8]
 8002c88:	4aab      	ldr	r2, [pc, #684]	@ (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c8a:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8002c8e:	6093      	str	r3, [r2, #8]
 8002c90:	4ba9      	ldr	r3, [pc, #676]	@ (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c92:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c9c:	49a6      	ldr	r1, [pc, #664]	@ (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f003 0310 	and.w	r3, r3, #16
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d010      	beq.n	8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002cae:	4ba2      	ldr	r3, [pc, #648]	@ (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002cb4:	4aa0      	ldr	r2, [pc, #640]	@ (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cb6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002cba:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002cbe:	4b9e      	ldr	r3, [pc, #632]	@ (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cc0:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cc8:	499b      	ldr	r1, [pc, #620]	@ (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d00a      	beq.n	8002cf2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002cdc:	4b96      	ldr	r3, [pc, #600]	@ (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cde:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ce2:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002cea:	4993      	ldr	r1, [pc, #588]	@ (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cec:	4313      	orrs	r3, r2
 8002cee:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d00a      	beq.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002cfe:	4b8e      	ldr	r3, [pc, #568]	@ (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d00:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d04:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002d0c:	498a      	ldr	r1, [pc, #552]	@ (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d00a      	beq.n	8002d36 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002d20:	4b85      	ldr	r3, [pc, #532]	@ (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d26:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002d2e:	4982      	ldr	r1, [pc, #520]	@ (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d30:	4313      	orrs	r3, r2
 8002d32:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d00a      	beq.n	8002d58 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002d42:	4b7d      	ldr	r3, [pc, #500]	@ (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d48:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d50:	4979      	ldr	r1, [pc, #484]	@ (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d52:	4313      	orrs	r3, r2
 8002d54:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d00a      	beq.n	8002d7a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002d64:	4b74      	ldr	r3, [pc, #464]	@ (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d6a:	f023 0203 	bic.w	r2, r3, #3
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d72:	4971      	ldr	r1, [pc, #452]	@ (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d74:	4313      	orrs	r3, r2
 8002d76:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d00a      	beq.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002d86:	4b6c      	ldr	r3, [pc, #432]	@ (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d8c:	f023 020c 	bic.w	r2, r3, #12
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d94:	4968      	ldr	r1, [pc, #416]	@ (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d96:	4313      	orrs	r3, r2
 8002d98:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d00a      	beq.n	8002dbe <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002da8:	4b63      	ldr	r3, [pc, #396]	@ (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002daa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002dae:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002db6:	4960      	ldr	r1, [pc, #384]	@ (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002db8:	4313      	orrs	r3, r2
 8002dba:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d00a      	beq.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002dca:	4b5b      	ldr	r3, [pc, #364]	@ (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002dd0:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002dd8:	4957      	ldr	r1, [pc, #348]	@ (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d00a      	beq.n	8002e02 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002dec:	4b52      	ldr	r3, [pc, #328]	@ (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002df2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002dfa:	494f      	ldr	r1, [pc, #316]	@ (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d00a      	beq.n	8002e24 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002e0e:	4b4a      	ldr	r3, [pc, #296]	@ (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e14:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e1c:	4946      	ldr	r1, [pc, #280]	@ (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d00a      	beq.n	8002e46 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002e30:	4b41      	ldr	r3, [pc, #260]	@ (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e36:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e3e:	493e      	ldr	r1, [pc, #248]	@ (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e40:	4313      	orrs	r3, r2
 8002e42:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d00a      	beq.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002e52:	4b39      	ldr	r3, [pc, #228]	@ (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e58:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e60:	4935      	ldr	r1, [pc, #212]	@ (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e62:	4313      	orrs	r3, r2
 8002e64:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d00a      	beq.n	8002e8a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002e74:	4b30      	ldr	r3, [pc, #192]	@ (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e7a:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002e82:	492d      	ldr	r1, [pc, #180]	@ (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e84:	4313      	orrs	r3, r2
 8002e86:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d011      	beq.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002e96:	4b28      	ldr	r3, [pc, #160]	@ (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e9c:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002ea4:	4924      	ldr	r1, [pc, #144]	@ (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002eb0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002eb4:	d101      	bne.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f003 0308 	and.w	r3, r3, #8
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d001      	beq.n	8002eca <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d00a      	beq.n	8002eec <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002ed6:	4b18      	ldr	r3, [pc, #96]	@ (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ed8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002edc:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ee4:	4914      	ldr	r1, [pc, #80]	@ (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d00b      	beq.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002ef8:	4b0f      	ldr	r3, [pc, #60]	@ (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002efa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002efe:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002f08:	490b      	ldr	r1, [pc, #44]	@ (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d00f      	beq.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002f1c:	4b06      	ldr	r3, [pc, #24]	@ (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f22:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002f2c:	4902      	ldr	r1, [pc, #8]	@ (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002f34:	e002      	b.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0x494>
 8002f36:	bf00      	nop
 8002f38:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d00b      	beq.n	8002f60 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002f48:	4b8a      	ldr	r3, [pc, #552]	@ (8003174 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002f4e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f58:	4986      	ldr	r1, [pc, #536]	@ (8003174 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d00b      	beq.n	8002f84 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002f6c:	4b81      	ldr	r3, [pc, #516]	@ (8003174 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002f72:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002f7c:	497d      	ldr	r1, [pc, #500]	@ (8003174 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002f84:	69fb      	ldr	r3, [r7, #28]
 8002f86:	2b01      	cmp	r3, #1
 8002f88:	d006      	beq.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	f000 80d6 	beq.w	8003144 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002f98:	4b76      	ldr	r3, [pc, #472]	@ (8003174 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a75      	ldr	r2, [pc, #468]	@ (8003174 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f9e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002fa2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002fa4:	f7fe f8a2 	bl	80010ec <HAL_GetTick>
 8002fa8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002faa:	e008      	b.n	8002fbe <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002fac:	f7fe f89e 	bl	80010ec <HAL_GetTick>
 8002fb0:	4602      	mov	r2, r0
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	1ad3      	subs	r3, r2, r3
 8002fb6:	2b64      	cmp	r3, #100	@ 0x64
 8002fb8:	d901      	bls.n	8002fbe <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002fba:	2303      	movs	r3, #3
 8002fbc:	e195      	b.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002fbe:	4b6d      	ldr	r3, [pc, #436]	@ (8003174 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d1f0      	bne.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f003 0301 	and.w	r3, r3, #1
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d021      	beq.n	800301a <HAL_RCCEx_PeriphCLKConfig+0x572>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d11d      	bne.n	800301a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002fde:	4b65      	ldr	r3, [pc, #404]	@ (8003174 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fe0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002fe4:	0c1b      	lsrs	r3, r3, #16
 8002fe6:	f003 0303 	and.w	r3, r3, #3
 8002fea:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002fec:	4b61      	ldr	r3, [pc, #388]	@ (8003174 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002ff2:	0e1b      	lsrs	r3, r3, #24
 8002ff4:	f003 030f 	and.w	r3, r3, #15
 8002ff8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	019a      	lsls	r2, r3, #6
 8003000:	693b      	ldr	r3, [r7, #16]
 8003002:	041b      	lsls	r3, r3, #16
 8003004:	431a      	orrs	r2, r3
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	061b      	lsls	r3, r3, #24
 800300a:	431a      	orrs	r2, r3
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	689b      	ldr	r3, [r3, #8]
 8003010:	071b      	lsls	r3, r3, #28
 8003012:	4958      	ldr	r1, [pc, #352]	@ (8003174 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003014:	4313      	orrs	r3, r2
 8003016:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003022:	2b00      	cmp	r3, #0
 8003024:	d004      	beq.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800302a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800302e:	d00a      	beq.n	8003046 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003038:	2b00      	cmp	r3, #0
 800303a:	d02e      	beq.n	800309a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003040:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003044:	d129      	bne.n	800309a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003046:	4b4b      	ldr	r3, [pc, #300]	@ (8003174 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003048:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800304c:	0c1b      	lsrs	r3, r3, #16
 800304e:	f003 0303 	and.w	r3, r3, #3
 8003052:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003054:	4b47      	ldr	r3, [pc, #284]	@ (8003174 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003056:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800305a:	0f1b      	lsrs	r3, r3, #28
 800305c:	f003 0307 	and.w	r3, r3, #7
 8003060:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	019a      	lsls	r2, r3, #6
 8003068:	693b      	ldr	r3, [r7, #16]
 800306a:	041b      	lsls	r3, r3, #16
 800306c:	431a      	orrs	r2, r3
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	68db      	ldr	r3, [r3, #12]
 8003072:	061b      	lsls	r3, r3, #24
 8003074:	431a      	orrs	r2, r3
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	071b      	lsls	r3, r3, #28
 800307a:	493e      	ldr	r1, [pc, #248]	@ (8003174 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800307c:	4313      	orrs	r3, r2
 800307e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003082:	4b3c      	ldr	r3, [pc, #240]	@ (8003174 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003084:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003088:	f023 021f 	bic.w	r2, r3, #31
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003090:	3b01      	subs	r3, #1
 8003092:	4938      	ldr	r1, [pc, #224]	@ (8003174 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003094:	4313      	orrs	r3, r2
 8003096:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d01d      	beq.n	80030e2 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80030a6:	4b33      	ldr	r3, [pc, #204]	@ (8003174 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80030ac:	0e1b      	lsrs	r3, r3, #24
 80030ae:	f003 030f 	and.w	r3, r3, #15
 80030b2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80030b4:	4b2f      	ldr	r3, [pc, #188]	@ (8003174 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80030ba:	0f1b      	lsrs	r3, r3, #28
 80030bc:	f003 0307 	and.w	r3, r3, #7
 80030c0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	019a      	lsls	r2, r3, #6
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	691b      	ldr	r3, [r3, #16]
 80030cc:	041b      	lsls	r3, r3, #16
 80030ce:	431a      	orrs	r2, r3
 80030d0:	693b      	ldr	r3, [r7, #16]
 80030d2:	061b      	lsls	r3, r3, #24
 80030d4:	431a      	orrs	r2, r3
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	071b      	lsls	r3, r3, #28
 80030da:	4926      	ldr	r1, [pc, #152]	@ (8003174 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030dc:	4313      	orrs	r3, r2
 80030de:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d011      	beq.n	8003112 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	019a      	lsls	r2, r3, #6
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	691b      	ldr	r3, [r3, #16]
 80030f8:	041b      	lsls	r3, r3, #16
 80030fa:	431a      	orrs	r2, r3
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	68db      	ldr	r3, [r3, #12]
 8003100:	061b      	lsls	r3, r3, #24
 8003102:	431a      	orrs	r2, r3
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	071b      	lsls	r3, r3, #28
 800310a:	491a      	ldr	r1, [pc, #104]	@ (8003174 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800310c:	4313      	orrs	r3, r2
 800310e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003112:	4b18      	ldr	r3, [pc, #96]	@ (8003174 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a17      	ldr	r2, [pc, #92]	@ (8003174 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003118:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800311c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800311e:	f7fd ffe5 	bl	80010ec <HAL_GetTick>
 8003122:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003124:	e008      	b.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003126:	f7fd ffe1 	bl	80010ec <HAL_GetTick>
 800312a:	4602      	mov	r2, r0
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	1ad3      	subs	r3, r2, r3
 8003130:	2b64      	cmp	r3, #100	@ 0x64
 8003132:	d901      	bls.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003134:	2303      	movs	r3, #3
 8003136:	e0d8      	b.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003138:	4b0e      	ldr	r3, [pc, #56]	@ (8003174 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003140:	2b00      	cmp	r3, #0
 8003142:	d0f0      	beq.n	8003126 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003144:	69bb      	ldr	r3, [r7, #24]
 8003146:	2b01      	cmp	r3, #1
 8003148:	f040 80ce 	bne.w	80032e8 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800314c:	4b09      	ldr	r3, [pc, #36]	@ (8003174 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a08      	ldr	r2, [pc, #32]	@ (8003174 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003152:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003156:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003158:	f7fd ffc8 	bl	80010ec <HAL_GetTick>
 800315c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800315e:	e00b      	b.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003160:	f7fd ffc4 	bl	80010ec <HAL_GetTick>
 8003164:	4602      	mov	r2, r0
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	1ad3      	subs	r3, r2, r3
 800316a:	2b64      	cmp	r3, #100	@ 0x64
 800316c:	d904      	bls.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800316e:	2303      	movs	r3, #3
 8003170:	e0bb      	b.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003172:	bf00      	nop
 8003174:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003178:	4b5e      	ldr	r3, [pc, #376]	@ (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003180:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003184:	d0ec      	beq.n	8003160 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800318e:	2b00      	cmp	r3, #0
 8003190:	d003      	beq.n	800319a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003196:	2b00      	cmp	r3, #0
 8003198:	d009      	beq.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d02e      	beq.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d12a      	bne.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80031ae:	4b51      	ldr	r3, [pc, #324]	@ (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80031b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031b4:	0c1b      	lsrs	r3, r3, #16
 80031b6:	f003 0303 	and.w	r3, r3, #3
 80031ba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80031bc:	4b4d      	ldr	r3, [pc, #308]	@ (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80031be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031c2:	0f1b      	lsrs	r3, r3, #28
 80031c4:	f003 0307 	and.w	r3, r3, #7
 80031c8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	695b      	ldr	r3, [r3, #20]
 80031ce:	019a      	lsls	r2, r3, #6
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	041b      	lsls	r3, r3, #16
 80031d4:	431a      	orrs	r2, r3
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	699b      	ldr	r3, [r3, #24]
 80031da:	061b      	lsls	r3, r3, #24
 80031dc:	431a      	orrs	r2, r3
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	071b      	lsls	r3, r3, #28
 80031e2:	4944      	ldr	r1, [pc, #272]	@ (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80031e4:	4313      	orrs	r3, r2
 80031e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80031ea:	4b42      	ldr	r3, [pc, #264]	@ (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80031ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80031f0:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031f8:	3b01      	subs	r3, #1
 80031fa:	021b      	lsls	r3, r3, #8
 80031fc:	493d      	ldr	r1, [pc, #244]	@ (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80031fe:	4313      	orrs	r3, r2
 8003200:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800320c:	2b00      	cmp	r3, #0
 800320e:	d022      	beq.n	8003256 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003214:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003218:	d11d      	bne.n	8003256 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800321a:	4b36      	ldr	r3, [pc, #216]	@ (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800321c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003220:	0e1b      	lsrs	r3, r3, #24
 8003222:	f003 030f 	and.w	r3, r3, #15
 8003226:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003228:	4b32      	ldr	r3, [pc, #200]	@ (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800322a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800322e:	0f1b      	lsrs	r3, r3, #28
 8003230:	f003 0307 	and.w	r3, r3, #7
 8003234:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	695b      	ldr	r3, [r3, #20]
 800323a:	019a      	lsls	r2, r3, #6
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6a1b      	ldr	r3, [r3, #32]
 8003240:	041b      	lsls	r3, r3, #16
 8003242:	431a      	orrs	r2, r3
 8003244:	693b      	ldr	r3, [r7, #16]
 8003246:	061b      	lsls	r3, r3, #24
 8003248:	431a      	orrs	r2, r3
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	071b      	lsls	r3, r3, #28
 800324e:	4929      	ldr	r1, [pc, #164]	@ (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003250:	4313      	orrs	r3, r2
 8003252:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f003 0308 	and.w	r3, r3, #8
 800325e:	2b00      	cmp	r3, #0
 8003260:	d028      	beq.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003262:	4b24      	ldr	r3, [pc, #144]	@ (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003264:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003268:	0e1b      	lsrs	r3, r3, #24
 800326a:	f003 030f 	and.w	r3, r3, #15
 800326e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003270:	4b20      	ldr	r3, [pc, #128]	@ (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003272:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003276:	0c1b      	lsrs	r3, r3, #16
 8003278:	f003 0303 	and.w	r3, r3, #3
 800327c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	695b      	ldr	r3, [r3, #20]
 8003282:	019a      	lsls	r2, r3, #6
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	041b      	lsls	r3, r3, #16
 8003288:	431a      	orrs	r2, r3
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	061b      	lsls	r3, r3, #24
 800328e:	431a      	orrs	r2, r3
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	69db      	ldr	r3, [r3, #28]
 8003294:	071b      	lsls	r3, r3, #28
 8003296:	4917      	ldr	r1, [pc, #92]	@ (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003298:	4313      	orrs	r3, r2
 800329a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800329e:	4b15      	ldr	r3, [pc, #84]	@ (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80032a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80032a4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032ac:	4911      	ldr	r1, [pc, #68]	@ (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80032ae:	4313      	orrs	r3, r2
 80032b0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80032b4:	4b0f      	ldr	r3, [pc, #60]	@ (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a0e      	ldr	r2, [pc, #56]	@ (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80032ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80032be:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032c0:	f7fd ff14 	bl	80010ec <HAL_GetTick>
 80032c4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80032c6:	e008      	b.n	80032da <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80032c8:	f7fd ff10 	bl	80010ec <HAL_GetTick>
 80032cc:	4602      	mov	r2, r0
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	1ad3      	subs	r3, r2, r3
 80032d2:	2b64      	cmp	r3, #100	@ 0x64
 80032d4:	d901      	bls.n	80032da <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80032d6:	2303      	movs	r3, #3
 80032d8:	e007      	b.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80032da:	4b06      	ldr	r3, [pc, #24]	@ (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80032e2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80032e6:	d1ef      	bne.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80032e8:	2300      	movs	r3, #0
}
 80032ea:	4618      	mov	r0, r3
 80032ec:	3720      	adds	r7, #32
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bd80      	pop	{r7, pc}
 80032f2:	bf00      	nop
 80032f4:	40023800 	.word	0x40023800

080032f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b082      	sub	sp, #8
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d101      	bne.n	800330a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003306:	2301      	movs	r3, #1
 8003308:	e049      	b.n	800339e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003310:	b2db      	uxtb	r3, r3
 8003312:	2b00      	cmp	r3, #0
 8003314:	d106      	bne.n	8003324 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2200      	movs	r2, #0
 800331a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800331e:	6878      	ldr	r0, [r7, #4]
 8003320:	f000 f841 	bl	80033a6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2202      	movs	r2, #2
 8003328:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681a      	ldr	r2, [r3, #0]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	3304      	adds	r3, #4
 8003334:	4619      	mov	r1, r3
 8003336:	4610      	mov	r0, r2
 8003338:	f000 f9e8 	bl	800370c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2201      	movs	r2, #1
 8003340:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2201      	movs	r2, #1
 8003348:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2201      	movs	r2, #1
 8003350:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2201      	movs	r2, #1
 8003358:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2201      	movs	r2, #1
 8003360:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2201      	movs	r2, #1
 8003368:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2201      	movs	r2, #1
 8003370:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2201      	movs	r2, #1
 8003378:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2201      	movs	r2, #1
 8003380:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2201      	movs	r2, #1
 8003388:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2201      	movs	r2, #1
 8003390:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2201      	movs	r2, #1
 8003398:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800339c:	2300      	movs	r3, #0
}
 800339e:	4618      	mov	r0, r3
 80033a0:	3708      	adds	r7, #8
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bd80      	pop	{r7, pc}

080033a6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80033a6:	b480      	push	{r7}
 80033a8:	b083      	sub	sp, #12
 80033aa:	af00      	add	r7, sp, #0
 80033ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80033ae:	bf00      	nop
 80033b0:	370c      	adds	r7, #12
 80033b2:	46bd      	mov	sp, r7
 80033b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b8:	4770      	bx	lr
	...

080033bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80033bc:	b480      	push	{r7}
 80033be:	b085      	sub	sp, #20
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80033ca:	b2db      	uxtb	r3, r3
 80033cc:	2b01      	cmp	r3, #1
 80033ce:	d001      	beq.n	80033d4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80033d0:	2301      	movs	r3, #1
 80033d2:	e054      	b.n	800347e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2202      	movs	r2, #2
 80033d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	68da      	ldr	r2, [r3, #12]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f042 0201 	orr.w	r2, r2, #1
 80033ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a26      	ldr	r2, [pc, #152]	@ (800348c <HAL_TIM_Base_Start_IT+0xd0>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d022      	beq.n	800343c <HAL_TIM_Base_Start_IT+0x80>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80033fe:	d01d      	beq.n	800343c <HAL_TIM_Base_Start_IT+0x80>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a22      	ldr	r2, [pc, #136]	@ (8003490 <HAL_TIM_Base_Start_IT+0xd4>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d018      	beq.n	800343c <HAL_TIM_Base_Start_IT+0x80>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4a21      	ldr	r2, [pc, #132]	@ (8003494 <HAL_TIM_Base_Start_IT+0xd8>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d013      	beq.n	800343c <HAL_TIM_Base_Start_IT+0x80>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a1f      	ldr	r2, [pc, #124]	@ (8003498 <HAL_TIM_Base_Start_IT+0xdc>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d00e      	beq.n	800343c <HAL_TIM_Base_Start_IT+0x80>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a1e      	ldr	r2, [pc, #120]	@ (800349c <HAL_TIM_Base_Start_IT+0xe0>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d009      	beq.n	800343c <HAL_TIM_Base_Start_IT+0x80>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a1c      	ldr	r2, [pc, #112]	@ (80034a0 <HAL_TIM_Base_Start_IT+0xe4>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d004      	beq.n	800343c <HAL_TIM_Base_Start_IT+0x80>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a1b      	ldr	r2, [pc, #108]	@ (80034a4 <HAL_TIM_Base_Start_IT+0xe8>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d115      	bne.n	8003468 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	689a      	ldr	r2, [r3, #8]
 8003442:	4b19      	ldr	r3, [pc, #100]	@ (80034a8 <HAL_TIM_Base_Start_IT+0xec>)
 8003444:	4013      	ands	r3, r2
 8003446:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	2b06      	cmp	r3, #6
 800344c:	d015      	beq.n	800347a <HAL_TIM_Base_Start_IT+0xbe>
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003454:	d011      	beq.n	800347a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	681a      	ldr	r2, [r3, #0]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f042 0201 	orr.w	r2, r2, #1
 8003464:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003466:	e008      	b.n	800347a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	681a      	ldr	r2, [r3, #0]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f042 0201 	orr.w	r2, r2, #1
 8003476:	601a      	str	r2, [r3, #0]
 8003478:	e000      	b.n	800347c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800347a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800347c:	2300      	movs	r3, #0
}
 800347e:	4618      	mov	r0, r3
 8003480:	3714      	adds	r7, #20
 8003482:	46bd      	mov	sp, r7
 8003484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003488:	4770      	bx	lr
 800348a:	bf00      	nop
 800348c:	40010000 	.word	0x40010000
 8003490:	40000400 	.word	0x40000400
 8003494:	40000800 	.word	0x40000800
 8003498:	40000c00 	.word	0x40000c00
 800349c:	40010400 	.word	0x40010400
 80034a0:	40014000 	.word	0x40014000
 80034a4:	40001800 	.word	0x40001800
 80034a8:	00010007 	.word	0x00010007

080034ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b084      	sub	sp, #16
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	68db      	ldr	r3, [r3, #12]
 80034ba:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	691b      	ldr	r3, [r3, #16]
 80034c2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	f003 0302 	and.w	r3, r3, #2
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d020      	beq.n	8003510 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	f003 0302 	and.w	r3, r3, #2
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d01b      	beq.n	8003510 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f06f 0202 	mvn.w	r2, #2
 80034e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2201      	movs	r2, #1
 80034e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	699b      	ldr	r3, [r3, #24]
 80034ee:	f003 0303 	and.w	r3, r3, #3
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d003      	beq.n	80034fe <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	f000 f8e9 	bl	80036ce <HAL_TIM_IC_CaptureCallback>
 80034fc:	e005      	b.n	800350a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80034fe:	6878      	ldr	r0, [r7, #4]
 8003500:	f000 f8db 	bl	80036ba <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003504:	6878      	ldr	r0, [r7, #4]
 8003506:	f000 f8ec 	bl	80036e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2200      	movs	r2, #0
 800350e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	f003 0304 	and.w	r3, r3, #4
 8003516:	2b00      	cmp	r3, #0
 8003518:	d020      	beq.n	800355c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	f003 0304 	and.w	r3, r3, #4
 8003520:	2b00      	cmp	r3, #0
 8003522:	d01b      	beq.n	800355c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f06f 0204 	mvn.w	r2, #4
 800352c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2202      	movs	r2, #2
 8003532:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	699b      	ldr	r3, [r3, #24]
 800353a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800353e:	2b00      	cmp	r3, #0
 8003540:	d003      	beq.n	800354a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003542:	6878      	ldr	r0, [r7, #4]
 8003544:	f000 f8c3 	bl	80036ce <HAL_TIM_IC_CaptureCallback>
 8003548:	e005      	b.n	8003556 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	f000 f8b5 	bl	80036ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003550:	6878      	ldr	r0, [r7, #4]
 8003552:	f000 f8c6 	bl	80036e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2200      	movs	r2, #0
 800355a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	f003 0308 	and.w	r3, r3, #8
 8003562:	2b00      	cmp	r3, #0
 8003564:	d020      	beq.n	80035a8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	f003 0308 	and.w	r3, r3, #8
 800356c:	2b00      	cmp	r3, #0
 800356e:	d01b      	beq.n	80035a8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f06f 0208 	mvn.w	r2, #8
 8003578:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2204      	movs	r2, #4
 800357e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	69db      	ldr	r3, [r3, #28]
 8003586:	f003 0303 	and.w	r3, r3, #3
 800358a:	2b00      	cmp	r3, #0
 800358c:	d003      	beq.n	8003596 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800358e:	6878      	ldr	r0, [r7, #4]
 8003590:	f000 f89d 	bl	80036ce <HAL_TIM_IC_CaptureCallback>
 8003594:	e005      	b.n	80035a2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003596:	6878      	ldr	r0, [r7, #4]
 8003598:	f000 f88f 	bl	80036ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800359c:	6878      	ldr	r0, [r7, #4]
 800359e:	f000 f8a0 	bl	80036e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2200      	movs	r2, #0
 80035a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80035a8:	68bb      	ldr	r3, [r7, #8]
 80035aa:	f003 0310 	and.w	r3, r3, #16
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d020      	beq.n	80035f4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	f003 0310 	and.w	r3, r3, #16
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d01b      	beq.n	80035f4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f06f 0210 	mvn.w	r2, #16
 80035c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2208      	movs	r2, #8
 80035ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	69db      	ldr	r3, [r3, #28]
 80035d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d003      	beq.n	80035e2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035da:	6878      	ldr	r0, [r7, #4]
 80035dc:	f000 f877 	bl	80036ce <HAL_TIM_IC_CaptureCallback>
 80035e0:	e005      	b.n	80035ee <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035e2:	6878      	ldr	r0, [r7, #4]
 80035e4:	f000 f869 	bl	80036ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035e8:	6878      	ldr	r0, [r7, #4]
 80035ea:	f000 f87a 	bl	80036e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2200      	movs	r2, #0
 80035f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	f003 0301 	and.w	r3, r3, #1
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d00c      	beq.n	8003618 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	f003 0301 	and.w	r3, r3, #1
 8003604:	2b00      	cmp	r3, #0
 8003606:	d007      	beq.n	8003618 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f06f 0201 	mvn.w	r2, #1
 8003610:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003612:	6878      	ldr	r0, [r7, #4]
 8003614:	f7fd fa9e 	bl	8000b54 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800361e:	2b00      	cmp	r3, #0
 8003620:	d104      	bne.n	800362c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003628:	2b00      	cmp	r3, #0
 800362a:	d00c      	beq.n	8003646 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003632:	2b00      	cmp	r3, #0
 8003634:	d007      	beq.n	8003646 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800363e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003640:	6878      	ldr	r0, [r7, #4]
 8003642:	f000 f913 	bl	800386c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003646:	68bb      	ldr	r3, [r7, #8]
 8003648:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800364c:	2b00      	cmp	r3, #0
 800364e:	d00c      	beq.n	800366a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003656:	2b00      	cmp	r3, #0
 8003658:	d007      	beq.n	800366a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003662:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003664:	6878      	ldr	r0, [r7, #4]
 8003666:	f000 f90b 	bl	8003880 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800366a:	68bb      	ldr	r3, [r7, #8]
 800366c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003670:	2b00      	cmp	r3, #0
 8003672:	d00c      	beq.n	800368e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800367a:	2b00      	cmp	r3, #0
 800367c:	d007      	beq.n	800368e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003686:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003688:	6878      	ldr	r0, [r7, #4]
 800368a:	f000 f834 	bl	80036f6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800368e:	68bb      	ldr	r3, [r7, #8]
 8003690:	f003 0320 	and.w	r3, r3, #32
 8003694:	2b00      	cmp	r3, #0
 8003696:	d00c      	beq.n	80036b2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	f003 0320 	and.w	r3, r3, #32
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d007      	beq.n	80036b2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f06f 0220 	mvn.w	r2, #32
 80036aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80036ac:	6878      	ldr	r0, [r7, #4]
 80036ae:	f000 f8d3 	bl	8003858 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80036b2:	bf00      	nop
 80036b4:	3710      	adds	r7, #16
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}

080036ba <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80036ba:	b480      	push	{r7}
 80036bc:	b083      	sub	sp, #12
 80036be:	af00      	add	r7, sp, #0
 80036c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80036c2:	bf00      	nop
 80036c4:	370c      	adds	r7, #12
 80036c6:	46bd      	mov	sp, r7
 80036c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036cc:	4770      	bx	lr

080036ce <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80036ce:	b480      	push	{r7}
 80036d0:	b083      	sub	sp, #12
 80036d2:	af00      	add	r7, sp, #0
 80036d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80036d6:	bf00      	nop
 80036d8:	370c      	adds	r7, #12
 80036da:	46bd      	mov	sp, r7
 80036dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e0:	4770      	bx	lr

080036e2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80036e2:	b480      	push	{r7}
 80036e4:	b083      	sub	sp, #12
 80036e6:	af00      	add	r7, sp, #0
 80036e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80036ea:	bf00      	nop
 80036ec:	370c      	adds	r7, #12
 80036ee:	46bd      	mov	sp, r7
 80036f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f4:	4770      	bx	lr

080036f6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80036f6:	b480      	push	{r7}
 80036f8:	b083      	sub	sp, #12
 80036fa:	af00      	add	r7, sp, #0
 80036fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80036fe:	bf00      	nop
 8003700:	370c      	adds	r7, #12
 8003702:	46bd      	mov	sp, r7
 8003704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003708:	4770      	bx	lr
	...

0800370c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800370c:	b480      	push	{r7}
 800370e:	b085      	sub	sp, #20
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
 8003714:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	4a43      	ldr	r2, [pc, #268]	@ (800382c <TIM_Base_SetConfig+0x120>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d013      	beq.n	800374c <TIM_Base_SetConfig+0x40>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800372a:	d00f      	beq.n	800374c <TIM_Base_SetConfig+0x40>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	4a40      	ldr	r2, [pc, #256]	@ (8003830 <TIM_Base_SetConfig+0x124>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d00b      	beq.n	800374c <TIM_Base_SetConfig+0x40>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	4a3f      	ldr	r2, [pc, #252]	@ (8003834 <TIM_Base_SetConfig+0x128>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d007      	beq.n	800374c <TIM_Base_SetConfig+0x40>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	4a3e      	ldr	r2, [pc, #248]	@ (8003838 <TIM_Base_SetConfig+0x12c>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d003      	beq.n	800374c <TIM_Base_SetConfig+0x40>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	4a3d      	ldr	r2, [pc, #244]	@ (800383c <TIM_Base_SetConfig+0x130>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d108      	bne.n	800375e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003752:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	68fa      	ldr	r2, [r7, #12]
 800375a:	4313      	orrs	r3, r2
 800375c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	4a32      	ldr	r2, [pc, #200]	@ (800382c <TIM_Base_SetConfig+0x120>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d02b      	beq.n	80037be <TIM_Base_SetConfig+0xb2>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800376c:	d027      	beq.n	80037be <TIM_Base_SetConfig+0xb2>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	4a2f      	ldr	r2, [pc, #188]	@ (8003830 <TIM_Base_SetConfig+0x124>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d023      	beq.n	80037be <TIM_Base_SetConfig+0xb2>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	4a2e      	ldr	r2, [pc, #184]	@ (8003834 <TIM_Base_SetConfig+0x128>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d01f      	beq.n	80037be <TIM_Base_SetConfig+0xb2>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	4a2d      	ldr	r2, [pc, #180]	@ (8003838 <TIM_Base_SetConfig+0x12c>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d01b      	beq.n	80037be <TIM_Base_SetConfig+0xb2>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	4a2c      	ldr	r2, [pc, #176]	@ (800383c <TIM_Base_SetConfig+0x130>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d017      	beq.n	80037be <TIM_Base_SetConfig+0xb2>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	4a2b      	ldr	r2, [pc, #172]	@ (8003840 <TIM_Base_SetConfig+0x134>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d013      	beq.n	80037be <TIM_Base_SetConfig+0xb2>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	4a2a      	ldr	r2, [pc, #168]	@ (8003844 <TIM_Base_SetConfig+0x138>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d00f      	beq.n	80037be <TIM_Base_SetConfig+0xb2>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	4a29      	ldr	r2, [pc, #164]	@ (8003848 <TIM_Base_SetConfig+0x13c>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d00b      	beq.n	80037be <TIM_Base_SetConfig+0xb2>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	4a28      	ldr	r2, [pc, #160]	@ (800384c <TIM_Base_SetConfig+0x140>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d007      	beq.n	80037be <TIM_Base_SetConfig+0xb2>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	4a27      	ldr	r2, [pc, #156]	@ (8003850 <TIM_Base_SetConfig+0x144>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d003      	beq.n	80037be <TIM_Base_SetConfig+0xb2>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	4a26      	ldr	r2, [pc, #152]	@ (8003854 <TIM_Base_SetConfig+0x148>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d108      	bne.n	80037d0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80037c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	68db      	ldr	r3, [r3, #12]
 80037ca:	68fa      	ldr	r2, [r7, #12]
 80037cc:	4313      	orrs	r3, r2
 80037ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	695b      	ldr	r3, [r3, #20]
 80037da:	4313      	orrs	r3, r2
 80037dc:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	689a      	ldr	r2, [r3, #8]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	681a      	ldr	r2, [r3, #0]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	4a0e      	ldr	r2, [pc, #56]	@ (800382c <TIM_Base_SetConfig+0x120>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d003      	beq.n	80037fe <TIM_Base_SetConfig+0xf2>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	4a10      	ldr	r2, [pc, #64]	@ (800383c <TIM_Base_SetConfig+0x130>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d103      	bne.n	8003806 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	691a      	ldr	r2, [r3, #16]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f043 0204 	orr.w	r2, r3, #4
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2201      	movs	r2, #1
 8003816:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	68fa      	ldr	r2, [r7, #12]
 800381c:	601a      	str	r2, [r3, #0]
}
 800381e:	bf00      	nop
 8003820:	3714      	adds	r7, #20
 8003822:	46bd      	mov	sp, r7
 8003824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003828:	4770      	bx	lr
 800382a:	bf00      	nop
 800382c:	40010000 	.word	0x40010000
 8003830:	40000400 	.word	0x40000400
 8003834:	40000800 	.word	0x40000800
 8003838:	40000c00 	.word	0x40000c00
 800383c:	40010400 	.word	0x40010400
 8003840:	40014000 	.word	0x40014000
 8003844:	40014400 	.word	0x40014400
 8003848:	40014800 	.word	0x40014800
 800384c:	40001800 	.word	0x40001800
 8003850:	40001c00 	.word	0x40001c00
 8003854:	40002000 	.word	0x40002000

08003858 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003858:	b480      	push	{r7}
 800385a:	b083      	sub	sp, #12
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003860:	bf00      	nop
 8003862:	370c      	adds	r7, #12
 8003864:	46bd      	mov	sp, r7
 8003866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386a:	4770      	bx	lr

0800386c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800386c:	b480      	push	{r7}
 800386e:	b083      	sub	sp, #12
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003874:	bf00      	nop
 8003876:	370c      	adds	r7, #12
 8003878:	46bd      	mov	sp, r7
 800387a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387e:	4770      	bx	lr

08003880 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003880:	b480      	push	{r7}
 8003882:	b083      	sub	sp, #12
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003888:	bf00      	nop
 800388a:	370c      	adds	r7, #12
 800388c:	46bd      	mov	sp, r7
 800388e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003892:	4770      	bx	lr

08003894 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b082      	sub	sp, #8
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d101      	bne.n	80038a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
 80038a4:	e040      	b.n	8003928 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d106      	bne.n	80038bc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2200      	movs	r2, #0
 80038b2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80038b6:	6878      	ldr	r0, [r7, #4]
 80038b8:	f7fd fa44 	bl	8000d44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2224      	movs	r2, #36	@ 0x24
 80038c0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	681a      	ldr	r2, [r3, #0]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f022 0201 	bic.w	r2, r2, #1
 80038d0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d002      	beq.n	80038e0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80038da:	6878      	ldr	r0, [r7, #4]
 80038dc:	f000 fb16 	bl	8003f0c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80038e0:	6878      	ldr	r0, [r7, #4]
 80038e2:	f000 f8af 	bl	8003a44 <UART_SetConfig>
 80038e6:	4603      	mov	r3, r0
 80038e8:	2b01      	cmp	r3, #1
 80038ea:	d101      	bne.n	80038f0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80038ec:	2301      	movs	r3, #1
 80038ee:	e01b      	b.n	8003928 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	685a      	ldr	r2, [r3, #4]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80038fe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	689a      	ldr	r2, [r3, #8]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800390e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	681a      	ldr	r2, [r3, #0]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f042 0201 	orr.w	r2, r2, #1
 800391e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003920:	6878      	ldr	r0, [r7, #4]
 8003922:	f000 fb95 	bl	8004050 <UART_CheckIdleState>
 8003926:	4603      	mov	r3, r0
}
 8003928:	4618      	mov	r0, r3
 800392a:	3708      	adds	r7, #8
 800392c:	46bd      	mov	sp, r7
 800392e:	bd80      	pop	{r7, pc}

08003930 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b08a      	sub	sp, #40	@ 0x28
 8003934:	af02      	add	r7, sp, #8
 8003936:	60f8      	str	r0, [r7, #12]
 8003938:	60b9      	str	r1, [r7, #8]
 800393a:	603b      	str	r3, [r7, #0]
 800393c:	4613      	mov	r3, r2
 800393e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003944:	2b20      	cmp	r3, #32
 8003946:	d177      	bne.n	8003a38 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8003948:	68bb      	ldr	r3, [r7, #8]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d002      	beq.n	8003954 <HAL_UART_Transmit+0x24>
 800394e:	88fb      	ldrh	r3, [r7, #6]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d101      	bne.n	8003958 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003954:	2301      	movs	r3, #1
 8003956:	e070      	b.n	8003a3a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	2200      	movs	r2, #0
 800395c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	2221      	movs	r2, #33	@ 0x21
 8003964:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003966:	f7fd fbc1 	bl	80010ec <HAL_GetTick>
 800396a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	88fa      	ldrh	r2, [r7, #6]
 8003970:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	88fa      	ldrh	r2, [r7, #6]
 8003978:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	689b      	ldr	r3, [r3, #8]
 8003980:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003984:	d108      	bne.n	8003998 <HAL_UART_Transmit+0x68>
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	691b      	ldr	r3, [r3, #16]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d104      	bne.n	8003998 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800398e:	2300      	movs	r3, #0
 8003990:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003992:	68bb      	ldr	r3, [r7, #8]
 8003994:	61bb      	str	r3, [r7, #24]
 8003996:	e003      	b.n	80039a0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800399c:	2300      	movs	r3, #0
 800399e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80039a0:	e02f      	b.n	8003a02 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	9300      	str	r3, [sp, #0]
 80039a6:	697b      	ldr	r3, [r7, #20]
 80039a8:	2200      	movs	r2, #0
 80039aa:	2180      	movs	r1, #128	@ 0x80
 80039ac:	68f8      	ldr	r0, [r7, #12]
 80039ae:	f000 fbf7 	bl	80041a0 <UART_WaitOnFlagUntilTimeout>
 80039b2:	4603      	mov	r3, r0
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d004      	beq.n	80039c2 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	2220      	movs	r2, #32
 80039bc:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80039be:	2303      	movs	r3, #3
 80039c0:	e03b      	b.n	8003a3a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80039c2:	69fb      	ldr	r3, [r7, #28]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d10b      	bne.n	80039e0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80039c8:	69bb      	ldr	r3, [r7, #24]
 80039ca:	881b      	ldrh	r3, [r3, #0]
 80039cc:	461a      	mov	r2, r3
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80039d6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80039d8:	69bb      	ldr	r3, [r7, #24]
 80039da:	3302      	adds	r3, #2
 80039dc:	61bb      	str	r3, [r7, #24]
 80039de:	e007      	b.n	80039f0 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80039e0:	69fb      	ldr	r3, [r7, #28]
 80039e2:	781a      	ldrb	r2, [r3, #0]
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80039ea:	69fb      	ldr	r3, [r7, #28]
 80039ec:	3301      	adds	r3, #1
 80039ee:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80039f6:	b29b      	uxth	r3, r3
 80039f8:	3b01      	subs	r3, #1
 80039fa:	b29a      	uxth	r2, r3
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003a08:	b29b      	uxth	r3, r3
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d1c9      	bne.n	80039a2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	9300      	str	r3, [sp, #0]
 8003a12:	697b      	ldr	r3, [r7, #20]
 8003a14:	2200      	movs	r2, #0
 8003a16:	2140      	movs	r1, #64	@ 0x40
 8003a18:	68f8      	ldr	r0, [r7, #12]
 8003a1a:	f000 fbc1 	bl	80041a0 <UART_WaitOnFlagUntilTimeout>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d004      	beq.n	8003a2e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	2220      	movs	r2, #32
 8003a28:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8003a2a:	2303      	movs	r3, #3
 8003a2c:	e005      	b.n	8003a3a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	2220      	movs	r2, #32
 8003a32:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003a34:	2300      	movs	r3, #0
 8003a36:	e000      	b.n	8003a3a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003a38:	2302      	movs	r3, #2
  }
}
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	3720      	adds	r7, #32
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}
	...

08003a44 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b088      	sub	sp, #32
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	689a      	ldr	r2, [r3, #8]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	691b      	ldr	r3, [r3, #16]
 8003a58:	431a      	orrs	r2, r3
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	695b      	ldr	r3, [r3, #20]
 8003a5e:	431a      	orrs	r2, r3
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	69db      	ldr	r3, [r3, #28]
 8003a64:	4313      	orrs	r3, r2
 8003a66:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	681a      	ldr	r2, [r3, #0]
 8003a6e:	4ba6      	ldr	r3, [pc, #664]	@ (8003d08 <UART_SetConfig+0x2c4>)
 8003a70:	4013      	ands	r3, r2
 8003a72:	687a      	ldr	r2, [r7, #4]
 8003a74:	6812      	ldr	r2, [r2, #0]
 8003a76:	6979      	ldr	r1, [r7, #20]
 8003a78:	430b      	orrs	r3, r1
 8003a7a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	68da      	ldr	r2, [r3, #12]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	430a      	orrs	r2, r1
 8003a90:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	699b      	ldr	r3, [r3, #24]
 8003a96:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6a1b      	ldr	r3, [r3, #32]
 8003a9c:	697a      	ldr	r2, [r7, #20]
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	689b      	ldr	r3, [r3, #8]
 8003aa8:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	697a      	ldr	r2, [r7, #20]
 8003ab2:	430a      	orrs	r2, r1
 8003ab4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4a94      	ldr	r2, [pc, #592]	@ (8003d0c <UART_SetConfig+0x2c8>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d120      	bne.n	8003b02 <UART_SetConfig+0xbe>
 8003ac0:	4b93      	ldr	r3, [pc, #588]	@ (8003d10 <UART_SetConfig+0x2cc>)
 8003ac2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ac6:	f003 0303 	and.w	r3, r3, #3
 8003aca:	2b03      	cmp	r3, #3
 8003acc:	d816      	bhi.n	8003afc <UART_SetConfig+0xb8>
 8003ace:	a201      	add	r2, pc, #4	@ (adr r2, 8003ad4 <UART_SetConfig+0x90>)
 8003ad0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ad4:	08003ae5 	.word	0x08003ae5
 8003ad8:	08003af1 	.word	0x08003af1
 8003adc:	08003aeb 	.word	0x08003aeb
 8003ae0:	08003af7 	.word	0x08003af7
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	77fb      	strb	r3, [r7, #31]
 8003ae8:	e150      	b.n	8003d8c <UART_SetConfig+0x348>
 8003aea:	2302      	movs	r3, #2
 8003aec:	77fb      	strb	r3, [r7, #31]
 8003aee:	e14d      	b.n	8003d8c <UART_SetConfig+0x348>
 8003af0:	2304      	movs	r3, #4
 8003af2:	77fb      	strb	r3, [r7, #31]
 8003af4:	e14a      	b.n	8003d8c <UART_SetConfig+0x348>
 8003af6:	2308      	movs	r3, #8
 8003af8:	77fb      	strb	r3, [r7, #31]
 8003afa:	e147      	b.n	8003d8c <UART_SetConfig+0x348>
 8003afc:	2310      	movs	r3, #16
 8003afe:	77fb      	strb	r3, [r7, #31]
 8003b00:	e144      	b.n	8003d8c <UART_SetConfig+0x348>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a83      	ldr	r2, [pc, #524]	@ (8003d14 <UART_SetConfig+0x2d0>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d132      	bne.n	8003b72 <UART_SetConfig+0x12e>
 8003b0c:	4b80      	ldr	r3, [pc, #512]	@ (8003d10 <UART_SetConfig+0x2cc>)
 8003b0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b12:	f003 030c 	and.w	r3, r3, #12
 8003b16:	2b0c      	cmp	r3, #12
 8003b18:	d828      	bhi.n	8003b6c <UART_SetConfig+0x128>
 8003b1a:	a201      	add	r2, pc, #4	@ (adr r2, 8003b20 <UART_SetConfig+0xdc>)
 8003b1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b20:	08003b55 	.word	0x08003b55
 8003b24:	08003b6d 	.word	0x08003b6d
 8003b28:	08003b6d 	.word	0x08003b6d
 8003b2c:	08003b6d 	.word	0x08003b6d
 8003b30:	08003b61 	.word	0x08003b61
 8003b34:	08003b6d 	.word	0x08003b6d
 8003b38:	08003b6d 	.word	0x08003b6d
 8003b3c:	08003b6d 	.word	0x08003b6d
 8003b40:	08003b5b 	.word	0x08003b5b
 8003b44:	08003b6d 	.word	0x08003b6d
 8003b48:	08003b6d 	.word	0x08003b6d
 8003b4c:	08003b6d 	.word	0x08003b6d
 8003b50:	08003b67 	.word	0x08003b67
 8003b54:	2300      	movs	r3, #0
 8003b56:	77fb      	strb	r3, [r7, #31]
 8003b58:	e118      	b.n	8003d8c <UART_SetConfig+0x348>
 8003b5a:	2302      	movs	r3, #2
 8003b5c:	77fb      	strb	r3, [r7, #31]
 8003b5e:	e115      	b.n	8003d8c <UART_SetConfig+0x348>
 8003b60:	2304      	movs	r3, #4
 8003b62:	77fb      	strb	r3, [r7, #31]
 8003b64:	e112      	b.n	8003d8c <UART_SetConfig+0x348>
 8003b66:	2308      	movs	r3, #8
 8003b68:	77fb      	strb	r3, [r7, #31]
 8003b6a:	e10f      	b.n	8003d8c <UART_SetConfig+0x348>
 8003b6c:	2310      	movs	r3, #16
 8003b6e:	77fb      	strb	r3, [r7, #31]
 8003b70:	e10c      	b.n	8003d8c <UART_SetConfig+0x348>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4a68      	ldr	r2, [pc, #416]	@ (8003d18 <UART_SetConfig+0x2d4>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d120      	bne.n	8003bbe <UART_SetConfig+0x17a>
 8003b7c:	4b64      	ldr	r3, [pc, #400]	@ (8003d10 <UART_SetConfig+0x2cc>)
 8003b7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b82:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003b86:	2b30      	cmp	r3, #48	@ 0x30
 8003b88:	d013      	beq.n	8003bb2 <UART_SetConfig+0x16e>
 8003b8a:	2b30      	cmp	r3, #48	@ 0x30
 8003b8c:	d814      	bhi.n	8003bb8 <UART_SetConfig+0x174>
 8003b8e:	2b20      	cmp	r3, #32
 8003b90:	d009      	beq.n	8003ba6 <UART_SetConfig+0x162>
 8003b92:	2b20      	cmp	r3, #32
 8003b94:	d810      	bhi.n	8003bb8 <UART_SetConfig+0x174>
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d002      	beq.n	8003ba0 <UART_SetConfig+0x15c>
 8003b9a:	2b10      	cmp	r3, #16
 8003b9c:	d006      	beq.n	8003bac <UART_SetConfig+0x168>
 8003b9e:	e00b      	b.n	8003bb8 <UART_SetConfig+0x174>
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	77fb      	strb	r3, [r7, #31]
 8003ba4:	e0f2      	b.n	8003d8c <UART_SetConfig+0x348>
 8003ba6:	2302      	movs	r3, #2
 8003ba8:	77fb      	strb	r3, [r7, #31]
 8003baa:	e0ef      	b.n	8003d8c <UART_SetConfig+0x348>
 8003bac:	2304      	movs	r3, #4
 8003bae:	77fb      	strb	r3, [r7, #31]
 8003bb0:	e0ec      	b.n	8003d8c <UART_SetConfig+0x348>
 8003bb2:	2308      	movs	r3, #8
 8003bb4:	77fb      	strb	r3, [r7, #31]
 8003bb6:	e0e9      	b.n	8003d8c <UART_SetConfig+0x348>
 8003bb8:	2310      	movs	r3, #16
 8003bba:	77fb      	strb	r3, [r7, #31]
 8003bbc:	e0e6      	b.n	8003d8c <UART_SetConfig+0x348>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a56      	ldr	r2, [pc, #344]	@ (8003d1c <UART_SetConfig+0x2d8>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d120      	bne.n	8003c0a <UART_SetConfig+0x1c6>
 8003bc8:	4b51      	ldr	r3, [pc, #324]	@ (8003d10 <UART_SetConfig+0x2cc>)
 8003bca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bce:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003bd2:	2bc0      	cmp	r3, #192	@ 0xc0
 8003bd4:	d013      	beq.n	8003bfe <UART_SetConfig+0x1ba>
 8003bd6:	2bc0      	cmp	r3, #192	@ 0xc0
 8003bd8:	d814      	bhi.n	8003c04 <UART_SetConfig+0x1c0>
 8003bda:	2b80      	cmp	r3, #128	@ 0x80
 8003bdc:	d009      	beq.n	8003bf2 <UART_SetConfig+0x1ae>
 8003bde:	2b80      	cmp	r3, #128	@ 0x80
 8003be0:	d810      	bhi.n	8003c04 <UART_SetConfig+0x1c0>
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d002      	beq.n	8003bec <UART_SetConfig+0x1a8>
 8003be6:	2b40      	cmp	r3, #64	@ 0x40
 8003be8:	d006      	beq.n	8003bf8 <UART_SetConfig+0x1b4>
 8003bea:	e00b      	b.n	8003c04 <UART_SetConfig+0x1c0>
 8003bec:	2300      	movs	r3, #0
 8003bee:	77fb      	strb	r3, [r7, #31]
 8003bf0:	e0cc      	b.n	8003d8c <UART_SetConfig+0x348>
 8003bf2:	2302      	movs	r3, #2
 8003bf4:	77fb      	strb	r3, [r7, #31]
 8003bf6:	e0c9      	b.n	8003d8c <UART_SetConfig+0x348>
 8003bf8:	2304      	movs	r3, #4
 8003bfa:	77fb      	strb	r3, [r7, #31]
 8003bfc:	e0c6      	b.n	8003d8c <UART_SetConfig+0x348>
 8003bfe:	2308      	movs	r3, #8
 8003c00:	77fb      	strb	r3, [r7, #31]
 8003c02:	e0c3      	b.n	8003d8c <UART_SetConfig+0x348>
 8003c04:	2310      	movs	r3, #16
 8003c06:	77fb      	strb	r3, [r7, #31]
 8003c08:	e0c0      	b.n	8003d8c <UART_SetConfig+0x348>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4a44      	ldr	r2, [pc, #272]	@ (8003d20 <UART_SetConfig+0x2dc>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d125      	bne.n	8003c60 <UART_SetConfig+0x21c>
 8003c14:	4b3e      	ldr	r3, [pc, #248]	@ (8003d10 <UART_SetConfig+0x2cc>)
 8003c16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c1a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c1e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003c22:	d017      	beq.n	8003c54 <UART_SetConfig+0x210>
 8003c24:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003c28:	d817      	bhi.n	8003c5a <UART_SetConfig+0x216>
 8003c2a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003c2e:	d00b      	beq.n	8003c48 <UART_SetConfig+0x204>
 8003c30:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003c34:	d811      	bhi.n	8003c5a <UART_SetConfig+0x216>
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d003      	beq.n	8003c42 <UART_SetConfig+0x1fe>
 8003c3a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003c3e:	d006      	beq.n	8003c4e <UART_SetConfig+0x20a>
 8003c40:	e00b      	b.n	8003c5a <UART_SetConfig+0x216>
 8003c42:	2300      	movs	r3, #0
 8003c44:	77fb      	strb	r3, [r7, #31]
 8003c46:	e0a1      	b.n	8003d8c <UART_SetConfig+0x348>
 8003c48:	2302      	movs	r3, #2
 8003c4a:	77fb      	strb	r3, [r7, #31]
 8003c4c:	e09e      	b.n	8003d8c <UART_SetConfig+0x348>
 8003c4e:	2304      	movs	r3, #4
 8003c50:	77fb      	strb	r3, [r7, #31]
 8003c52:	e09b      	b.n	8003d8c <UART_SetConfig+0x348>
 8003c54:	2308      	movs	r3, #8
 8003c56:	77fb      	strb	r3, [r7, #31]
 8003c58:	e098      	b.n	8003d8c <UART_SetConfig+0x348>
 8003c5a:	2310      	movs	r3, #16
 8003c5c:	77fb      	strb	r3, [r7, #31]
 8003c5e:	e095      	b.n	8003d8c <UART_SetConfig+0x348>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a2f      	ldr	r2, [pc, #188]	@ (8003d24 <UART_SetConfig+0x2e0>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d125      	bne.n	8003cb6 <UART_SetConfig+0x272>
 8003c6a:	4b29      	ldr	r3, [pc, #164]	@ (8003d10 <UART_SetConfig+0x2cc>)
 8003c6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c70:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003c74:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003c78:	d017      	beq.n	8003caa <UART_SetConfig+0x266>
 8003c7a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003c7e:	d817      	bhi.n	8003cb0 <UART_SetConfig+0x26c>
 8003c80:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003c84:	d00b      	beq.n	8003c9e <UART_SetConfig+0x25a>
 8003c86:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003c8a:	d811      	bhi.n	8003cb0 <UART_SetConfig+0x26c>
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d003      	beq.n	8003c98 <UART_SetConfig+0x254>
 8003c90:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c94:	d006      	beq.n	8003ca4 <UART_SetConfig+0x260>
 8003c96:	e00b      	b.n	8003cb0 <UART_SetConfig+0x26c>
 8003c98:	2301      	movs	r3, #1
 8003c9a:	77fb      	strb	r3, [r7, #31]
 8003c9c:	e076      	b.n	8003d8c <UART_SetConfig+0x348>
 8003c9e:	2302      	movs	r3, #2
 8003ca0:	77fb      	strb	r3, [r7, #31]
 8003ca2:	e073      	b.n	8003d8c <UART_SetConfig+0x348>
 8003ca4:	2304      	movs	r3, #4
 8003ca6:	77fb      	strb	r3, [r7, #31]
 8003ca8:	e070      	b.n	8003d8c <UART_SetConfig+0x348>
 8003caa:	2308      	movs	r3, #8
 8003cac:	77fb      	strb	r3, [r7, #31]
 8003cae:	e06d      	b.n	8003d8c <UART_SetConfig+0x348>
 8003cb0:	2310      	movs	r3, #16
 8003cb2:	77fb      	strb	r3, [r7, #31]
 8003cb4:	e06a      	b.n	8003d8c <UART_SetConfig+0x348>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a1b      	ldr	r2, [pc, #108]	@ (8003d28 <UART_SetConfig+0x2e4>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d138      	bne.n	8003d32 <UART_SetConfig+0x2ee>
 8003cc0:	4b13      	ldr	r3, [pc, #76]	@ (8003d10 <UART_SetConfig+0x2cc>)
 8003cc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cc6:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8003cca:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003cce:	d017      	beq.n	8003d00 <UART_SetConfig+0x2bc>
 8003cd0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003cd4:	d82a      	bhi.n	8003d2c <UART_SetConfig+0x2e8>
 8003cd6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003cda:	d00b      	beq.n	8003cf4 <UART_SetConfig+0x2b0>
 8003cdc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003ce0:	d824      	bhi.n	8003d2c <UART_SetConfig+0x2e8>
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d003      	beq.n	8003cee <UART_SetConfig+0x2aa>
 8003ce6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003cea:	d006      	beq.n	8003cfa <UART_SetConfig+0x2b6>
 8003cec:	e01e      	b.n	8003d2c <UART_SetConfig+0x2e8>
 8003cee:	2300      	movs	r3, #0
 8003cf0:	77fb      	strb	r3, [r7, #31]
 8003cf2:	e04b      	b.n	8003d8c <UART_SetConfig+0x348>
 8003cf4:	2302      	movs	r3, #2
 8003cf6:	77fb      	strb	r3, [r7, #31]
 8003cf8:	e048      	b.n	8003d8c <UART_SetConfig+0x348>
 8003cfa:	2304      	movs	r3, #4
 8003cfc:	77fb      	strb	r3, [r7, #31]
 8003cfe:	e045      	b.n	8003d8c <UART_SetConfig+0x348>
 8003d00:	2308      	movs	r3, #8
 8003d02:	77fb      	strb	r3, [r7, #31]
 8003d04:	e042      	b.n	8003d8c <UART_SetConfig+0x348>
 8003d06:	bf00      	nop
 8003d08:	efff69f3 	.word	0xefff69f3
 8003d0c:	40011000 	.word	0x40011000
 8003d10:	40023800 	.word	0x40023800
 8003d14:	40004400 	.word	0x40004400
 8003d18:	40004800 	.word	0x40004800
 8003d1c:	40004c00 	.word	0x40004c00
 8003d20:	40005000 	.word	0x40005000
 8003d24:	40011400 	.word	0x40011400
 8003d28:	40007800 	.word	0x40007800
 8003d2c:	2310      	movs	r3, #16
 8003d2e:	77fb      	strb	r3, [r7, #31]
 8003d30:	e02c      	b.n	8003d8c <UART_SetConfig+0x348>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4a72      	ldr	r2, [pc, #456]	@ (8003f00 <UART_SetConfig+0x4bc>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d125      	bne.n	8003d88 <UART_SetConfig+0x344>
 8003d3c:	4b71      	ldr	r3, [pc, #452]	@ (8003f04 <UART_SetConfig+0x4c0>)
 8003d3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d42:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8003d46:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003d4a:	d017      	beq.n	8003d7c <UART_SetConfig+0x338>
 8003d4c:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003d50:	d817      	bhi.n	8003d82 <UART_SetConfig+0x33e>
 8003d52:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003d56:	d00b      	beq.n	8003d70 <UART_SetConfig+0x32c>
 8003d58:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003d5c:	d811      	bhi.n	8003d82 <UART_SetConfig+0x33e>
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d003      	beq.n	8003d6a <UART_SetConfig+0x326>
 8003d62:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003d66:	d006      	beq.n	8003d76 <UART_SetConfig+0x332>
 8003d68:	e00b      	b.n	8003d82 <UART_SetConfig+0x33e>
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	77fb      	strb	r3, [r7, #31]
 8003d6e:	e00d      	b.n	8003d8c <UART_SetConfig+0x348>
 8003d70:	2302      	movs	r3, #2
 8003d72:	77fb      	strb	r3, [r7, #31]
 8003d74:	e00a      	b.n	8003d8c <UART_SetConfig+0x348>
 8003d76:	2304      	movs	r3, #4
 8003d78:	77fb      	strb	r3, [r7, #31]
 8003d7a:	e007      	b.n	8003d8c <UART_SetConfig+0x348>
 8003d7c:	2308      	movs	r3, #8
 8003d7e:	77fb      	strb	r3, [r7, #31]
 8003d80:	e004      	b.n	8003d8c <UART_SetConfig+0x348>
 8003d82:	2310      	movs	r3, #16
 8003d84:	77fb      	strb	r3, [r7, #31]
 8003d86:	e001      	b.n	8003d8c <UART_SetConfig+0x348>
 8003d88:	2310      	movs	r3, #16
 8003d8a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	69db      	ldr	r3, [r3, #28]
 8003d90:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003d94:	d15b      	bne.n	8003e4e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8003d96:	7ffb      	ldrb	r3, [r7, #31]
 8003d98:	2b08      	cmp	r3, #8
 8003d9a:	d828      	bhi.n	8003dee <UART_SetConfig+0x3aa>
 8003d9c:	a201      	add	r2, pc, #4	@ (adr r2, 8003da4 <UART_SetConfig+0x360>)
 8003d9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003da2:	bf00      	nop
 8003da4:	08003dc9 	.word	0x08003dc9
 8003da8:	08003dd1 	.word	0x08003dd1
 8003dac:	08003dd9 	.word	0x08003dd9
 8003db0:	08003def 	.word	0x08003def
 8003db4:	08003ddf 	.word	0x08003ddf
 8003db8:	08003def 	.word	0x08003def
 8003dbc:	08003def 	.word	0x08003def
 8003dc0:	08003def 	.word	0x08003def
 8003dc4:	08003de7 	.word	0x08003de7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003dc8:	f7fe fe14 	bl	80029f4 <HAL_RCC_GetPCLK1Freq>
 8003dcc:	61b8      	str	r0, [r7, #24]
        break;
 8003dce:	e013      	b.n	8003df8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003dd0:	f7fe fe24 	bl	8002a1c <HAL_RCC_GetPCLK2Freq>
 8003dd4:	61b8      	str	r0, [r7, #24]
        break;
 8003dd6:	e00f      	b.n	8003df8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003dd8:	4b4b      	ldr	r3, [pc, #300]	@ (8003f08 <UART_SetConfig+0x4c4>)
 8003dda:	61bb      	str	r3, [r7, #24]
        break;
 8003ddc:	e00c      	b.n	8003df8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003dde:	f7fe fcf7 	bl	80027d0 <HAL_RCC_GetSysClockFreq>
 8003de2:	61b8      	str	r0, [r7, #24]
        break;
 8003de4:	e008      	b.n	8003df8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003de6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003dea:	61bb      	str	r3, [r7, #24]
        break;
 8003dec:	e004      	b.n	8003df8 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8003dee:	2300      	movs	r3, #0
 8003df0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003df2:	2301      	movs	r3, #1
 8003df4:	77bb      	strb	r3, [r7, #30]
        break;
 8003df6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003df8:	69bb      	ldr	r3, [r7, #24]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d074      	beq.n	8003ee8 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003dfe:	69bb      	ldr	r3, [r7, #24]
 8003e00:	005a      	lsls	r2, r3, #1
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	085b      	lsrs	r3, r3, #1
 8003e08:	441a      	add	r2, r3
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e12:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e14:	693b      	ldr	r3, [r7, #16]
 8003e16:	2b0f      	cmp	r3, #15
 8003e18:	d916      	bls.n	8003e48 <UART_SetConfig+0x404>
 8003e1a:	693b      	ldr	r3, [r7, #16]
 8003e1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e20:	d212      	bcs.n	8003e48 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003e22:	693b      	ldr	r3, [r7, #16]
 8003e24:	b29b      	uxth	r3, r3
 8003e26:	f023 030f 	bic.w	r3, r3, #15
 8003e2a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003e2c:	693b      	ldr	r3, [r7, #16]
 8003e2e:	085b      	lsrs	r3, r3, #1
 8003e30:	b29b      	uxth	r3, r3
 8003e32:	f003 0307 	and.w	r3, r3, #7
 8003e36:	b29a      	uxth	r2, r3
 8003e38:	89fb      	ldrh	r3, [r7, #14]
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	89fa      	ldrh	r2, [r7, #14]
 8003e44:	60da      	str	r2, [r3, #12]
 8003e46:	e04f      	b.n	8003ee8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003e48:	2301      	movs	r3, #1
 8003e4a:	77bb      	strb	r3, [r7, #30]
 8003e4c:	e04c      	b.n	8003ee8 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003e4e:	7ffb      	ldrb	r3, [r7, #31]
 8003e50:	2b08      	cmp	r3, #8
 8003e52:	d828      	bhi.n	8003ea6 <UART_SetConfig+0x462>
 8003e54:	a201      	add	r2, pc, #4	@ (adr r2, 8003e5c <UART_SetConfig+0x418>)
 8003e56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e5a:	bf00      	nop
 8003e5c:	08003e81 	.word	0x08003e81
 8003e60:	08003e89 	.word	0x08003e89
 8003e64:	08003e91 	.word	0x08003e91
 8003e68:	08003ea7 	.word	0x08003ea7
 8003e6c:	08003e97 	.word	0x08003e97
 8003e70:	08003ea7 	.word	0x08003ea7
 8003e74:	08003ea7 	.word	0x08003ea7
 8003e78:	08003ea7 	.word	0x08003ea7
 8003e7c:	08003e9f 	.word	0x08003e9f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e80:	f7fe fdb8 	bl	80029f4 <HAL_RCC_GetPCLK1Freq>
 8003e84:	61b8      	str	r0, [r7, #24]
        break;
 8003e86:	e013      	b.n	8003eb0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e88:	f7fe fdc8 	bl	8002a1c <HAL_RCC_GetPCLK2Freq>
 8003e8c:	61b8      	str	r0, [r7, #24]
        break;
 8003e8e:	e00f      	b.n	8003eb0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e90:	4b1d      	ldr	r3, [pc, #116]	@ (8003f08 <UART_SetConfig+0x4c4>)
 8003e92:	61bb      	str	r3, [r7, #24]
        break;
 8003e94:	e00c      	b.n	8003eb0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e96:	f7fe fc9b 	bl	80027d0 <HAL_RCC_GetSysClockFreq>
 8003e9a:	61b8      	str	r0, [r7, #24]
        break;
 8003e9c:	e008      	b.n	8003eb0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e9e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003ea2:	61bb      	str	r3, [r7, #24]
        break;
 8003ea4:	e004      	b.n	8003eb0 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	77bb      	strb	r3, [r7, #30]
        break;
 8003eae:	bf00      	nop
    }

    if (pclk != 0U)
 8003eb0:	69bb      	ldr	r3, [r7, #24]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d018      	beq.n	8003ee8 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	085a      	lsrs	r2, r3, #1
 8003ebc:	69bb      	ldr	r3, [r7, #24]
 8003ebe:	441a      	add	r2, r3
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	685b      	ldr	r3, [r3, #4]
 8003ec4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ec8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003eca:	693b      	ldr	r3, [r7, #16]
 8003ecc:	2b0f      	cmp	r3, #15
 8003ece:	d909      	bls.n	8003ee4 <UART_SetConfig+0x4a0>
 8003ed0:	693b      	ldr	r3, [r7, #16]
 8003ed2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ed6:	d205      	bcs.n	8003ee4 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003ed8:	693b      	ldr	r3, [r7, #16]
 8003eda:	b29a      	uxth	r2, r3
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	60da      	str	r2, [r3, #12]
 8003ee2:	e001      	b.n	8003ee8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2200      	movs	r2, #0
 8003eec:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003ef4:	7fbb      	ldrb	r3, [r7, #30]
}
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	3720      	adds	r7, #32
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bd80      	pop	{r7, pc}
 8003efe:	bf00      	nop
 8003f00:	40007c00 	.word	0x40007c00
 8003f04:	40023800 	.word	0x40023800
 8003f08:	00f42400 	.word	0x00f42400

08003f0c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b083      	sub	sp, #12
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f18:	f003 0308 	and.w	r3, r3, #8
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d00a      	beq.n	8003f36 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	430a      	orrs	r2, r1
 8003f34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f3a:	f003 0301 	and.w	r3, r3, #1
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d00a      	beq.n	8003f58 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	430a      	orrs	r2, r1
 8003f56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f5c:	f003 0302 	and.w	r3, r3, #2
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d00a      	beq.n	8003f7a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	430a      	orrs	r2, r1
 8003f78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f7e:	f003 0304 	and.w	r3, r3, #4
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d00a      	beq.n	8003f9c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	430a      	orrs	r2, r1
 8003f9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fa0:	f003 0310 	and.w	r3, r3, #16
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d00a      	beq.n	8003fbe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	689b      	ldr	r3, [r3, #8]
 8003fae:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	430a      	orrs	r2, r1
 8003fbc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fc2:	f003 0320 	and.w	r3, r3, #32
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d00a      	beq.n	8003fe0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	689b      	ldr	r3, [r3, #8]
 8003fd0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	430a      	orrs	r2, r1
 8003fde:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fe4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d01a      	beq.n	8004022 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	430a      	orrs	r2, r1
 8004000:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004006:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800400a:	d10a      	bne.n	8004022 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	430a      	orrs	r2, r1
 8004020:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004026:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800402a:	2b00      	cmp	r3, #0
 800402c:	d00a      	beq.n	8004044 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	430a      	orrs	r2, r1
 8004042:	605a      	str	r2, [r3, #4]
  }
}
 8004044:	bf00      	nop
 8004046:	370c      	adds	r7, #12
 8004048:	46bd      	mov	sp, r7
 800404a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404e:	4770      	bx	lr

08004050 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b098      	sub	sp, #96	@ 0x60
 8004054:	af02      	add	r7, sp, #8
 8004056:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2200      	movs	r2, #0
 800405c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004060:	f7fd f844 	bl	80010ec <HAL_GetTick>
 8004064:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f003 0308 	and.w	r3, r3, #8
 8004070:	2b08      	cmp	r3, #8
 8004072:	d12e      	bne.n	80040d2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004074:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004078:	9300      	str	r3, [sp, #0]
 800407a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800407c:	2200      	movs	r2, #0
 800407e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004082:	6878      	ldr	r0, [r7, #4]
 8004084:	f000 f88c 	bl	80041a0 <UART_WaitOnFlagUntilTimeout>
 8004088:	4603      	mov	r3, r0
 800408a:	2b00      	cmp	r3, #0
 800408c:	d021      	beq.n	80040d2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004094:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004096:	e853 3f00 	ldrex	r3, [r3]
 800409a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800409c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800409e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80040a2:	653b      	str	r3, [r7, #80]	@ 0x50
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	461a      	mov	r2, r3
 80040aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80040ac:	647b      	str	r3, [r7, #68]	@ 0x44
 80040ae:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040b0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80040b2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80040b4:	e841 2300 	strex	r3, r2, [r1]
 80040b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80040ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d1e6      	bne.n	800408e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2220      	movs	r2, #32
 80040c4:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2200      	movs	r2, #0
 80040ca:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80040ce:	2303      	movs	r3, #3
 80040d0:	e062      	b.n	8004198 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f003 0304 	and.w	r3, r3, #4
 80040dc:	2b04      	cmp	r3, #4
 80040de:	d149      	bne.n	8004174 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80040e0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80040e4:	9300      	str	r3, [sp, #0]
 80040e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040e8:	2200      	movs	r2, #0
 80040ea:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80040ee:	6878      	ldr	r0, [r7, #4]
 80040f0:	f000 f856 	bl	80041a0 <UART_WaitOnFlagUntilTimeout>
 80040f4:	4603      	mov	r3, r0
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d03c      	beq.n	8004174 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004100:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004102:	e853 3f00 	ldrex	r3, [r3]
 8004106:	623b      	str	r3, [r7, #32]
   return(result);
 8004108:	6a3b      	ldr	r3, [r7, #32]
 800410a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800410e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	461a      	mov	r2, r3
 8004116:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004118:	633b      	str	r3, [r7, #48]	@ 0x30
 800411a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800411c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800411e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004120:	e841 2300 	strex	r3, r2, [r1]
 8004124:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004126:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004128:	2b00      	cmp	r3, #0
 800412a:	d1e6      	bne.n	80040fa <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	3308      	adds	r3, #8
 8004132:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004134:	693b      	ldr	r3, [r7, #16]
 8004136:	e853 3f00 	ldrex	r3, [r3]
 800413a:	60fb      	str	r3, [r7, #12]
   return(result);
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	f023 0301 	bic.w	r3, r3, #1
 8004142:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	3308      	adds	r3, #8
 800414a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800414c:	61fa      	str	r2, [r7, #28]
 800414e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004150:	69b9      	ldr	r1, [r7, #24]
 8004152:	69fa      	ldr	r2, [r7, #28]
 8004154:	e841 2300 	strex	r3, r2, [r1]
 8004158:	617b      	str	r3, [r7, #20]
   return(result);
 800415a:	697b      	ldr	r3, [r7, #20]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d1e5      	bne.n	800412c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2220      	movs	r2, #32
 8004164:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2200      	movs	r2, #0
 800416c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004170:	2303      	movs	r3, #3
 8004172:	e011      	b.n	8004198 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2220      	movs	r2, #32
 8004178:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2220      	movs	r2, #32
 800417e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2200      	movs	r2, #0
 8004186:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2200      	movs	r2, #0
 800418c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2200      	movs	r2, #0
 8004192:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004196:	2300      	movs	r3, #0
}
 8004198:	4618      	mov	r0, r3
 800419a:	3758      	adds	r7, #88	@ 0x58
 800419c:	46bd      	mov	sp, r7
 800419e:	bd80      	pop	{r7, pc}

080041a0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b084      	sub	sp, #16
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	60f8      	str	r0, [r7, #12]
 80041a8:	60b9      	str	r1, [r7, #8]
 80041aa:	603b      	str	r3, [r7, #0]
 80041ac:	4613      	mov	r3, r2
 80041ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041b0:	e04f      	b.n	8004252 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041b2:	69bb      	ldr	r3, [r7, #24]
 80041b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041b8:	d04b      	beq.n	8004252 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041ba:	f7fc ff97 	bl	80010ec <HAL_GetTick>
 80041be:	4602      	mov	r2, r0
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	1ad3      	subs	r3, r2, r3
 80041c4:	69ba      	ldr	r2, [r7, #24]
 80041c6:	429a      	cmp	r2, r3
 80041c8:	d302      	bcc.n	80041d0 <UART_WaitOnFlagUntilTimeout+0x30>
 80041ca:	69bb      	ldr	r3, [r7, #24]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d101      	bne.n	80041d4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80041d0:	2303      	movs	r3, #3
 80041d2:	e04e      	b.n	8004272 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f003 0304 	and.w	r3, r3, #4
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d037      	beq.n	8004252 <UART_WaitOnFlagUntilTimeout+0xb2>
 80041e2:	68bb      	ldr	r3, [r7, #8]
 80041e4:	2b80      	cmp	r3, #128	@ 0x80
 80041e6:	d034      	beq.n	8004252 <UART_WaitOnFlagUntilTimeout+0xb2>
 80041e8:	68bb      	ldr	r3, [r7, #8]
 80041ea:	2b40      	cmp	r3, #64	@ 0x40
 80041ec:	d031      	beq.n	8004252 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	69db      	ldr	r3, [r3, #28]
 80041f4:	f003 0308 	and.w	r3, r3, #8
 80041f8:	2b08      	cmp	r3, #8
 80041fa:	d110      	bne.n	800421e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	2208      	movs	r2, #8
 8004202:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004204:	68f8      	ldr	r0, [r7, #12]
 8004206:	f000 f838 	bl	800427a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	2208      	movs	r2, #8
 800420e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	2200      	movs	r2, #0
 8004216:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800421a:	2301      	movs	r3, #1
 800421c:	e029      	b.n	8004272 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	69db      	ldr	r3, [r3, #28]
 8004224:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004228:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800422c:	d111      	bne.n	8004252 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004236:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004238:	68f8      	ldr	r0, [r7, #12]
 800423a:	f000 f81e 	bl	800427a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	2220      	movs	r2, #32
 8004242:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	2200      	movs	r2, #0
 800424a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800424e:	2303      	movs	r3, #3
 8004250:	e00f      	b.n	8004272 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	69da      	ldr	r2, [r3, #28]
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	4013      	ands	r3, r2
 800425c:	68ba      	ldr	r2, [r7, #8]
 800425e:	429a      	cmp	r2, r3
 8004260:	bf0c      	ite	eq
 8004262:	2301      	moveq	r3, #1
 8004264:	2300      	movne	r3, #0
 8004266:	b2db      	uxtb	r3, r3
 8004268:	461a      	mov	r2, r3
 800426a:	79fb      	ldrb	r3, [r7, #7]
 800426c:	429a      	cmp	r2, r3
 800426e:	d0a0      	beq.n	80041b2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004270:	2300      	movs	r3, #0
}
 8004272:	4618      	mov	r0, r3
 8004274:	3710      	adds	r7, #16
 8004276:	46bd      	mov	sp, r7
 8004278:	bd80      	pop	{r7, pc}

0800427a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800427a:	b480      	push	{r7}
 800427c:	b095      	sub	sp, #84	@ 0x54
 800427e:	af00      	add	r7, sp, #0
 8004280:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004288:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800428a:	e853 3f00 	ldrex	r3, [r3]
 800428e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004290:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004292:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004296:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	461a      	mov	r2, r3
 800429e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80042a0:	643b      	str	r3, [r7, #64]	@ 0x40
 80042a2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042a4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80042a6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80042a8:	e841 2300 	strex	r3, r2, [r1]
 80042ac:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80042ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d1e6      	bne.n	8004282 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	3308      	adds	r3, #8
 80042ba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042bc:	6a3b      	ldr	r3, [r7, #32]
 80042be:	e853 3f00 	ldrex	r3, [r3]
 80042c2:	61fb      	str	r3, [r7, #28]
   return(result);
 80042c4:	69fb      	ldr	r3, [r7, #28]
 80042c6:	f023 0301 	bic.w	r3, r3, #1
 80042ca:	64bb      	str	r3, [r7, #72]	@ 0x48
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	3308      	adds	r3, #8
 80042d2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80042d4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80042d6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042d8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80042da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80042dc:	e841 2300 	strex	r3, r2, [r1]
 80042e0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80042e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d1e5      	bne.n	80042b4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80042ec:	2b01      	cmp	r3, #1
 80042ee:	d118      	bne.n	8004322 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	e853 3f00 	ldrex	r3, [r3]
 80042fc:	60bb      	str	r3, [r7, #8]
   return(result);
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	f023 0310 	bic.w	r3, r3, #16
 8004304:	647b      	str	r3, [r7, #68]	@ 0x44
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	461a      	mov	r2, r3
 800430c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800430e:	61bb      	str	r3, [r7, #24]
 8004310:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004312:	6979      	ldr	r1, [r7, #20]
 8004314:	69ba      	ldr	r2, [r7, #24]
 8004316:	e841 2300 	strex	r3, r2, [r1]
 800431a:	613b      	str	r3, [r7, #16]
   return(result);
 800431c:	693b      	ldr	r3, [r7, #16]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d1e6      	bne.n	80042f0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2220      	movs	r2, #32
 8004326:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2200      	movs	r2, #0
 800432e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2200      	movs	r2, #0
 8004334:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004336:	bf00      	nop
 8004338:	3754      	adds	r7, #84	@ 0x54
 800433a:	46bd      	mov	sp, r7
 800433c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004340:	4770      	bx	lr
	...

08004344 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004344:	b084      	sub	sp, #16
 8004346:	b580      	push	{r7, lr}
 8004348:	b084      	sub	sp, #16
 800434a:	af00      	add	r7, sp, #0
 800434c:	6078      	str	r0, [r7, #4]
 800434e:	f107 001c 	add.w	r0, r7, #28
 8004352:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004356:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800435a:	2b01      	cmp	r3, #1
 800435c:	d121      	bne.n	80043a2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004362:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	68da      	ldr	r2, [r3, #12]
 800436e:	4b21      	ldr	r3, [pc, #132]	@ (80043f4 <USB_CoreInit+0xb0>)
 8004370:	4013      	ands	r3, r2
 8004372:	687a      	ldr	r2, [r7, #4]
 8004374:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	68db      	ldr	r3, [r3, #12]
 800437a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004382:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004386:	2b01      	cmp	r3, #1
 8004388:	d105      	bne.n	8004396 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	68db      	ldr	r3, [r3, #12]
 800438e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004396:	6878      	ldr	r0, [r7, #4]
 8004398:	f000 fa92 	bl	80048c0 <USB_CoreReset>
 800439c:	4603      	mov	r3, r0
 800439e:	73fb      	strb	r3, [r7, #15]
 80043a0:	e010      	b.n	80043c4 <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	68db      	ldr	r3, [r3, #12]
 80043a6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80043ae:	6878      	ldr	r0, [r7, #4]
 80043b0:	f000 fa86 	bl	80048c0 <USB_CoreReset>
 80043b4:	4603      	mov	r3, r0
 80043b6:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043bc:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 80043c4:	7fbb      	ldrb	r3, [r7, #30]
 80043c6:	2b01      	cmp	r3, #1
 80043c8:	d10b      	bne.n	80043e2 <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	689b      	ldr	r3, [r3, #8]
 80043ce:	f043 0206 	orr.w	r2, r3, #6
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	689b      	ldr	r3, [r3, #8]
 80043da:	f043 0220 	orr.w	r2, r3, #32
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80043e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80043e4:	4618      	mov	r0, r3
 80043e6:	3710      	adds	r7, #16
 80043e8:	46bd      	mov	sp, r7
 80043ea:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80043ee:	b004      	add	sp, #16
 80043f0:	4770      	bx	lr
 80043f2:	bf00      	nop
 80043f4:	ffbdffbf 	.word	0xffbdffbf

080043f8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80043f8:	b480      	push	{r7}
 80043fa:	b083      	sub	sp, #12
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	689b      	ldr	r3, [r3, #8]
 8004404:	f023 0201 	bic.w	r2, r3, #1
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800440c:	2300      	movs	r3, #0
}
 800440e:	4618      	mov	r0, r3
 8004410:	370c      	adds	r7, #12
 8004412:	46bd      	mov	sp, r7
 8004414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004418:	4770      	bx	lr

0800441a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800441a:	b580      	push	{r7, lr}
 800441c:	b084      	sub	sp, #16
 800441e:	af00      	add	r7, sp, #0
 8004420:	6078      	str	r0, [r7, #4]
 8004422:	460b      	mov	r3, r1
 8004424:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004426:	2300      	movs	r3, #0
 8004428:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	68db      	ldr	r3, [r3, #12]
 800442e:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004436:	78fb      	ldrb	r3, [r7, #3]
 8004438:	2b01      	cmp	r3, #1
 800443a:	d115      	bne.n	8004468 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	68db      	ldr	r3, [r3, #12]
 8004440:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004448:	200a      	movs	r0, #10
 800444a:	f7fc fe5b 	bl	8001104 <HAL_Delay>
      ms += 10U;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	330a      	adds	r3, #10
 8004452:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004454:	6878      	ldr	r0, [r7, #4]
 8004456:	f000 fa25 	bl	80048a4 <USB_GetMode>
 800445a:	4603      	mov	r3, r0
 800445c:	2b01      	cmp	r3, #1
 800445e:	d01e      	beq.n	800449e <USB_SetCurrentMode+0x84>
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	2bc7      	cmp	r3, #199	@ 0xc7
 8004464:	d9f0      	bls.n	8004448 <USB_SetCurrentMode+0x2e>
 8004466:	e01a      	b.n	800449e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004468:	78fb      	ldrb	r3, [r7, #3]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d115      	bne.n	800449a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	68db      	ldr	r3, [r3, #12]
 8004472:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800447a:	200a      	movs	r0, #10
 800447c:	f7fc fe42 	bl	8001104 <HAL_Delay>
      ms += 10U;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	330a      	adds	r3, #10
 8004484:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004486:	6878      	ldr	r0, [r7, #4]
 8004488:	f000 fa0c 	bl	80048a4 <USB_GetMode>
 800448c:	4603      	mov	r3, r0
 800448e:	2b00      	cmp	r3, #0
 8004490:	d005      	beq.n	800449e <USB_SetCurrentMode+0x84>
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	2bc7      	cmp	r3, #199	@ 0xc7
 8004496:	d9f0      	bls.n	800447a <USB_SetCurrentMode+0x60>
 8004498:	e001      	b.n	800449e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800449a:	2301      	movs	r3, #1
 800449c:	e005      	b.n	80044aa <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	2bc8      	cmp	r3, #200	@ 0xc8
 80044a2:	d101      	bne.n	80044a8 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80044a4:	2301      	movs	r3, #1
 80044a6:	e000      	b.n	80044aa <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80044a8:	2300      	movs	r3, #0
}
 80044aa:	4618      	mov	r0, r3
 80044ac:	3710      	adds	r7, #16
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bd80      	pop	{r7, pc}
	...

080044b4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80044b4:	b084      	sub	sp, #16
 80044b6:	b580      	push	{r7, lr}
 80044b8:	b086      	sub	sp, #24
 80044ba:	af00      	add	r7, sp, #0
 80044bc:	6078      	str	r0, [r7, #4]
 80044be:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80044c2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80044c6:	2300      	movs	r3, #0
 80044c8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80044ce:	2300      	movs	r3, #0
 80044d0:	613b      	str	r3, [r7, #16]
 80044d2:	e009      	b.n	80044e8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80044d4:	687a      	ldr	r2, [r7, #4]
 80044d6:	693b      	ldr	r3, [r7, #16]
 80044d8:	3340      	adds	r3, #64	@ 0x40
 80044da:	009b      	lsls	r3, r3, #2
 80044dc:	4413      	add	r3, r2
 80044de:	2200      	movs	r2, #0
 80044e0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80044e2:	693b      	ldr	r3, [r7, #16]
 80044e4:	3301      	adds	r3, #1
 80044e6:	613b      	str	r3, [r7, #16]
 80044e8:	693b      	ldr	r3, [r7, #16]
 80044ea:	2b0e      	cmp	r3, #14
 80044ec:	d9f2      	bls.n	80044d4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80044ee:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d11c      	bne.n	8004530 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	68fa      	ldr	r2, [r7, #12]
 8004500:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004504:	f043 0302 	orr.w	r3, r3, #2
 8004508:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800450e:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	601a      	str	r2, [r3, #0]
 800452e:	e005      	b.n	800453c <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004534:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004542:	461a      	mov	r2, r3
 8004544:	2300      	movs	r3, #0
 8004546:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004548:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800454c:	2b01      	cmp	r3, #1
 800454e:	d10d      	bne.n	800456c <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004550:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004554:	2b00      	cmp	r3, #0
 8004556:	d104      	bne.n	8004562 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004558:	2100      	movs	r1, #0
 800455a:	6878      	ldr	r0, [r7, #4]
 800455c:	f000 f968 	bl	8004830 <USB_SetDevSpeed>
 8004560:	e008      	b.n	8004574 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004562:	2101      	movs	r1, #1
 8004564:	6878      	ldr	r0, [r7, #4]
 8004566:	f000 f963 	bl	8004830 <USB_SetDevSpeed>
 800456a:	e003      	b.n	8004574 <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800456c:	2103      	movs	r1, #3
 800456e:	6878      	ldr	r0, [r7, #4]
 8004570:	f000 f95e 	bl	8004830 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004574:	2110      	movs	r1, #16
 8004576:	6878      	ldr	r0, [r7, #4]
 8004578:	f000 f8fa 	bl	8004770 <USB_FlushTxFifo>
 800457c:	4603      	mov	r3, r0
 800457e:	2b00      	cmp	r3, #0
 8004580:	d001      	beq.n	8004586 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8004582:	2301      	movs	r3, #1
 8004584:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004586:	6878      	ldr	r0, [r7, #4]
 8004588:	f000 f924 	bl	80047d4 <USB_FlushRxFifo>
 800458c:	4603      	mov	r3, r0
 800458e:	2b00      	cmp	r3, #0
 8004590:	d001      	beq.n	8004596 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8004592:	2301      	movs	r3, #1
 8004594:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800459c:	461a      	mov	r2, r3
 800459e:	2300      	movs	r3, #0
 80045a0:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80045a8:	461a      	mov	r2, r3
 80045aa:	2300      	movs	r3, #0
 80045ac:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80045b4:	461a      	mov	r2, r3
 80045b6:	2300      	movs	r3, #0
 80045b8:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80045ba:	2300      	movs	r3, #0
 80045bc:	613b      	str	r3, [r7, #16]
 80045be:	e043      	b.n	8004648 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80045c0:	693b      	ldr	r3, [r7, #16]
 80045c2:	015a      	lsls	r2, r3, #5
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	4413      	add	r3, r2
 80045c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80045d2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80045d6:	d118      	bne.n	800460a <USB_DevInit+0x156>
    {
      if (i == 0U)
 80045d8:	693b      	ldr	r3, [r7, #16]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d10a      	bne.n	80045f4 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80045de:	693b      	ldr	r3, [r7, #16]
 80045e0:	015a      	lsls	r2, r3, #5
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	4413      	add	r3, r2
 80045e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80045ea:	461a      	mov	r2, r3
 80045ec:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80045f0:	6013      	str	r3, [r2, #0]
 80045f2:	e013      	b.n	800461c <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80045f4:	693b      	ldr	r3, [r7, #16]
 80045f6:	015a      	lsls	r2, r3, #5
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	4413      	add	r3, r2
 80045fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004600:	461a      	mov	r2, r3
 8004602:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004606:	6013      	str	r3, [r2, #0]
 8004608:	e008      	b.n	800461c <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	015a      	lsls	r2, r3, #5
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	4413      	add	r3, r2
 8004612:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004616:	461a      	mov	r2, r3
 8004618:	2300      	movs	r3, #0
 800461a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800461c:	693b      	ldr	r3, [r7, #16]
 800461e:	015a      	lsls	r2, r3, #5
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	4413      	add	r3, r2
 8004624:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004628:	461a      	mov	r2, r3
 800462a:	2300      	movs	r3, #0
 800462c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	015a      	lsls	r2, r3, #5
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	4413      	add	r3, r2
 8004636:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800463a:	461a      	mov	r2, r3
 800463c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004640:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004642:	693b      	ldr	r3, [r7, #16]
 8004644:	3301      	adds	r3, #1
 8004646:	613b      	str	r3, [r7, #16]
 8004648:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800464c:	461a      	mov	r2, r3
 800464e:	693b      	ldr	r3, [r7, #16]
 8004650:	4293      	cmp	r3, r2
 8004652:	d3b5      	bcc.n	80045c0 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004654:	2300      	movs	r3, #0
 8004656:	613b      	str	r3, [r7, #16]
 8004658:	e043      	b.n	80046e2 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800465a:	693b      	ldr	r3, [r7, #16]
 800465c:	015a      	lsls	r2, r3, #5
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	4413      	add	r3, r2
 8004662:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800466c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004670:	d118      	bne.n	80046a4 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8004672:	693b      	ldr	r3, [r7, #16]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d10a      	bne.n	800468e <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004678:	693b      	ldr	r3, [r7, #16]
 800467a:	015a      	lsls	r2, r3, #5
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	4413      	add	r3, r2
 8004680:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004684:	461a      	mov	r2, r3
 8004686:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800468a:	6013      	str	r3, [r2, #0]
 800468c:	e013      	b.n	80046b6 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800468e:	693b      	ldr	r3, [r7, #16]
 8004690:	015a      	lsls	r2, r3, #5
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	4413      	add	r3, r2
 8004696:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800469a:	461a      	mov	r2, r3
 800469c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80046a0:	6013      	str	r3, [r2, #0]
 80046a2:	e008      	b.n	80046b6 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80046a4:	693b      	ldr	r3, [r7, #16]
 80046a6:	015a      	lsls	r2, r3, #5
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	4413      	add	r3, r2
 80046ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80046b0:	461a      	mov	r2, r3
 80046b2:	2300      	movs	r3, #0
 80046b4:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80046b6:	693b      	ldr	r3, [r7, #16]
 80046b8:	015a      	lsls	r2, r3, #5
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	4413      	add	r3, r2
 80046be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80046c2:	461a      	mov	r2, r3
 80046c4:	2300      	movs	r3, #0
 80046c6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80046c8:	693b      	ldr	r3, [r7, #16]
 80046ca:	015a      	lsls	r2, r3, #5
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	4413      	add	r3, r2
 80046d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80046d4:	461a      	mov	r2, r3
 80046d6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80046da:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80046dc:	693b      	ldr	r3, [r7, #16]
 80046de:	3301      	adds	r3, #1
 80046e0:	613b      	str	r3, [r7, #16]
 80046e2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80046e6:	461a      	mov	r2, r3
 80046e8:	693b      	ldr	r3, [r7, #16]
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d3b5      	bcc.n	800465a <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80046f4:	691b      	ldr	r3, [r3, #16]
 80046f6:	68fa      	ldr	r2, [r7, #12]
 80046f8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80046fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004700:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2200      	movs	r2, #0
 8004706:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800470e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004710:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004714:	2b00      	cmp	r3, #0
 8004716:	d105      	bne.n	8004724 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	699b      	ldr	r3, [r3, #24]
 800471c:	f043 0210 	orr.w	r2, r3, #16
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	699a      	ldr	r2, [r3, #24]
 8004728:	4b0f      	ldr	r3, [pc, #60]	@ (8004768 <USB_DevInit+0x2b4>)
 800472a:	4313      	orrs	r3, r2
 800472c:	687a      	ldr	r2, [r7, #4]
 800472e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004730:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8004734:	2b00      	cmp	r3, #0
 8004736:	d005      	beq.n	8004744 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	699b      	ldr	r3, [r3, #24]
 800473c:	f043 0208 	orr.w	r2, r3, #8
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004744:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004748:	2b01      	cmp	r3, #1
 800474a:	d105      	bne.n	8004758 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	699a      	ldr	r2, [r3, #24]
 8004750:	4b06      	ldr	r3, [pc, #24]	@ (800476c <USB_DevInit+0x2b8>)
 8004752:	4313      	orrs	r3, r2
 8004754:	687a      	ldr	r2, [r7, #4]
 8004756:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004758:	7dfb      	ldrb	r3, [r7, #23]
}
 800475a:	4618      	mov	r0, r3
 800475c:	3718      	adds	r7, #24
 800475e:	46bd      	mov	sp, r7
 8004760:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004764:	b004      	add	sp, #16
 8004766:	4770      	bx	lr
 8004768:	803c3800 	.word	0x803c3800
 800476c:	40000004 	.word	0x40000004

08004770 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004770:	b480      	push	{r7}
 8004772:	b085      	sub	sp, #20
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
 8004778:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800477a:	2300      	movs	r3, #0
 800477c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	3301      	adds	r3, #1
 8004782:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800478a:	d901      	bls.n	8004790 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800478c:	2303      	movs	r3, #3
 800478e:	e01b      	b.n	80047c8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	691b      	ldr	r3, [r3, #16]
 8004794:	2b00      	cmp	r3, #0
 8004796:	daf2      	bge.n	800477e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004798:	2300      	movs	r3, #0
 800479a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	019b      	lsls	r3, r3, #6
 80047a0:	f043 0220 	orr.w	r2, r3, #32
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	3301      	adds	r3, #1
 80047ac:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80047b4:	d901      	bls.n	80047ba <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80047b6:	2303      	movs	r3, #3
 80047b8:	e006      	b.n	80047c8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	691b      	ldr	r3, [r3, #16]
 80047be:	f003 0320 	and.w	r3, r3, #32
 80047c2:	2b20      	cmp	r3, #32
 80047c4:	d0f0      	beq.n	80047a8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80047c6:	2300      	movs	r3, #0
}
 80047c8:	4618      	mov	r0, r3
 80047ca:	3714      	adds	r7, #20
 80047cc:	46bd      	mov	sp, r7
 80047ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d2:	4770      	bx	lr

080047d4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80047d4:	b480      	push	{r7}
 80047d6:	b085      	sub	sp, #20
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80047dc:	2300      	movs	r3, #0
 80047de:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	3301      	adds	r3, #1
 80047e4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80047ec:	d901      	bls.n	80047f2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80047ee:	2303      	movs	r3, #3
 80047f0:	e018      	b.n	8004824 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	691b      	ldr	r3, [r3, #16]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	daf2      	bge.n	80047e0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80047fa:	2300      	movs	r3, #0
 80047fc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2210      	movs	r2, #16
 8004802:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	3301      	adds	r3, #1
 8004808:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004810:	d901      	bls.n	8004816 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004812:	2303      	movs	r3, #3
 8004814:	e006      	b.n	8004824 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	691b      	ldr	r3, [r3, #16]
 800481a:	f003 0310 	and.w	r3, r3, #16
 800481e:	2b10      	cmp	r3, #16
 8004820:	d0f0      	beq.n	8004804 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004822:	2300      	movs	r3, #0
}
 8004824:	4618      	mov	r0, r3
 8004826:	3714      	adds	r7, #20
 8004828:	46bd      	mov	sp, r7
 800482a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482e:	4770      	bx	lr

08004830 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004830:	b480      	push	{r7}
 8004832:	b085      	sub	sp, #20
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
 8004838:	460b      	mov	r3, r1
 800483a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004846:	681a      	ldr	r2, [r3, #0]
 8004848:	78fb      	ldrb	r3, [r7, #3]
 800484a:	68f9      	ldr	r1, [r7, #12]
 800484c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004850:	4313      	orrs	r3, r2
 8004852:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004854:	2300      	movs	r3, #0
}
 8004856:	4618      	mov	r0, r3
 8004858:	3714      	adds	r7, #20
 800485a:	46bd      	mov	sp, r7
 800485c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004860:	4770      	bx	lr

08004862 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8004862:	b480      	push	{r7}
 8004864:	b085      	sub	sp, #20
 8004866:	af00      	add	r7, sp, #0
 8004868:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	68fa      	ldr	r2, [r7, #12]
 8004878:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800487c:	f023 0303 	bic.w	r3, r3, #3
 8004880:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004888:	685b      	ldr	r3, [r3, #4]
 800488a:	68fa      	ldr	r2, [r7, #12]
 800488c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004890:	f043 0302 	orr.w	r3, r3, #2
 8004894:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004896:	2300      	movs	r3, #0
}
 8004898:	4618      	mov	r0, r3
 800489a:	3714      	adds	r7, #20
 800489c:	46bd      	mov	sp, r7
 800489e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a2:	4770      	bx	lr

080048a4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80048a4:	b480      	push	{r7}
 80048a6:	b083      	sub	sp, #12
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	695b      	ldr	r3, [r3, #20]
 80048b0:	f003 0301 	and.w	r3, r3, #1
}
 80048b4:	4618      	mov	r0, r3
 80048b6:	370c      	adds	r7, #12
 80048b8:	46bd      	mov	sp, r7
 80048ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048be:	4770      	bx	lr

080048c0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80048c0:	b480      	push	{r7}
 80048c2:	b085      	sub	sp, #20
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80048c8:	2300      	movs	r3, #0
 80048ca:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	3301      	adds	r3, #1
 80048d0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80048d8:	d901      	bls.n	80048de <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80048da:	2303      	movs	r3, #3
 80048dc:	e022      	b.n	8004924 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	691b      	ldr	r3, [r3, #16]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	daf2      	bge.n	80048cc <USB_CoreReset+0xc>

  count = 10U;
 80048e6:	230a      	movs	r3, #10
 80048e8:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 80048ea:	e002      	b.n	80048f2 <USB_CoreReset+0x32>
  {
    count--;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	3b01      	subs	r3, #1
 80048f0:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d1f9      	bne.n	80048ec <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	691b      	ldr	r3, [r3, #16]
 80048fc:	f043 0201 	orr.w	r2, r3, #1
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	3301      	adds	r3, #1
 8004908:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004910:	d901      	bls.n	8004916 <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 8004912:	2303      	movs	r3, #3
 8004914:	e006      	b.n	8004924 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	691b      	ldr	r3, [r3, #16]
 800491a:	f003 0301 	and.w	r3, r3, #1
 800491e:	2b01      	cmp	r3, #1
 8004920:	d0f0      	beq.n	8004904 <USB_CoreReset+0x44>

  return HAL_OK;
 8004922:	2300      	movs	r3, #0
}
 8004924:	4618      	mov	r0, r3
 8004926:	3714      	adds	r7, #20
 8004928:	46bd      	mov	sp, r7
 800492a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492e:	4770      	bx	lr

08004930 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004930:	b480      	push	{r7}
 8004932:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8004934:	bf00      	nop
 8004936:	46bd      	mov	sp, r7
 8004938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493c:	4770      	bx	lr
	...

08004940 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004940:	b480      	push	{r7}
 8004942:	b085      	sub	sp, #20
 8004944:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004946:	f3ef 8305 	mrs	r3, IPSR
 800494a:	60bb      	str	r3, [r7, #8]
  return(result);
 800494c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800494e:	2b00      	cmp	r3, #0
 8004950:	d10f      	bne.n	8004972 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004952:	f3ef 8310 	mrs	r3, PRIMASK
 8004956:	607b      	str	r3, [r7, #4]
  return(result);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d105      	bne.n	800496a <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800495e:	f3ef 8311 	mrs	r3, BASEPRI
 8004962:	603b      	str	r3, [r7, #0]
  return(result);
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d007      	beq.n	800497a <osKernelInitialize+0x3a>
 800496a:	4b0e      	ldr	r3, [pc, #56]	@ (80049a4 <osKernelInitialize+0x64>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	2b02      	cmp	r3, #2
 8004970:	d103      	bne.n	800497a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8004972:	f06f 0305 	mvn.w	r3, #5
 8004976:	60fb      	str	r3, [r7, #12]
 8004978:	e00c      	b.n	8004994 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800497a:	4b0a      	ldr	r3, [pc, #40]	@ (80049a4 <osKernelInitialize+0x64>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d105      	bne.n	800498e <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004982:	4b08      	ldr	r3, [pc, #32]	@ (80049a4 <osKernelInitialize+0x64>)
 8004984:	2201      	movs	r2, #1
 8004986:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004988:	2300      	movs	r3, #0
 800498a:	60fb      	str	r3, [r7, #12]
 800498c:	e002      	b.n	8004994 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800498e:	f04f 33ff 	mov.w	r3, #4294967295
 8004992:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004994:	68fb      	ldr	r3, [r7, #12]
}
 8004996:	4618      	mov	r0, r3
 8004998:	3714      	adds	r7, #20
 800499a:	46bd      	mov	sp, r7
 800499c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a0:	4770      	bx	lr
 80049a2:	bf00      	nop
 80049a4:	20000878 	.word	0x20000878

080049a8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b084      	sub	sp, #16
 80049ac:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80049ae:	f3ef 8305 	mrs	r3, IPSR
 80049b2:	60bb      	str	r3, [r7, #8]
  return(result);
 80049b4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d10f      	bne.n	80049da <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80049ba:	f3ef 8310 	mrs	r3, PRIMASK
 80049be:	607b      	str	r3, [r7, #4]
  return(result);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d105      	bne.n	80049d2 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80049c6:	f3ef 8311 	mrs	r3, BASEPRI
 80049ca:	603b      	str	r3, [r7, #0]
  return(result);
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d007      	beq.n	80049e2 <osKernelStart+0x3a>
 80049d2:	4b0f      	ldr	r3, [pc, #60]	@ (8004a10 <osKernelStart+0x68>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	2b02      	cmp	r3, #2
 80049d8:	d103      	bne.n	80049e2 <osKernelStart+0x3a>
    stat = osErrorISR;
 80049da:	f06f 0305 	mvn.w	r3, #5
 80049de:	60fb      	str	r3, [r7, #12]
 80049e0:	e010      	b.n	8004a04 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 80049e2:	4b0b      	ldr	r3, [pc, #44]	@ (8004a10 <osKernelStart+0x68>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	2b01      	cmp	r3, #1
 80049e8:	d109      	bne.n	80049fe <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80049ea:	f7ff ffa1 	bl	8004930 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80049ee:	4b08      	ldr	r3, [pc, #32]	@ (8004a10 <osKernelStart+0x68>)
 80049f0:	2202      	movs	r2, #2
 80049f2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80049f4:	f001 fe0a 	bl	800660c <vTaskStartScheduler>
      stat = osOK;
 80049f8:	2300      	movs	r3, #0
 80049fa:	60fb      	str	r3, [r7, #12]
 80049fc:	e002      	b.n	8004a04 <osKernelStart+0x5c>
    } else {
      stat = osError;
 80049fe:	f04f 33ff 	mov.w	r3, #4294967295
 8004a02:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004a04:	68fb      	ldr	r3, [r7, #12]
}
 8004a06:	4618      	mov	r0, r3
 8004a08:	3710      	adds	r7, #16
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	bd80      	pop	{r7, pc}
 8004a0e:	bf00      	nop
 8004a10:	20000878 	.word	0x20000878

08004a14 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b090      	sub	sp, #64	@ 0x40
 8004a18:	af04      	add	r7, sp, #16
 8004a1a:	60f8      	str	r0, [r7, #12]
 8004a1c:	60b9      	str	r1, [r7, #8]
 8004a1e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004a20:	2300      	movs	r3, #0
 8004a22:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004a24:	f3ef 8305 	mrs	r3, IPSR
 8004a28:	61fb      	str	r3, [r7, #28]
  return(result);
 8004a2a:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	f040 808f 	bne.w	8004b50 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a32:	f3ef 8310 	mrs	r3, PRIMASK
 8004a36:	61bb      	str	r3, [r7, #24]
  return(result);
 8004a38:	69bb      	ldr	r3, [r7, #24]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d105      	bne.n	8004a4a <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004a3e:	f3ef 8311 	mrs	r3, BASEPRI
 8004a42:	617b      	str	r3, [r7, #20]
  return(result);
 8004a44:	697b      	ldr	r3, [r7, #20]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d003      	beq.n	8004a52 <osThreadNew+0x3e>
 8004a4a:	4b44      	ldr	r3, [pc, #272]	@ (8004b5c <osThreadNew+0x148>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	2b02      	cmp	r3, #2
 8004a50:	d07e      	beq.n	8004b50 <osThreadNew+0x13c>
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d07b      	beq.n	8004b50 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8004a58:	2380      	movs	r3, #128	@ 0x80
 8004a5a:	62bb      	str	r3, [r7, #40]	@ 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8004a5c:	2318      	movs	r3, #24
 8004a5e:	627b      	str	r3, [r7, #36]	@ 0x24

    name = NULL;
 8004a60:	2300      	movs	r3, #0
 8004a62:	62fb      	str	r3, [r7, #44]	@ 0x2c
    mem  = -1;
 8004a64:	f04f 33ff 	mov.w	r3, #4294967295
 8004a68:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d045      	beq.n	8004afc <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d002      	beq.n	8004a7e <osThreadNew+0x6a>
        name = attr->name;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	699b      	ldr	r3, [r3, #24]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d002      	beq.n	8004a8c <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	699b      	ldr	r3, [r3, #24]
 8004a8a:	627b      	str	r3, [r7, #36]	@ 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004a8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d008      	beq.n	8004aa4 <osThreadNew+0x90>
 8004a92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a94:	2b38      	cmp	r3, #56	@ 0x38
 8004a96:	d805      	bhi.n	8004aa4 <osThreadNew+0x90>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	f003 0301 	and.w	r3, r3, #1
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d001      	beq.n	8004aa8 <osThreadNew+0x94>
        return (NULL);
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	e054      	b.n	8004b52 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	695b      	ldr	r3, [r3, #20]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d003      	beq.n	8004ab8 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	695b      	ldr	r3, [r3, #20]
 8004ab4:	089b      	lsrs	r3, r3, #2
 8004ab6:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	689b      	ldr	r3, [r3, #8]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d00e      	beq.n	8004ade <osThreadNew+0xca>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	68db      	ldr	r3, [r3, #12]
 8004ac4:	2ba7      	cmp	r3, #167	@ 0xa7
 8004ac6:	d90a      	bls.n	8004ade <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d006      	beq.n	8004ade <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	695b      	ldr	r3, [r3, #20]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d002      	beq.n	8004ade <osThreadNew+0xca>
        mem = 1;
 8004ad8:	2301      	movs	r3, #1
 8004ada:	623b      	str	r3, [r7, #32]
 8004adc:	e010      	b.n	8004b00 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	689b      	ldr	r3, [r3, #8]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d10c      	bne.n	8004b00 <osThreadNew+0xec>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	68db      	ldr	r3, [r3, #12]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d108      	bne.n	8004b00 <osThreadNew+0xec>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	691b      	ldr	r3, [r3, #16]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d104      	bne.n	8004b00 <osThreadNew+0xec>
          mem = 0;
 8004af6:	2300      	movs	r3, #0
 8004af8:	623b      	str	r3, [r7, #32]
 8004afa:	e001      	b.n	8004b00 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8004afc:	2300      	movs	r3, #0
 8004afe:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8004b00:	6a3b      	ldr	r3, [r7, #32]
 8004b02:	2b01      	cmp	r3, #1
 8004b04:	d110      	bne.n	8004b28 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8004b0a:	687a      	ldr	r2, [r7, #4]
 8004b0c:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004b0e:	9202      	str	r2, [sp, #8]
 8004b10:	9301      	str	r3, [sp, #4]
 8004b12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b14:	9300      	str	r3, [sp, #0]
 8004b16:	68bb      	ldr	r3, [r7, #8]
 8004b18:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004b1a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004b1c:	68f8      	ldr	r0, [r7, #12]
 8004b1e:	f001 fb77 	bl	8006210 <xTaskCreateStatic>
 8004b22:	4603      	mov	r3, r0
 8004b24:	613b      	str	r3, [r7, #16]
 8004b26:	e013      	b.n	8004b50 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8004b28:	6a3b      	ldr	r3, [r7, #32]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d110      	bne.n	8004b50 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004b2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b30:	b29a      	uxth	r2, r3
 8004b32:	f107 0310 	add.w	r3, r7, #16
 8004b36:	9301      	str	r3, [sp, #4]
 8004b38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b3a:	9300      	str	r3, [sp, #0]
 8004b3c:	68bb      	ldr	r3, [r7, #8]
 8004b3e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004b40:	68f8      	ldr	r0, [r7, #12]
 8004b42:	f001 fbcb 	bl	80062dc <xTaskCreate>
 8004b46:	4603      	mov	r3, r0
 8004b48:	2b01      	cmp	r3, #1
 8004b4a:	d001      	beq.n	8004b50 <osThreadNew+0x13c>
          hTask = NULL;
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004b50:	693b      	ldr	r3, [r7, #16]
}
 8004b52:	4618      	mov	r0, r3
 8004b54:	3730      	adds	r7, #48	@ 0x30
 8004b56:	46bd      	mov	sp, r7
 8004b58:	bd80      	pop	{r7, pc}
 8004b5a:	bf00      	nop
 8004b5c:	20000878 	.word	0x20000878

08004b60 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b086      	sub	sp, #24
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004b68:	f3ef 8305 	mrs	r3, IPSR
 8004b6c:	613b      	str	r3, [r7, #16]
  return(result);
 8004b6e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d10f      	bne.n	8004b94 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b74:	f3ef 8310 	mrs	r3, PRIMASK
 8004b78:	60fb      	str	r3, [r7, #12]
  return(result);
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d105      	bne.n	8004b8c <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004b80:	f3ef 8311 	mrs	r3, BASEPRI
 8004b84:	60bb      	str	r3, [r7, #8]
  return(result);
 8004b86:	68bb      	ldr	r3, [r7, #8]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d007      	beq.n	8004b9c <osDelay+0x3c>
 8004b8c:	4b0a      	ldr	r3, [pc, #40]	@ (8004bb8 <osDelay+0x58>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	2b02      	cmp	r3, #2
 8004b92:	d103      	bne.n	8004b9c <osDelay+0x3c>
    stat = osErrorISR;
 8004b94:	f06f 0305 	mvn.w	r3, #5
 8004b98:	617b      	str	r3, [r7, #20]
 8004b9a:	e007      	b.n	8004bac <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d002      	beq.n	8004bac <osDelay+0x4c>
      vTaskDelay(ticks);
 8004ba6:	6878      	ldr	r0, [r7, #4]
 8004ba8:	f001 fcf8 	bl	800659c <vTaskDelay>
    }
  }

  return (stat);
 8004bac:	697b      	ldr	r3, [r7, #20]
}
 8004bae:	4618      	mov	r0, r3
 8004bb0:	3718      	adds	r7, #24
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	bd80      	pop	{r7, pc}
 8004bb6:	bf00      	nop
 8004bb8:	20000878 	.word	0x20000878

08004bbc <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b08c      	sub	sp, #48	@ 0x30
 8004bc0:	af02      	add	r7, sp, #8
 8004bc2:	60f8      	str	r0, [r7, #12]
 8004bc4:	60b9      	str	r1, [r7, #8]
 8004bc6:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8004bc8:	2300      	movs	r3, #0
 8004bca:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004bcc:	f3ef 8305 	mrs	r3, IPSR
 8004bd0:	61bb      	str	r3, [r7, #24]
  return(result);
 8004bd2:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	f040 8086 	bne.w	8004ce6 <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004bda:	f3ef 8310 	mrs	r3, PRIMASK
 8004bde:	617b      	str	r3, [r7, #20]
  return(result);
 8004be0:	697b      	ldr	r3, [r7, #20]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d105      	bne.n	8004bf2 <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004be6:	f3ef 8311 	mrs	r3, BASEPRI
 8004bea:	613b      	str	r3, [r7, #16]
  return(result);
 8004bec:	693b      	ldr	r3, [r7, #16]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d003      	beq.n	8004bfa <osSemaphoreNew+0x3e>
 8004bf2:	4b3f      	ldr	r3, [pc, #252]	@ (8004cf0 <osSemaphoreNew+0x134>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	2b02      	cmp	r3, #2
 8004bf8:	d075      	beq.n	8004ce6 <osSemaphoreNew+0x12a>
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d072      	beq.n	8004ce6 <osSemaphoreNew+0x12a>
 8004c00:	68ba      	ldr	r2, [r7, #8]
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	429a      	cmp	r2, r3
 8004c06:	d86e      	bhi.n	8004ce6 <osSemaphoreNew+0x12a>
    mem = -1;
 8004c08:	f04f 33ff 	mov.w	r3, #4294967295
 8004c0c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d015      	beq.n	8004c40 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	689b      	ldr	r3, [r3, #8]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d006      	beq.n	8004c2a <osSemaphoreNew+0x6e>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	68db      	ldr	r3, [r3, #12]
 8004c20:	2b4f      	cmp	r3, #79	@ 0x4f
 8004c22:	d902      	bls.n	8004c2a <osSemaphoreNew+0x6e>
        mem = 1;
 8004c24:	2301      	movs	r3, #1
 8004c26:	623b      	str	r3, [r7, #32]
 8004c28:	e00c      	b.n	8004c44 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	689b      	ldr	r3, [r3, #8]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d108      	bne.n	8004c44 <osSemaphoreNew+0x88>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	68db      	ldr	r3, [r3, #12]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d104      	bne.n	8004c44 <osSemaphoreNew+0x88>
          mem = 0;
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	623b      	str	r3, [r7, #32]
 8004c3e:	e001      	b.n	8004c44 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 8004c40:	2300      	movs	r3, #0
 8004c42:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8004c44:	6a3b      	ldr	r3, [r7, #32]
 8004c46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c4a:	d04c      	beq.n	8004ce6 <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	2b01      	cmp	r3, #1
 8004c50:	d128      	bne.n	8004ca4 <osSemaphoreNew+0xe8>
        if (mem == 1) {
 8004c52:	6a3b      	ldr	r3, [r7, #32]
 8004c54:	2b01      	cmp	r3, #1
 8004c56:	d10a      	bne.n	8004c6e <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	689b      	ldr	r3, [r3, #8]
 8004c5c:	2203      	movs	r2, #3
 8004c5e:	9200      	str	r2, [sp, #0]
 8004c60:	2200      	movs	r2, #0
 8004c62:	2100      	movs	r1, #0
 8004c64:	2001      	movs	r0, #1
 8004c66:	f000 fa89 	bl	800517c <xQueueGenericCreateStatic>
 8004c6a:	6278      	str	r0, [r7, #36]	@ 0x24
 8004c6c:	e005      	b.n	8004c7a <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 8004c6e:	2203      	movs	r2, #3
 8004c70:	2100      	movs	r1, #0
 8004c72:	2001      	movs	r0, #1
 8004c74:	f000 fb09 	bl	800528a <xQueueGenericCreate>
 8004c78:	6278      	str	r0, [r7, #36]	@ 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8004c7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d022      	beq.n	8004cc6 <osSemaphoreNew+0x10a>
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d01f      	beq.n	8004cc6 <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8004c86:	2300      	movs	r3, #0
 8004c88:	2200      	movs	r2, #0
 8004c8a:	2100      	movs	r1, #0
 8004c8c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004c8e:	f000 fbd9 	bl	8005444 <xQueueGenericSend>
 8004c92:	4603      	mov	r3, r0
 8004c94:	2b01      	cmp	r3, #1
 8004c96:	d016      	beq.n	8004cc6 <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 8004c98:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004c9a:	f001 f8e3 	bl	8005e64 <vQueueDelete>
            hSemaphore = NULL;
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ca2:	e010      	b.n	8004cc6 <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 8004ca4:	6a3b      	ldr	r3, [r7, #32]
 8004ca6:	2b01      	cmp	r3, #1
 8004ca8:	d108      	bne.n	8004cbc <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	689b      	ldr	r3, [r3, #8]
 8004cae:	461a      	mov	r2, r3
 8004cb0:	68b9      	ldr	r1, [r7, #8]
 8004cb2:	68f8      	ldr	r0, [r7, #12]
 8004cb4:	f000 fb4f 	bl	8005356 <xQueueCreateCountingSemaphoreStatic>
 8004cb8:	6278      	str	r0, [r7, #36]	@ 0x24
 8004cba:	e004      	b.n	8004cc6 <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8004cbc:	68b9      	ldr	r1, [r7, #8]
 8004cbe:	68f8      	ldr	r0, [r7, #12]
 8004cc0:	f000 fb86 	bl	80053d0 <xQueueCreateCountingSemaphore>
 8004cc4:	6278      	str	r0, [r7, #36]	@ 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8004cc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d00c      	beq.n	8004ce6 <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d003      	beq.n	8004cda <osSemaphoreNew+0x11e>
          name = attr->name;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	61fb      	str	r3, [r7, #28]
 8004cd8:	e001      	b.n	8004cde <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 8004cda:	2300      	movs	r3, #0
 8004cdc:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8004cde:	69f9      	ldr	r1, [r7, #28]
 8004ce0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004ce2:	f001 fa0d 	bl	8006100 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8004ce6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004ce8:	4618      	mov	r0, r3
 8004cea:	3728      	adds	r7, #40	@ 0x28
 8004cec:	46bd      	mov	sp, r7
 8004cee:	bd80      	pop	{r7, pc}
 8004cf0:	20000878 	.word	0x20000878

08004cf4 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b088      	sub	sp, #32
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
 8004cfc:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8004d02:	2300      	movs	r3, #0
 8004d04:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8004d06:	69bb      	ldr	r3, [r7, #24]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d103      	bne.n	8004d14 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8004d0c:	f06f 0303 	mvn.w	r3, #3
 8004d10:	61fb      	str	r3, [r7, #28]
 8004d12:	e04b      	b.n	8004dac <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004d14:	f3ef 8305 	mrs	r3, IPSR
 8004d18:	617b      	str	r3, [r7, #20]
  return(result);
 8004d1a:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d10f      	bne.n	8004d40 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d20:	f3ef 8310 	mrs	r3, PRIMASK
 8004d24:	613b      	str	r3, [r7, #16]
  return(result);
 8004d26:	693b      	ldr	r3, [r7, #16]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d105      	bne.n	8004d38 <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004d2c:	f3ef 8311 	mrs	r3, BASEPRI
 8004d30:	60fb      	str	r3, [r7, #12]
  return(result);
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d026      	beq.n	8004d86 <osSemaphoreAcquire+0x92>
 8004d38:	4b1f      	ldr	r3, [pc, #124]	@ (8004db8 <osSemaphoreAcquire+0xc4>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	2b02      	cmp	r3, #2
 8004d3e:	d122      	bne.n	8004d86 <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d003      	beq.n	8004d4e <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 8004d46:	f06f 0303 	mvn.w	r3, #3
 8004d4a:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8004d4c:	e02d      	b.n	8004daa <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 8004d4e:	2300      	movs	r3, #0
 8004d50:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8004d52:	f107 0308 	add.w	r3, r7, #8
 8004d56:	461a      	mov	r2, r3
 8004d58:	2100      	movs	r1, #0
 8004d5a:	69b8      	ldr	r0, [r7, #24]
 8004d5c:	f000 ffb8 	bl	8005cd0 <xQueueReceiveFromISR>
 8004d60:	4603      	mov	r3, r0
 8004d62:	2b01      	cmp	r3, #1
 8004d64:	d003      	beq.n	8004d6e <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 8004d66:	f06f 0302 	mvn.w	r3, #2
 8004d6a:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8004d6c:	e01d      	b.n	8004daa <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 8004d6e:	68bb      	ldr	r3, [r7, #8]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d01a      	beq.n	8004daa <osSemaphoreAcquire+0xb6>
 8004d74:	4b11      	ldr	r3, [pc, #68]	@ (8004dbc <osSemaphoreAcquire+0xc8>)
 8004d76:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004d7a:	601a      	str	r2, [r3, #0]
 8004d7c:	f3bf 8f4f 	dsb	sy
 8004d80:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 8004d84:	e011      	b.n	8004daa <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8004d86:	6839      	ldr	r1, [r7, #0]
 8004d88:	69b8      	ldr	r0, [r7, #24]
 8004d8a:	f000 fe89 	bl	8005aa0 <xQueueSemaphoreTake>
 8004d8e:	4603      	mov	r3, r0
 8004d90:	2b01      	cmp	r3, #1
 8004d92:	d00b      	beq.n	8004dac <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d003      	beq.n	8004da2 <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 8004d9a:	f06f 0301 	mvn.w	r3, #1
 8004d9e:	61fb      	str	r3, [r7, #28]
 8004da0:	e004      	b.n	8004dac <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 8004da2:	f06f 0302 	mvn.w	r3, #2
 8004da6:	61fb      	str	r3, [r7, #28]
 8004da8:	e000      	b.n	8004dac <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 8004daa:	bf00      	nop
      }
    }
  }

  return (stat);
 8004dac:	69fb      	ldr	r3, [r7, #28]
}
 8004dae:	4618      	mov	r0, r3
 8004db0:	3720      	adds	r7, #32
 8004db2:	46bd      	mov	sp, r7
 8004db4:	bd80      	pop	{r7, pc}
 8004db6:	bf00      	nop
 8004db8:	20000878 	.word	0x20000878
 8004dbc:	e000ed04 	.word	0xe000ed04

08004dc0 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b088      	sub	sp, #32
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8004dcc:	2300      	movs	r3, #0
 8004dce:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8004dd0:	69bb      	ldr	r3, [r7, #24]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d103      	bne.n	8004dde <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8004dd6:	f06f 0303 	mvn.w	r3, #3
 8004dda:	61fb      	str	r3, [r7, #28]
 8004ddc:	e03e      	b.n	8004e5c <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004dde:	f3ef 8305 	mrs	r3, IPSR
 8004de2:	617b      	str	r3, [r7, #20]
  return(result);
 8004de4:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d10f      	bne.n	8004e0a <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004dea:	f3ef 8310 	mrs	r3, PRIMASK
 8004dee:	613b      	str	r3, [r7, #16]
  return(result);
 8004df0:	693b      	ldr	r3, [r7, #16]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d105      	bne.n	8004e02 <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004df6:	f3ef 8311 	mrs	r3, BASEPRI
 8004dfa:	60fb      	str	r3, [r7, #12]
  return(result);
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d01e      	beq.n	8004e40 <osSemaphoreRelease+0x80>
 8004e02:	4b19      	ldr	r3, [pc, #100]	@ (8004e68 <osSemaphoreRelease+0xa8>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	2b02      	cmp	r3, #2
 8004e08:	d11a      	bne.n	8004e40 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8004e0e:	f107 0308 	add.w	r3, r7, #8
 8004e12:	4619      	mov	r1, r3
 8004e14:	69b8      	ldr	r0, [r7, #24]
 8004e16:	f000 fcc2 	bl	800579e <xQueueGiveFromISR>
 8004e1a:	4603      	mov	r3, r0
 8004e1c:	2b01      	cmp	r3, #1
 8004e1e:	d003      	beq.n	8004e28 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 8004e20:	f06f 0302 	mvn.w	r3, #2
 8004e24:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8004e26:	e018      	b.n	8004e5a <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d015      	beq.n	8004e5a <osSemaphoreRelease+0x9a>
 8004e2e:	4b0f      	ldr	r3, [pc, #60]	@ (8004e6c <osSemaphoreRelease+0xac>)
 8004e30:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004e34:	601a      	str	r2, [r3, #0]
 8004e36:	f3bf 8f4f 	dsb	sy
 8004e3a:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8004e3e:	e00c      	b.n	8004e5a <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8004e40:	2300      	movs	r3, #0
 8004e42:	2200      	movs	r2, #0
 8004e44:	2100      	movs	r1, #0
 8004e46:	69b8      	ldr	r0, [r7, #24]
 8004e48:	f000 fafc 	bl	8005444 <xQueueGenericSend>
 8004e4c:	4603      	mov	r3, r0
 8004e4e:	2b01      	cmp	r3, #1
 8004e50:	d004      	beq.n	8004e5c <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 8004e52:	f06f 0302 	mvn.w	r3, #2
 8004e56:	61fb      	str	r3, [r7, #28]
 8004e58:	e000      	b.n	8004e5c <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8004e5a:	bf00      	nop
    }
  }

  return (stat);
 8004e5c:	69fb      	ldr	r3, [r7, #28]
}
 8004e5e:	4618      	mov	r0, r3
 8004e60:	3720      	adds	r7, #32
 8004e62:	46bd      	mov	sp, r7
 8004e64:	bd80      	pop	{r7, pc}
 8004e66:	bf00      	nop
 8004e68:	20000878 	.word	0x20000878
 8004e6c:	e000ed04 	.word	0xe000ed04

08004e70 <osSemaphoreGetCount>:

uint32_t osSemaphoreGetCount (osSemaphoreId_t semaphore_id) {
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b088      	sub	sp, #32
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	61bb      	str	r3, [r7, #24]
  uint32_t count;

  if (hSemaphore == NULL) {
 8004e7c:	69bb      	ldr	r3, [r7, #24]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d102      	bne.n	8004e88 <osSemaphoreGetCount+0x18>
    count = 0U;
 8004e82:	2300      	movs	r3, #0
 8004e84:	61fb      	str	r3, [r7, #28]
 8004e86:	e01e      	b.n	8004ec6 <osSemaphoreGetCount+0x56>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004e88:	f3ef 8305 	mrs	r3, IPSR
 8004e8c:	617b      	str	r3, [r7, #20]
  return(result);
 8004e8e:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d10f      	bne.n	8004eb4 <osSemaphoreGetCount+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e94:	f3ef 8310 	mrs	r3, PRIMASK
 8004e98:	613b      	str	r3, [r7, #16]
  return(result);
 8004e9a:	693b      	ldr	r3, [r7, #16]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d105      	bne.n	8004eac <osSemaphoreGetCount+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004ea0:	f3ef 8311 	mrs	r3, BASEPRI
 8004ea4:	60fb      	str	r3, [r7, #12]
  return(result);
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d008      	beq.n	8004ebe <osSemaphoreGetCount+0x4e>
 8004eac:	4b08      	ldr	r3, [pc, #32]	@ (8004ed0 <osSemaphoreGetCount+0x60>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	2b02      	cmp	r3, #2
 8004eb2:	d104      	bne.n	8004ebe <osSemaphoreGetCount+0x4e>
    count = uxQueueMessagesWaitingFromISR (hSemaphore);
 8004eb4:	69b8      	ldr	r0, [r7, #24]
 8004eb6:	f000 ffb4 	bl	8005e22 <uxQueueMessagesWaitingFromISR>
 8004eba:	61f8      	str	r0, [r7, #28]
 8004ebc:	e003      	b.n	8004ec6 <osSemaphoreGetCount+0x56>
  } else {
    count = (uint32_t)uxSemaphoreGetCount (hSemaphore);
 8004ebe:	69b8      	ldr	r0, [r7, #24]
 8004ec0:	f000 ff8e 	bl	8005de0 <uxQueueMessagesWaiting>
 8004ec4:	61f8      	str	r0, [r7, #28]
  }

  return (count);
 8004ec6:	69fb      	ldr	r3, [r7, #28]
}
 8004ec8:	4618      	mov	r0, r3
 8004eca:	3720      	adds	r7, #32
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	bd80      	pop	{r7, pc}
 8004ed0:	20000878 	.word	0x20000878

08004ed4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004ed4:	b480      	push	{r7}
 8004ed6:	b085      	sub	sp, #20
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	60f8      	str	r0, [r7, #12]
 8004edc:	60b9      	str	r1, [r7, #8]
 8004ede:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	4a07      	ldr	r2, [pc, #28]	@ (8004f00 <vApplicationGetIdleTaskMemory+0x2c>)
 8004ee4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004ee6:	68bb      	ldr	r3, [r7, #8]
 8004ee8:	4a06      	ldr	r2, [pc, #24]	@ (8004f04 <vApplicationGetIdleTaskMemory+0x30>)
 8004eea:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2280      	movs	r2, #128	@ 0x80
 8004ef0:	601a      	str	r2, [r3, #0]
}
 8004ef2:	bf00      	nop
 8004ef4:	3714      	adds	r7, #20
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efc:	4770      	bx	lr
 8004efe:	bf00      	nop
 8004f00:	2000087c 	.word	0x2000087c
 8004f04:	20000924 	.word	0x20000924

08004f08 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004f08:	b480      	push	{r7}
 8004f0a:	b085      	sub	sp, #20
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	60f8      	str	r0, [r7, #12]
 8004f10:	60b9      	str	r1, [r7, #8]
 8004f12:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	4a07      	ldr	r2, [pc, #28]	@ (8004f34 <vApplicationGetTimerTaskMemory+0x2c>)
 8004f18:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004f1a:	68bb      	ldr	r3, [r7, #8]
 8004f1c:	4a06      	ldr	r2, [pc, #24]	@ (8004f38 <vApplicationGetTimerTaskMemory+0x30>)
 8004f1e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004f26:	601a      	str	r2, [r3, #0]
}
 8004f28:	bf00      	nop
 8004f2a:	3714      	adds	r7, #20
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f32:	4770      	bx	lr
 8004f34:	20000b24 	.word	0x20000b24
 8004f38:	20000bcc 	.word	0x20000bcc

08004f3c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	b083      	sub	sp, #12
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	f103 0208 	add.w	r2, r3, #8
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	f04f 32ff 	mov.w	r2, #4294967295
 8004f54:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	f103 0208 	add.w	r2, r3, #8
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	f103 0208 	add.w	r2, r3, #8
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004f70:	bf00      	nop
 8004f72:	370c      	adds	r7, #12
 8004f74:	46bd      	mov	sp, r7
 8004f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7a:	4770      	bx	lr

08004f7c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004f7c:	b480      	push	{r7}
 8004f7e:	b083      	sub	sp, #12
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2200      	movs	r2, #0
 8004f88:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004f8a:	bf00      	nop
 8004f8c:	370c      	adds	r7, #12
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f94:	4770      	bx	lr

08004f96 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004f96:	b480      	push	{r7}
 8004f98:	b085      	sub	sp, #20
 8004f9a:	af00      	add	r7, sp, #0
 8004f9c:	6078      	str	r0, [r7, #4]
 8004f9e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	685b      	ldr	r3, [r3, #4]
 8004fa4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	68fa      	ldr	r2, [r7, #12]
 8004faa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	689a      	ldr	r2, [r3, #8]
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	689b      	ldr	r3, [r3, #8]
 8004fb8:	683a      	ldr	r2, [r7, #0]
 8004fba:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	683a      	ldr	r2, [r7, #0]
 8004fc0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	687a      	ldr	r2, [r7, #4]
 8004fc6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	1c5a      	adds	r2, r3, #1
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	601a      	str	r2, [r3, #0]
}
 8004fd2:	bf00      	nop
 8004fd4:	3714      	adds	r7, #20
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fdc:	4770      	bx	lr

08004fde <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004fde:	b480      	push	{r7}
 8004fe0:	b085      	sub	sp, #20
 8004fe2:	af00      	add	r7, sp, #0
 8004fe4:	6078      	str	r0, [r7, #4]
 8004fe6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004fee:	68bb      	ldr	r3, [r7, #8]
 8004ff0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ff4:	d103      	bne.n	8004ffe <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	691b      	ldr	r3, [r3, #16]
 8004ffa:	60fb      	str	r3, [r7, #12]
 8004ffc:	e00c      	b.n	8005018 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	3308      	adds	r3, #8
 8005002:	60fb      	str	r3, [r7, #12]
 8005004:	e002      	b.n	800500c <vListInsert+0x2e>
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	685b      	ldr	r3, [r3, #4]
 800500a:	60fb      	str	r3, [r7, #12]
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	685b      	ldr	r3, [r3, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	68ba      	ldr	r2, [r7, #8]
 8005014:	429a      	cmp	r2, r3
 8005016:	d2f6      	bcs.n	8005006 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	685a      	ldr	r2, [r3, #4]
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	685b      	ldr	r3, [r3, #4]
 8005024:	683a      	ldr	r2, [r7, #0]
 8005026:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	68fa      	ldr	r2, [r7, #12]
 800502c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	683a      	ldr	r2, [r7, #0]
 8005032:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	687a      	ldr	r2, [r7, #4]
 8005038:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	1c5a      	adds	r2, r3, #1
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	601a      	str	r2, [r3, #0]
}
 8005044:	bf00      	nop
 8005046:	3714      	adds	r7, #20
 8005048:	46bd      	mov	sp, r7
 800504a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504e:	4770      	bx	lr

08005050 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005050:	b480      	push	{r7}
 8005052:	b085      	sub	sp, #20
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	691b      	ldr	r3, [r3, #16]
 800505c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	685b      	ldr	r3, [r3, #4]
 8005062:	687a      	ldr	r2, [r7, #4]
 8005064:	6892      	ldr	r2, [r2, #8]
 8005066:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	689b      	ldr	r3, [r3, #8]
 800506c:	687a      	ldr	r2, [r7, #4]
 800506e:	6852      	ldr	r2, [r2, #4]
 8005070:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	685b      	ldr	r3, [r3, #4]
 8005076:	687a      	ldr	r2, [r7, #4]
 8005078:	429a      	cmp	r2, r3
 800507a:	d103      	bne.n	8005084 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	689a      	ldr	r2, [r3, #8]
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2200      	movs	r2, #0
 8005088:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	1e5a      	subs	r2, r3, #1
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
}
 8005098:	4618      	mov	r0, r3
 800509a:	3714      	adds	r7, #20
 800509c:	46bd      	mov	sp, r7
 800509e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a2:	4770      	bx	lr

080050a4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b084      	sub	sp, #16
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
 80050ac:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d10d      	bne.n	80050d4 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80050b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050bc:	b672      	cpsid	i
 80050be:	f383 8811 	msr	BASEPRI, r3
 80050c2:	f3bf 8f6f 	isb	sy
 80050c6:	f3bf 8f4f 	dsb	sy
 80050ca:	b662      	cpsie	i
 80050cc:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80050ce:	bf00      	nop
 80050d0:	bf00      	nop
 80050d2:	e7fd      	b.n	80050d0 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 80050d4:	f002 fd72 	bl	8007bbc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681a      	ldr	r2, [r3, #0]
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050e0:	68f9      	ldr	r1, [r7, #12]
 80050e2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80050e4:	fb01 f303 	mul.w	r3, r1, r3
 80050e8:	441a      	add	r2, r3
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	2200      	movs	r2, #0
 80050f2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681a      	ldr	r2, [r3, #0]
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681a      	ldr	r2, [r3, #0]
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005104:	3b01      	subs	r3, #1
 8005106:	68f9      	ldr	r1, [r7, #12]
 8005108:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800510a:	fb01 f303 	mul.w	r3, r1, r3
 800510e:	441a      	add	r2, r3
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	22ff      	movs	r2, #255	@ 0xff
 8005118:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	22ff      	movs	r2, #255	@ 0xff
 8005120:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d114      	bne.n	8005154 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	691b      	ldr	r3, [r3, #16]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d01a      	beq.n	8005168 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	3310      	adds	r3, #16
 8005136:	4618      	mov	r0, r3
 8005138:	f001 fd14 	bl	8006b64 <xTaskRemoveFromEventList>
 800513c:	4603      	mov	r3, r0
 800513e:	2b00      	cmp	r3, #0
 8005140:	d012      	beq.n	8005168 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005142:	4b0d      	ldr	r3, [pc, #52]	@ (8005178 <xQueueGenericReset+0xd4>)
 8005144:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005148:	601a      	str	r2, [r3, #0]
 800514a:	f3bf 8f4f 	dsb	sy
 800514e:	f3bf 8f6f 	isb	sy
 8005152:	e009      	b.n	8005168 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	3310      	adds	r3, #16
 8005158:	4618      	mov	r0, r3
 800515a:	f7ff feef 	bl	8004f3c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	3324      	adds	r3, #36	@ 0x24
 8005162:	4618      	mov	r0, r3
 8005164:	f7ff feea 	bl	8004f3c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005168:	f002 fd5e 	bl	8007c28 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800516c:	2301      	movs	r3, #1
}
 800516e:	4618      	mov	r0, r3
 8005170:	3710      	adds	r7, #16
 8005172:	46bd      	mov	sp, r7
 8005174:	bd80      	pop	{r7, pc}
 8005176:	bf00      	nop
 8005178:	e000ed04 	.word	0xe000ed04

0800517c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800517c:	b580      	push	{r7, lr}
 800517e:	b08e      	sub	sp, #56	@ 0x38
 8005180:	af02      	add	r7, sp, #8
 8005182:	60f8      	str	r0, [r7, #12]
 8005184:	60b9      	str	r1, [r7, #8]
 8005186:	607a      	str	r2, [r7, #4]
 8005188:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d10d      	bne.n	80051ac <xQueueGenericCreateStatic+0x30>
	__asm volatile
 8005190:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005194:	b672      	cpsid	i
 8005196:	f383 8811 	msr	BASEPRI, r3
 800519a:	f3bf 8f6f 	isb	sy
 800519e:	f3bf 8f4f 	dsb	sy
 80051a2:	b662      	cpsie	i
 80051a4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80051a6:	bf00      	nop
 80051a8:	bf00      	nop
 80051aa:	e7fd      	b.n	80051a8 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d10d      	bne.n	80051ce <xQueueGenericCreateStatic+0x52>
	__asm volatile
 80051b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051b6:	b672      	cpsid	i
 80051b8:	f383 8811 	msr	BASEPRI, r3
 80051bc:	f3bf 8f6f 	isb	sy
 80051c0:	f3bf 8f4f 	dsb	sy
 80051c4:	b662      	cpsie	i
 80051c6:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80051c8:	bf00      	nop
 80051ca:	bf00      	nop
 80051cc:	e7fd      	b.n	80051ca <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d002      	beq.n	80051da <xQueueGenericCreateStatic+0x5e>
 80051d4:	68bb      	ldr	r3, [r7, #8]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d001      	beq.n	80051de <xQueueGenericCreateStatic+0x62>
 80051da:	2301      	movs	r3, #1
 80051dc:	e000      	b.n	80051e0 <xQueueGenericCreateStatic+0x64>
 80051de:	2300      	movs	r3, #0
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d10d      	bne.n	8005200 <xQueueGenericCreateStatic+0x84>
	__asm volatile
 80051e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051e8:	b672      	cpsid	i
 80051ea:	f383 8811 	msr	BASEPRI, r3
 80051ee:	f3bf 8f6f 	isb	sy
 80051f2:	f3bf 8f4f 	dsb	sy
 80051f6:	b662      	cpsie	i
 80051f8:	623b      	str	r3, [r7, #32]
}
 80051fa:	bf00      	nop
 80051fc:	bf00      	nop
 80051fe:	e7fd      	b.n	80051fc <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d102      	bne.n	800520c <xQueueGenericCreateStatic+0x90>
 8005206:	68bb      	ldr	r3, [r7, #8]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d101      	bne.n	8005210 <xQueueGenericCreateStatic+0x94>
 800520c:	2301      	movs	r3, #1
 800520e:	e000      	b.n	8005212 <xQueueGenericCreateStatic+0x96>
 8005210:	2300      	movs	r3, #0
 8005212:	2b00      	cmp	r3, #0
 8005214:	d10d      	bne.n	8005232 <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 8005216:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800521a:	b672      	cpsid	i
 800521c:	f383 8811 	msr	BASEPRI, r3
 8005220:	f3bf 8f6f 	isb	sy
 8005224:	f3bf 8f4f 	dsb	sy
 8005228:	b662      	cpsie	i
 800522a:	61fb      	str	r3, [r7, #28]
}
 800522c:	bf00      	nop
 800522e:	bf00      	nop
 8005230:	e7fd      	b.n	800522e <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005232:	2350      	movs	r3, #80	@ 0x50
 8005234:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005236:	697b      	ldr	r3, [r7, #20]
 8005238:	2b50      	cmp	r3, #80	@ 0x50
 800523a:	d00d      	beq.n	8005258 <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 800523c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005240:	b672      	cpsid	i
 8005242:	f383 8811 	msr	BASEPRI, r3
 8005246:	f3bf 8f6f 	isb	sy
 800524a:	f3bf 8f4f 	dsb	sy
 800524e:	b662      	cpsie	i
 8005250:	61bb      	str	r3, [r7, #24]
}
 8005252:	bf00      	nop
 8005254:	bf00      	nop
 8005256:	e7fd      	b.n	8005254 <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005258:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800525e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005260:	2b00      	cmp	r3, #0
 8005262:	d00d      	beq.n	8005280 <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005264:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005266:	2201      	movs	r2, #1
 8005268:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800526c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8005270:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005272:	9300      	str	r3, [sp, #0]
 8005274:	4613      	mov	r3, r2
 8005276:	687a      	ldr	r2, [r7, #4]
 8005278:	68b9      	ldr	r1, [r7, #8]
 800527a:	68f8      	ldr	r0, [r7, #12]
 800527c:	f000 f848 	bl	8005310 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005280:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8005282:	4618      	mov	r0, r3
 8005284:	3730      	adds	r7, #48	@ 0x30
 8005286:	46bd      	mov	sp, r7
 8005288:	bd80      	pop	{r7, pc}

0800528a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800528a:	b580      	push	{r7, lr}
 800528c:	b08a      	sub	sp, #40	@ 0x28
 800528e:	af02      	add	r7, sp, #8
 8005290:	60f8      	str	r0, [r7, #12]
 8005292:	60b9      	str	r1, [r7, #8]
 8005294:	4613      	mov	r3, r2
 8005296:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d10d      	bne.n	80052ba <xQueueGenericCreate+0x30>
	__asm volatile
 800529e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052a2:	b672      	cpsid	i
 80052a4:	f383 8811 	msr	BASEPRI, r3
 80052a8:	f3bf 8f6f 	isb	sy
 80052ac:	f3bf 8f4f 	dsb	sy
 80052b0:	b662      	cpsie	i
 80052b2:	613b      	str	r3, [r7, #16]
}
 80052b4:	bf00      	nop
 80052b6:	bf00      	nop
 80052b8:	e7fd      	b.n	80052b6 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80052ba:	68bb      	ldr	r3, [r7, #8]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d102      	bne.n	80052c6 <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80052c0:	2300      	movs	r3, #0
 80052c2:	61fb      	str	r3, [r7, #28]
 80052c4:	e004      	b.n	80052d0 <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	68ba      	ldr	r2, [r7, #8]
 80052ca:	fb02 f303 	mul.w	r3, r2, r3
 80052ce:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80052d0:	69fb      	ldr	r3, [r7, #28]
 80052d2:	3350      	adds	r3, #80	@ 0x50
 80052d4:	4618      	mov	r0, r3
 80052d6:	f002 fd9f 	bl	8007e18 <pvPortMalloc>
 80052da:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80052dc:	69bb      	ldr	r3, [r7, #24]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d011      	beq.n	8005306 <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80052e2:	69bb      	ldr	r3, [r7, #24]
 80052e4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80052e6:	697b      	ldr	r3, [r7, #20]
 80052e8:	3350      	adds	r3, #80	@ 0x50
 80052ea:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80052ec:	69bb      	ldr	r3, [r7, #24]
 80052ee:	2200      	movs	r2, #0
 80052f0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80052f4:	79fa      	ldrb	r2, [r7, #7]
 80052f6:	69bb      	ldr	r3, [r7, #24]
 80052f8:	9300      	str	r3, [sp, #0]
 80052fa:	4613      	mov	r3, r2
 80052fc:	697a      	ldr	r2, [r7, #20]
 80052fe:	68b9      	ldr	r1, [r7, #8]
 8005300:	68f8      	ldr	r0, [r7, #12]
 8005302:	f000 f805 	bl	8005310 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005306:	69bb      	ldr	r3, [r7, #24]
	}
 8005308:	4618      	mov	r0, r3
 800530a:	3720      	adds	r7, #32
 800530c:	46bd      	mov	sp, r7
 800530e:	bd80      	pop	{r7, pc}

08005310 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b084      	sub	sp, #16
 8005314:	af00      	add	r7, sp, #0
 8005316:	60f8      	str	r0, [r7, #12]
 8005318:	60b9      	str	r1, [r7, #8]
 800531a:	607a      	str	r2, [r7, #4]
 800531c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800531e:	68bb      	ldr	r3, [r7, #8]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d103      	bne.n	800532c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005324:	69bb      	ldr	r3, [r7, #24]
 8005326:	69ba      	ldr	r2, [r7, #24]
 8005328:	601a      	str	r2, [r3, #0]
 800532a:	e002      	b.n	8005332 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800532c:	69bb      	ldr	r3, [r7, #24]
 800532e:	687a      	ldr	r2, [r7, #4]
 8005330:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005332:	69bb      	ldr	r3, [r7, #24]
 8005334:	68fa      	ldr	r2, [r7, #12]
 8005336:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005338:	69bb      	ldr	r3, [r7, #24]
 800533a:	68ba      	ldr	r2, [r7, #8]
 800533c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800533e:	2101      	movs	r1, #1
 8005340:	69b8      	ldr	r0, [r7, #24]
 8005342:	f7ff feaf 	bl	80050a4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005346:	69bb      	ldr	r3, [r7, #24]
 8005348:	78fa      	ldrb	r2, [r7, #3]
 800534a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800534e:	bf00      	nop
 8005350:	3710      	adds	r7, #16
 8005352:	46bd      	mov	sp, r7
 8005354:	bd80      	pop	{r7, pc}

08005356 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8005356:	b580      	push	{r7, lr}
 8005358:	b08a      	sub	sp, #40	@ 0x28
 800535a:	af02      	add	r7, sp, #8
 800535c:	60f8      	str	r0, [r7, #12]
 800535e:	60b9      	str	r1, [r7, #8]
 8005360:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d10d      	bne.n	8005384 <xQueueCreateCountingSemaphoreStatic+0x2e>
	__asm volatile
 8005368:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800536c:	b672      	cpsid	i
 800536e:	f383 8811 	msr	BASEPRI, r3
 8005372:	f3bf 8f6f 	isb	sy
 8005376:	f3bf 8f4f 	dsb	sy
 800537a:	b662      	cpsie	i
 800537c:	61bb      	str	r3, [r7, #24]
}
 800537e:	bf00      	nop
 8005380:	bf00      	nop
 8005382:	e7fd      	b.n	8005380 <xQueueCreateCountingSemaphoreStatic+0x2a>
		configASSERT( uxInitialCount <= uxMaxCount );
 8005384:	68ba      	ldr	r2, [r7, #8]
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	429a      	cmp	r2, r3
 800538a:	d90d      	bls.n	80053a8 <xQueueCreateCountingSemaphoreStatic+0x52>
	__asm volatile
 800538c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005390:	b672      	cpsid	i
 8005392:	f383 8811 	msr	BASEPRI, r3
 8005396:	f3bf 8f6f 	isb	sy
 800539a:	f3bf 8f4f 	dsb	sy
 800539e:	b662      	cpsie	i
 80053a0:	617b      	str	r3, [r7, #20]
}
 80053a2:	bf00      	nop
 80053a4:	bf00      	nop
 80053a6:	e7fd      	b.n	80053a4 <xQueueCreateCountingSemaphoreStatic+0x4e>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80053a8:	2302      	movs	r3, #2
 80053aa:	9300      	str	r3, [sp, #0]
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2200      	movs	r2, #0
 80053b0:	2100      	movs	r1, #0
 80053b2:	68f8      	ldr	r0, [r7, #12]
 80053b4:	f7ff fee2 	bl	800517c <xQueueGenericCreateStatic>
 80053b8:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80053ba:	69fb      	ldr	r3, [r7, #28]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d002      	beq.n	80053c6 <xQueueCreateCountingSemaphoreStatic+0x70>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80053c0:	69fb      	ldr	r3, [r7, #28]
 80053c2:	68ba      	ldr	r2, [r7, #8]
 80053c4:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80053c6:	69fb      	ldr	r3, [r7, #28]
	}
 80053c8:	4618      	mov	r0, r3
 80053ca:	3720      	adds	r7, #32
 80053cc:	46bd      	mov	sp, r7
 80053ce:	bd80      	pop	{r7, pc}

080053d0 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b086      	sub	sp, #24
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
 80053d8:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d10d      	bne.n	80053fc <xQueueCreateCountingSemaphore+0x2c>
	__asm volatile
 80053e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053e4:	b672      	cpsid	i
 80053e6:	f383 8811 	msr	BASEPRI, r3
 80053ea:	f3bf 8f6f 	isb	sy
 80053ee:	f3bf 8f4f 	dsb	sy
 80053f2:	b662      	cpsie	i
 80053f4:	613b      	str	r3, [r7, #16]
}
 80053f6:	bf00      	nop
 80053f8:	bf00      	nop
 80053fa:	e7fd      	b.n	80053f8 <xQueueCreateCountingSemaphore+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 80053fc:	683a      	ldr	r2, [r7, #0]
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	429a      	cmp	r2, r3
 8005402:	d90d      	bls.n	8005420 <xQueueCreateCountingSemaphore+0x50>
	__asm volatile
 8005404:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005408:	b672      	cpsid	i
 800540a:	f383 8811 	msr	BASEPRI, r3
 800540e:	f3bf 8f6f 	isb	sy
 8005412:	f3bf 8f4f 	dsb	sy
 8005416:	b662      	cpsie	i
 8005418:	60fb      	str	r3, [r7, #12]
}
 800541a:	bf00      	nop
 800541c:	bf00      	nop
 800541e:	e7fd      	b.n	800541c <xQueueCreateCountingSemaphore+0x4c>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8005420:	2202      	movs	r2, #2
 8005422:	2100      	movs	r1, #0
 8005424:	6878      	ldr	r0, [r7, #4]
 8005426:	f7ff ff30 	bl	800528a <xQueueGenericCreate>
 800542a:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800542c:	697b      	ldr	r3, [r7, #20]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d002      	beq.n	8005438 <xQueueCreateCountingSemaphore+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8005432:	697b      	ldr	r3, [r7, #20]
 8005434:	683a      	ldr	r2, [r7, #0]
 8005436:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8005438:	697b      	ldr	r3, [r7, #20]
	}
 800543a:	4618      	mov	r0, r3
 800543c:	3718      	adds	r7, #24
 800543e:	46bd      	mov	sp, r7
 8005440:	bd80      	pop	{r7, pc}
	...

08005444 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005444:	b580      	push	{r7, lr}
 8005446:	b08e      	sub	sp, #56	@ 0x38
 8005448:	af00      	add	r7, sp, #0
 800544a:	60f8      	str	r0, [r7, #12]
 800544c:	60b9      	str	r1, [r7, #8]
 800544e:	607a      	str	r2, [r7, #4]
 8005450:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005452:	2300      	movs	r3, #0
 8005454:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800545a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800545c:	2b00      	cmp	r3, #0
 800545e:	d10d      	bne.n	800547c <xQueueGenericSend+0x38>
	__asm volatile
 8005460:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005464:	b672      	cpsid	i
 8005466:	f383 8811 	msr	BASEPRI, r3
 800546a:	f3bf 8f6f 	isb	sy
 800546e:	f3bf 8f4f 	dsb	sy
 8005472:	b662      	cpsie	i
 8005474:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005476:	bf00      	nop
 8005478:	bf00      	nop
 800547a:	e7fd      	b.n	8005478 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d103      	bne.n	800548a <xQueueGenericSend+0x46>
 8005482:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005484:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005486:	2b00      	cmp	r3, #0
 8005488:	d101      	bne.n	800548e <xQueueGenericSend+0x4a>
 800548a:	2301      	movs	r3, #1
 800548c:	e000      	b.n	8005490 <xQueueGenericSend+0x4c>
 800548e:	2300      	movs	r3, #0
 8005490:	2b00      	cmp	r3, #0
 8005492:	d10d      	bne.n	80054b0 <xQueueGenericSend+0x6c>
	__asm volatile
 8005494:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005498:	b672      	cpsid	i
 800549a:	f383 8811 	msr	BASEPRI, r3
 800549e:	f3bf 8f6f 	isb	sy
 80054a2:	f3bf 8f4f 	dsb	sy
 80054a6:	b662      	cpsie	i
 80054a8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80054aa:	bf00      	nop
 80054ac:	bf00      	nop
 80054ae:	e7fd      	b.n	80054ac <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	2b02      	cmp	r3, #2
 80054b4:	d103      	bne.n	80054be <xQueueGenericSend+0x7a>
 80054b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054ba:	2b01      	cmp	r3, #1
 80054bc:	d101      	bne.n	80054c2 <xQueueGenericSend+0x7e>
 80054be:	2301      	movs	r3, #1
 80054c0:	e000      	b.n	80054c4 <xQueueGenericSend+0x80>
 80054c2:	2300      	movs	r3, #0
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d10d      	bne.n	80054e4 <xQueueGenericSend+0xa0>
	__asm volatile
 80054c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054cc:	b672      	cpsid	i
 80054ce:	f383 8811 	msr	BASEPRI, r3
 80054d2:	f3bf 8f6f 	isb	sy
 80054d6:	f3bf 8f4f 	dsb	sy
 80054da:	b662      	cpsie	i
 80054dc:	623b      	str	r3, [r7, #32]
}
 80054de:	bf00      	nop
 80054e0:	bf00      	nop
 80054e2:	e7fd      	b.n	80054e0 <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80054e4:	f001 fd0c 	bl	8006f00 <xTaskGetSchedulerState>
 80054e8:	4603      	mov	r3, r0
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d102      	bne.n	80054f4 <xQueueGenericSend+0xb0>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d101      	bne.n	80054f8 <xQueueGenericSend+0xb4>
 80054f4:	2301      	movs	r3, #1
 80054f6:	e000      	b.n	80054fa <xQueueGenericSend+0xb6>
 80054f8:	2300      	movs	r3, #0
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d10d      	bne.n	800551a <xQueueGenericSend+0xd6>
	__asm volatile
 80054fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005502:	b672      	cpsid	i
 8005504:	f383 8811 	msr	BASEPRI, r3
 8005508:	f3bf 8f6f 	isb	sy
 800550c:	f3bf 8f4f 	dsb	sy
 8005510:	b662      	cpsie	i
 8005512:	61fb      	str	r3, [r7, #28]
}
 8005514:	bf00      	nop
 8005516:	bf00      	nop
 8005518:	e7fd      	b.n	8005516 <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800551a:	f002 fb4f 	bl	8007bbc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800551e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005520:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005522:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005524:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005526:	429a      	cmp	r2, r3
 8005528:	d302      	bcc.n	8005530 <xQueueGenericSend+0xec>
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	2b02      	cmp	r3, #2
 800552e:	d129      	bne.n	8005584 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005530:	683a      	ldr	r2, [r7, #0]
 8005532:	68b9      	ldr	r1, [r7, #8]
 8005534:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005536:	f000 fcd3 	bl	8005ee0 <prvCopyDataToQueue>
 800553a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800553c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800553e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005540:	2b00      	cmp	r3, #0
 8005542:	d010      	beq.n	8005566 <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005544:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005546:	3324      	adds	r3, #36	@ 0x24
 8005548:	4618      	mov	r0, r3
 800554a:	f001 fb0b 	bl	8006b64 <xTaskRemoveFromEventList>
 800554e:	4603      	mov	r3, r0
 8005550:	2b00      	cmp	r3, #0
 8005552:	d013      	beq.n	800557c <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005554:	4b3f      	ldr	r3, [pc, #252]	@ (8005654 <xQueueGenericSend+0x210>)
 8005556:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800555a:	601a      	str	r2, [r3, #0]
 800555c:	f3bf 8f4f 	dsb	sy
 8005560:	f3bf 8f6f 	isb	sy
 8005564:	e00a      	b.n	800557c <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005566:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005568:	2b00      	cmp	r3, #0
 800556a:	d007      	beq.n	800557c <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800556c:	4b39      	ldr	r3, [pc, #228]	@ (8005654 <xQueueGenericSend+0x210>)
 800556e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005572:	601a      	str	r2, [r3, #0]
 8005574:	f3bf 8f4f 	dsb	sy
 8005578:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800557c:	f002 fb54 	bl	8007c28 <vPortExitCritical>
				return pdPASS;
 8005580:	2301      	movs	r3, #1
 8005582:	e063      	b.n	800564c <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d103      	bne.n	8005592 <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800558a:	f002 fb4d 	bl	8007c28 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800558e:	2300      	movs	r3, #0
 8005590:	e05c      	b.n	800564c <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005592:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005594:	2b00      	cmp	r3, #0
 8005596:	d106      	bne.n	80055a6 <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005598:	f107 0314 	add.w	r3, r7, #20
 800559c:	4618      	mov	r0, r3
 800559e:	f001 fb47 	bl	8006c30 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80055a2:	2301      	movs	r3, #1
 80055a4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80055a6:	f002 fb3f 	bl	8007c28 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80055aa:	f001 f8a3 	bl	80066f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80055ae:	f002 fb05 	bl	8007bbc <vPortEnterCritical>
 80055b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055b4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80055b8:	b25b      	sxtb	r3, r3
 80055ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055be:	d103      	bne.n	80055c8 <xQueueGenericSend+0x184>
 80055c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055c2:	2200      	movs	r2, #0
 80055c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80055c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055ca:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80055ce:	b25b      	sxtb	r3, r3
 80055d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055d4:	d103      	bne.n	80055de <xQueueGenericSend+0x19a>
 80055d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055d8:	2200      	movs	r2, #0
 80055da:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80055de:	f002 fb23 	bl	8007c28 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80055e2:	1d3a      	adds	r2, r7, #4
 80055e4:	f107 0314 	add.w	r3, r7, #20
 80055e8:	4611      	mov	r1, r2
 80055ea:	4618      	mov	r0, r3
 80055ec:	f001 fb36 	bl	8006c5c <xTaskCheckForTimeOut>
 80055f0:	4603      	mov	r3, r0
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d124      	bne.n	8005640 <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80055f6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80055f8:	f000 fd6a 	bl	80060d0 <prvIsQueueFull>
 80055fc:	4603      	mov	r3, r0
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d018      	beq.n	8005634 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005602:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005604:	3310      	adds	r3, #16
 8005606:	687a      	ldr	r2, [r7, #4]
 8005608:	4611      	mov	r1, r2
 800560a:	4618      	mov	r0, r3
 800560c:	f001 fa54 	bl	8006ab8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005610:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005612:	f000 fcf5 	bl	8006000 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005616:	f001 f87b 	bl	8006710 <xTaskResumeAll>
 800561a:	4603      	mov	r3, r0
 800561c:	2b00      	cmp	r3, #0
 800561e:	f47f af7c 	bne.w	800551a <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 8005622:	4b0c      	ldr	r3, [pc, #48]	@ (8005654 <xQueueGenericSend+0x210>)
 8005624:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005628:	601a      	str	r2, [r3, #0]
 800562a:	f3bf 8f4f 	dsb	sy
 800562e:	f3bf 8f6f 	isb	sy
 8005632:	e772      	b.n	800551a <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005634:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005636:	f000 fce3 	bl	8006000 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800563a:	f001 f869 	bl	8006710 <xTaskResumeAll>
 800563e:	e76c      	b.n	800551a <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005640:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005642:	f000 fcdd 	bl	8006000 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005646:	f001 f863 	bl	8006710 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800564a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800564c:	4618      	mov	r0, r3
 800564e:	3738      	adds	r7, #56	@ 0x38
 8005650:	46bd      	mov	sp, r7
 8005652:	bd80      	pop	{r7, pc}
 8005654:	e000ed04 	.word	0xe000ed04

08005658 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b08e      	sub	sp, #56	@ 0x38
 800565c:	af00      	add	r7, sp, #0
 800565e:	60f8      	str	r0, [r7, #12]
 8005660:	60b9      	str	r1, [r7, #8]
 8005662:	607a      	str	r2, [r7, #4]
 8005664:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800566a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800566c:	2b00      	cmp	r3, #0
 800566e:	d10d      	bne.n	800568c <xQueueGenericSendFromISR+0x34>
	__asm volatile
 8005670:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005674:	b672      	cpsid	i
 8005676:	f383 8811 	msr	BASEPRI, r3
 800567a:	f3bf 8f6f 	isb	sy
 800567e:	f3bf 8f4f 	dsb	sy
 8005682:	b662      	cpsie	i
 8005684:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005686:	bf00      	nop
 8005688:	bf00      	nop
 800568a:	e7fd      	b.n	8005688 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800568c:	68bb      	ldr	r3, [r7, #8]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d103      	bne.n	800569a <xQueueGenericSendFromISR+0x42>
 8005692:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005694:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005696:	2b00      	cmp	r3, #0
 8005698:	d101      	bne.n	800569e <xQueueGenericSendFromISR+0x46>
 800569a:	2301      	movs	r3, #1
 800569c:	e000      	b.n	80056a0 <xQueueGenericSendFromISR+0x48>
 800569e:	2300      	movs	r3, #0
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d10d      	bne.n	80056c0 <xQueueGenericSendFromISR+0x68>
	__asm volatile
 80056a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056a8:	b672      	cpsid	i
 80056aa:	f383 8811 	msr	BASEPRI, r3
 80056ae:	f3bf 8f6f 	isb	sy
 80056b2:	f3bf 8f4f 	dsb	sy
 80056b6:	b662      	cpsie	i
 80056b8:	623b      	str	r3, [r7, #32]
}
 80056ba:	bf00      	nop
 80056bc:	bf00      	nop
 80056be:	e7fd      	b.n	80056bc <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	2b02      	cmp	r3, #2
 80056c4:	d103      	bne.n	80056ce <xQueueGenericSendFromISR+0x76>
 80056c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056ca:	2b01      	cmp	r3, #1
 80056cc:	d101      	bne.n	80056d2 <xQueueGenericSendFromISR+0x7a>
 80056ce:	2301      	movs	r3, #1
 80056d0:	e000      	b.n	80056d4 <xQueueGenericSendFromISR+0x7c>
 80056d2:	2300      	movs	r3, #0
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d10d      	bne.n	80056f4 <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 80056d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056dc:	b672      	cpsid	i
 80056de:	f383 8811 	msr	BASEPRI, r3
 80056e2:	f3bf 8f6f 	isb	sy
 80056e6:	f3bf 8f4f 	dsb	sy
 80056ea:	b662      	cpsie	i
 80056ec:	61fb      	str	r3, [r7, #28]
}
 80056ee:	bf00      	nop
 80056f0:	bf00      	nop
 80056f2:	e7fd      	b.n	80056f0 <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80056f4:	f002 fb4a 	bl	8007d8c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80056f8:	f3ef 8211 	mrs	r2, BASEPRI
 80056fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005700:	b672      	cpsid	i
 8005702:	f383 8811 	msr	BASEPRI, r3
 8005706:	f3bf 8f6f 	isb	sy
 800570a:	f3bf 8f4f 	dsb	sy
 800570e:	b662      	cpsie	i
 8005710:	61ba      	str	r2, [r7, #24]
 8005712:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005714:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005716:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005718:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800571a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800571c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800571e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005720:	429a      	cmp	r2, r3
 8005722:	d302      	bcc.n	800572a <xQueueGenericSendFromISR+0xd2>
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	2b02      	cmp	r3, #2
 8005728:	d12c      	bne.n	8005784 <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800572a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800572c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005730:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005734:	683a      	ldr	r2, [r7, #0]
 8005736:	68b9      	ldr	r1, [r7, #8]
 8005738:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800573a:	f000 fbd1 	bl	8005ee0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800573e:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8005742:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005746:	d112      	bne.n	800576e <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005748:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800574a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800574c:	2b00      	cmp	r3, #0
 800574e:	d016      	beq.n	800577e <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005750:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005752:	3324      	adds	r3, #36	@ 0x24
 8005754:	4618      	mov	r0, r3
 8005756:	f001 fa05 	bl	8006b64 <xTaskRemoveFromEventList>
 800575a:	4603      	mov	r3, r0
 800575c:	2b00      	cmp	r3, #0
 800575e:	d00e      	beq.n	800577e <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d00b      	beq.n	800577e <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2201      	movs	r2, #1
 800576a:	601a      	str	r2, [r3, #0]
 800576c:	e007      	b.n	800577e <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800576e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005772:	3301      	adds	r3, #1
 8005774:	b2db      	uxtb	r3, r3
 8005776:	b25a      	sxtb	r2, r3
 8005778:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800577a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800577e:	2301      	movs	r3, #1
 8005780:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 8005782:	e001      	b.n	8005788 <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005784:	2300      	movs	r3, #0
 8005786:	637b      	str	r3, [r7, #52]	@ 0x34
 8005788:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800578a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800578c:	693b      	ldr	r3, [r7, #16]
 800578e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005792:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005794:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8005796:	4618      	mov	r0, r3
 8005798:	3738      	adds	r7, #56	@ 0x38
 800579a:	46bd      	mov	sp, r7
 800579c:	bd80      	pop	{r7, pc}

0800579e <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800579e:	b580      	push	{r7, lr}
 80057a0:	b08e      	sub	sp, #56	@ 0x38
 80057a2:	af00      	add	r7, sp, #0
 80057a4:	6078      	str	r0, [r7, #4]
 80057a6:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80057ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d10d      	bne.n	80057ce <xQueueGiveFromISR+0x30>
	__asm volatile
 80057b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057b6:	b672      	cpsid	i
 80057b8:	f383 8811 	msr	BASEPRI, r3
 80057bc:	f3bf 8f6f 	isb	sy
 80057c0:	f3bf 8f4f 	dsb	sy
 80057c4:	b662      	cpsie	i
 80057c6:	623b      	str	r3, [r7, #32]
}
 80057c8:	bf00      	nop
 80057ca:	bf00      	nop
 80057cc:	e7fd      	b.n	80057ca <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80057ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d00d      	beq.n	80057f2 <xQueueGiveFromISR+0x54>
	__asm volatile
 80057d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057da:	b672      	cpsid	i
 80057dc:	f383 8811 	msr	BASEPRI, r3
 80057e0:	f3bf 8f6f 	isb	sy
 80057e4:	f3bf 8f4f 	dsb	sy
 80057e8:	b662      	cpsie	i
 80057ea:	61fb      	str	r3, [r7, #28]
}
 80057ec:	bf00      	nop
 80057ee:	bf00      	nop
 80057f0:	e7fd      	b.n	80057ee <xQueueGiveFromISR+0x50>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80057f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d103      	bne.n	8005802 <xQueueGiveFromISR+0x64>
 80057fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057fc:	689b      	ldr	r3, [r3, #8]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d101      	bne.n	8005806 <xQueueGiveFromISR+0x68>
 8005802:	2301      	movs	r3, #1
 8005804:	e000      	b.n	8005808 <xQueueGiveFromISR+0x6a>
 8005806:	2300      	movs	r3, #0
 8005808:	2b00      	cmp	r3, #0
 800580a:	d10d      	bne.n	8005828 <xQueueGiveFromISR+0x8a>
	__asm volatile
 800580c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005810:	b672      	cpsid	i
 8005812:	f383 8811 	msr	BASEPRI, r3
 8005816:	f3bf 8f6f 	isb	sy
 800581a:	f3bf 8f4f 	dsb	sy
 800581e:	b662      	cpsie	i
 8005820:	61bb      	str	r3, [r7, #24]
}
 8005822:	bf00      	nop
 8005824:	bf00      	nop
 8005826:	e7fd      	b.n	8005824 <xQueueGiveFromISR+0x86>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005828:	f002 fab0 	bl	8007d8c <vPortValidateInterruptPriority>
	__asm volatile
 800582c:	f3ef 8211 	mrs	r2, BASEPRI
 8005830:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005834:	b672      	cpsid	i
 8005836:	f383 8811 	msr	BASEPRI, r3
 800583a:	f3bf 8f6f 	isb	sy
 800583e:	f3bf 8f4f 	dsb	sy
 8005842:	b662      	cpsie	i
 8005844:	617a      	str	r2, [r7, #20]
 8005846:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8005848:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800584a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800584c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800584e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005850:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8005852:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005854:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005856:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005858:	429a      	cmp	r2, r3
 800585a:	d22b      	bcs.n	80058b4 <xQueueGiveFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800585c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800585e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005862:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005866:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005868:	1c5a      	adds	r2, r3, #1
 800586a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800586c:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800586e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8005872:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005876:	d112      	bne.n	800589e <xQueueGiveFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005878:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800587a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800587c:	2b00      	cmp	r3, #0
 800587e:	d016      	beq.n	80058ae <xQueueGiveFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005880:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005882:	3324      	adds	r3, #36	@ 0x24
 8005884:	4618      	mov	r0, r3
 8005886:	f001 f96d 	bl	8006b64 <xTaskRemoveFromEventList>
 800588a:	4603      	mov	r3, r0
 800588c:	2b00      	cmp	r3, #0
 800588e:	d00e      	beq.n	80058ae <xQueueGiveFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d00b      	beq.n	80058ae <xQueueGiveFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	2201      	movs	r2, #1
 800589a:	601a      	str	r2, [r3, #0]
 800589c:	e007      	b.n	80058ae <xQueueGiveFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800589e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80058a2:	3301      	adds	r3, #1
 80058a4:	b2db      	uxtb	r3, r3
 80058a6:	b25a      	sxtb	r2, r3
 80058a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058aa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80058ae:	2301      	movs	r3, #1
 80058b0:	637b      	str	r3, [r7, #52]	@ 0x34
 80058b2:	e001      	b.n	80058b8 <xQueueGiveFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80058b4:	2300      	movs	r3, #0
 80058b6:	637b      	str	r3, [r7, #52]	@ 0x34
 80058b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058ba:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	f383 8811 	msr	BASEPRI, r3
}
 80058c2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80058c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80058c6:	4618      	mov	r0, r3
 80058c8:	3738      	adds	r7, #56	@ 0x38
 80058ca:	46bd      	mov	sp, r7
 80058cc:	bd80      	pop	{r7, pc}
	...

080058d0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b08c      	sub	sp, #48	@ 0x30
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	60f8      	str	r0, [r7, #12]
 80058d8:	60b9      	str	r1, [r7, #8]
 80058da:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80058dc:	2300      	movs	r3, #0
 80058de:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80058e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d10d      	bne.n	8005906 <xQueueReceive+0x36>
	__asm volatile
 80058ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058ee:	b672      	cpsid	i
 80058f0:	f383 8811 	msr	BASEPRI, r3
 80058f4:	f3bf 8f6f 	isb	sy
 80058f8:	f3bf 8f4f 	dsb	sy
 80058fc:	b662      	cpsie	i
 80058fe:	623b      	str	r3, [r7, #32]
}
 8005900:	bf00      	nop
 8005902:	bf00      	nop
 8005904:	e7fd      	b.n	8005902 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d103      	bne.n	8005914 <xQueueReceive+0x44>
 800590c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800590e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005910:	2b00      	cmp	r3, #0
 8005912:	d101      	bne.n	8005918 <xQueueReceive+0x48>
 8005914:	2301      	movs	r3, #1
 8005916:	e000      	b.n	800591a <xQueueReceive+0x4a>
 8005918:	2300      	movs	r3, #0
 800591a:	2b00      	cmp	r3, #0
 800591c:	d10d      	bne.n	800593a <xQueueReceive+0x6a>
	__asm volatile
 800591e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005922:	b672      	cpsid	i
 8005924:	f383 8811 	msr	BASEPRI, r3
 8005928:	f3bf 8f6f 	isb	sy
 800592c:	f3bf 8f4f 	dsb	sy
 8005930:	b662      	cpsie	i
 8005932:	61fb      	str	r3, [r7, #28]
}
 8005934:	bf00      	nop
 8005936:	bf00      	nop
 8005938:	e7fd      	b.n	8005936 <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800593a:	f001 fae1 	bl	8006f00 <xTaskGetSchedulerState>
 800593e:	4603      	mov	r3, r0
 8005940:	2b00      	cmp	r3, #0
 8005942:	d102      	bne.n	800594a <xQueueReceive+0x7a>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d101      	bne.n	800594e <xQueueReceive+0x7e>
 800594a:	2301      	movs	r3, #1
 800594c:	e000      	b.n	8005950 <xQueueReceive+0x80>
 800594e:	2300      	movs	r3, #0
 8005950:	2b00      	cmp	r3, #0
 8005952:	d10d      	bne.n	8005970 <xQueueReceive+0xa0>
	__asm volatile
 8005954:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005958:	b672      	cpsid	i
 800595a:	f383 8811 	msr	BASEPRI, r3
 800595e:	f3bf 8f6f 	isb	sy
 8005962:	f3bf 8f4f 	dsb	sy
 8005966:	b662      	cpsie	i
 8005968:	61bb      	str	r3, [r7, #24]
}
 800596a:	bf00      	nop
 800596c:	bf00      	nop
 800596e:	e7fd      	b.n	800596c <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005970:	f002 f924 	bl	8007bbc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005974:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005976:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005978:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800597a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800597c:	2b00      	cmp	r3, #0
 800597e:	d01f      	beq.n	80059c0 <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005980:	68b9      	ldr	r1, [r7, #8]
 8005982:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005984:	f000 fb16 	bl	8005fb4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005988:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800598a:	1e5a      	subs	r2, r3, #1
 800598c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800598e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005990:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005992:	691b      	ldr	r3, [r3, #16]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d00f      	beq.n	80059b8 <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005998:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800599a:	3310      	adds	r3, #16
 800599c:	4618      	mov	r0, r3
 800599e:	f001 f8e1 	bl	8006b64 <xTaskRemoveFromEventList>
 80059a2:	4603      	mov	r3, r0
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d007      	beq.n	80059b8 <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80059a8:	4b3c      	ldr	r3, [pc, #240]	@ (8005a9c <xQueueReceive+0x1cc>)
 80059aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80059ae:	601a      	str	r2, [r3, #0]
 80059b0:	f3bf 8f4f 	dsb	sy
 80059b4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80059b8:	f002 f936 	bl	8007c28 <vPortExitCritical>
				return pdPASS;
 80059bc:	2301      	movs	r3, #1
 80059be:	e069      	b.n	8005a94 <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d103      	bne.n	80059ce <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80059c6:	f002 f92f 	bl	8007c28 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80059ca:	2300      	movs	r3, #0
 80059cc:	e062      	b.n	8005a94 <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 80059ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d106      	bne.n	80059e2 <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80059d4:	f107 0310 	add.w	r3, r7, #16
 80059d8:	4618      	mov	r0, r3
 80059da:	f001 f929 	bl	8006c30 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80059de:	2301      	movs	r3, #1
 80059e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80059e2:	f002 f921 	bl	8007c28 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80059e6:	f000 fe85 	bl	80066f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80059ea:	f002 f8e7 	bl	8007bbc <vPortEnterCritical>
 80059ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059f0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80059f4:	b25b      	sxtb	r3, r3
 80059f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059fa:	d103      	bne.n	8005a04 <xQueueReceive+0x134>
 80059fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059fe:	2200      	movs	r2, #0
 8005a00:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005a04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a06:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005a0a:	b25b      	sxtb	r3, r3
 8005a0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a10:	d103      	bne.n	8005a1a <xQueueReceive+0x14a>
 8005a12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a14:	2200      	movs	r2, #0
 8005a16:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005a1a:	f002 f905 	bl	8007c28 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005a1e:	1d3a      	adds	r2, r7, #4
 8005a20:	f107 0310 	add.w	r3, r7, #16
 8005a24:	4611      	mov	r1, r2
 8005a26:	4618      	mov	r0, r3
 8005a28:	f001 f918 	bl	8006c5c <xTaskCheckForTimeOut>
 8005a2c:	4603      	mov	r3, r0
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d123      	bne.n	8005a7a <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005a32:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005a34:	f000 fb36 	bl	80060a4 <prvIsQueueEmpty>
 8005a38:	4603      	mov	r3, r0
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d017      	beq.n	8005a6e <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005a3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a40:	3324      	adds	r3, #36	@ 0x24
 8005a42:	687a      	ldr	r2, [r7, #4]
 8005a44:	4611      	mov	r1, r2
 8005a46:	4618      	mov	r0, r3
 8005a48:	f001 f836 	bl	8006ab8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005a4c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005a4e:	f000 fad7 	bl	8006000 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005a52:	f000 fe5d 	bl	8006710 <xTaskResumeAll>
 8005a56:	4603      	mov	r3, r0
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d189      	bne.n	8005970 <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 8005a5c:	4b0f      	ldr	r3, [pc, #60]	@ (8005a9c <xQueueReceive+0x1cc>)
 8005a5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005a62:	601a      	str	r2, [r3, #0]
 8005a64:	f3bf 8f4f 	dsb	sy
 8005a68:	f3bf 8f6f 	isb	sy
 8005a6c:	e780      	b.n	8005970 <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005a6e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005a70:	f000 fac6 	bl	8006000 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005a74:	f000 fe4c 	bl	8006710 <xTaskResumeAll>
 8005a78:	e77a      	b.n	8005970 <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005a7a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005a7c:	f000 fac0 	bl	8006000 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005a80:	f000 fe46 	bl	8006710 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005a84:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005a86:	f000 fb0d 	bl	80060a4 <prvIsQueueEmpty>
 8005a8a:	4603      	mov	r3, r0
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	f43f af6f 	beq.w	8005970 <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005a92:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005a94:	4618      	mov	r0, r3
 8005a96:	3730      	adds	r7, #48	@ 0x30
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	bd80      	pop	{r7, pc}
 8005a9c:	e000ed04 	.word	0xe000ed04

08005aa0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b08e      	sub	sp, #56	@ 0x38
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
 8005aa8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8005aaa:	2300      	movs	r3, #0
 8005aac:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005ab6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d10d      	bne.n	8005ad8 <xQueueSemaphoreTake+0x38>
	__asm volatile
 8005abc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ac0:	b672      	cpsid	i
 8005ac2:	f383 8811 	msr	BASEPRI, r3
 8005ac6:	f3bf 8f6f 	isb	sy
 8005aca:	f3bf 8f4f 	dsb	sy
 8005ace:	b662      	cpsie	i
 8005ad0:	623b      	str	r3, [r7, #32]
}
 8005ad2:	bf00      	nop
 8005ad4:	bf00      	nop
 8005ad6:	e7fd      	b.n	8005ad4 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005ad8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ada:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d00d      	beq.n	8005afc <xQueueSemaphoreTake+0x5c>
	__asm volatile
 8005ae0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ae4:	b672      	cpsid	i
 8005ae6:	f383 8811 	msr	BASEPRI, r3
 8005aea:	f3bf 8f6f 	isb	sy
 8005aee:	f3bf 8f4f 	dsb	sy
 8005af2:	b662      	cpsie	i
 8005af4:	61fb      	str	r3, [r7, #28]
}
 8005af6:	bf00      	nop
 8005af8:	bf00      	nop
 8005afa:	e7fd      	b.n	8005af8 <xQueueSemaphoreTake+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005afc:	f001 fa00 	bl	8006f00 <xTaskGetSchedulerState>
 8005b00:	4603      	mov	r3, r0
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d102      	bne.n	8005b0c <xQueueSemaphoreTake+0x6c>
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d101      	bne.n	8005b10 <xQueueSemaphoreTake+0x70>
 8005b0c:	2301      	movs	r3, #1
 8005b0e:	e000      	b.n	8005b12 <xQueueSemaphoreTake+0x72>
 8005b10:	2300      	movs	r3, #0
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d10d      	bne.n	8005b32 <xQueueSemaphoreTake+0x92>
	__asm volatile
 8005b16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b1a:	b672      	cpsid	i
 8005b1c:	f383 8811 	msr	BASEPRI, r3
 8005b20:	f3bf 8f6f 	isb	sy
 8005b24:	f3bf 8f4f 	dsb	sy
 8005b28:	b662      	cpsie	i
 8005b2a:	61bb      	str	r3, [r7, #24]
}
 8005b2c:	bf00      	nop
 8005b2e:	bf00      	nop
 8005b30:	e7fd      	b.n	8005b2e <xQueueSemaphoreTake+0x8e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005b32:	f002 f843 	bl	8007bbc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005b36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b3a:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005b3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d024      	beq.n	8005b8c <xQueueSemaphoreTake+0xec>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005b42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b44:	1e5a      	subs	r2, r3, #1
 8005b46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b48:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005b4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d104      	bne.n	8005b5c <xQueueSemaphoreTake+0xbc>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8005b52:	f001 fb57 	bl	8007204 <pvTaskIncrementMutexHeldCount>
 8005b56:	4602      	mov	r2, r0
 8005b58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b5a:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005b5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b5e:	691b      	ldr	r3, [r3, #16]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d00f      	beq.n	8005b84 <xQueueSemaphoreTake+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005b64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b66:	3310      	adds	r3, #16
 8005b68:	4618      	mov	r0, r3
 8005b6a:	f000 fffb 	bl	8006b64 <xTaskRemoveFromEventList>
 8005b6e:	4603      	mov	r3, r0
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d007      	beq.n	8005b84 <xQueueSemaphoreTake+0xe4>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005b74:	4b55      	ldr	r3, [pc, #340]	@ (8005ccc <xQueueSemaphoreTake+0x22c>)
 8005b76:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005b7a:	601a      	str	r2, [r3, #0]
 8005b7c:	f3bf 8f4f 	dsb	sy
 8005b80:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005b84:	f002 f850 	bl	8007c28 <vPortExitCritical>
				return pdPASS;
 8005b88:	2301      	movs	r3, #1
 8005b8a:	e09a      	b.n	8005cc2 <xQueueSemaphoreTake+0x222>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d114      	bne.n	8005bbc <xQueueSemaphoreTake+0x11c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005b92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d00d      	beq.n	8005bb4 <xQueueSemaphoreTake+0x114>
	__asm volatile
 8005b98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b9c:	b672      	cpsid	i
 8005b9e:	f383 8811 	msr	BASEPRI, r3
 8005ba2:	f3bf 8f6f 	isb	sy
 8005ba6:	f3bf 8f4f 	dsb	sy
 8005baa:	b662      	cpsie	i
 8005bac:	617b      	str	r3, [r7, #20]
}
 8005bae:	bf00      	nop
 8005bb0:	bf00      	nop
 8005bb2:	e7fd      	b.n	8005bb0 <xQueueSemaphoreTake+0x110>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8005bb4:	f002 f838 	bl	8007c28 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005bb8:	2300      	movs	r3, #0
 8005bba:	e082      	b.n	8005cc2 <xQueueSemaphoreTake+0x222>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005bbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d106      	bne.n	8005bd0 <xQueueSemaphoreTake+0x130>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005bc2:	f107 030c 	add.w	r3, r7, #12
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	f001 f832 	bl	8006c30 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005bcc:	2301      	movs	r3, #1
 8005bce:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005bd0:	f002 f82a 	bl	8007c28 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005bd4:	f000 fd8e 	bl	80066f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005bd8:	f001 fff0 	bl	8007bbc <vPortEnterCritical>
 8005bdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bde:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005be2:	b25b      	sxtb	r3, r3
 8005be4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005be8:	d103      	bne.n	8005bf2 <xQueueSemaphoreTake+0x152>
 8005bea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bec:	2200      	movs	r2, #0
 8005bee:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005bf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bf4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005bf8:	b25b      	sxtb	r3, r3
 8005bfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bfe:	d103      	bne.n	8005c08 <xQueueSemaphoreTake+0x168>
 8005c00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c02:	2200      	movs	r2, #0
 8005c04:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005c08:	f002 f80e 	bl	8007c28 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005c0c:	463a      	mov	r2, r7
 8005c0e:	f107 030c 	add.w	r3, r7, #12
 8005c12:	4611      	mov	r1, r2
 8005c14:	4618      	mov	r0, r3
 8005c16:	f001 f821 	bl	8006c5c <xTaskCheckForTimeOut>
 8005c1a:	4603      	mov	r3, r0
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d132      	bne.n	8005c86 <xQueueSemaphoreTake+0x1e6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005c20:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005c22:	f000 fa3f 	bl	80060a4 <prvIsQueueEmpty>
 8005c26:	4603      	mov	r3, r0
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d026      	beq.n	8005c7a <xQueueSemaphoreTake+0x1da>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005c2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d109      	bne.n	8005c48 <xQueueSemaphoreTake+0x1a8>
					{
						taskENTER_CRITICAL();
 8005c34:	f001 ffc2 	bl	8007bbc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005c38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c3a:	689b      	ldr	r3, [r3, #8]
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	f001 f97d 	bl	8006f3c <xTaskPriorityInherit>
 8005c42:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8005c44:	f001 fff0 	bl	8007c28 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005c48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c4a:	3324      	adds	r3, #36	@ 0x24
 8005c4c:	683a      	ldr	r2, [r7, #0]
 8005c4e:	4611      	mov	r1, r2
 8005c50:	4618      	mov	r0, r3
 8005c52:	f000 ff31 	bl	8006ab8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005c56:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005c58:	f000 f9d2 	bl	8006000 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005c5c:	f000 fd58 	bl	8006710 <xTaskResumeAll>
 8005c60:	4603      	mov	r3, r0
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	f47f af65 	bne.w	8005b32 <xQueueSemaphoreTake+0x92>
				{
					portYIELD_WITHIN_API();
 8005c68:	4b18      	ldr	r3, [pc, #96]	@ (8005ccc <xQueueSemaphoreTake+0x22c>)
 8005c6a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005c6e:	601a      	str	r2, [r3, #0]
 8005c70:	f3bf 8f4f 	dsb	sy
 8005c74:	f3bf 8f6f 	isb	sy
 8005c78:	e75b      	b.n	8005b32 <xQueueSemaphoreTake+0x92>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8005c7a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005c7c:	f000 f9c0 	bl	8006000 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005c80:	f000 fd46 	bl	8006710 <xTaskResumeAll>
 8005c84:	e755      	b.n	8005b32 <xQueueSemaphoreTake+0x92>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8005c86:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005c88:	f000 f9ba 	bl	8006000 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005c8c:	f000 fd40 	bl	8006710 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005c90:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005c92:	f000 fa07 	bl	80060a4 <prvIsQueueEmpty>
 8005c96:	4603      	mov	r3, r0
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	f43f af4a 	beq.w	8005b32 <xQueueSemaphoreTake+0x92>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8005c9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d00d      	beq.n	8005cc0 <xQueueSemaphoreTake+0x220>
					{
						taskENTER_CRITICAL();
 8005ca4:	f001 ff8a 	bl	8007bbc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005ca8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005caa:	f000 f901 	bl	8005eb0 <prvGetDisinheritPriorityAfterTimeout>
 8005cae:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8005cb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005cb2:	689b      	ldr	r3, [r3, #8]
 8005cb4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	f001 fa1c 	bl	80070f4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005cbc:	f001 ffb4 	bl	8007c28 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005cc0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	3738      	adds	r7, #56	@ 0x38
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	bd80      	pop	{r7, pc}
 8005cca:	bf00      	nop
 8005ccc:	e000ed04 	.word	0xe000ed04

08005cd0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b08e      	sub	sp, #56	@ 0x38
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	60f8      	str	r0, [r7, #12]
 8005cd8:	60b9      	str	r1, [r7, #8]
 8005cda:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005ce0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d10d      	bne.n	8005d02 <xQueueReceiveFromISR+0x32>
	__asm volatile
 8005ce6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cea:	b672      	cpsid	i
 8005cec:	f383 8811 	msr	BASEPRI, r3
 8005cf0:	f3bf 8f6f 	isb	sy
 8005cf4:	f3bf 8f4f 	dsb	sy
 8005cf8:	b662      	cpsie	i
 8005cfa:	623b      	str	r3, [r7, #32]
}
 8005cfc:	bf00      	nop
 8005cfe:	bf00      	nop
 8005d00:	e7fd      	b.n	8005cfe <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005d02:	68bb      	ldr	r3, [r7, #8]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d103      	bne.n	8005d10 <xQueueReceiveFromISR+0x40>
 8005d08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d101      	bne.n	8005d14 <xQueueReceiveFromISR+0x44>
 8005d10:	2301      	movs	r3, #1
 8005d12:	e000      	b.n	8005d16 <xQueueReceiveFromISR+0x46>
 8005d14:	2300      	movs	r3, #0
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d10d      	bne.n	8005d36 <xQueueReceiveFromISR+0x66>
	__asm volatile
 8005d1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d1e:	b672      	cpsid	i
 8005d20:	f383 8811 	msr	BASEPRI, r3
 8005d24:	f3bf 8f6f 	isb	sy
 8005d28:	f3bf 8f4f 	dsb	sy
 8005d2c:	b662      	cpsie	i
 8005d2e:	61fb      	str	r3, [r7, #28]
}
 8005d30:	bf00      	nop
 8005d32:	bf00      	nop
 8005d34:	e7fd      	b.n	8005d32 <xQueueReceiveFromISR+0x62>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005d36:	f002 f829 	bl	8007d8c <vPortValidateInterruptPriority>
	__asm volatile
 8005d3a:	f3ef 8211 	mrs	r2, BASEPRI
 8005d3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d42:	b672      	cpsid	i
 8005d44:	f383 8811 	msr	BASEPRI, r3
 8005d48:	f3bf 8f6f 	isb	sy
 8005d4c:	f3bf 8f4f 	dsb	sy
 8005d50:	b662      	cpsie	i
 8005d52:	61ba      	str	r2, [r7, #24]
 8005d54:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8005d56:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005d58:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005d5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d5e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005d60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d02f      	beq.n	8005dc6 <xQueueReceiveFromISR+0xf6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8005d66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d68:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005d6c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005d70:	68b9      	ldr	r1, [r7, #8]
 8005d72:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005d74:	f000 f91e 	bl	8005fb4 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005d78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d7a:	1e5a      	subs	r2, r3, #1
 8005d7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d7e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8005d80:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8005d84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d88:	d112      	bne.n	8005db0 <xQueueReceiveFromISR+0xe0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005d8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d8c:	691b      	ldr	r3, [r3, #16]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d016      	beq.n	8005dc0 <xQueueReceiveFromISR+0xf0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005d92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d94:	3310      	adds	r3, #16
 8005d96:	4618      	mov	r0, r3
 8005d98:	f000 fee4 	bl	8006b64 <xTaskRemoveFromEventList>
 8005d9c:	4603      	mov	r3, r0
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d00e      	beq.n	8005dc0 <xQueueReceiveFromISR+0xf0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d00b      	beq.n	8005dc0 <xQueueReceiveFromISR+0xf0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2201      	movs	r2, #1
 8005dac:	601a      	str	r2, [r3, #0]
 8005dae:	e007      	b.n	8005dc0 <xQueueReceiveFromISR+0xf0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005db0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005db4:	3301      	adds	r3, #1
 8005db6:	b2db      	uxtb	r3, r3
 8005db8:	b25a      	sxtb	r2, r3
 8005dba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dbc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8005dc0:	2301      	movs	r3, #1
 8005dc2:	637b      	str	r3, [r7, #52]	@ 0x34
 8005dc4:	e001      	b.n	8005dca <xQueueReceiveFromISR+0xfa>
		}
		else
		{
			xReturn = pdFAIL;
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	637b      	str	r3, [r7, #52]	@ 0x34
 8005dca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005dcc:	613b      	str	r3, [r7, #16]
	__asm volatile
 8005dce:	693b      	ldr	r3, [r7, #16]
 8005dd0:	f383 8811 	msr	BASEPRI, r3
}
 8005dd4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005dd6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8005dd8:	4618      	mov	r0, r3
 8005dda:	3738      	adds	r7, #56	@ 0x38
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	bd80      	pop	{r7, pc}

08005de0 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b084      	sub	sp, #16
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d10d      	bne.n	8005e0a <uxQueueMessagesWaiting+0x2a>
	__asm volatile
 8005dee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005df2:	b672      	cpsid	i
 8005df4:	f383 8811 	msr	BASEPRI, r3
 8005df8:	f3bf 8f6f 	isb	sy
 8005dfc:	f3bf 8f4f 	dsb	sy
 8005e00:	b662      	cpsie	i
 8005e02:	60bb      	str	r3, [r7, #8]
}
 8005e04:	bf00      	nop
 8005e06:	bf00      	nop
 8005e08:	e7fd      	b.n	8005e06 <uxQueueMessagesWaiting+0x26>

	taskENTER_CRITICAL();
 8005e0a:	f001 fed7 	bl	8007bbc <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e12:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8005e14:	f001 ff08 	bl	8007c28 <vPortExitCritical>

	return uxReturn;
 8005e18:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	3710      	adds	r7, #16
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	bd80      	pop	{r7, pc}

08005e22 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8005e22:	b480      	push	{r7}
 8005e24:	b087      	sub	sp, #28
 8005e26:	af00      	add	r7, sp, #0
 8005e28:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8005e2e:	697b      	ldr	r3, [r7, #20]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d10d      	bne.n	8005e50 <uxQueueMessagesWaitingFromISR+0x2e>
	__asm volatile
 8005e34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e38:	b672      	cpsid	i
 8005e3a:	f383 8811 	msr	BASEPRI, r3
 8005e3e:	f3bf 8f6f 	isb	sy
 8005e42:	f3bf 8f4f 	dsb	sy
 8005e46:	b662      	cpsie	i
 8005e48:	60fb      	str	r3, [r7, #12]
}
 8005e4a:	bf00      	nop
 8005e4c:	bf00      	nop
 8005e4e:	e7fd      	b.n	8005e4c <uxQueueMessagesWaitingFromISR+0x2a>
	uxReturn = pxQueue->uxMessagesWaiting;
 8005e50:	697b      	ldr	r3, [r7, #20]
 8005e52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e54:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8005e56:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8005e58:	4618      	mov	r0, r3
 8005e5a:	371c      	adds	r7, #28
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e62:	4770      	bx	lr

08005e64 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b084      	sub	sp, #16
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d10d      	bne.n	8005e92 <vQueueDelete+0x2e>
	__asm volatile
 8005e76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e7a:	b672      	cpsid	i
 8005e7c:	f383 8811 	msr	BASEPRI, r3
 8005e80:	f3bf 8f6f 	isb	sy
 8005e84:	f3bf 8f4f 	dsb	sy
 8005e88:	b662      	cpsie	i
 8005e8a:	60bb      	str	r3, [r7, #8]
}
 8005e8c:	bf00      	nop
 8005e8e:	bf00      	nop
 8005e90:	e7fd      	b.n	8005e8e <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8005e92:	68f8      	ldr	r0, [r7, #12]
 8005e94:	f000 f95e 	bl	8006154 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d102      	bne.n	8005ea8 <vQueueDelete+0x44>
		{
			vPortFree( pxQueue );
 8005ea2:	68f8      	ldr	r0, [r7, #12]
 8005ea4:	f002 f886 	bl	8007fb4 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8005ea8:	bf00      	nop
 8005eaa:	3710      	adds	r7, #16
 8005eac:	46bd      	mov	sp, r7
 8005eae:	bd80      	pop	{r7, pc}

08005eb0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8005eb0:	b480      	push	{r7}
 8005eb2:	b085      	sub	sp, #20
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d006      	beq.n	8005ece <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8005eca:	60fb      	str	r3, [r7, #12]
 8005ecc:	e001      	b.n	8005ed2 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8005ece:	2300      	movs	r3, #0
 8005ed0:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
	}
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	3714      	adds	r7, #20
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ede:	4770      	bx	lr

08005ee0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b086      	sub	sp, #24
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	60f8      	str	r0, [r7, #12]
 8005ee8:	60b9      	str	r1, [r7, #8]
 8005eea:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005eec:	2300      	movs	r3, #0
 8005eee:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ef4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d10d      	bne.n	8005f1a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d14d      	bne.n	8005fa2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	689b      	ldr	r3, [r3, #8]
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	f001 f87e 	bl	800700c <xTaskPriorityDisinherit>
 8005f10:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	2200      	movs	r2, #0
 8005f16:	609a      	str	r2, [r3, #8]
 8005f18:	e043      	b.n	8005fa2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d119      	bne.n	8005f54 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	6858      	ldr	r0, [r3, #4]
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f28:	461a      	mov	r2, r3
 8005f2a:	68b9      	ldr	r1, [r7, #8]
 8005f2c:	f002 f9ea 	bl	8008304 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	685a      	ldr	r2, [r3, #4]
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f38:	441a      	add	r2, r3
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	685a      	ldr	r2, [r3, #4]
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	689b      	ldr	r3, [r3, #8]
 8005f46:	429a      	cmp	r2, r3
 8005f48:	d32b      	bcc.n	8005fa2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	681a      	ldr	r2, [r3, #0]
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	605a      	str	r2, [r3, #4]
 8005f52:	e026      	b.n	8005fa2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	68d8      	ldr	r0, [r3, #12]
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f5c:	461a      	mov	r2, r3
 8005f5e:	68b9      	ldr	r1, [r7, #8]
 8005f60:	f002 f9d0 	bl	8008304 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	68da      	ldr	r2, [r3, #12]
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f6c:	425b      	negs	r3, r3
 8005f6e:	441a      	add	r2, r3
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	68da      	ldr	r2, [r3, #12]
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	429a      	cmp	r2, r3
 8005f7e:	d207      	bcs.n	8005f90 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	689a      	ldr	r2, [r3, #8]
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f88:	425b      	negs	r3, r3
 8005f8a:	441a      	add	r2, r3
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2b02      	cmp	r3, #2
 8005f94:	d105      	bne.n	8005fa2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005f96:	693b      	ldr	r3, [r7, #16]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d002      	beq.n	8005fa2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005f9c:	693b      	ldr	r3, [r7, #16]
 8005f9e:	3b01      	subs	r3, #1
 8005fa0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005fa2:	693b      	ldr	r3, [r7, #16]
 8005fa4:	1c5a      	adds	r2, r3, #1
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8005faa:	697b      	ldr	r3, [r7, #20]
}
 8005fac:	4618      	mov	r0, r3
 8005fae:	3718      	adds	r7, #24
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	bd80      	pop	{r7, pc}

08005fb4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b082      	sub	sp, #8
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
 8005fbc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d018      	beq.n	8005ff8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	68da      	ldr	r2, [r3, #12]
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fce:	441a      	add	r2, r3
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	68da      	ldr	r2, [r3, #12]
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	689b      	ldr	r3, [r3, #8]
 8005fdc:	429a      	cmp	r2, r3
 8005fde:	d303      	bcc.n	8005fe8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681a      	ldr	r2, [r3, #0]
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	68d9      	ldr	r1, [r3, #12]
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ff0:	461a      	mov	r2, r3
 8005ff2:	6838      	ldr	r0, [r7, #0]
 8005ff4:	f002 f986 	bl	8008304 <memcpy>
	}
}
 8005ff8:	bf00      	nop
 8005ffa:	3708      	adds	r7, #8
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	bd80      	pop	{r7, pc}

08006000 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006000:	b580      	push	{r7, lr}
 8006002:	b084      	sub	sp, #16
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006008:	f001 fdd8 	bl	8007bbc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006012:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006014:	e011      	b.n	800603a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800601a:	2b00      	cmp	r3, #0
 800601c:	d012      	beq.n	8006044 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	3324      	adds	r3, #36	@ 0x24
 8006022:	4618      	mov	r0, r3
 8006024:	f000 fd9e 	bl	8006b64 <xTaskRemoveFromEventList>
 8006028:	4603      	mov	r3, r0
 800602a:	2b00      	cmp	r3, #0
 800602c:	d001      	beq.n	8006032 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800602e:	f000 fe7d 	bl	8006d2c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006032:	7bfb      	ldrb	r3, [r7, #15]
 8006034:	3b01      	subs	r3, #1
 8006036:	b2db      	uxtb	r3, r3
 8006038:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800603a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800603e:	2b00      	cmp	r3, #0
 8006040:	dce9      	bgt.n	8006016 <prvUnlockQueue+0x16>
 8006042:	e000      	b.n	8006046 <prvUnlockQueue+0x46>
					break;
 8006044:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	22ff      	movs	r2, #255	@ 0xff
 800604a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800604e:	f001 fdeb 	bl	8007c28 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006052:	f001 fdb3 	bl	8007bbc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800605c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800605e:	e011      	b.n	8006084 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	691b      	ldr	r3, [r3, #16]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d012      	beq.n	800608e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	3310      	adds	r3, #16
 800606c:	4618      	mov	r0, r3
 800606e:	f000 fd79 	bl	8006b64 <xTaskRemoveFromEventList>
 8006072:	4603      	mov	r3, r0
 8006074:	2b00      	cmp	r3, #0
 8006076:	d001      	beq.n	800607c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006078:	f000 fe58 	bl	8006d2c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800607c:	7bbb      	ldrb	r3, [r7, #14]
 800607e:	3b01      	subs	r3, #1
 8006080:	b2db      	uxtb	r3, r3
 8006082:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006084:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006088:	2b00      	cmp	r3, #0
 800608a:	dce9      	bgt.n	8006060 <prvUnlockQueue+0x60>
 800608c:	e000      	b.n	8006090 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800608e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	22ff      	movs	r2, #255	@ 0xff
 8006094:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8006098:	f001 fdc6 	bl	8007c28 <vPortExitCritical>
}
 800609c:	bf00      	nop
 800609e:	3710      	adds	r7, #16
 80060a0:	46bd      	mov	sp, r7
 80060a2:	bd80      	pop	{r7, pc}

080060a4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80060a4:	b580      	push	{r7, lr}
 80060a6:	b084      	sub	sp, #16
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80060ac:	f001 fd86 	bl	8007bbc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d102      	bne.n	80060be <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80060b8:	2301      	movs	r3, #1
 80060ba:	60fb      	str	r3, [r7, #12]
 80060bc:	e001      	b.n	80060c2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80060be:	2300      	movs	r3, #0
 80060c0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80060c2:	f001 fdb1 	bl	8007c28 <vPortExitCritical>

	return xReturn;
 80060c6:	68fb      	ldr	r3, [r7, #12]
}
 80060c8:	4618      	mov	r0, r3
 80060ca:	3710      	adds	r7, #16
 80060cc:	46bd      	mov	sp, r7
 80060ce:	bd80      	pop	{r7, pc}

080060d0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b084      	sub	sp, #16
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80060d8:	f001 fd70 	bl	8007bbc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060e4:	429a      	cmp	r2, r3
 80060e6:	d102      	bne.n	80060ee <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80060e8:	2301      	movs	r3, #1
 80060ea:	60fb      	str	r3, [r7, #12]
 80060ec:	e001      	b.n	80060f2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80060ee:	2300      	movs	r3, #0
 80060f0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80060f2:	f001 fd99 	bl	8007c28 <vPortExitCritical>

	return xReturn;
 80060f6:	68fb      	ldr	r3, [r7, #12]
}
 80060f8:	4618      	mov	r0, r3
 80060fa:	3710      	adds	r7, #16
 80060fc:	46bd      	mov	sp, r7
 80060fe:	bd80      	pop	{r7, pc}

08006100 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006100:	b480      	push	{r7}
 8006102:	b085      	sub	sp, #20
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
 8006108:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800610a:	2300      	movs	r3, #0
 800610c:	60fb      	str	r3, [r7, #12]
 800610e:	e014      	b.n	800613a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006110:	4a0f      	ldr	r2, [pc, #60]	@ (8006150 <vQueueAddToRegistry+0x50>)
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d10b      	bne.n	8006134 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800611c:	490c      	ldr	r1, [pc, #48]	@ (8006150 <vQueueAddToRegistry+0x50>)
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	683a      	ldr	r2, [r7, #0]
 8006122:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006126:	4a0a      	ldr	r2, [pc, #40]	@ (8006150 <vQueueAddToRegistry+0x50>)
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	00db      	lsls	r3, r3, #3
 800612c:	4413      	add	r3, r2
 800612e:	687a      	ldr	r2, [r7, #4]
 8006130:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006132:	e006      	b.n	8006142 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	3301      	adds	r3, #1
 8006138:	60fb      	str	r3, [r7, #12]
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	2b07      	cmp	r3, #7
 800613e:	d9e7      	bls.n	8006110 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006140:	bf00      	nop
 8006142:	bf00      	nop
 8006144:	3714      	adds	r7, #20
 8006146:	46bd      	mov	sp, r7
 8006148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614c:	4770      	bx	lr
 800614e:	bf00      	nop
 8006150:	20000fcc 	.word	0x20000fcc

08006154 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8006154:	b480      	push	{r7}
 8006156:	b085      	sub	sp, #20
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800615c:	2300      	movs	r3, #0
 800615e:	60fb      	str	r3, [r7, #12]
 8006160:	e016      	b.n	8006190 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8006162:	4a10      	ldr	r2, [pc, #64]	@ (80061a4 <vQueueUnregisterQueue+0x50>)
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	00db      	lsls	r3, r3, #3
 8006168:	4413      	add	r3, r2
 800616a:	685b      	ldr	r3, [r3, #4]
 800616c:	687a      	ldr	r2, [r7, #4]
 800616e:	429a      	cmp	r2, r3
 8006170:	d10b      	bne.n	800618a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8006172:	4a0c      	ldr	r2, [pc, #48]	@ (80061a4 <vQueueUnregisterQueue+0x50>)
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	2100      	movs	r1, #0
 8006178:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800617c:	4a09      	ldr	r2, [pc, #36]	@ (80061a4 <vQueueUnregisterQueue+0x50>)
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	00db      	lsls	r3, r3, #3
 8006182:	4413      	add	r3, r2
 8006184:	2200      	movs	r2, #0
 8006186:	605a      	str	r2, [r3, #4]
				break;
 8006188:	e006      	b.n	8006198 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	3301      	adds	r3, #1
 800618e:	60fb      	str	r3, [r7, #12]
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	2b07      	cmp	r3, #7
 8006194:	d9e5      	bls.n	8006162 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8006196:	bf00      	nop
 8006198:	bf00      	nop
 800619a:	3714      	adds	r7, #20
 800619c:	46bd      	mov	sp, r7
 800619e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a2:	4770      	bx	lr
 80061a4:	20000fcc 	.word	0x20000fcc

080061a8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b086      	sub	sp, #24
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	60f8      	str	r0, [r7, #12]
 80061b0:	60b9      	str	r1, [r7, #8]
 80061b2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80061b8:	f001 fd00 	bl	8007bbc <vPortEnterCritical>
 80061bc:	697b      	ldr	r3, [r7, #20]
 80061be:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80061c2:	b25b      	sxtb	r3, r3
 80061c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061c8:	d103      	bne.n	80061d2 <vQueueWaitForMessageRestricted+0x2a>
 80061ca:	697b      	ldr	r3, [r7, #20]
 80061cc:	2200      	movs	r2, #0
 80061ce:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80061d2:	697b      	ldr	r3, [r7, #20]
 80061d4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80061d8:	b25b      	sxtb	r3, r3
 80061da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061de:	d103      	bne.n	80061e8 <vQueueWaitForMessageRestricted+0x40>
 80061e0:	697b      	ldr	r3, [r7, #20]
 80061e2:	2200      	movs	r2, #0
 80061e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80061e8:	f001 fd1e 	bl	8007c28 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80061ec:	697b      	ldr	r3, [r7, #20]
 80061ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d106      	bne.n	8006202 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80061f4:	697b      	ldr	r3, [r7, #20]
 80061f6:	3324      	adds	r3, #36	@ 0x24
 80061f8:	687a      	ldr	r2, [r7, #4]
 80061fa:	68b9      	ldr	r1, [r7, #8]
 80061fc:	4618      	mov	r0, r3
 80061fe:	f000 fc83 	bl	8006b08 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006202:	6978      	ldr	r0, [r7, #20]
 8006204:	f7ff fefc 	bl	8006000 <prvUnlockQueue>
	}
 8006208:	bf00      	nop
 800620a:	3718      	adds	r7, #24
 800620c:	46bd      	mov	sp, r7
 800620e:	bd80      	pop	{r7, pc}

08006210 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006210:	b580      	push	{r7, lr}
 8006212:	b08e      	sub	sp, #56	@ 0x38
 8006214:	af04      	add	r7, sp, #16
 8006216:	60f8      	str	r0, [r7, #12]
 8006218:	60b9      	str	r1, [r7, #8]
 800621a:	607a      	str	r2, [r7, #4]
 800621c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800621e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006220:	2b00      	cmp	r3, #0
 8006222:	d10d      	bne.n	8006240 <xTaskCreateStatic+0x30>
	__asm volatile
 8006224:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006228:	b672      	cpsid	i
 800622a:	f383 8811 	msr	BASEPRI, r3
 800622e:	f3bf 8f6f 	isb	sy
 8006232:	f3bf 8f4f 	dsb	sy
 8006236:	b662      	cpsie	i
 8006238:	623b      	str	r3, [r7, #32]
}
 800623a:	bf00      	nop
 800623c:	bf00      	nop
 800623e:	e7fd      	b.n	800623c <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8006240:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006242:	2b00      	cmp	r3, #0
 8006244:	d10d      	bne.n	8006262 <xTaskCreateStatic+0x52>
	__asm volatile
 8006246:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800624a:	b672      	cpsid	i
 800624c:	f383 8811 	msr	BASEPRI, r3
 8006250:	f3bf 8f6f 	isb	sy
 8006254:	f3bf 8f4f 	dsb	sy
 8006258:	b662      	cpsie	i
 800625a:	61fb      	str	r3, [r7, #28]
}
 800625c:	bf00      	nop
 800625e:	bf00      	nop
 8006260:	e7fd      	b.n	800625e <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006262:	23a8      	movs	r3, #168	@ 0xa8
 8006264:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006266:	693b      	ldr	r3, [r7, #16]
 8006268:	2ba8      	cmp	r3, #168	@ 0xa8
 800626a:	d00d      	beq.n	8006288 <xTaskCreateStatic+0x78>
	__asm volatile
 800626c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006270:	b672      	cpsid	i
 8006272:	f383 8811 	msr	BASEPRI, r3
 8006276:	f3bf 8f6f 	isb	sy
 800627a:	f3bf 8f4f 	dsb	sy
 800627e:	b662      	cpsie	i
 8006280:	61bb      	str	r3, [r7, #24]
}
 8006282:	bf00      	nop
 8006284:	bf00      	nop
 8006286:	e7fd      	b.n	8006284 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006288:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800628a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800628c:	2b00      	cmp	r3, #0
 800628e:	d01e      	beq.n	80062ce <xTaskCreateStatic+0xbe>
 8006290:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006292:	2b00      	cmp	r3, #0
 8006294:	d01b      	beq.n	80062ce <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006296:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006298:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800629a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800629c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800629e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80062a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062a2:	2202      	movs	r2, #2
 80062a4:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80062a8:	2300      	movs	r3, #0
 80062aa:	9303      	str	r3, [sp, #12]
 80062ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062ae:	9302      	str	r3, [sp, #8]
 80062b0:	f107 0314 	add.w	r3, r7, #20
 80062b4:	9301      	str	r3, [sp, #4]
 80062b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062b8:	9300      	str	r3, [sp, #0]
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	687a      	ldr	r2, [r7, #4]
 80062be:	68b9      	ldr	r1, [r7, #8]
 80062c0:	68f8      	ldr	r0, [r7, #12]
 80062c2:	f000 f851 	bl	8006368 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80062c6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80062c8:	f000 f8f8 	bl	80064bc <prvAddNewTaskToReadyList>
 80062cc:	e001      	b.n	80062d2 <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 80062ce:	2300      	movs	r3, #0
 80062d0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80062d2:	697b      	ldr	r3, [r7, #20]
	}
 80062d4:	4618      	mov	r0, r3
 80062d6:	3728      	adds	r7, #40	@ 0x28
 80062d8:	46bd      	mov	sp, r7
 80062da:	bd80      	pop	{r7, pc}

080062dc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b08c      	sub	sp, #48	@ 0x30
 80062e0:	af04      	add	r7, sp, #16
 80062e2:	60f8      	str	r0, [r7, #12]
 80062e4:	60b9      	str	r1, [r7, #8]
 80062e6:	603b      	str	r3, [r7, #0]
 80062e8:	4613      	mov	r3, r2
 80062ea:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80062ec:	88fb      	ldrh	r3, [r7, #6]
 80062ee:	009b      	lsls	r3, r3, #2
 80062f0:	4618      	mov	r0, r3
 80062f2:	f001 fd91 	bl	8007e18 <pvPortMalloc>
 80062f6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80062f8:	697b      	ldr	r3, [r7, #20]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d00e      	beq.n	800631c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80062fe:	20a8      	movs	r0, #168	@ 0xa8
 8006300:	f001 fd8a 	bl	8007e18 <pvPortMalloc>
 8006304:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006306:	69fb      	ldr	r3, [r7, #28]
 8006308:	2b00      	cmp	r3, #0
 800630a:	d003      	beq.n	8006314 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800630c:	69fb      	ldr	r3, [r7, #28]
 800630e:	697a      	ldr	r2, [r7, #20]
 8006310:	631a      	str	r2, [r3, #48]	@ 0x30
 8006312:	e005      	b.n	8006320 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006314:	6978      	ldr	r0, [r7, #20]
 8006316:	f001 fe4d 	bl	8007fb4 <vPortFree>
 800631a:	e001      	b.n	8006320 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800631c:	2300      	movs	r3, #0
 800631e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006320:	69fb      	ldr	r3, [r7, #28]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d017      	beq.n	8006356 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006326:	69fb      	ldr	r3, [r7, #28]
 8006328:	2200      	movs	r2, #0
 800632a:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800632e:	88fa      	ldrh	r2, [r7, #6]
 8006330:	2300      	movs	r3, #0
 8006332:	9303      	str	r3, [sp, #12]
 8006334:	69fb      	ldr	r3, [r7, #28]
 8006336:	9302      	str	r3, [sp, #8]
 8006338:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800633a:	9301      	str	r3, [sp, #4]
 800633c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800633e:	9300      	str	r3, [sp, #0]
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	68b9      	ldr	r1, [r7, #8]
 8006344:	68f8      	ldr	r0, [r7, #12]
 8006346:	f000 f80f 	bl	8006368 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800634a:	69f8      	ldr	r0, [r7, #28]
 800634c:	f000 f8b6 	bl	80064bc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006350:	2301      	movs	r3, #1
 8006352:	61bb      	str	r3, [r7, #24]
 8006354:	e002      	b.n	800635c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006356:	f04f 33ff 	mov.w	r3, #4294967295
 800635a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800635c:	69bb      	ldr	r3, [r7, #24]
	}
 800635e:	4618      	mov	r0, r3
 8006360:	3720      	adds	r7, #32
 8006362:	46bd      	mov	sp, r7
 8006364:	bd80      	pop	{r7, pc}
	...

08006368 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b088      	sub	sp, #32
 800636c:	af00      	add	r7, sp, #0
 800636e:	60f8      	str	r0, [r7, #12]
 8006370:	60b9      	str	r1, [r7, #8]
 8006372:	607a      	str	r2, [r7, #4]
 8006374:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006376:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006378:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	009b      	lsls	r3, r3, #2
 800637e:	461a      	mov	r2, r3
 8006380:	21a5      	movs	r1, #165	@ 0xa5
 8006382:	f001 ff33 	bl	80081ec <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006386:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006388:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800638a:	6879      	ldr	r1, [r7, #4]
 800638c:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8006390:	440b      	add	r3, r1
 8006392:	009b      	lsls	r3, r3, #2
 8006394:	4413      	add	r3, r2
 8006396:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006398:	69bb      	ldr	r3, [r7, #24]
 800639a:	f023 0307 	bic.w	r3, r3, #7
 800639e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80063a0:	69bb      	ldr	r3, [r7, #24]
 80063a2:	f003 0307 	and.w	r3, r3, #7
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d00d      	beq.n	80063c6 <prvInitialiseNewTask+0x5e>
	__asm volatile
 80063aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063ae:	b672      	cpsid	i
 80063b0:	f383 8811 	msr	BASEPRI, r3
 80063b4:	f3bf 8f6f 	isb	sy
 80063b8:	f3bf 8f4f 	dsb	sy
 80063bc:	b662      	cpsie	i
 80063be:	617b      	str	r3, [r7, #20]
}
 80063c0:	bf00      	nop
 80063c2:	bf00      	nop
 80063c4:	e7fd      	b.n	80063c2 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80063c6:	68bb      	ldr	r3, [r7, #8]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d01f      	beq.n	800640c <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80063cc:	2300      	movs	r3, #0
 80063ce:	61fb      	str	r3, [r7, #28]
 80063d0:	e012      	b.n	80063f8 <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80063d2:	68ba      	ldr	r2, [r7, #8]
 80063d4:	69fb      	ldr	r3, [r7, #28]
 80063d6:	4413      	add	r3, r2
 80063d8:	7819      	ldrb	r1, [r3, #0]
 80063da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80063dc:	69fb      	ldr	r3, [r7, #28]
 80063de:	4413      	add	r3, r2
 80063e0:	3334      	adds	r3, #52	@ 0x34
 80063e2:	460a      	mov	r2, r1
 80063e4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80063e6:	68ba      	ldr	r2, [r7, #8]
 80063e8:	69fb      	ldr	r3, [r7, #28]
 80063ea:	4413      	add	r3, r2
 80063ec:	781b      	ldrb	r3, [r3, #0]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d006      	beq.n	8006400 <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80063f2:	69fb      	ldr	r3, [r7, #28]
 80063f4:	3301      	adds	r3, #1
 80063f6:	61fb      	str	r3, [r7, #28]
 80063f8:	69fb      	ldr	r3, [r7, #28]
 80063fa:	2b0f      	cmp	r3, #15
 80063fc:	d9e9      	bls.n	80063d2 <prvInitialiseNewTask+0x6a>
 80063fe:	e000      	b.n	8006402 <prvInitialiseNewTask+0x9a>
			{
				break;
 8006400:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006402:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006404:	2200      	movs	r2, #0
 8006406:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800640a:	e003      	b.n	8006414 <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800640c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800640e:	2200      	movs	r2, #0
 8006410:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006414:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006416:	2b37      	cmp	r3, #55	@ 0x37
 8006418:	d901      	bls.n	800641e <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800641a:	2337      	movs	r3, #55	@ 0x37
 800641c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800641e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006420:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006422:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006424:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006426:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006428:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800642a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800642c:	2200      	movs	r2, #0
 800642e:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006430:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006432:	3304      	adds	r3, #4
 8006434:	4618      	mov	r0, r3
 8006436:	f7fe fda1 	bl	8004f7c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800643a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800643c:	3318      	adds	r3, #24
 800643e:	4618      	mov	r0, r3
 8006440:	f7fe fd9c 	bl	8004f7c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006444:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006446:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006448:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800644a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800644c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006450:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006452:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006454:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006456:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006458:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800645a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800645c:	2200      	movs	r2, #0
 800645e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006462:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006464:	2200      	movs	r2, #0
 8006466:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800646a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800646c:	3354      	adds	r3, #84	@ 0x54
 800646e:	224c      	movs	r2, #76	@ 0x4c
 8006470:	2100      	movs	r1, #0
 8006472:	4618      	mov	r0, r3
 8006474:	f001 feba 	bl	80081ec <memset>
 8006478:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800647a:	4a0d      	ldr	r2, [pc, #52]	@ (80064b0 <prvInitialiseNewTask+0x148>)
 800647c:	659a      	str	r2, [r3, #88]	@ 0x58
 800647e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006480:	4a0c      	ldr	r2, [pc, #48]	@ (80064b4 <prvInitialiseNewTask+0x14c>)
 8006482:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006484:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006486:	4a0c      	ldr	r2, [pc, #48]	@ (80064b8 <prvInitialiseNewTask+0x150>)
 8006488:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800648a:	683a      	ldr	r2, [r7, #0]
 800648c:	68f9      	ldr	r1, [r7, #12]
 800648e:	69b8      	ldr	r0, [r7, #24]
 8006490:	f001 fa88 	bl	80079a4 <pxPortInitialiseStack>
 8006494:	4602      	mov	r2, r0
 8006496:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006498:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800649a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800649c:	2b00      	cmp	r3, #0
 800649e:	d002      	beq.n	80064a6 <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80064a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80064a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80064a6:	bf00      	nop
 80064a8:	3720      	adds	r7, #32
 80064aa:	46bd      	mov	sp, r7
 80064ac:	bd80      	pop	{r7, pc}
 80064ae:	bf00      	nop
 80064b0:	20005258 	.word	0x20005258
 80064b4:	200052c0 	.word	0x200052c0
 80064b8:	20005328 	.word	0x20005328

080064bc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b082      	sub	sp, #8
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80064c4:	f001 fb7a 	bl	8007bbc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80064c8:	4b2d      	ldr	r3, [pc, #180]	@ (8006580 <prvAddNewTaskToReadyList+0xc4>)
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	3301      	adds	r3, #1
 80064ce:	4a2c      	ldr	r2, [pc, #176]	@ (8006580 <prvAddNewTaskToReadyList+0xc4>)
 80064d0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80064d2:	4b2c      	ldr	r3, [pc, #176]	@ (8006584 <prvAddNewTaskToReadyList+0xc8>)
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d109      	bne.n	80064ee <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80064da:	4a2a      	ldr	r2, [pc, #168]	@ (8006584 <prvAddNewTaskToReadyList+0xc8>)
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80064e0:	4b27      	ldr	r3, [pc, #156]	@ (8006580 <prvAddNewTaskToReadyList+0xc4>)
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	2b01      	cmp	r3, #1
 80064e6:	d110      	bne.n	800650a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80064e8:	f000 fc44 	bl	8006d74 <prvInitialiseTaskLists>
 80064ec:	e00d      	b.n	800650a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80064ee:	4b26      	ldr	r3, [pc, #152]	@ (8006588 <prvAddNewTaskToReadyList+0xcc>)
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d109      	bne.n	800650a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80064f6:	4b23      	ldr	r3, [pc, #140]	@ (8006584 <prvAddNewTaskToReadyList+0xc8>)
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006500:	429a      	cmp	r2, r3
 8006502:	d802      	bhi.n	800650a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006504:	4a1f      	ldr	r2, [pc, #124]	@ (8006584 <prvAddNewTaskToReadyList+0xc8>)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800650a:	4b20      	ldr	r3, [pc, #128]	@ (800658c <prvAddNewTaskToReadyList+0xd0>)
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	3301      	adds	r3, #1
 8006510:	4a1e      	ldr	r2, [pc, #120]	@ (800658c <prvAddNewTaskToReadyList+0xd0>)
 8006512:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006514:	4b1d      	ldr	r3, [pc, #116]	@ (800658c <prvAddNewTaskToReadyList+0xd0>)
 8006516:	681a      	ldr	r2, [r3, #0]
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006520:	4b1b      	ldr	r3, [pc, #108]	@ (8006590 <prvAddNewTaskToReadyList+0xd4>)
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	429a      	cmp	r2, r3
 8006526:	d903      	bls.n	8006530 <prvAddNewTaskToReadyList+0x74>
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800652c:	4a18      	ldr	r2, [pc, #96]	@ (8006590 <prvAddNewTaskToReadyList+0xd4>)
 800652e:	6013      	str	r3, [r2, #0]
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006534:	4613      	mov	r3, r2
 8006536:	009b      	lsls	r3, r3, #2
 8006538:	4413      	add	r3, r2
 800653a:	009b      	lsls	r3, r3, #2
 800653c:	4a15      	ldr	r2, [pc, #84]	@ (8006594 <prvAddNewTaskToReadyList+0xd8>)
 800653e:	441a      	add	r2, r3
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	3304      	adds	r3, #4
 8006544:	4619      	mov	r1, r3
 8006546:	4610      	mov	r0, r2
 8006548:	f7fe fd25 	bl	8004f96 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800654c:	f001 fb6c 	bl	8007c28 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006550:	4b0d      	ldr	r3, [pc, #52]	@ (8006588 <prvAddNewTaskToReadyList+0xcc>)
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d00e      	beq.n	8006576 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006558:	4b0a      	ldr	r3, [pc, #40]	@ (8006584 <prvAddNewTaskToReadyList+0xc8>)
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006562:	429a      	cmp	r2, r3
 8006564:	d207      	bcs.n	8006576 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006566:	4b0c      	ldr	r3, [pc, #48]	@ (8006598 <prvAddNewTaskToReadyList+0xdc>)
 8006568:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800656c:	601a      	str	r2, [r3, #0]
 800656e:	f3bf 8f4f 	dsb	sy
 8006572:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006576:	bf00      	nop
 8006578:	3708      	adds	r7, #8
 800657a:	46bd      	mov	sp, r7
 800657c:	bd80      	pop	{r7, pc}
 800657e:	bf00      	nop
 8006580:	200014e0 	.word	0x200014e0
 8006584:	2000100c 	.word	0x2000100c
 8006588:	200014ec 	.word	0x200014ec
 800658c:	200014fc 	.word	0x200014fc
 8006590:	200014e8 	.word	0x200014e8
 8006594:	20001010 	.word	0x20001010
 8006598:	e000ed04 	.word	0xe000ed04

0800659c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800659c:	b580      	push	{r7, lr}
 800659e:	b084      	sub	sp, #16
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80065a4:	2300      	movs	r3, #0
 80065a6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d01a      	beq.n	80065e4 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80065ae:	4b15      	ldr	r3, [pc, #84]	@ (8006604 <vTaskDelay+0x68>)
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d00d      	beq.n	80065d2 <vTaskDelay+0x36>
	__asm volatile
 80065b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065ba:	b672      	cpsid	i
 80065bc:	f383 8811 	msr	BASEPRI, r3
 80065c0:	f3bf 8f6f 	isb	sy
 80065c4:	f3bf 8f4f 	dsb	sy
 80065c8:	b662      	cpsie	i
 80065ca:	60bb      	str	r3, [r7, #8]
}
 80065cc:	bf00      	nop
 80065ce:	bf00      	nop
 80065d0:	e7fd      	b.n	80065ce <vTaskDelay+0x32>
			vTaskSuspendAll();
 80065d2:	f000 f88f 	bl	80066f4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80065d6:	2100      	movs	r1, #0
 80065d8:	6878      	ldr	r0, [r7, #4]
 80065da:	f000 fe27 	bl	800722c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80065de:	f000 f897 	bl	8006710 <xTaskResumeAll>
 80065e2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d107      	bne.n	80065fa <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 80065ea:	4b07      	ldr	r3, [pc, #28]	@ (8006608 <vTaskDelay+0x6c>)
 80065ec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80065f0:	601a      	str	r2, [r3, #0]
 80065f2:	f3bf 8f4f 	dsb	sy
 80065f6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80065fa:	bf00      	nop
 80065fc:	3710      	adds	r7, #16
 80065fe:	46bd      	mov	sp, r7
 8006600:	bd80      	pop	{r7, pc}
 8006602:	bf00      	nop
 8006604:	20001508 	.word	0x20001508
 8006608:	e000ed04 	.word	0xe000ed04

0800660c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800660c:	b580      	push	{r7, lr}
 800660e:	b08a      	sub	sp, #40	@ 0x28
 8006610:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006612:	2300      	movs	r3, #0
 8006614:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006616:	2300      	movs	r3, #0
 8006618:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800661a:	463a      	mov	r2, r7
 800661c:	1d39      	adds	r1, r7, #4
 800661e:	f107 0308 	add.w	r3, r7, #8
 8006622:	4618      	mov	r0, r3
 8006624:	f7fe fc56 	bl	8004ed4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006628:	6839      	ldr	r1, [r7, #0]
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	68ba      	ldr	r2, [r7, #8]
 800662e:	9202      	str	r2, [sp, #8]
 8006630:	9301      	str	r3, [sp, #4]
 8006632:	2300      	movs	r3, #0
 8006634:	9300      	str	r3, [sp, #0]
 8006636:	2300      	movs	r3, #0
 8006638:	460a      	mov	r2, r1
 800663a:	4926      	ldr	r1, [pc, #152]	@ (80066d4 <vTaskStartScheduler+0xc8>)
 800663c:	4826      	ldr	r0, [pc, #152]	@ (80066d8 <vTaskStartScheduler+0xcc>)
 800663e:	f7ff fde7 	bl	8006210 <xTaskCreateStatic>
 8006642:	4603      	mov	r3, r0
 8006644:	4a25      	ldr	r2, [pc, #148]	@ (80066dc <vTaskStartScheduler+0xd0>)
 8006646:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006648:	4b24      	ldr	r3, [pc, #144]	@ (80066dc <vTaskStartScheduler+0xd0>)
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d002      	beq.n	8006656 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006650:	2301      	movs	r3, #1
 8006652:	617b      	str	r3, [r7, #20]
 8006654:	e001      	b.n	800665a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006656:	2300      	movs	r3, #0
 8006658:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800665a:	697b      	ldr	r3, [r7, #20]
 800665c:	2b01      	cmp	r3, #1
 800665e:	d102      	bne.n	8006666 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006660:	f000 fe38 	bl	80072d4 <xTimerCreateTimerTask>
 8006664:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006666:	697b      	ldr	r3, [r7, #20]
 8006668:	2b01      	cmp	r3, #1
 800666a:	d11d      	bne.n	80066a8 <vTaskStartScheduler+0x9c>
	__asm volatile
 800666c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006670:	b672      	cpsid	i
 8006672:	f383 8811 	msr	BASEPRI, r3
 8006676:	f3bf 8f6f 	isb	sy
 800667a:	f3bf 8f4f 	dsb	sy
 800667e:	b662      	cpsie	i
 8006680:	613b      	str	r3, [r7, #16]
}
 8006682:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006684:	4b16      	ldr	r3, [pc, #88]	@ (80066e0 <vTaskStartScheduler+0xd4>)
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	3354      	adds	r3, #84	@ 0x54
 800668a:	4a16      	ldr	r2, [pc, #88]	@ (80066e4 <vTaskStartScheduler+0xd8>)
 800668c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800668e:	4b16      	ldr	r3, [pc, #88]	@ (80066e8 <vTaskStartScheduler+0xdc>)
 8006690:	f04f 32ff 	mov.w	r2, #4294967295
 8006694:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006696:	4b15      	ldr	r3, [pc, #84]	@ (80066ec <vTaskStartScheduler+0xe0>)
 8006698:	2201      	movs	r2, #1
 800669a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800669c:	4b14      	ldr	r3, [pc, #80]	@ (80066f0 <vTaskStartScheduler+0xe4>)
 800669e:	2200      	movs	r2, #0
 80066a0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80066a2:	f001 fa0d 	bl	8007ac0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80066a6:	e011      	b.n	80066cc <vTaskStartScheduler+0xc0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80066a8:	697b      	ldr	r3, [r7, #20]
 80066aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066ae:	d10d      	bne.n	80066cc <vTaskStartScheduler+0xc0>
	__asm volatile
 80066b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066b4:	b672      	cpsid	i
 80066b6:	f383 8811 	msr	BASEPRI, r3
 80066ba:	f3bf 8f6f 	isb	sy
 80066be:	f3bf 8f4f 	dsb	sy
 80066c2:	b662      	cpsie	i
 80066c4:	60fb      	str	r3, [r7, #12]
}
 80066c6:	bf00      	nop
 80066c8:	bf00      	nop
 80066ca:	e7fd      	b.n	80066c8 <vTaskStartScheduler+0xbc>
}
 80066cc:	bf00      	nop
 80066ce:	3718      	adds	r7, #24
 80066d0:	46bd      	mov	sp, r7
 80066d2:	bd80      	pop	{r7, pc}
 80066d4:	0800846c 	.word	0x0800846c
 80066d8:	08006d45 	.word	0x08006d45
 80066dc:	20001504 	.word	0x20001504
 80066e0:	2000100c 	.word	0x2000100c
 80066e4:	20000010 	.word	0x20000010
 80066e8:	20001500 	.word	0x20001500
 80066ec:	200014ec 	.word	0x200014ec
 80066f0:	200014e4 	.word	0x200014e4

080066f4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80066f4:	b480      	push	{r7}
 80066f6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80066f8:	4b04      	ldr	r3, [pc, #16]	@ (800670c <vTaskSuspendAll+0x18>)
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	3301      	adds	r3, #1
 80066fe:	4a03      	ldr	r2, [pc, #12]	@ (800670c <vTaskSuspendAll+0x18>)
 8006700:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8006702:	bf00      	nop
 8006704:	46bd      	mov	sp, r7
 8006706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670a:	4770      	bx	lr
 800670c:	20001508 	.word	0x20001508

08006710 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b084      	sub	sp, #16
 8006714:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006716:	2300      	movs	r3, #0
 8006718:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800671a:	2300      	movs	r3, #0
 800671c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800671e:	4b43      	ldr	r3, [pc, #268]	@ (800682c <xTaskResumeAll+0x11c>)
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d10d      	bne.n	8006742 <xTaskResumeAll+0x32>
	__asm volatile
 8006726:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800672a:	b672      	cpsid	i
 800672c:	f383 8811 	msr	BASEPRI, r3
 8006730:	f3bf 8f6f 	isb	sy
 8006734:	f3bf 8f4f 	dsb	sy
 8006738:	b662      	cpsie	i
 800673a:	603b      	str	r3, [r7, #0]
}
 800673c:	bf00      	nop
 800673e:	bf00      	nop
 8006740:	e7fd      	b.n	800673e <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006742:	f001 fa3b 	bl	8007bbc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006746:	4b39      	ldr	r3, [pc, #228]	@ (800682c <xTaskResumeAll+0x11c>)
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	3b01      	subs	r3, #1
 800674c:	4a37      	ldr	r2, [pc, #220]	@ (800682c <xTaskResumeAll+0x11c>)
 800674e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006750:	4b36      	ldr	r3, [pc, #216]	@ (800682c <xTaskResumeAll+0x11c>)
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d162      	bne.n	800681e <xTaskResumeAll+0x10e>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006758:	4b35      	ldr	r3, [pc, #212]	@ (8006830 <xTaskResumeAll+0x120>)
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d05e      	beq.n	800681e <xTaskResumeAll+0x10e>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006760:	e02f      	b.n	80067c2 <xTaskResumeAll+0xb2>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006762:	4b34      	ldr	r3, [pc, #208]	@ (8006834 <xTaskResumeAll+0x124>)
 8006764:	68db      	ldr	r3, [r3, #12]
 8006766:	68db      	ldr	r3, [r3, #12]
 8006768:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	3318      	adds	r3, #24
 800676e:	4618      	mov	r0, r3
 8006770:	f7fe fc6e 	bl	8005050 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	3304      	adds	r3, #4
 8006778:	4618      	mov	r0, r3
 800677a:	f7fe fc69 	bl	8005050 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006782:	4b2d      	ldr	r3, [pc, #180]	@ (8006838 <xTaskResumeAll+0x128>)
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	429a      	cmp	r2, r3
 8006788:	d903      	bls.n	8006792 <xTaskResumeAll+0x82>
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800678e:	4a2a      	ldr	r2, [pc, #168]	@ (8006838 <xTaskResumeAll+0x128>)
 8006790:	6013      	str	r3, [r2, #0]
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006796:	4613      	mov	r3, r2
 8006798:	009b      	lsls	r3, r3, #2
 800679a:	4413      	add	r3, r2
 800679c:	009b      	lsls	r3, r3, #2
 800679e:	4a27      	ldr	r2, [pc, #156]	@ (800683c <xTaskResumeAll+0x12c>)
 80067a0:	441a      	add	r2, r3
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	3304      	adds	r3, #4
 80067a6:	4619      	mov	r1, r3
 80067a8:	4610      	mov	r0, r2
 80067aa:	f7fe fbf4 	bl	8004f96 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80067b2:	4b23      	ldr	r3, [pc, #140]	@ (8006840 <xTaskResumeAll+0x130>)
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067b8:	429a      	cmp	r2, r3
 80067ba:	d302      	bcc.n	80067c2 <xTaskResumeAll+0xb2>
					{
						xYieldPending = pdTRUE;
 80067bc:	4b21      	ldr	r3, [pc, #132]	@ (8006844 <xTaskResumeAll+0x134>)
 80067be:	2201      	movs	r2, #1
 80067c0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80067c2:	4b1c      	ldr	r3, [pc, #112]	@ (8006834 <xTaskResumeAll+0x124>)
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d1cb      	bne.n	8006762 <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d001      	beq.n	80067d4 <xTaskResumeAll+0xc4>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80067d0:	f000 fb76 	bl	8006ec0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80067d4:	4b1c      	ldr	r3, [pc, #112]	@ (8006848 <xTaskResumeAll+0x138>)
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d010      	beq.n	8006802 <xTaskResumeAll+0xf2>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80067e0:	f000 f846 	bl	8006870 <xTaskIncrementTick>
 80067e4:	4603      	mov	r3, r0
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d002      	beq.n	80067f0 <xTaskResumeAll+0xe0>
							{
								xYieldPending = pdTRUE;
 80067ea:	4b16      	ldr	r3, [pc, #88]	@ (8006844 <xTaskResumeAll+0x134>)
 80067ec:	2201      	movs	r2, #1
 80067ee:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	3b01      	subs	r3, #1
 80067f4:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d1f1      	bne.n	80067e0 <xTaskResumeAll+0xd0>

						uxPendedTicks = 0;
 80067fc:	4b12      	ldr	r3, [pc, #72]	@ (8006848 <xTaskResumeAll+0x138>)
 80067fe:	2200      	movs	r2, #0
 8006800:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006802:	4b10      	ldr	r3, [pc, #64]	@ (8006844 <xTaskResumeAll+0x134>)
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d009      	beq.n	800681e <xTaskResumeAll+0x10e>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800680a:	2301      	movs	r3, #1
 800680c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800680e:	4b0f      	ldr	r3, [pc, #60]	@ (800684c <xTaskResumeAll+0x13c>)
 8006810:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006814:	601a      	str	r2, [r3, #0]
 8006816:	f3bf 8f4f 	dsb	sy
 800681a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800681e:	f001 fa03 	bl	8007c28 <vPortExitCritical>

	return xAlreadyYielded;
 8006822:	68bb      	ldr	r3, [r7, #8]
}
 8006824:	4618      	mov	r0, r3
 8006826:	3710      	adds	r7, #16
 8006828:	46bd      	mov	sp, r7
 800682a:	bd80      	pop	{r7, pc}
 800682c:	20001508 	.word	0x20001508
 8006830:	200014e0 	.word	0x200014e0
 8006834:	200014a0 	.word	0x200014a0
 8006838:	200014e8 	.word	0x200014e8
 800683c:	20001010 	.word	0x20001010
 8006840:	2000100c 	.word	0x2000100c
 8006844:	200014f4 	.word	0x200014f4
 8006848:	200014f0 	.word	0x200014f0
 800684c:	e000ed04 	.word	0xe000ed04

08006850 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006850:	b480      	push	{r7}
 8006852:	b083      	sub	sp, #12
 8006854:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006856:	4b05      	ldr	r3, [pc, #20]	@ (800686c <xTaskGetTickCount+0x1c>)
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800685c:	687b      	ldr	r3, [r7, #4]
}
 800685e:	4618      	mov	r0, r3
 8006860:	370c      	adds	r7, #12
 8006862:	46bd      	mov	sp, r7
 8006864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006868:	4770      	bx	lr
 800686a:	bf00      	nop
 800686c:	200014e4 	.word	0x200014e4

08006870 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006870:	b580      	push	{r7, lr}
 8006872:	b086      	sub	sp, #24
 8006874:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006876:	2300      	movs	r3, #0
 8006878:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800687a:	4b50      	ldr	r3, [pc, #320]	@ (80069bc <xTaskIncrementTick+0x14c>)
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	2b00      	cmp	r3, #0
 8006880:	f040 808c 	bne.w	800699c <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006884:	4b4e      	ldr	r3, [pc, #312]	@ (80069c0 <xTaskIncrementTick+0x150>)
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	3301      	adds	r3, #1
 800688a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800688c:	4a4c      	ldr	r2, [pc, #304]	@ (80069c0 <xTaskIncrementTick+0x150>)
 800688e:	693b      	ldr	r3, [r7, #16]
 8006890:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006892:	693b      	ldr	r3, [r7, #16]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d123      	bne.n	80068e0 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 8006898:	4b4a      	ldr	r3, [pc, #296]	@ (80069c4 <xTaskIncrementTick+0x154>)
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d00d      	beq.n	80068be <xTaskIncrementTick+0x4e>
	__asm volatile
 80068a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068a6:	b672      	cpsid	i
 80068a8:	f383 8811 	msr	BASEPRI, r3
 80068ac:	f3bf 8f6f 	isb	sy
 80068b0:	f3bf 8f4f 	dsb	sy
 80068b4:	b662      	cpsie	i
 80068b6:	603b      	str	r3, [r7, #0]
}
 80068b8:	bf00      	nop
 80068ba:	bf00      	nop
 80068bc:	e7fd      	b.n	80068ba <xTaskIncrementTick+0x4a>
 80068be:	4b41      	ldr	r3, [pc, #260]	@ (80069c4 <xTaskIncrementTick+0x154>)
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	60fb      	str	r3, [r7, #12]
 80068c4:	4b40      	ldr	r3, [pc, #256]	@ (80069c8 <xTaskIncrementTick+0x158>)
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	4a3e      	ldr	r2, [pc, #248]	@ (80069c4 <xTaskIncrementTick+0x154>)
 80068ca:	6013      	str	r3, [r2, #0]
 80068cc:	4a3e      	ldr	r2, [pc, #248]	@ (80069c8 <xTaskIncrementTick+0x158>)
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	6013      	str	r3, [r2, #0]
 80068d2:	4b3e      	ldr	r3, [pc, #248]	@ (80069cc <xTaskIncrementTick+0x15c>)
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	3301      	adds	r3, #1
 80068d8:	4a3c      	ldr	r2, [pc, #240]	@ (80069cc <xTaskIncrementTick+0x15c>)
 80068da:	6013      	str	r3, [r2, #0]
 80068dc:	f000 faf0 	bl	8006ec0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80068e0:	4b3b      	ldr	r3, [pc, #236]	@ (80069d0 <xTaskIncrementTick+0x160>)
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	693a      	ldr	r2, [r7, #16]
 80068e6:	429a      	cmp	r2, r3
 80068e8:	d349      	bcc.n	800697e <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80068ea:	4b36      	ldr	r3, [pc, #216]	@ (80069c4 <xTaskIncrementTick+0x154>)
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d104      	bne.n	80068fe <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80068f4:	4b36      	ldr	r3, [pc, #216]	@ (80069d0 <xTaskIncrementTick+0x160>)
 80068f6:	f04f 32ff 	mov.w	r2, #4294967295
 80068fa:	601a      	str	r2, [r3, #0]
					break;
 80068fc:	e03f      	b.n	800697e <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80068fe:	4b31      	ldr	r3, [pc, #196]	@ (80069c4 <xTaskIncrementTick+0x154>)
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	68db      	ldr	r3, [r3, #12]
 8006904:	68db      	ldr	r3, [r3, #12]
 8006906:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006908:	68bb      	ldr	r3, [r7, #8]
 800690a:	685b      	ldr	r3, [r3, #4]
 800690c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800690e:	693a      	ldr	r2, [r7, #16]
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	429a      	cmp	r2, r3
 8006914:	d203      	bcs.n	800691e <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006916:	4a2e      	ldr	r2, [pc, #184]	@ (80069d0 <xTaskIncrementTick+0x160>)
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800691c:	e02f      	b.n	800697e <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800691e:	68bb      	ldr	r3, [r7, #8]
 8006920:	3304      	adds	r3, #4
 8006922:	4618      	mov	r0, r3
 8006924:	f7fe fb94 	bl	8005050 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006928:	68bb      	ldr	r3, [r7, #8]
 800692a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800692c:	2b00      	cmp	r3, #0
 800692e:	d004      	beq.n	800693a <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006930:	68bb      	ldr	r3, [r7, #8]
 8006932:	3318      	adds	r3, #24
 8006934:	4618      	mov	r0, r3
 8006936:	f7fe fb8b 	bl	8005050 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800693a:	68bb      	ldr	r3, [r7, #8]
 800693c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800693e:	4b25      	ldr	r3, [pc, #148]	@ (80069d4 <xTaskIncrementTick+0x164>)
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	429a      	cmp	r2, r3
 8006944:	d903      	bls.n	800694e <xTaskIncrementTick+0xde>
 8006946:	68bb      	ldr	r3, [r7, #8]
 8006948:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800694a:	4a22      	ldr	r2, [pc, #136]	@ (80069d4 <xTaskIncrementTick+0x164>)
 800694c:	6013      	str	r3, [r2, #0]
 800694e:	68bb      	ldr	r3, [r7, #8]
 8006950:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006952:	4613      	mov	r3, r2
 8006954:	009b      	lsls	r3, r3, #2
 8006956:	4413      	add	r3, r2
 8006958:	009b      	lsls	r3, r3, #2
 800695a:	4a1f      	ldr	r2, [pc, #124]	@ (80069d8 <xTaskIncrementTick+0x168>)
 800695c:	441a      	add	r2, r3
 800695e:	68bb      	ldr	r3, [r7, #8]
 8006960:	3304      	adds	r3, #4
 8006962:	4619      	mov	r1, r3
 8006964:	4610      	mov	r0, r2
 8006966:	f7fe fb16 	bl	8004f96 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800696a:	68bb      	ldr	r3, [r7, #8]
 800696c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800696e:	4b1b      	ldr	r3, [pc, #108]	@ (80069dc <xTaskIncrementTick+0x16c>)
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006974:	429a      	cmp	r2, r3
 8006976:	d3b8      	bcc.n	80068ea <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 8006978:	2301      	movs	r3, #1
 800697a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800697c:	e7b5      	b.n	80068ea <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800697e:	4b17      	ldr	r3, [pc, #92]	@ (80069dc <xTaskIncrementTick+0x16c>)
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006984:	4914      	ldr	r1, [pc, #80]	@ (80069d8 <xTaskIncrementTick+0x168>)
 8006986:	4613      	mov	r3, r2
 8006988:	009b      	lsls	r3, r3, #2
 800698a:	4413      	add	r3, r2
 800698c:	009b      	lsls	r3, r3, #2
 800698e:	440b      	add	r3, r1
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	2b01      	cmp	r3, #1
 8006994:	d907      	bls.n	80069a6 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8006996:	2301      	movs	r3, #1
 8006998:	617b      	str	r3, [r7, #20]
 800699a:	e004      	b.n	80069a6 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800699c:	4b10      	ldr	r3, [pc, #64]	@ (80069e0 <xTaskIncrementTick+0x170>)
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	3301      	adds	r3, #1
 80069a2:	4a0f      	ldr	r2, [pc, #60]	@ (80069e0 <xTaskIncrementTick+0x170>)
 80069a4:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80069a6:	4b0f      	ldr	r3, [pc, #60]	@ (80069e4 <xTaskIncrementTick+0x174>)
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d001      	beq.n	80069b2 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 80069ae:	2301      	movs	r3, #1
 80069b0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80069b2:	697b      	ldr	r3, [r7, #20]
}
 80069b4:	4618      	mov	r0, r3
 80069b6:	3718      	adds	r7, #24
 80069b8:	46bd      	mov	sp, r7
 80069ba:	bd80      	pop	{r7, pc}
 80069bc:	20001508 	.word	0x20001508
 80069c0:	200014e4 	.word	0x200014e4
 80069c4:	20001498 	.word	0x20001498
 80069c8:	2000149c 	.word	0x2000149c
 80069cc:	200014f8 	.word	0x200014f8
 80069d0:	20001500 	.word	0x20001500
 80069d4:	200014e8 	.word	0x200014e8
 80069d8:	20001010 	.word	0x20001010
 80069dc:	2000100c 	.word	0x2000100c
 80069e0:	200014f0 	.word	0x200014f0
 80069e4:	200014f4 	.word	0x200014f4

080069e8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80069e8:	b480      	push	{r7}
 80069ea:	b085      	sub	sp, #20
 80069ec:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80069ee:	4b2c      	ldr	r3, [pc, #176]	@ (8006aa0 <vTaskSwitchContext+0xb8>)
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d003      	beq.n	80069fe <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80069f6:	4b2b      	ldr	r3, [pc, #172]	@ (8006aa4 <vTaskSwitchContext+0xbc>)
 80069f8:	2201      	movs	r2, #1
 80069fa:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80069fc:	e049      	b.n	8006a92 <vTaskSwitchContext+0xaa>
		xYieldPending = pdFALSE;
 80069fe:	4b29      	ldr	r3, [pc, #164]	@ (8006aa4 <vTaskSwitchContext+0xbc>)
 8006a00:	2200      	movs	r2, #0
 8006a02:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a04:	4b28      	ldr	r3, [pc, #160]	@ (8006aa8 <vTaskSwitchContext+0xc0>)
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	60fb      	str	r3, [r7, #12]
 8006a0a:	e013      	b.n	8006a34 <vTaskSwitchContext+0x4c>
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d10d      	bne.n	8006a2e <vTaskSwitchContext+0x46>
	__asm volatile
 8006a12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a16:	b672      	cpsid	i
 8006a18:	f383 8811 	msr	BASEPRI, r3
 8006a1c:	f3bf 8f6f 	isb	sy
 8006a20:	f3bf 8f4f 	dsb	sy
 8006a24:	b662      	cpsie	i
 8006a26:	607b      	str	r3, [r7, #4]
}
 8006a28:	bf00      	nop
 8006a2a:	bf00      	nop
 8006a2c:	e7fd      	b.n	8006a2a <vTaskSwitchContext+0x42>
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	3b01      	subs	r3, #1
 8006a32:	60fb      	str	r3, [r7, #12]
 8006a34:	491d      	ldr	r1, [pc, #116]	@ (8006aac <vTaskSwitchContext+0xc4>)
 8006a36:	68fa      	ldr	r2, [r7, #12]
 8006a38:	4613      	mov	r3, r2
 8006a3a:	009b      	lsls	r3, r3, #2
 8006a3c:	4413      	add	r3, r2
 8006a3e:	009b      	lsls	r3, r3, #2
 8006a40:	440b      	add	r3, r1
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d0e1      	beq.n	8006a0c <vTaskSwitchContext+0x24>
 8006a48:	68fa      	ldr	r2, [r7, #12]
 8006a4a:	4613      	mov	r3, r2
 8006a4c:	009b      	lsls	r3, r3, #2
 8006a4e:	4413      	add	r3, r2
 8006a50:	009b      	lsls	r3, r3, #2
 8006a52:	4a16      	ldr	r2, [pc, #88]	@ (8006aac <vTaskSwitchContext+0xc4>)
 8006a54:	4413      	add	r3, r2
 8006a56:	60bb      	str	r3, [r7, #8]
 8006a58:	68bb      	ldr	r3, [r7, #8]
 8006a5a:	685b      	ldr	r3, [r3, #4]
 8006a5c:	685a      	ldr	r2, [r3, #4]
 8006a5e:	68bb      	ldr	r3, [r7, #8]
 8006a60:	605a      	str	r2, [r3, #4]
 8006a62:	68bb      	ldr	r3, [r7, #8]
 8006a64:	685a      	ldr	r2, [r3, #4]
 8006a66:	68bb      	ldr	r3, [r7, #8]
 8006a68:	3308      	adds	r3, #8
 8006a6a:	429a      	cmp	r2, r3
 8006a6c:	d104      	bne.n	8006a78 <vTaskSwitchContext+0x90>
 8006a6e:	68bb      	ldr	r3, [r7, #8]
 8006a70:	685b      	ldr	r3, [r3, #4]
 8006a72:	685a      	ldr	r2, [r3, #4]
 8006a74:	68bb      	ldr	r3, [r7, #8]
 8006a76:	605a      	str	r2, [r3, #4]
 8006a78:	68bb      	ldr	r3, [r7, #8]
 8006a7a:	685b      	ldr	r3, [r3, #4]
 8006a7c:	68db      	ldr	r3, [r3, #12]
 8006a7e:	4a0c      	ldr	r2, [pc, #48]	@ (8006ab0 <vTaskSwitchContext+0xc8>)
 8006a80:	6013      	str	r3, [r2, #0]
 8006a82:	4a09      	ldr	r2, [pc, #36]	@ (8006aa8 <vTaskSwitchContext+0xc0>)
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006a88:	4b09      	ldr	r3, [pc, #36]	@ (8006ab0 <vTaskSwitchContext+0xc8>)
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	3354      	adds	r3, #84	@ 0x54
 8006a8e:	4a09      	ldr	r2, [pc, #36]	@ (8006ab4 <vTaskSwitchContext+0xcc>)
 8006a90:	6013      	str	r3, [r2, #0]
}
 8006a92:	bf00      	nop
 8006a94:	3714      	adds	r7, #20
 8006a96:	46bd      	mov	sp, r7
 8006a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9c:	4770      	bx	lr
 8006a9e:	bf00      	nop
 8006aa0:	20001508 	.word	0x20001508
 8006aa4:	200014f4 	.word	0x200014f4
 8006aa8:	200014e8 	.word	0x200014e8
 8006aac:	20001010 	.word	0x20001010
 8006ab0:	2000100c 	.word	0x2000100c
 8006ab4:	20000010 	.word	0x20000010

08006ab8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b084      	sub	sp, #16
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
 8006ac0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d10d      	bne.n	8006ae4 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 8006ac8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006acc:	b672      	cpsid	i
 8006ace:	f383 8811 	msr	BASEPRI, r3
 8006ad2:	f3bf 8f6f 	isb	sy
 8006ad6:	f3bf 8f4f 	dsb	sy
 8006ada:	b662      	cpsie	i
 8006adc:	60fb      	str	r3, [r7, #12]
}
 8006ade:	bf00      	nop
 8006ae0:	bf00      	nop
 8006ae2:	e7fd      	b.n	8006ae0 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006ae4:	4b07      	ldr	r3, [pc, #28]	@ (8006b04 <vTaskPlaceOnEventList+0x4c>)
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	3318      	adds	r3, #24
 8006aea:	4619      	mov	r1, r3
 8006aec:	6878      	ldr	r0, [r7, #4]
 8006aee:	f7fe fa76 	bl	8004fde <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006af2:	2101      	movs	r1, #1
 8006af4:	6838      	ldr	r0, [r7, #0]
 8006af6:	f000 fb99 	bl	800722c <prvAddCurrentTaskToDelayedList>
}
 8006afa:	bf00      	nop
 8006afc:	3710      	adds	r7, #16
 8006afe:	46bd      	mov	sp, r7
 8006b00:	bd80      	pop	{r7, pc}
 8006b02:	bf00      	nop
 8006b04:	2000100c 	.word	0x2000100c

08006b08 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	b086      	sub	sp, #24
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	60f8      	str	r0, [r7, #12]
 8006b10:	60b9      	str	r1, [r7, #8]
 8006b12:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d10d      	bne.n	8006b36 <vTaskPlaceOnEventListRestricted+0x2e>
	__asm volatile
 8006b1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b1e:	b672      	cpsid	i
 8006b20:	f383 8811 	msr	BASEPRI, r3
 8006b24:	f3bf 8f6f 	isb	sy
 8006b28:	f3bf 8f4f 	dsb	sy
 8006b2c:	b662      	cpsie	i
 8006b2e:	617b      	str	r3, [r7, #20]
}
 8006b30:	bf00      	nop
 8006b32:	bf00      	nop
 8006b34:	e7fd      	b.n	8006b32 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006b36:	4b0a      	ldr	r3, [pc, #40]	@ (8006b60 <vTaskPlaceOnEventListRestricted+0x58>)
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	3318      	adds	r3, #24
 8006b3c:	4619      	mov	r1, r3
 8006b3e:	68f8      	ldr	r0, [r7, #12]
 8006b40:	f7fe fa29 	bl	8004f96 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d002      	beq.n	8006b50 <vTaskPlaceOnEventListRestricted+0x48>
		{
			xTicksToWait = portMAX_DELAY;
 8006b4a:	f04f 33ff 	mov.w	r3, #4294967295
 8006b4e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006b50:	6879      	ldr	r1, [r7, #4]
 8006b52:	68b8      	ldr	r0, [r7, #8]
 8006b54:	f000 fb6a 	bl	800722c <prvAddCurrentTaskToDelayedList>
	}
 8006b58:	bf00      	nop
 8006b5a:	3718      	adds	r7, #24
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	bd80      	pop	{r7, pc}
 8006b60:	2000100c 	.word	0x2000100c

08006b64 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006b64:	b580      	push	{r7, lr}
 8006b66:	b086      	sub	sp, #24
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	68db      	ldr	r3, [r3, #12]
 8006b70:	68db      	ldr	r3, [r3, #12]
 8006b72:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006b74:	693b      	ldr	r3, [r7, #16]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d10d      	bne.n	8006b96 <xTaskRemoveFromEventList+0x32>
	__asm volatile
 8006b7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b7e:	b672      	cpsid	i
 8006b80:	f383 8811 	msr	BASEPRI, r3
 8006b84:	f3bf 8f6f 	isb	sy
 8006b88:	f3bf 8f4f 	dsb	sy
 8006b8c:	b662      	cpsie	i
 8006b8e:	60fb      	str	r3, [r7, #12]
}
 8006b90:	bf00      	nop
 8006b92:	bf00      	nop
 8006b94:	e7fd      	b.n	8006b92 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006b96:	693b      	ldr	r3, [r7, #16]
 8006b98:	3318      	adds	r3, #24
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	f7fe fa58 	bl	8005050 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006ba0:	4b1d      	ldr	r3, [pc, #116]	@ (8006c18 <xTaskRemoveFromEventList+0xb4>)
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d11d      	bne.n	8006be4 <xTaskRemoveFromEventList+0x80>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006ba8:	693b      	ldr	r3, [r7, #16]
 8006baa:	3304      	adds	r3, #4
 8006bac:	4618      	mov	r0, r3
 8006bae:	f7fe fa4f 	bl	8005050 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006bb2:	693b      	ldr	r3, [r7, #16]
 8006bb4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006bb6:	4b19      	ldr	r3, [pc, #100]	@ (8006c1c <xTaskRemoveFromEventList+0xb8>)
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	429a      	cmp	r2, r3
 8006bbc:	d903      	bls.n	8006bc6 <xTaskRemoveFromEventList+0x62>
 8006bbe:	693b      	ldr	r3, [r7, #16]
 8006bc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bc2:	4a16      	ldr	r2, [pc, #88]	@ (8006c1c <xTaskRemoveFromEventList+0xb8>)
 8006bc4:	6013      	str	r3, [r2, #0]
 8006bc6:	693b      	ldr	r3, [r7, #16]
 8006bc8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006bca:	4613      	mov	r3, r2
 8006bcc:	009b      	lsls	r3, r3, #2
 8006bce:	4413      	add	r3, r2
 8006bd0:	009b      	lsls	r3, r3, #2
 8006bd2:	4a13      	ldr	r2, [pc, #76]	@ (8006c20 <xTaskRemoveFromEventList+0xbc>)
 8006bd4:	441a      	add	r2, r3
 8006bd6:	693b      	ldr	r3, [r7, #16]
 8006bd8:	3304      	adds	r3, #4
 8006bda:	4619      	mov	r1, r3
 8006bdc:	4610      	mov	r0, r2
 8006bde:	f7fe f9da 	bl	8004f96 <vListInsertEnd>
 8006be2:	e005      	b.n	8006bf0 <xTaskRemoveFromEventList+0x8c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006be4:	693b      	ldr	r3, [r7, #16]
 8006be6:	3318      	adds	r3, #24
 8006be8:	4619      	mov	r1, r3
 8006bea:	480e      	ldr	r0, [pc, #56]	@ (8006c24 <xTaskRemoveFromEventList+0xc0>)
 8006bec:	f7fe f9d3 	bl	8004f96 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006bf0:	693b      	ldr	r3, [r7, #16]
 8006bf2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006bf4:	4b0c      	ldr	r3, [pc, #48]	@ (8006c28 <xTaskRemoveFromEventList+0xc4>)
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bfa:	429a      	cmp	r2, r3
 8006bfc:	d905      	bls.n	8006c0a <xTaskRemoveFromEventList+0xa6>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006bfe:	2301      	movs	r3, #1
 8006c00:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006c02:	4b0a      	ldr	r3, [pc, #40]	@ (8006c2c <xTaskRemoveFromEventList+0xc8>)
 8006c04:	2201      	movs	r2, #1
 8006c06:	601a      	str	r2, [r3, #0]
 8006c08:	e001      	b.n	8006c0e <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		xReturn = pdFALSE;
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006c0e:	697b      	ldr	r3, [r7, #20]
}
 8006c10:	4618      	mov	r0, r3
 8006c12:	3718      	adds	r7, #24
 8006c14:	46bd      	mov	sp, r7
 8006c16:	bd80      	pop	{r7, pc}
 8006c18:	20001508 	.word	0x20001508
 8006c1c:	200014e8 	.word	0x200014e8
 8006c20:	20001010 	.word	0x20001010
 8006c24:	200014a0 	.word	0x200014a0
 8006c28:	2000100c 	.word	0x2000100c
 8006c2c:	200014f4 	.word	0x200014f4

08006c30 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006c30:	b480      	push	{r7}
 8006c32:	b083      	sub	sp, #12
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006c38:	4b06      	ldr	r3, [pc, #24]	@ (8006c54 <vTaskInternalSetTimeOutState+0x24>)
 8006c3a:	681a      	ldr	r2, [r3, #0]
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006c40:	4b05      	ldr	r3, [pc, #20]	@ (8006c58 <vTaskInternalSetTimeOutState+0x28>)
 8006c42:	681a      	ldr	r2, [r3, #0]
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	605a      	str	r2, [r3, #4]
}
 8006c48:	bf00      	nop
 8006c4a:	370c      	adds	r7, #12
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c52:	4770      	bx	lr
 8006c54:	200014f8 	.word	0x200014f8
 8006c58:	200014e4 	.word	0x200014e4

08006c5c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	b088      	sub	sp, #32
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
 8006c64:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d10d      	bne.n	8006c88 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 8006c6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c70:	b672      	cpsid	i
 8006c72:	f383 8811 	msr	BASEPRI, r3
 8006c76:	f3bf 8f6f 	isb	sy
 8006c7a:	f3bf 8f4f 	dsb	sy
 8006c7e:	b662      	cpsie	i
 8006c80:	613b      	str	r3, [r7, #16]
}
 8006c82:	bf00      	nop
 8006c84:	bf00      	nop
 8006c86:	e7fd      	b.n	8006c84 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8006c88:	683b      	ldr	r3, [r7, #0]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d10d      	bne.n	8006caa <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 8006c8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c92:	b672      	cpsid	i
 8006c94:	f383 8811 	msr	BASEPRI, r3
 8006c98:	f3bf 8f6f 	isb	sy
 8006c9c:	f3bf 8f4f 	dsb	sy
 8006ca0:	b662      	cpsie	i
 8006ca2:	60fb      	str	r3, [r7, #12]
}
 8006ca4:	bf00      	nop
 8006ca6:	bf00      	nop
 8006ca8:	e7fd      	b.n	8006ca6 <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 8006caa:	f000 ff87 	bl	8007bbc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006cae:	4b1d      	ldr	r3, [pc, #116]	@ (8006d24 <xTaskCheckForTimeOut+0xc8>)
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	685b      	ldr	r3, [r3, #4]
 8006cb8:	69ba      	ldr	r2, [r7, #24]
 8006cba:	1ad3      	subs	r3, r2, r3
 8006cbc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006cbe:	683b      	ldr	r3, [r7, #0]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cc6:	d102      	bne.n	8006cce <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006cc8:	2300      	movs	r3, #0
 8006cca:	61fb      	str	r3, [r7, #28]
 8006ccc:	e023      	b.n	8006d16 <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681a      	ldr	r2, [r3, #0]
 8006cd2:	4b15      	ldr	r3, [pc, #84]	@ (8006d28 <xTaskCheckForTimeOut+0xcc>)
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	429a      	cmp	r2, r3
 8006cd8:	d007      	beq.n	8006cea <xTaskCheckForTimeOut+0x8e>
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	685b      	ldr	r3, [r3, #4]
 8006cde:	69ba      	ldr	r2, [r7, #24]
 8006ce0:	429a      	cmp	r2, r3
 8006ce2:	d302      	bcc.n	8006cea <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006ce4:	2301      	movs	r3, #1
 8006ce6:	61fb      	str	r3, [r7, #28]
 8006ce8:	e015      	b.n	8006d16 <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006cea:	683b      	ldr	r3, [r7, #0]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	697a      	ldr	r2, [r7, #20]
 8006cf0:	429a      	cmp	r2, r3
 8006cf2:	d20b      	bcs.n	8006d0c <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006cf4:	683b      	ldr	r3, [r7, #0]
 8006cf6:	681a      	ldr	r2, [r3, #0]
 8006cf8:	697b      	ldr	r3, [r7, #20]
 8006cfa:	1ad2      	subs	r2, r2, r3
 8006cfc:	683b      	ldr	r3, [r7, #0]
 8006cfe:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006d00:	6878      	ldr	r0, [r7, #4]
 8006d02:	f7ff ff95 	bl	8006c30 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006d06:	2300      	movs	r3, #0
 8006d08:	61fb      	str	r3, [r7, #28]
 8006d0a:	e004      	b.n	8006d16 <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	2200      	movs	r2, #0
 8006d10:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006d12:	2301      	movs	r3, #1
 8006d14:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006d16:	f000 ff87 	bl	8007c28 <vPortExitCritical>

	return xReturn;
 8006d1a:	69fb      	ldr	r3, [r7, #28]
}
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	3720      	adds	r7, #32
 8006d20:	46bd      	mov	sp, r7
 8006d22:	bd80      	pop	{r7, pc}
 8006d24:	200014e4 	.word	0x200014e4
 8006d28:	200014f8 	.word	0x200014f8

08006d2c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006d2c:	b480      	push	{r7}
 8006d2e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006d30:	4b03      	ldr	r3, [pc, #12]	@ (8006d40 <vTaskMissedYield+0x14>)
 8006d32:	2201      	movs	r2, #1
 8006d34:	601a      	str	r2, [r3, #0]
}
 8006d36:	bf00      	nop
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3e:	4770      	bx	lr
 8006d40:	200014f4 	.word	0x200014f4

08006d44 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b082      	sub	sp, #8
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006d4c:	f000 f852 	bl	8006df4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006d50:	4b06      	ldr	r3, [pc, #24]	@ (8006d6c <prvIdleTask+0x28>)
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	2b01      	cmp	r3, #1
 8006d56:	d9f9      	bls.n	8006d4c <prvIdleTask+0x8>
			{
				taskYIELD();
 8006d58:	4b05      	ldr	r3, [pc, #20]	@ (8006d70 <prvIdleTask+0x2c>)
 8006d5a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006d5e:	601a      	str	r2, [r3, #0]
 8006d60:	f3bf 8f4f 	dsb	sy
 8006d64:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006d68:	e7f0      	b.n	8006d4c <prvIdleTask+0x8>
 8006d6a:	bf00      	nop
 8006d6c:	20001010 	.word	0x20001010
 8006d70:	e000ed04 	.word	0xe000ed04

08006d74 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b082      	sub	sp, #8
 8006d78:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	607b      	str	r3, [r7, #4]
 8006d7e:	e00c      	b.n	8006d9a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006d80:	687a      	ldr	r2, [r7, #4]
 8006d82:	4613      	mov	r3, r2
 8006d84:	009b      	lsls	r3, r3, #2
 8006d86:	4413      	add	r3, r2
 8006d88:	009b      	lsls	r3, r3, #2
 8006d8a:	4a12      	ldr	r2, [pc, #72]	@ (8006dd4 <prvInitialiseTaskLists+0x60>)
 8006d8c:	4413      	add	r3, r2
 8006d8e:	4618      	mov	r0, r3
 8006d90:	f7fe f8d4 	bl	8004f3c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	3301      	adds	r3, #1
 8006d98:	607b      	str	r3, [r7, #4]
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	2b37      	cmp	r3, #55	@ 0x37
 8006d9e:	d9ef      	bls.n	8006d80 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006da0:	480d      	ldr	r0, [pc, #52]	@ (8006dd8 <prvInitialiseTaskLists+0x64>)
 8006da2:	f7fe f8cb 	bl	8004f3c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006da6:	480d      	ldr	r0, [pc, #52]	@ (8006ddc <prvInitialiseTaskLists+0x68>)
 8006da8:	f7fe f8c8 	bl	8004f3c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006dac:	480c      	ldr	r0, [pc, #48]	@ (8006de0 <prvInitialiseTaskLists+0x6c>)
 8006dae:	f7fe f8c5 	bl	8004f3c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006db2:	480c      	ldr	r0, [pc, #48]	@ (8006de4 <prvInitialiseTaskLists+0x70>)
 8006db4:	f7fe f8c2 	bl	8004f3c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006db8:	480b      	ldr	r0, [pc, #44]	@ (8006de8 <prvInitialiseTaskLists+0x74>)
 8006dba:	f7fe f8bf 	bl	8004f3c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006dbe:	4b0b      	ldr	r3, [pc, #44]	@ (8006dec <prvInitialiseTaskLists+0x78>)
 8006dc0:	4a05      	ldr	r2, [pc, #20]	@ (8006dd8 <prvInitialiseTaskLists+0x64>)
 8006dc2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006dc4:	4b0a      	ldr	r3, [pc, #40]	@ (8006df0 <prvInitialiseTaskLists+0x7c>)
 8006dc6:	4a05      	ldr	r2, [pc, #20]	@ (8006ddc <prvInitialiseTaskLists+0x68>)
 8006dc8:	601a      	str	r2, [r3, #0]
}
 8006dca:	bf00      	nop
 8006dcc:	3708      	adds	r7, #8
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	bd80      	pop	{r7, pc}
 8006dd2:	bf00      	nop
 8006dd4:	20001010 	.word	0x20001010
 8006dd8:	20001470 	.word	0x20001470
 8006ddc:	20001484 	.word	0x20001484
 8006de0:	200014a0 	.word	0x200014a0
 8006de4:	200014b4 	.word	0x200014b4
 8006de8:	200014cc 	.word	0x200014cc
 8006dec:	20001498 	.word	0x20001498
 8006df0:	2000149c 	.word	0x2000149c

08006df4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006df4:	b580      	push	{r7, lr}
 8006df6:	b082      	sub	sp, #8
 8006df8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006dfa:	e019      	b.n	8006e30 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006dfc:	f000 fede 	bl	8007bbc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e00:	4b10      	ldr	r3, [pc, #64]	@ (8006e44 <prvCheckTasksWaitingTermination+0x50>)
 8006e02:	68db      	ldr	r3, [r3, #12]
 8006e04:	68db      	ldr	r3, [r3, #12]
 8006e06:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	3304      	adds	r3, #4
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	f7fe f91f 	bl	8005050 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006e12:	4b0d      	ldr	r3, [pc, #52]	@ (8006e48 <prvCheckTasksWaitingTermination+0x54>)
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	3b01      	subs	r3, #1
 8006e18:	4a0b      	ldr	r2, [pc, #44]	@ (8006e48 <prvCheckTasksWaitingTermination+0x54>)
 8006e1a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006e1c:	4b0b      	ldr	r3, [pc, #44]	@ (8006e4c <prvCheckTasksWaitingTermination+0x58>)
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	3b01      	subs	r3, #1
 8006e22:	4a0a      	ldr	r2, [pc, #40]	@ (8006e4c <prvCheckTasksWaitingTermination+0x58>)
 8006e24:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006e26:	f000 feff 	bl	8007c28 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006e2a:	6878      	ldr	r0, [r7, #4]
 8006e2c:	f000 f810 	bl	8006e50 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006e30:	4b06      	ldr	r3, [pc, #24]	@ (8006e4c <prvCheckTasksWaitingTermination+0x58>)
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d1e1      	bne.n	8006dfc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006e38:	bf00      	nop
 8006e3a:	bf00      	nop
 8006e3c:	3708      	adds	r7, #8
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	bd80      	pop	{r7, pc}
 8006e42:	bf00      	nop
 8006e44:	200014b4 	.word	0x200014b4
 8006e48:	200014e0 	.word	0x200014e0
 8006e4c:	200014c8 	.word	0x200014c8

08006e50 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b084      	sub	sp, #16
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	3354      	adds	r3, #84	@ 0x54
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	f001 f9cd 	bl	80081fc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d108      	bne.n	8006e7e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e70:	4618      	mov	r0, r3
 8006e72:	f001 f89f 	bl	8007fb4 <vPortFree>
				vPortFree( pxTCB );
 8006e76:	6878      	ldr	r0, [r7, #4]
 8006e78:	f001 f89c 	bl	8007fb4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006e7c:	e01b      	b.n	8006eb6 <prvDeleteTCB+0x66>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006e84:	2b01      	cmp	r3, #1
 8006e86:	d103      	bne.n	8006e90 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006e88:	6878      	ldr	r0, [r7, #4]
 8006e8a:	f001 f893 	bl	8007fb4 <vPortFree>
	}
 8006e8e:	e012      	b.n	8006eb6 <prvDeleteTCB+0x66>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006e96:	2b02      	cmp	r3, #2
 8006e98:	d00d      	beq.n	8006eb6 <prvDeleteTCB+0x66>
	__asm volatile
 8006e9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e9e:	b672      	cpsid	i
 8006ea0:	f383 8811 	msr	BASEPRI, r3
 8006ea4:	f3bf 8f6f 	isb	sy
 8006ea8:	f3bf 8f4f 	dsb	sy
 8006eac:	b662      	cpsie	i
 8006eae:	60fb      	str	r3, [r7, #12]
}
 8006eb0:	bf00      	nop
 8006eb2:	bf00      	nop
 8006eb4:	e7fd      	b.n	8006eb2 <prvDeleteTCB+0x62>
	}
 8006eb6:	bf00      	nop
 8006eb8:	3710      	adds	r7, #16
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	bd80      	pop	{r7, pc}
	...

08006ec0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006ec0:	b480      	push	{r7}
 8006ec2:	b083      	sub	sp, #12
 8006ec4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006ec6:	4b0c      	ldr	r3, [pc, #48]	@ (8006ef8 <prvResetNextTaskUnblockTime+0x38>)
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d104      	bne.n	8006eda <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006ed0:	4b0a      	ldr	r3, [pc, #40]	@ (8006efc <prvResetNextTaskUnblockTime+0x3c>)
 8006ed2:	f04f 32ff 	mov.w	r2, #4294967295
 8006ed6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006ed8:	e008      	b.n	8006eec <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006eda:	4b07      	ldr	r3, [pc, #28]	@ (8006ef8 <prvResetNextTaskUnblockTime+0x38>)
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	68db      	ldr	r3, [r3, #12]
 8006ee0:	68db      	ldr	r3, [r3, #12]
 8006ee2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	685b      	ldr	r3, [r3, #4]
 8006ee8:	4a04      	ldr	r2, [pc, #16]	@ (8006efc <prvResetNextTaskUnblockTime+0x3c>)
 8006eea:	6013      	str	r3, [r2, #0]
}
 8006eec:	bf00      	nop
 8006eee:	370c      	adds	r7, #12
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef6:	4770      	bx	lr
 8006ef8:	20001498 	.word	0x20001498
 8006efc:	20001500 	.word	0x20001500

08006f00 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006f00:	b480      	push	{r7}
 8006f02:	b083      	sub	sp, #12
 8006f04:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006f06:	4b0b      	ldr	r3, [pc, #44]	@ (8006f34 <xTaskGetSchedulerState+0x34>)
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d102      	bne.n	8006f14 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006f0e:	2301      	movs	r3, #1
 8006f10:	607b      	str	r3, [r7, #4]
 8006f12:	e008      	b.n	8006f26 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006f14:	4b08      	ldr	r3, [pc, #32]	@ (8006f38 <xTaskGetSchedulerState+0x38>)
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d102      	bne.n	8006f22 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006f1c:	2302      	movs	r3, #2
 8006f1e:	607b      	str	r3, [r7, #4]
 8006f20:	e001      	b.n	8006f26 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006f22:	2300      	movs	r3, #0
 8006f24:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006f26:	687b      	ldr	r3, [r7, #4]
	}
 8006f28:	4618      	mov	r0, r3
 8006f2a:	370c      	adds	r7, #12
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f32:	4770      	bx	lr
 8006f34:	200014ec 	.word	0x200014ec
 8006f38:	20001508 	.word	0x20001508

08006f3c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	b084      	sub	sp, #16
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006f48:	2300      	movs	r3, #0
 8006f4a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d051      	beq.n	8006ff6 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8006f52:	68bb      	ldr	r3, [r7, #8]
 8006f54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f56:	4b2a      	ldr	r3, [pc, #168]	@ (8007000 <xTaskPriorityInherit+0xc4>)
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f5c:	429a      	cmp	r2, r3
 8006f5e:	d241      	bcs.n	8006fe4 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006f60:	68bb      	ldr	r3, [r7, #8]
 8006f62:	699b      	ldr	r3, [r3, #24]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	db06      	blt.n	8006f76 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f68:	4b25      	ldr	r3, [pc, #148]	@ (8007000 <xTaskPriorityInherit+0xc4>)
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f6e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006f72:	68bb      	ldr	r3, [r7, #8]
 8006f74:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8006f76:	68bb      	ldr	r3, [r7, #8]
 8006f78:	6959      	ldr	r1, [r3, #20]
 8006f7a:	68bb      	ldr	r3, [r7, #8]
 8006f7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f7e:	4613      	mov	r3, r2
 8006f80:	009b      	lsls	r3, r3, #2
 8006f82:	4413      	add	r3, r2
 8006f84:	009b      	lsls	r3, r3, #2
 8006f86:	4a1f      	ldr	r2, [pc, #124]	@ (8007004 <xTaskPriorityInherit+0xc8>)
 8006f88:	4413      	add	r3, r2
 8006f8a:	4299      	cmp	r1, r3
 8006f8c:	d122      	bne.n	8006fd4 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006f8e:	68bb      	ldr	r3, [r7, #8]
 8006f90:	3304      	adds	r3, #4
 8006f92:	4618      	mov	r0, r3
 8006f94:	f7fe f85c 	bl	8005050 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006f98:	4b19      	ldr	r3, [pc, #100]	@ (8007000 <xTaskPriorityInherit+0xc4>)
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f9e:	68bb      	ldr	r3, [r7, #8]
 8006fa0:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8006fa2:	68bb      	ldr	r3, [r7, #8]
 8006fa4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006fa6:	4b18      	ldr	r3, [pc, #96]	@ (8007008 <xTaskPriorityInherit+0xcc>)
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	429a      	cmp	r2, r3
 8006fac:	d903      	bls.n	8006fb6 <xTaskPriorityInherit+0x7a>
 8006fae:	68bb      	ldr	r3, [r7, #8]
 8006fb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fb2:	4a15      	ldr	r2, [pc, #84]	@ (8007008 <xTaskPriorityInherit+0xcc>)
 8006fb4:	6013      	str	r3, [r2, #0]
 8006fb6:	68bb      	ldr	r3, [r7, #8]
 8006fb8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006fba:	4613      	mov	r3, r2
 8006fbc:	009b      	lsls	r3, r3, #2
 8006fbe:	4413      	add	r3, r2
 8006fc0:	009b      	lsls	r3, r3, #2
 8006fc2:	4a10      	ldr	r2, [pc, #64]	@ (8007004 <xTaskPriorityInherit+0xc8>)
 8006fc4:	441a      	add	r2, r3
 8006fc6:	68bb      	ldr	r3, [r7, #8]
 8006fc8:	3304      	adds	r3, #4
 8006fca:	4619      	mov	r1, r3
 8006fcc:	4610      	mov	r0, r2
 8006fce:	f7fd ffe2 	bl	8004f96 <vListInsertEnd>
 8006fd2:	e004      	b.n	8006fde <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006fd4:	4b0a      	ldr	r3, [pc, #40]	@ (8007000 <xTaskPriorityInherit+0xc4>)
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006fda:	68bb      	ldr	r3, [r7, #8]
 8006fdc:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8006fde:	2301      	movs	r3, #1
 8006fe0:	60fb      	str	r3, [r7, #12]
 8006fe2:	e008      	b.n	8006ff6 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8006fe4:	68bb      	ldr	r3, [r7, #8]
 8006fe6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006fe8:	4b05      	ldr	r3, [pc, #20]	@ (8007000 <xTaskPriorityInherit+0xc4>)
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fee:	429a      	cmp	r2, r3
 8006ff0:	d201      	bcs.n	8006ff6 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8006ff2:	2301      	movs	r3, #1
 8006ff4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006ff6:	68fb      	ldr	r3, [r7, #12]
	}
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	3710      	adds	r7, #16
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	bd80      	pop	{r7, pc}
 8007000:	2000100c 	.word	0x2000100c
 8007004:	20001010 	.word	0x20001010
 8007008:	200014e8 	.word	0x200014e8

0800700c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800700c:	b580      	push	{r7, lr}
 800700e:	b086      	sub	sp, #24
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007018:	2300      	movs	r3, #0
 800701a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d05c      	beq.n	80070dc <xTaskPriorityDisinherit+0xd0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007022:	4b31      	ldr	r3, [pc, #196]	@ (80070e8 <xTaskPriorityDisinherit+0xdc>)
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	693a      	ldr	r2, [r7, #16]
 8007028:	429a      	cmp	r2, r3
 800702a:	d00d      	beq.n	8007048 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 800702c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007030:	b672      	cpsid	i
 8007032:	f383 8811 	msr	BASEPRI, r3
 8007036:	f3bf 8f6f 	isb	sy
 800703a:	f3bf 8f4f 	dsb	sy
 800703e:	b662      	cpsie	i
 8007040:	60fb      	str	r3, [r7, #12]
}
 8007042:	bf00      	nop
 8007044:	bf00      	nop
 8007046:	e7fd      	b.n	8007044 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8007048:	693b      	ldr	r3, [r7, #16]
 800704a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800704c:	2b00      	cmp	r3, #0
 800704e:	d10d      	bne.n	800706c <xTaskPriorityDisinherit+0x60>
	__asm volatile
 8007050:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007054:	b672      	cpsid	i
 8007056:	f383 8811 	msr	BASEPRI, r3
 800705a:	f3bf 8f6f 	isb	sy
 800705e:	f3bf 8f4f 	dsb	sy
 8007062:	b662      	cpsie	i
 8007064:	60bb      	str	r3, [r7, #8]
}
 8007066:	bf00      	nop
 8007068:	bf00      	nop
 800706a:	e7fd      	b.n	8007068 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 800706c:	693b      	ldr	r3, [r7, #16]
 800706e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007070:	1e5a      	subs	r2, r3, #1
 8007072:	693b      	ldr	r3, [r7, #16]
 8007074:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007076:	693b      	ldr	r3, [r7, #16]
 8007078:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800707a:	693b      	ldr	r3, [r7, #16]
 800707c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800707e:	429a      	cmp	r2, r3
 8007080:	d02c      	beq.n	80070dc <xTaskPriorityDisinherit+0xd0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007082:	693b      	ldr	r3, [r7, #16]
 8007084:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007086:	2b00      	cmp	r3, #0
 8007088:	d128      	bne.n	80070dc <xTaskPriorityDisinherit+0xd0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800708a:	693b      	ldr	r3, [r7, #16]
 800708c:	3304      	adds	r3, #4
 800708e:	4618      	mov	r0, r3
 8007090:	f7fd ffde 	bl	8005050 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007094:	693b      	ldr	r3, [r7, #16]
 8007096:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007098:	693b      	ldr	r3, [r7, #16]
 800709a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800709c:	693b      	ldr	r3, [r7, #16]
 800709e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070a0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80070a4:	693b      	ldr	r3, [r7, #16]
 80070a6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80070a8:	693b      	ldr	r3, [r7, #16]
 80070aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80070ac:	4b0f      	ldr	r3, [pc, #60]	@ (80070ec <xTaskPriorityDisinherit+0xe0>)
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	429a      	cmp	r2, r3
 80070b2:	d903      	bls.n	80070bc <xTaskPriorityDisinherit+0xb0>
 80070b4:	693b      	ldr	r3, [r7, #16]
 80070b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070b8:	4a0c      	ldr	r2, [pc, #48]	@ (80070ec <xTaskPriorityDisinherit+0xe0>)
 80070ba:	6013      	str	r3, [r2, #0]
 80070bc:	693b      	ldr	r3, [r7, #16]
 80070be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80070c0:	4613      	mov	r3, r2
 80070c2:	009b      	lsls	r3, r3, #2
 80070c4:	4413      	add	r3, r2
 80070c6:	009b      	lsls	r3, r3, #2
 80070c8:	4a09      	ldr	r2, [pc, #36]	@ (80070f0 <xTaskPriorityDisinherit+0xe4>)
 80070ca:	441a      	add	r2, r3
 80070cc:	693b      	ldr	r3, [r7, #16]
 80070ce:	3304      	adds	r3, #4
 80070d0:	4619      	mov	r1, r3
 80070d2:	4610      	mov	r0, r2
 80070d4:	f7fd ff5f 	bl	8004f96 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80070d8:	2301      	movs	r3, #1
 80070da:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80070dc:	697b      	ldr	r3, [r7, #20]
	}
 80070de:	4618      	mov	r0, r3
 80070e0:	3718      	adds	r7, #24
 80070e2:	46bd      	mov	sp, r7
 80070e4:	bd80      	pop	{r7, pc}
 80070e6:	bf00      	nop
 80070e8:	2000100c 	.word	0x2000100c
 80070ec:	200014e8 	.word	0x200014e8
 80070f0:	20001010 	.word	0x20001010

080070f4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b088      	sub	sp, #32
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
 80070fc:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8007102:	2301      	movs	r3, #1
 8007104:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	2b00      	cmp	r3, #0
 800710a:	d070      	beq.n	80071ee <vTaskPriorityDisinheritAfterTimeout+0xfa>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800710c:	69bb      	ldr	r3, [r7, #24]
 800710e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007110:	2b00      	cmp	r3, #0
 8007112:	d10d      	bne.n	8007130 <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 8007114:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007118:	b672      	cpsid	i
 800711a:	f383 8811 	msr	BASEPRI, r3
 800711e:	f3bf 8f6f 	isb	sy
 8007122:	f3bf 8f4f 	dsb	sy
 8007126:	b662      	cpsie	i
 8007128:	60fb      	str	r3, [r7, #12]
}
 800712a:	bf00      	nop
 800712c:	bf00      	nop
 800712e:	e7fd      	b.n	800712c <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007130:	69bb      	ldr	r3, [r7, #24]
 8007132:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007134:	683a      	ldr	r2, [r7, #0]
 8007136:	429a      	cmp	r2, r3
 8007138:	d902      	bls.n	8007140 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800713a:	683b      	ldr	r3, [r7, #0]
 800713c:	61fb      	str	r3, [r7, #28]
 800713e:	e002      	b.n	8007146 <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007140:	69bb      	ldr	r3, [r7, #24]
 8007142:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007144:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007146:	69bb      	ldr	r3, [r7, #24]
 8007148:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800714a:	69fa      	ldr	r2, [r7, #28]
 800714c:	429a      	cmp	r2, r3
 800714e:	d04e      	beq.n	80071ee <vTaskPriorityDisinheritAfterTimeout+0xfa>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007150:	69bb      	ldr	r3, [r7, #24]
 8007152:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007154:	697a      	ldr	r2, [r7, #20]
 8007156:	429a      	cmp	r2, r3
 8007158:	d149      	bne.n	80071ee <vTaskPriorityDisinheritAfterTimeout+0xfa>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800715a:	4b27      	ldr	r3, [pc, #156]	@ (80071f8 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	69ba      	ldr	r2, [r7, #24]
 8007160:	429a      	cmp	r2, r3
 8007162:	d10d      	bne.n	8007180 <vTaskPriorityDisinheritAfterTimeout+0x8c>
	__asm volatile
 8007164:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007168:	b672      	cpsid	i
 800716a:	f383 8811 	msr	BASEPRI, r3
 800716e:	f3bf 8f6f 	isb	sy
 8007172:	f3bf 8f4f 	dsb	sy
 8007176:	b662      	cpsie	i
 8007178:	60bb      	str	r3, [r7, #8]
}
 800717a:	bf00      	nop
 800717c:	bf00      	nop
 800717e:	e7fd      	b.n	800717c <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007180:	69bb      	ldr	r3, [r7, #24]
 8007182:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007184:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8007186:	69bb      	ldr	r3, [r7, #24]
 8007188:	69fa      	ldr	r2, [r7, #28]
 800718a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800718c:	69bb      	ldr	r3, [r7, #24]
 800718e:	699b      	ldr	r3, [r3, #24]
 8007190:	2b00      	cmp	r3, #0
 8007192:	db04      	blt.n	800719e <vTaskPriorityDisinheritAfterTimeout+0xaa>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007194:	69fb      	ldr	r3, [r7, #28]
 8007196:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800719a:	69bb      	ldr	r3, [r7, #24]
 800719c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800719e:	69bb      	ldr	r3, [r7, #24]
 80071a0:	6959      	ldr	r1, [r3, #20]
 80071a2:	693a      	ldr	r2, [r7, #16]
 80071a4:	4613      	mov	r3, r2
 80071a6:	009b      	lsls	r3, r3, #2
 80071a8:	4413      	add	r3, r2
 80071aa:	009b      	lsls	r3, r3, #2
 80071ac:	4a13      	ldr	r2, [pc, #76]	@ (80071fc <vTaskPriorityDisinheritAfterTimeout+0x108>)
 80071ae:	4413      	add	r3, r2
 80071b0:	4299      	cmp	r1, r3
 80071b2:	d11c      	bne.n	80071ee <vTaskPriorityDisinheritAfterTimeout+0xfa>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80071b4:	69bb      	ldr	r3, [r7, #24]
 80071b6:	3304      	adds	r3, #4
 80071b8:	4618      	mov	r0, r3
 80071ba:	f7fd ff49 	bl	8005050 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80071be:	69bb      	ldr	r3, [r7, #24]
 80071c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80071c2:	4b0f      	ldr	r3, [pc, #60]	@ (8007200 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	429a      	cmp	r2, r3
 80071c8:	d903      	bls.n	80071d2 <vTaskPriorityDisinheritAfterTimeout+0xde>
 80071ca:	69bb      	ldr	r3, [r7, #24]
 80071cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071ce:	4a0c      	ldr	r2, [pc, #48]	@ (8007200 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 80071d0:	6013      	str	r3, [r2, #0]
 80071d2:	69bb      	ldr	r3, [r7, #24]
 80071d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80071d6:	4613      	mov	r3, r2
 80071d8:	009b      	lsls	r3, r3, #2
 80071da:	4413      	add	r3, r2
 80071dc:	009b      	lsls	r3, r3, #2
 80071de:	4a07      	ldr	r2, [pc, #28]	@ (80071fc <vTaskPriorityDisinheritAfterTimeout+0x108>)
 80071e0:	441a      	add	r2, r3
 80071e2:	69bb      	ldr	r3, [r7, #24]
 80071e4:	3304      	adds	r3, #4
 80071e6:	4619      	mov	r1, r3
 80071e8:	4610      	mov	r0, r2
 80071ea:	f7fd fed4 	bl	8004f96 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80071ee:	bf00      	nop
 80071f0:	3720      	adds	r7, #32
 80071f2:	46bd      	mov	sp, r7
 80071f4:	bd80      	pop	{r7, pc}
 80071f6:	bf00      	nop
 80071f8:	2000100c 	.word	0x2000100c
 80071fc:	20001010 	.word	0x20001010
 8007200:	200014e8 	.word	0x200014e8

08007204 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8007204:	b480      	push	{r7}
 8007206:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007208:	4b07      	ldr	r3, [pc, #28]	@ (8007228 <pvTaskIncrementMutexHeldCount+0x24>)
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d004      	beq.n	800721a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007210:	4b05      	ldr	r3, [pc, #20]	@ (8007228 <pvTaskIncrementMutexHeldCount+0x24>)
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007216:	3201      	adds	r2, #1
 8007218:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800721a:	4b03      	ldr	r3, [pc, #12]	@ (8007228 <pvTaskIncrementMutexHeldCount+0x24>)
 800721c:	681b      	ldr	r3, [r3, #0]
	}
 800721e:	4618      	mov	r0, r3
 8007220:	46bd      	mov	sp, r7
 8007222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007226:	4770      	bx	lr
 8007228:	2000100c 	.word	0x2000100c

0800722c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800722c:	b580      	push	{r7, lr}
 800722e:	b084      	sub	sp, #16
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
 8007234:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007236:	4b21      	ldr	r3, [pc, #132]	@ (80072bc <prvAddCurrentTaskToDelayedList+0x90>)
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800723c:	4b20      	ldr	r3, [pc, #128]	@ (80072c0 <prvAddCurrentTaskToDelayedList+0x94>)
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	3304      	adds	r3, #4
 8007242:	4618      	mov	r0, r3
 8007244:	f7fd ff04 	bl	8005050 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800724e:	d10a      	bne.n	8007266 <prvAddCurrentTaskToDelayedList+0x3a>
 8007250:	683b      	ldr	r3, [r7, #0]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d007      	beq.n	8007266 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007256:	4b1a      	ldr	r3, [pc, #104]	@ (80072c0 <prvAddCurrentTaskToDelayedList+0x94>)
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	3304      	adds	r3, #4
 800725c:	4619      	mov	r1, r3
 800725e:	4819      	ldr	r0, [pc, #100]	@ (80072c4 <prvAddCurrentTaskToDelayedList+0x98>)
 8007260:	f7fd fe99 	bl	8004f96 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007264:	e026      	b.n	80072b4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007266:	68fa      	ldr	r2, [r7, #12]
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	4413      	add	r3, r2
 800726c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800726e:	4b14      	ldr	r3, [pc, #80]	@ (80072c0 <prvAddCurrentTaskToDelayedList+0x94>)
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	68ba      	ldr	r2, [r7, #8]
 8007274:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007276:	68ba      	ldr	r2, [r7, #8]
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	429a      	cmp	r2, r3
 800727c:	d209      	bcs.n	8007292 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800727e:	4b12      	ldr	r3, [pc, #72]	@ (80072c8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007280:	681a      	ldr	r2, [r3, #0]
 8007282:	4b0f      	ldr	r3, [pc, #60]	@ (80072c0 <prvAddCurrentTaskToDelayedList+0x94>)
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	3304      	adds	r3, #4
 8007288:	4619      	mov	r1, r3
 800728a:	4610      	mov	r0, r2
 800728c:	f7fd fea7 	bl	8004fde <vListInsert>
}
 8007290:	e010      	b.n	80072b4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007292:	4b0e      	ldr	r3, [pc, #56]	@ (80072cc <prvAddCurrentTaskToDelayedList+0xa0>)
 8007294:	681a      	ldr	r2, [r3, #0]
 8007296:	4b0a      	ldr	r3, [pc, #40]	@ (80072c0 <prvAddCurrentTaskToDelayedList+0x94>)
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	3304      	adds	r3, #4
 800729c:	4619      	mov	r1, r3
 800729e:	4610      	mov	r0, r2
 80072a0:	f7fd fe9d 	bl	8004fde <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80072a4:	4b0a      	ldr	r3, [pc, #40]	@ (80072d0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	68ba      	ldr	r2, [r7, #8]
 80072aa:	429a      	cmp	r2, r3
 80072ac:	d202      	bcs.n	80072b4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80072ae:	4a08      	ldr	r2, [pc, #32]	@ (80072d0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80072b0:	68bb      	ldr	r3, [r7, #8]
 80072b2:	6013      	str	r3, [r2, #0]
}
 80072b4:	bf00      	nop
 80072b6:	3710      	adds	r7, #16
 80072b8:	46bd      	mov	sp, r7
 80072ba:	bd80      	pop	{r7, pc}
 80072bc:	200014e4 	.word	0x200014e4
 80072c0:	2000100c 	.word	0x2000100c
 80072c4:	200014cc 	.word	0x200014cc
 80072c8:	2000149c 	.word	0x2000149c
 80072cc:	20001498 	.word	0x20001498
 80072d0:	20001500 	.word	0x20001500

080072d4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80072d4:	b580      	push	{r7, lr}
 80072d6:	b08a      	sub	sp, #40	@ 0x28
 80072d8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80072da:	2300      	movs	r3, #0
 80072dc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80072de:	f000 fb21 	bl	8007924 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80072e2:	4b1e      	ldr	r3, [pc, #120]	@ (800735c <xTimerCreateTimerTask+0x88>)
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d021      	beq.n	800732e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80072ea:	2300      	movs	r3, #0
 80072ec:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80072ee:	2300      	movs	r3, #0
 80072f0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80072f2:	1d3a      	adds	r2, r7, #4
 80072f4:	f107 0108 	add.w	r1, r7, #8
 80072f8:	f107 030c 	add.w	r3, r7, #12
 80072fc:	4618      	mov	r0, r3
 80072fe:	f7fd fe03 	bl	8004f08 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007302:	6879      	ldr	r1, [r7, #4]
 8007304:	68bb      	ldr	r3, [r7, #8]
 8007306:	68fa      	ldr	r2, [r7, #12]
 8007308:	9202      	str	r2, [sp, #8]
 800730a:	9301      	str	r3, [sp, #4]
 800730c:	2302      	movs	r3, #2
 800730e:	9300      	str	r3, [sp, #0]
 8007310:	2300      	movs	r3, #0
 8007312:	460a      	mov	r2, r1
 8007314:	4912      	ldr	r1, [pc, #72]	@ (8007360 <xTimerCreateTimerTask+0x8c>)
 8007316:	4813      	ldr	r0, [pc, #76]	@ (8007364 <xTimerCreateTimerTask+0x90>)
 8007318:	f7fe ff7a 	bl	8006210 <xTaskCreateStatic>
 800731c:	4603      	mov	r3, r0
 800731e:	4a12      	ldr	r2, [pc, #72]	@ (8007368 <xTimerCreateTimerTask+0x94>)
 8007320:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007322:	4b11      	ldr	r3, [pc, #68]	@ (8007368 <xTimerCreateTimerTask+0x94>)
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	2b00      	cmp	r3, #0
 8007328:	d001      	beq.n	800732e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800732a:	2301      	movs	r3, #1
 800732c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800732e:	697b      	ldr	r3, [r7, #20]
 8007330:	2b00      	cmp	r3, #0
 8007332:	d10d      	bne.n	8007350 <xTimerCreateTimerTask+0x7c>
	__asm volatile
 8007334:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007338:	b672      	cpsid	i
 800733a:	f383 8811 	msr	BASEPRI, r3
 800733e:	f3bf 8f6f 	isb	sy
 8007342:	f3bf 8f4f 	dsb	sy
 8007346:	b662      	cpsie	i
 8007348:	613b      	str	r3, [r7, #16]
}
 800734a:	bf00      	nop
 800734c:	bf00      	nop
 800734e:	e7fd      	b.n	800734c <xTimerCreateTimerTask+0x78>
	return xReturn;
 8007350:	697b      	ldr	r3, [r7, #20]
}
 8007352:	4618      	mov	r0, r3
 8007354:	3718      	adds	r7, #24
 8007356:	46bd      	mov	sp, r7
 8007358:	bd80      	pop	{r7, pc}
 800735a:	bf00      	nop
 800735c:	2000153c 	.word	0x2000153c
 8007360:	08008474 	.word	0x08008474
 8007364:	080074ad 	.word	0x080074ad
 8007368:	20001540 	.word	0x20001540

0800736c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800736c:	b580      	push	{r7, lr}
 800736e:	b08a      	sub	sp, #40	@ 0x28
 8007370:	af00      	add	r7, sp, #0
 8007372:	60f8      	str	r0, [r7, #12]
 8007374:	60b9      	str	r1, [r7, #8]
 8007376:	607a      	str	r2, [r7, #4]
 8007378:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800737a:	2300      	movs	r3, #0
 800737c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d10d      	bne.n	80073a0 <xTimerGenericCommand+0x34>
	__asm volatile
 8007384:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007388:	b672      	cpsid	i
 800738a:	f383 8811 	msr	BASEPRI, r3
 800738e:	f3bf 8f6f 	isb	sy
 8007392:	f3bf 8f4f 	dsb	sy
 8007396:	b662      	cpsie	i
 8007398:	623b      	str	r3, [r7, #32]
}
 800739a:	bf00      	nop
 800739c:	bf00      	nop
 800739e:	e7fd      	b.n	800739c <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80073a0:	4b19      	ldr	r3, [pc, #100]	@ (8007408 <xTimerGenericCommand+0x9c>)
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d02a      	beq.n	80073fe <xTimerGenericCommand+0x92>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80073a8:	68bb      	ldr	r3, [r7, #8]
 80073aa:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80073b4:	68bb      	ldr	r3, [r7, #8]
 80073b6:	2b05      	cmp	r3, #5
 80073b8:	dc18      	bgt.n	80073ec <xTimerGenericCommand+0x80>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80073ba:	f7ff fda1 	bl	8006f00 <xTaskGetSchedulerState>
 80073be:	4603      	mov	r3, r0
 80073c0:	2b02      	cmp	r3, #2
 80073c2:	d109      	bne.n	80073d8 <xTimerGenericCommand+0x6c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80073c4:	4b10      	ldr	r3, [pc, #64]	@ (8007408 <xTimerGenericCommand+0x9c>)
 80073c6:	6818      	ldr	r0, [r3, #0]
 80073c8:	f107 0110 	add.w	r1, r7, #16
 80073cc:	2300      	movs	r3, #0
 80073ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80073d0:	f7fe f838 	bl	8005444 <xQueueGenericSend>
 80073d4:	6278      	str	r0, [r7, #36]	@ 0x24
 80073d6:	e012      	b.n	80073fe <xTimerGenericCommand+0x92>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80073d8:	4b0b      	ldr	r3, [pc, #44]	@ (8007408 <xTimerGenericCommand+0x9c>)
 80073da:	6818      	ldr	r0, [r3, #0]
 80073dc:	f107 0110 	add.w	r1, r7, #16
 80073e0:	2300      	movs	r3, #0
 80073e2:	2200      	movs	r2, #0
 80073e4:	f7fe f82e 	bl	8005444 <xQueueGenericSend>
 80073e8:	6278      	str	r0, [r7, #36]	@ 0x24
 80073ea:	e008      	b.n	80073fe <xTimerGenericCommand+0x92>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80073ec:	4b06      	ldr	r3, [pc, #24]	@ (8007408 <xTimerGenericCommand+0x9c>)
 80073ee:	6818      	ldr	r0, [r3, #0]
 80073f0:	f107 0110 	add.w	r1, r7, #16
 80073f4:	2300      	movs	r3, #0
 80073f6:	683a      	ldr	r2, [r7, #0]
 80073f8:	f7fe f92e 	bl	8005658 <xQueueGenericSendFromISR>
 80073fc:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80073fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007400:	4618      	mov	r0, r3
 8007402:	3728      	adds	r7, #40	@ 0x28
 8007404:	46bd      	mov	sp, r7
 8007406:	bd80      	pop	{r7, pc}
 8007408:	2000153c 	.word	0x2000153c

0800740c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800740c:	b580      	push	{r7, lr}
 800740e:	b088      	sub	sp, #32
 8007410:	af02      	add	r7, sp, #8
 8007412:	6078      	str	r0, [r7, #4]
 8007414:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007416:	4b24      	ldr	r3, [pc, #144]	@ (80074a8 <prvProcessExpiredTimer+0x9c>)
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	68db      	ldr	r3, [r3, #12]
 800741c:	68db      	ldr	r3, [r3, #12]
 800741e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007420:	697b      	ldr	r3, [r7, #20]
 8007422:	3304      	adds	r3, #4
 8007424:	4618      	mov	r0, r3
 8007426:	f7fd fe13 	bl	8005050 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800742a:	697b      	ldr	r3, [r7, #20]
 800742c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007430:	f003 0304 	and.w	r3, r3, #4
 8007434:	2b00      	cmp	r3, #0
 8007436:	d025      	beq.n	8007484 <prvProcessExpiredTimer+0x78>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007438:	697b      	ldr	r3, [r7, #20]
 800743a:	699a      	ldr	r2, [r3, #24]
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	18d1      	adds	r1, r2, r3
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	683a      	ldr	r2, [r7, #0]
 8007444:	6978      	ldr	r0, [r7, #20]
 8007446:	f000 f8d7 	bl	80075f8 <prvInsertTimerInActiveList>
 800744a:	4603      	mov	r3, r0
 800744c:	2b00      	cmp	r3, #0
 800744e:	d022      	beq.n	8007496 <prvProcessExpiredTimer+0x8a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007450:	2300      	movs	r3, #0
 8007452:	9300      	str	r3, [sp, #0]
 8007454:	2300      	movs	r3, #0
 8007456:	687a      	ldr	r2, [r7, #4]
 8007458:	2100      	movs	r1, #0
 800745a:	6978      	ldr	r0, [r7, #20]
 800745c:	f7ff ff86 	bl	800736c <xTimerGenericCommand>
 8007460:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007462:	693b      	ldr	r3, [r7, #16]
 8007464:	2b00      	cmp	r3, #0
 8007466:	d116      	bne.n	8007496 <prvProcessExpiredTimer+0x8a>
	__asm volatile
 8007468:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800746c:	b672      	cpsid	i
 800746e:	f383 8811 	msr	BASEPRI, r3
 8007472:	f3bf 8f6f 	isb	sy
 8007476:	f3bf 8f4f 	dsb	sy
 800747a:	b662      	cpsie	i
 800747c:	60fb      	str	r3, [r7, #12]
}
 800747e:	bf00      	nop
 8007480:	bf00      	nop
 8007482:	e7fd      	b.n	8007480 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007484:	697b      	ldr	r3, [r7, #20]
 8007486:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800748a:	f023 0301 	bic.w	r3, r3, #1
 800748e:	b2da      	uxtb	r2, r3
 8007490:	697b      	ldr	r3, [r7, #20]
 8007492:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007496:	697b      	ldr	r3, [r7, #20]
 8007498:	6a1b      	ldr	r3, [r3, #32]
 800749a:	6978      	ldr	r0, [r7, #20]
 800749c:	4798      	blx	r3
}
 800749e:	bf00      	nop
 80074a0:	3718      	adds	r7, #24
 80074a2:	46bd      	mov	sp, r7
 80074a4:	bd80      	pop	{r7, pc}
 80074a6:	bf00      	nop
 80074a8:	20001534 	.word	0x20001534

080074ac <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80074ac:	b580      	push	{r7, lr}
 80074ae:	b084      	sub	sp, #16
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80074b4:	f107 0308 	add.w	r3, r7, #8
 80074b8:	4618      	mov	r0, r3
 80074ba:	f000 f859 	bl	8007570 <prvGetNextExpireTime>
 80074be:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80074c0:	68bb      	ldr	r3, [r7, #8]
 80074c2:	4619      	mov	r1, r3
 80074c4:	68f8      	ldr	r0, [r7, #12]
 80074c6:	f000 f805 	bl	80074d4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80074ca:	f000 f8d7 	bl	800767c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80074ce:	bf00      	nop
 80074d0:	e7f0      	b.n	80074b4 <prvTimerTask+0x8>
	...

080074d4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80074d4:	b580      	push	{r7, lr}
 80074d6:	b084      	sub	sp, #16
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
 80074dc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80074de:	f7ff f909 	bl	80066f4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80074e2:	f107 0308 	add.w	r3, r7, #8
 80074e6:	4618      	mov	r0, r3
 80074e8:	f000 f866 	bl	80075b8 <prvSampleTimeNow>
 80074ec:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80074ee:	68bb      	ldr	r3, [r7, #8]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d130      	bne.n	8007556 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80074f4:	683b      	ldr	r3, [r7, #0]
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d10a      	bne.n	8007510 <prvProcessTimerOrBlockTask+0x3c>
 80074fa:	687a      	ldr	r2, [r7, #4]
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	429a      	cmp	r2, r3
 8007500:	d806      	bhi.n	8007510 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007502:	f7ff f905 	bl	8006710 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007506:	68f9      	ldr	r1, [r7, #12]
 8007508:	6878      	ldr	r0, [r7, #4]
 800750a:	f7ff ff7f 	bl	800740c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800750e:	e024      	b.n	800755a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007510:	683b      	ldr	r3, [r7, #0]
 8007512:	2b00      	cmp	r3, #0
 8007514:	d008      	beq.n	8007528 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007516:	4b13      	ldr	r3, [pc, #76]	@ (8007564 <prvProcessTimerOrBlockTask+0x90>)
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	2b00      	cmp	r3, #0
 800751e:	d101      	bne.n	8007524 <prvProcessTimerOrBlockTask+0x50>
 8007520:	2301      	movs	r3, #1
 8007522:	e000      	b.n	8007526 <prvProcessTimerOrBlockTask+0x52>
 8007524:	2300      	movs	r3, #0
 8007526:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007528:	4b0f      	ldr	r3, [pc, #60]	@ (8007568 <prvProcessTimerOrBlockTask+0x94>)
 800752a:	6818      	ldr	r0, [r3, #0]
 800752c:	687a      	ldr	r2, [r7, #4]
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	1ad3      	subs	r3, r2, r3
 8007532:	683a      	ldr	r2, [r7, #0]
 8007534:	4619      	mov	r1, r3
 8007536:	f7fe fe37 	bl	80061a8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800753a:	f7ff f8e9 	bl	8006710 <xTaskResumeAll>
 800753e:	4603      	mov	r3, r0
 8007540:	2b00      	cmp	r3, #0
 8007542:	d10a      	bne.n	800755a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007544:	4b09      	ldr	r3, [pc, #36]	@ (800756c <prvProcessTimerOrBlockTask+0x98>)
 8007546:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800754a:	601a      	str	r2, [r3, #0]
 800754c:	f3bf 8f4f 	dsb	sy
 8007550:	f3bf 8f6f 	isb	sy
}
 8007554:	e001      	b.n	800755a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007556:	f7ff f8db 	bl	8006710 <xTaskResumeAll>
}
 800755a:	bf00      	nop
 800755c:	3710      	adds	r7, #16
 800755e:	46bd      	mov	sp, r7
 8007560:	bd80      	pop	{r7, pc}
 8007562:	bf00      	nop
 8007564:	20001538 	.word	0x20001538
 8007568:	2000153c 	.word	0x2000153c
 800756c:	e000ed04 	.word	0xe000ed04

08007570 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007570:	b480      	push	{r7}
 8007572:	b085      	sub	sp, #20
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007578:	4b0e      	ldr	r3, [pc, #56]	@ (80075b4 <prvGetNextExpireTime+0x44>)
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	2b00      	cmp	r3, #0
 8007580:	d101      	bne.n	8007586 <prvGetNextExpireTime+0x16>
 8007582:	2201      	movs	r2, #1
 8007584:	e000      	b.n	8007588 <prvGetNextExpireTime+0x18>
 8007586:	2200      	movs	r2, #0
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	2b00      	cmp	r3, #0
 8007592:	d105      	bne.n	80075a0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007594:	4b07      	ldr	r3, [pc, #28]	@ (80075b4 <prvGetNextExpireTime+0x44>)
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	68db      	ldr	r3, [r3, #12]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	60fb      	str	r3, [r7, #12]
 800759e:	e001      	b.n	80075a4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80075a0:	2300      	movs	r3, #0
 80075a2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80075a4:	68fb      	ldr	r3, [r7, #12]
}
 80075a6:	4618      	mov	r0, r3
 80075a8:	3714      	adds	r7, #20
 80075aa:	46bd      	mov	sp, r7
 80075ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b0:	4770      	bx	lr
 80075b2:	bf00      	nop
 80075b4:	20001534 	.word	0x20001534

080075b8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80075b8:	b580      	push	{r7, lr}
 80075ba:	b084      	sub	sp, #16
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80075c0:	f7ff f946 	bl	8006850 <xTaskGetTickCount>
 80075c4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80075c6:	4b0b      	ldr	r3, [pc, #44]	@ (80075f4 <prvSampleTimeNow+0x3c>)
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	68fa      	ldr	r2, [r7, #12]
 80075cc:	429a      	cmp	r2, r3
 80075ce:	d205      	bcs.n	80075dc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80075d0:	f000 f940 	bl	8007854 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	2201      	movs	r2, #1
 80075d8:	601a      	str	r2, [r3, #0]
 80075da:	e002      	b.n	80075e2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2200      	movs	r2, #0
 80075e0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80075e2:	4a04      	ldr	r2, [pc, #16]	@ (80075f4 <prvSampleTimeNow+0x3c>)
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80075e8:	68fb      	ldr	r3, [r7, #12]
}
 80075ea:	4618      	mov	r0, r3
 80075ec:	3710      	adds	r7, #16
 80075ee:	46bd      	mov	sp, r7
 80075f0:	bd80      	pop	{r7, pc}
 80075f2:	bf00      	nop
 80075f4:	20001544 	.word	0x20001544

080075f8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80075f8:	b580      	push	{r7, lr}
 80075fa:	b086      	sub	sp, #24
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	60f8      	str	r0, [r7, #12]
 8007600:	60b9      	str	r1, [r7, #8]
 8007602:	607a      	str	r2, [r7, #4]
 8007604:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007606:	2300      	movs	r3, #0
 8007608:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	68ba      	ldr	r2, [r7, #8]
 800760e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	68fa      	ldr	r2, [r7, #12]
 8007614:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007616:	68ba      	ldr	r2, [r7, #8]
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	429a      	cmp	r2, r3
 800761c:	d812      	bhi.n	8007644 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800761e:	687a      	ldr	r2, [r7, #4]
 8007620:	683b      	ldr	r3, [r7, #0]
 8007622:	1ad2      	subs	r2, r2, r3
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	699b      	ldr	r3, [r3, #24]
 8007628:	429a      	cmp	r2, r3
 800762a:	d302      	bcc.n	8007632 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800762c:	2301      	movs	r3, #1
 800762e:	617b      	str	r3, [r7, #20]
 8007630:	e01b      	b.n	800766a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007632:	4b10      	ldr	r3, [pc, #64]	@ (8007674 <prvInsertTimerInActiveList+0x7c>)
 8007634:	681a      	ldr	r2, [r3, #0]
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	3304      	adds	r3, #4
 800763a:	4619      	mov	r1, r3
 800763c:	4610      	mov	r0, r2
 800763e:	f7fd fcce 	bl	8004fde <vListInsert>
 8007642:	e012      	b.n	800766a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007644:	687a      	ldr	r2, [r7, #4]
 8007646:	683b      	ldr	r3, [r7, #0]
 8007648:	429a      	cmp	r2, r3
 800764a:	d206      	bcs.n	800765a <prvInsertTimerInActiveList+0x62>
 800764c:	68ba      	ldr	r2, [r7, #8]
 800764e:	683b      	ldr	r3, [r7, #0]
 8007650:	429a      	cmp	r2, r3
 8007652:	d302      	bcc.n	800765a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007654:	2301      	movs	r3, #1
 8007656:	617b      	str	r3, [r7, #20]
 8007658:	e007      	b.n	800766a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800765a:	4b07      	ldr	r3, [pc, #28]	@ (8007678 <prvInsertTimerInActiveList+0x80>)
 800765c:	681a      	ldr	r2, [r3, #0]
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	3304      	adds	r3, #4
 8007662:	4619      	mov	r1, r3
 8007664:	4610      	mov	r0, r2
 8007666:	f7fd fcba 	bl	8004fde <vListInsert>
		}
	}

	return xProcessTimerNow;
 800766a:	697b      	ldr	r3, [r7, #20]
}
 800766c:	4618      	mov	r0, r3
 800766e:	3718      	adds	r7, #24
 8007670:	46bd      	mov	sp, r7
 8007672:	bd80      	pop	{r7, pc}
 8007674:	20001538 	.word	0x20001538
 8007678:	20001534 	.word	0x20001534

0800767c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800767c:	b580      	push	{r7, lr}
 800767e:	b08e      	sub	sp, #56	@ 0x38
 8007680:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007682:	e0d4      	b.n	800782e <prvProcessReceivedCommands+0x1b2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	2b00      	cmp	r3, #0
 8007688:	da1b      	bge.n	80076c2 <prvProcessReceivedCommands+0x46>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800768a:	1d3b      	adds	r3, r7, #4
 800768c:	3304      	adds	r3, #4
 800768e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007690:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007692:	2b00      	cmp	r3, #0
 8007694:	d10d      	bne.n	80076b2 <prvProcessReceivedCommands+0x36>
	__asm volatile
 8007696:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800769a:	b672      	cpsid	i
 800769c:	f383 8811 	msr	BASEPRI, r3
 80076a0:	f3bf 8f6f 	isb	sy
 80076a4:	f3bf 8f4f 	dsb	sy
 80076a8:	b662      	cpsie	i
 80076aa:	61fb      	str	r3, [r7, #28]
}
 80076ac:	bf00      	nop
 80076ae:	bf00      	nop
 80076b0:	e7fd      	b.n	80076ae <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80076b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80076b8:	6850      	ldr	r0, [r2, #4]
 80076ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80076bc:	6892      	ldr	r2, [r2, #8]
 80076be:	4611      	mov	r1, r2
 80076c0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	f2c0 80b2 	blt.w	800782e <prvProcessReceivedCommands+0x1b2>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80076ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076d0:	695b      	ldr	r3, [r3, #20]
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d004      	beq.n	80076e0 <prvProcessReceivedCommands+0x64>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80076d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076d8:	3304      	adds	r3, #4
 80076da:	4618      	mov	r0, r3
 80076dc:	f7fd fcb8 	bl	8005050 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80076e0:	463b      	mov	r3, r7
 80076e2:	4618      	mov	r0, r3
 80076e4:	f7ff ff68 	bl	80075b8 <prvSampleTimeNow>
 80076e8:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	2b09      	cmp	r3, #9
 80076ee:	f200 809b 	bhi.w	8007828 <prvProcessReceivedCommands+0x1ac>
 80076f2:	a201      	add	r2, pc, #4	@ (adr r2, 80076f8 <prvProcessReceivedCommands+0x7c>)
 80076f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076f8:	08007721 	.word	0x08007721
 80076fc:	08007721 	.word	0x08007721
 8007700:	08007721 	.word	0x08007721
 8007704:	0800779b 	.word	0x0800779b
 8007708:	080077af 	.word	0x080077af
 800770c:	080077ff 	.word	0x080077ff
 8007710:	08007721 	.word	0x08007721
 8007714:	08007721 	.word	0x08007721
 8007718:	0800779b 	.word	0x0800779b
 800771c:	080077af 	.word	0x080077af
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007720:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007722:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007726:	f043 0301 	orr.w	r3, r3, #1
 800772a:	b2da      	uxtb	r2, r3
 800772c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800772e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007732:	68ba      	ldr	r2, [r7, #8]
 8007734:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007736:	699b      	ldr	r3, [r3, #24]
 8007738:	18d1      	adds	r1, r2, r3
 800773a:	68bb      	ldr	r3, [r7, #8]
 800773c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800773e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007740:	f7ff ff5a 	bl	80075f8 <prvInsertTimerInActiveList>
 8007744:	4603      	mov	r3, r0
 8007746:	2b00      	cmp	r3, #0
 8007748:	d070      	beq.n	800782c <prvProcessReceivedCommands+0x1b0>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800774a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800774c:	6a1b      	ldr	r3, [r3, #32]
 800774e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007750:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007752:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007754:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007758:	f003 0304 	and.w	r3, r3, #4
 800775c:	2b00      	cmp	r3, #0
 800775e:	d065      	beq.n	800782c <prvProcessReceivedCommands+0x1b0>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007760:	68ba      	ldr	r2, [r7, #8]
 8007762:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007764:	699b      	ldr	r3, [r3, #24]
 8007766:	441a      	add	r2, r3
 8007768:	2300      	movs	r3, #0
 800776a:	9300      	str	r3, [sp, #0]
 800776c:	2300      	movs	r3, #0
 800776e:	2100      	movs	r1, #0
 8007770:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007772:	f7ff fdfb 	bl	800736c <xTimerGenericCommand>
 8007776:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007778:	6a3b      	ldr	r3, [r7, #32]
 800777a:	2b00      	cmp	r3, #0
 800777c:	d156      	bne.n	800782c <prvProcessReceivedCommands+0x1b0>
	__asm volatile
 800777e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007782:	b672      	cpsid	i
 8007784:	f383 8811 	msr	BASEPRI, r3
 8007788:	f3bf 8f6f 	isb	sy
 800778c:	f3bf 8f4f 	dsb	sy
 8007790:	b662      	cpsie	i
 8007792:	61bb      	str	r3, [r7, #24]
}
 8007794:	bf00      	nop
 8007796:	bf00      	nop
 8007798:	e7fd      	b.n	8007796 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800779a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800779c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80077a0:	f023 0301 	bic.w	r3, r3, #1
 80077a4:	b2da      	uxtb	r2, r3
 80077a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077a8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80077ac:	e03f      	b.n	800782e <prvProcessReceivedCommands+0x1b2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80077ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077b0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80077b4:	f043 0301 	orr.w	r3, r3, #1
 80077b8:	b2da      	uxtb	r2, r3
 80077ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077bc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80077c0:	68ba      	ldr	r2, [r7, #8]
 80077c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077c4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80077c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077c8:	699b      	ldr	r3, [r3, #24]
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d10d      	bne.n	80077ea <prvProcessReceivedCommands+0x16e>
	__asm volatile
 80077ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077d2:	b672      	cpsid	i
 80077d4:	f383 8811 	msr	BASEPRI, r3
 80077d8:	f3bf 8f6f 	isb	sy
 80077dc:	f3bf 8f4f 	dsb	sy
 80077e0:	b662      	cpsie	i
 80077e2:	617b      	str	r3, [r7, #20]
}
 80077e4:	bf00      	nop
 80077e6:	bf00      	nop
 80077e8:	e7fd      	b.n	80077e6 <prvProcessReceivedCommands+0x16a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80077ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077ec:	699a      	ldr	r2, [r3, #24]
 80077ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077f0:	18d1      	adds	r1, r2, r3
 80077f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80077f6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80077f8:	f7ff fefe 	bl	80075f8 <prvInsertTimerInActiveList>
					break;
 80077fc:	e017      	b.n	800782e <prvProcessReceivedCommands+0x1b2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80077fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007800:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007804:	f003 0302 	and.w	r3, r3, #2
 8007808:	2b00      	cmp	r3, #0
 800780a:	d103      	bne.n	8007814 <prvProcessReceivedCommands+0x198>
						{
							vPortFree( pxTimer );
 800780c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800780e:	f000 fbd1 	bl	8007fb4 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007812:	e00c      	b.n	800782e <prvProcessReceivedCommands+0x1b2>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007814:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007816:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800781a:	f023 0301 	bic.w	r3, r3, #1
 800781e:	b2da      	uxtb	r2, r3
 8007820:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007822:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007826:	e002      	b.n	800782e <prvProcessReceivedCommands+0x1b2>

				default	:
					/* Don't expect to get here. */
					break;
 8007828:	bf00      	nop
 800782a:	e000      	b.n	800782e <prvProcessReceivedCommands+0x1b2>
					break;
 800782c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800782e:	4b08      	ldr	r3, [pc, #32]	@ (8007850 <prvProcessReceivedCommands+0x1d4>)
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	1d39      	adds	r1, r7, #4
 8007834:	2200      	movs	r2, #0
 8007836:	4618      	mov	r0, r3
 8007838:	f7fe f84a 	bl	80058d0 <xQueueReceive>
 800783c:	4603      	mov	r3, r0
 800783e:	2b00      	cmp	r3, #0
 8007840:	f47f af20 	bne.w	8007684 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8007844:	bf00      	nop
 8007846:	bf00      	nop
 8007848:	3730      	adds	r7, #48	@ 0x30
 800784a:	46bd      	mov	sp, r7
 800784c:	bd80      	pop	{r7, pc}
 800784e:	bf00      	nop
 8007850:	2000153c 	.word	0x2000153c

08007854 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007854:	b580      	push	{r7, lr}
 8007856:	b088      	sub	sp, #32
 8007858:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800785a:	e04b      	b.n	80078f4 <prvSwitchTimerLists+0xa0>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800785c:	4b2f      	ldr	r3, [pc, #188]	@ (800791c <prvSwitchTimerLists+0xc8>)
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	68db      	ldr	r3, [r3, #12]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007866:	4b2d      	ldr	r3, [pc, #180]	@ (800791c <prvSwitchTimerLists+0xc8>)
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	68db      	ldr	r3, [r3, #12]
 800786c:	68db      	ldr	r3, [r3, #12]
 800786e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	3304      	adds	r3, #4
 8007874:	4618      	mov	r0, r3
 8007876:	f7fd fbeb 	bl	8005050 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	6a1b      	ldr	r3, [r3, #32]
 800787e:	68f8      	ldr	r0, [r7, #12]
 8007880:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007888:	f003 0304 	and.w	r3, r3, #4
 800788c:	2b00      	cmp	r3, #0
 800788e:	d031      	beq.n	80078f4 <prvSwitchTimerLists+0xa0>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	699b      	ldr	r3, [r3, #24]
 8007894:	693a      	ldr	r2, [r7, #16]
 8007896:	4413      	add	r3, r2
 8007898:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800789a:	68ba      	ldr	r2, [r7, #8]
 800789c:	693b      	ldr	r3, [r7, #16]
 800789e:	429a      	cmp	r2, r3
 80078a0:	d90e      	bls.n	80078c0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	68ba      	ldr	r2, [r7, #8]
 80078a6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	68fa      	ldr	r2, [r7, #12]
 80078ac:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80078ae:	4b1b      	ldr	r3, [pc, #108]	@ (800791c <prvSwitchTimerLists+0xc8>)
 80078b0:	681a      	ldr	r2, [r3, #0]
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	3304      	adds	r3, #4
 80078b6:	4619      	mov	r1, r3
 80078b8:	4610      	mov	r0, r2
 80078ba:	f7fd fb90 	bl	8004fde <vListInsert>
 80078be:	e019      	b.n	80078f4 <prvSwitchTimerLists+0xa0>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80078c0:	2300      	movs	r3, #0
 80078c2:	9300      	str	r3, [sp, #0]
 80078c4:	2300      	movs	r3, #0
 80078c6:	693a      	ldr	r2, [r7, #16]
 80078c8:	2100      	movs	r1, #0
 80078ca:	68f8      	ldr	r0, [r7, #12]
 80078cc:	f7ff fd4e 	bl	800736c <xTimerGenericCommand>
 80078d0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d10d      	bne.n	80078f4 <prvSwitchTimerLists+0xa0>
	__asm volatile
 80078d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078dc:	b672      	cpsid	i
 80078de:	f383 8811 	msr	BASEPRI, r3
 80078e2:	f3bf 8f6f 	isb	sy
 80078e6:	f3bf 8f4f 	dsb	sy
 80078ea:	b662      	cpsie	i
 80078ec:	603b      	str	r3, [r7, #0]
}
 80078ee:	bf00      	nop
 80078f0:	bf00      	nop
 80078f2:	e7fd      	b.n	80078f0 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80078f4:	4b09      	ldr	r3, [pc, #36]	@ (800791c <prvSwitchTimerLists+0xc8>)
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d1ae      	bne.n	800785c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80078fe:	4b07      	ldr	r3, [pc, #28]	@ (800791c <prvSwitchTimerLists+0xc8>)
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007904:	4b06      	ldr	r3, [pc, #24]	@ (8007920 <prvSwitchTimerLists+0xcc>)
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	4a04      	ldr	r2, [pc, #16]	@ (800791c <prvSwitchTimerLists+0xc8>)
 800790a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800790c:	4a04      	ldr	r2, [pc, #16]	@ (8007920 <prvSwitchTimerLists+0xcc>)
 800790e:	697b      	ldr	r3, [r7, #20]
 8007910:	6013      	str	r3, [r2, #0]
}
 8007912:	bf00      	nop
 8007914:	3718      	adds	r7, #24
 8007916:	46bd      	mov	sp, r7
 8007918:	bd80      	pop	{r7, pc}
 800791a:	bf00      	nop
 800791c:	20001534 	.word	0x20001534
 8007920:	20001538 	.word	0x20001538

08007924 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007924:	b580      	push	{r7, lr}
 8007926:	b082      	sub	sp, #8
 8007928:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800792a:	f000 f947 	bl	8007bbc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800792e:	4b15      	ldr	r3, [pc, #84]	@ (8007984 <prvCheckForValidListAndQueue+0x60>)
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	2b00      	cmp	r3, #0
 8007934:	d120      	bne.n	8007978 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007936:	4814      	ldr	r0, [pc, #80]	@ (8007988 <prvCheckForValidListAndQueue+0x64>)
 8007938:	f7fd fb00 	bl	8004f3c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800793c:	4813      	ldr	r0, [pc, #76]	@ (800798c <prvCheckForValidListAndQueue+0x68>)
 800793e:	f7fd fafd 	bl	8004f3c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007942:	4b13      	ldr	r3, [pc, #76]	@ (8007990 <prvCheckForValidListAndQueue+0x6c>)
 8007944:	4a10      	ldr	r2, [pc, #64]	@ (8007988 <prvCheckForValidListAndQueue+0x64>)
 8007946:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007948:	4b12      	ldr	r3, [pc, #72]	@ (8007994 <prvCheckForValidListAndQueue+0x70>)
 800794a:	4a10      	ldr	r2, [pc, #64]	@ (800798c <prvCheckForValidListAndQueue+0x68>)
 800794c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800794e:	2300      	movs	r3, #0
 8007950:	9300      	str	r3, [sp, #0]
 8007952:	4b11      	ldr	r3, [pc, #68]	@ (8007998 <prvCheckForValidListAndQueue+0x74>)
 8007954:	4a11      	ldr	r2, [pc, #68]	@ (800799c <prvCheckForValidListAndQueue+0x78>)
 8007956:	2110      	movs	r1, #16
 8007958:	200a      	movs	r0, #10
 800795a:	f7fd fc0f 	bl	800517c <xQueueGenericCreateStatic>
 800795e:	4603      	mov	r3, r0
 8007960:	4a08      	ldr	r2, [pc, #32]	@ (8007984 <prvCheckForValidListAndQueue+0x60>)
 8007962:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007964:	4b07      	ldr	r3, [pc, #28]	@ (8007984 <prvCheckForValidListAndQueue+0x60>)
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	2b00      	cmp	r3, #0
 800796a:	d005      	beq.n	8007978 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800796c:	4b05      	ldr	r3, [pc, #20]	@ (8007984 <prvCheckForValidListAndQueue+0x60>)
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	490b      	ldr	r1, [pc, #44]	@ (80079a0 <prvCheckForValidListAndQueue+0x7c>)
 8007972:	4618      	mov	r0, r3
 8007974:	f7fe fbc4 	bl	8006100 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007978:	f000 f956 	bl	8007c28 <vPortExitCritical>
}
 800797c:	bf00      	nop
 800797e:	46bd      	mov	sp, r7
 8007980:	bd80      	pop	{r7, pc}
 8007982:	bf00      	nop
 8007984:	2000153c 	.word	0x2000153c
 8007988:	2000150c 	.word	0x2000150c
 800798c:	20001520 	.word	0x20001520
 8007990:	20001534 	.word	0x20001534
 8007994:	20001538 	.word	0x20001538
 8007998:	200015e8 	.word	0x200015e8
 800799c:	20001548 	.word	0x20001548
 80079a0:	0800847c 	.word	0x0800847c

080079a4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80079a4:	b480      	push	{r7}
 80079a6:	b085      	sub	sp, #20
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	60f8      	str	r0, [r7, #12]
 80079ac:	60b9      	str	r1, [r7, #8]
 80079ae:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	3b04      	subs	r3, #4
 80079b4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80079bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	3b04      	subs	r3, #4
 80079c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80079c4:	68bb      	ldr	r3, [r7, #8]
 80079c6:	f023 0201 	bic.w	r2, r3, #1
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	3b04      	subs	r3, #4
 80079d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80079d4:	4a0c      	ldr	r2, [pc, #48]	@ (8007a08 <pxPortInitialiseStack+0x64>)
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	3b14      	subs	r3, #20
 80079de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80079e0:	687a      	ldr	r2, [r7, #4]
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	3b04      	subs	r3, #4
 80079ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	f06f 0202 	mvn.w	r2, #2
 80079f2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	3b20      	subs	r3, #32
 80079f8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80079fa:	68fb      	ldr	r3, [r7, #12]
}
 80079fc:	4618      	mov	r0, r3
 80079fe:	3714      	adds	r7, #20
 8007a00:	46bd      	mov	sp, r7
 8007a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a06:	4770      	bx	lr
 8007a08:	08007a0d 	.word	0x08007a0d

08007a0c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007a0c:	b480      	push	{r7}
 8007a0e:	b085      	sub	sp, #20
 8007a10:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007a12:	2300      	movs	r3, #0
 8007a14:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007a16:	4b15      	ldr	r3, [pc, #84]	@ (8007a6c <prvTaskExitError+0x60>)
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a1e:	d00d      	beq.n	8007a3c <prvTaskExitError+0x30>
	__asm volatile
 8007a20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a24:	b672      	cpsid	i
 8007a26:	f383 8811 	msr	BASEPRI, r3
 8007a2a:	f3bf 8f6f 	isb	sy
 8007a2e:	f3bf 8f4f 	dsb	sy
 8007a32:	b662      	cpsie	i
 8007a34:	60fb      	str	r3, [r7, #12]
}
 8007a36:	bf00      	nop
 8007a38:	bf00      	nop
 8007a3a:	e7fd      	b.n	8007a38 <prvTaskExitError+0x2c>
	__asm volatile
 8007a3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a40:	b672      	cpsid	i
 8007a42:	f383 8811 	msr	BASEPRI, r3
 8007a46:	f3bf 8f6f 	isb	sy
 8007a4a:	f3bf 8f4f 	dsb	sy
 8007a4e:	b662      	cpsie	i
 8007a50:	60bb      	str	r3, [r7, #8]
}
 8007a52:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007a54:	bf00      	nop
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d0fc      	beq.n	8007a56 <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007a5c:	bf00      	nop
 8007a5e:	bf00      	nop
 8007a60:	3714      	adds	r7, #20
 8007a62:	46bd      	mov	sp, r7
 8007a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a68:	4770      	bx	lr
 8007a6a:	bf00      	nop
 8007a6c:	2000000c 	.word	0x2000000c

08007a70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007a70:	4b07      	ldr	r3, [pc, #28]	@ (8007a90 <pxCurrentTCBConst2>)
 8007a72:	6819      	ldr	r1, [r3, #0]
 8007a74:	6808      	ldr	r0, [r1, #0]
 8007a76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a7a:	f380 8809 	msr	PSP, r0
 8007a7e:	f3bf 8f6f 	isb	sy
 8007a82:	f04f 0000 	mov.w	r0, #0
 8007a86:	f380 8811 	msr	BASEPRI, r0
 8007a8a:	4770      	bx	lr
 8007a8c:	f3af 8000 	nop.w

08007a90 <pxCurrentTCBConst2>:
 8007a90:	2000100c 	.word	0x2000100c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007a94:	bf00      	nop
 8007a96:	bf00      	nop

08007a98 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007a98:	4808      	ldr	r0, [pc, #32]	@ (8007abc <prvPortStartFirstTask+0x24>)
 8007a9a:	6800      	ldr	r0, [r0, #0]
 8007a9c:	6800      	ldr	r0, [r0, #0]
 8007a9e:	f380 8808 	msr	MSP, r0
 8007aa2:	f04f 0000 	mov.w	r0, #0
 8007aa6:	f380 8814 	msr	CONTROL, r0
 8007aaa:	b662      	cpsie	i
 8007aac:	b661      	cpsie	f
 8007aae:	f3bf 8f4f 	dsb	sy
 8007ab2:	f3bf 8f6f 	isb	sy
 8007ab6:	df00      	svc	0
 8007ab8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007aba:	bf00      	nop
 8007abc:	e000ed08 	.word	0xe000ed08

08007ac0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	b084      	sub	sp, #16
 8007ac4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007ac6:	4b37      	ldr	r3, [pc, #220]	@ (8007ba4 <xPortStartScheduler+0xe4>)
 8007ac8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	781b      	ldrb	r3, [r3, #0]
 8007ace:	b2db      	uxtb	r3, r3
 8007ad0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	22ff      	movs	r2, #255	@ 0xff
 8007ad6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	781b      	ldrb	r3, [r3, #0]
 8007adc:	b2db      	uxtb	r3, r3
 8007ade:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007ae0:	78fb      	ldrb	r3, [r7, #3]
 8007ae2:	b2db      	uxtb	r3, r3
 8007ae4:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8007ae8:	b2da      	uxtb	r2, r3
 8007aea:	4b2f      	ldr	r3, [pc, #188]	@ (8007ba8 <xPortStartScheduler+0xe8>)
 8007aec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007aee:	4b2f      	ldr	r3, [pc, #188]	@ (8007bac <xPortStartScheduler+0xec>)
 8007af0:	2207      	movs	r2, #7
 8007af2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007af4:	e009      	b.n	8007b0a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8007af6:	4b2d      	ldr	r3, [pc, #180]	@ (8007bac <xPortStartScheduler+0xec>)
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	3b01      	subs	r3, #1
 8007afc:	4a2b      	ldr	r2, [pc, #172]	@ (8007bac <xPortStartScheduler+0xec>)
 8007afe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007b00:	78fb      	ldrb	r3, [r7, #3]
 8007b02:	b2db      	uxtb	r3, r3
 8007b04:	005b      	lsls	r3, r3, #1
 8007b06:	b2db      	uxtb	r3, r3
 8007b08:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007b0a:	78fb      	ldrb	r3, [r7, #3]
 8007b0c:	b2db      	uxtb	r3, r3
 8007b0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007b12:	2b80      	cmp	r3, #128	@ 0x80
 8007b14:	d0ef      	beq.n	8007af6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007b16:	4b25      	ldr	r3, [pc, #148]	@ (8007bac <xPortStartScheduler+0xec>)
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	f1c3 0307 	rsb	r3, r3, #7
 8007b1e:	2b04      	cmp	r3, #4
 8007b20:	d00d      	beq.n	8007b3e <xPortStartScheduler+0x7e>
	__asm volatile
 8007b22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b26:	b672      	cpsid	i
 8007b28:	f383 8811 	msr	BASEPRI, r3
 8007b2c:	f3bf 8f6f 	isb	sy
 8007b30:	f3bf 8f4f 	dsb	sy
 8007b34:	b662      	cpsie	i
 8007b36:	60bb      	str	r3, [r7, #8]
}
 8007b38:	bf00      	nop
 8007b3a:	bf00      	nop
 8007b3c:	e7fd      	b.n	8007b3a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007b3e:	4b1b      	ldr	r3, [pc, #108]	@ (8007bac <xPortStartScheduler+0xec>)
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	021b      	lsls	r3, r3, #8
 8007b44:	4a19      	ldr	r2, [pc, #100]	@ (8007bac <xPortStartScheduler+0xec>)
 8007b46:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007b48:	4b18      	ldr	r3, [pc, #96]	@ (8007bac <xPortStartScheduler+0xec>)
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007b50:	4a16      	ldr	r2, [pc, #88]	@ (8007bac <xPortStartScheduler+0xec>)
 8007b52:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	b2da      	uxtb	r2, r3
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007b5c:	4b14      	ldr	r3, [pc, #80]	@ (8007bb0 <xPortStartScheduler+0xf0>)
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	4a13      	ldr	r2, [pc, #76]	@ (8007bb0 <xPortStartScheduler+0xf0>)
 8007b62:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007b66:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007b68:	4b11      	ldr	r3, [pc, #68]	@ (8007bb0 <xPortStartScheduler+0xf0>)
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	4a10      	ldr	r2, [pc, #64]	@ (8007bb0 <xPortStartScheduler+0xf0>)
 8007b6e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007b72:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007b74:	f000 f8dc 	bl	8007d30 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007b78:	4b0e      	ldr	r3, [pc, #56]	@ (8007bb4 <xPortStartScheduler+0xf4>)
 8007b7a:	2200      	movs	r2, #0
 8007b7c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007b7e:	f000 f8fb 	bl	8007d78 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007b82:	4b0d      	ldr	r3, [pc, #52]	@ (8007bb8 <xPortStartScheduler+0xf8>)
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	4a0c      	ldr	r2, [pc, #48]	@ (8007bb8 <xPortStartScheduler+0xf8>)
 8007b88:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8007b8c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007b8e:	f7ff ff83 	bl	8007a98 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007b92:	f7fe ff29 	bl	80069e8 <vTaskSwitchContext>
	prvTaskExitError();
 8007b96:	f7ff ff39 	bl	8007a0c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007b9a:	2300      	movs	r3, #0
}
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	3710      	adds	r7, #16
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	bd80      	pop	{r7, pc}
 8007ba4:	e000e400 	.word	0xe000e400
 8007ba8:	20001638 	.word	0x20001638
 8007bac:	2000163c 	.word	0x2000163c
 8007bb0:	e000ed20 	.word	0xe000ed20
 8007bb4:	2000000c 	.word	0x2000000c
 8007bb8:	e000ef34 	.word	0xe000ef34

08007bbc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007bbc:	b480      	push	{r7}
 8007bbe:	b083      	sub	sp, #12
 8007bc0:	af00      	add	r7, sp, #0
	__asm volatile
 8007bc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bc6:	b672      	cpsid	i
 8007bc8:	f383 8811 	msr	BASEPRI, r3
 8007bcc:	f3bf 8f6f 	isb	sy
 8007bd0:	f3bf 8f4f 	dsb	sy
 8007bd4:	b662      	cpsie	i
 8007bd6:	607b      	str	r3, [r7, #4]
}
 8007bd8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007bda:	4b11      	ldr	r3, [pc, #68]	@ (8007c20 <vPortEnterCritical+0x64>)
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	3301      	adds	r3, #1
 8007be0:	4a0f      	ldr	r2, [pc, #60]	@ (8007c20 <vPortEnterCritical+0x64>)
 8007be2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007be4:	4b0e      	ldr	r3, [pc, #56]	@ (8007c20 <vPortEnterCritical+0x64>)
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	2b01      	cmp	r3, #1
 8007bea:	d112      	bne.n	8007c12 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007bec:	4b0d      	ldr	r3, [pc, #52]	@ (8007c24 <vPortEnterCritical+0x68>)
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	b2db      	uxtb	r3, r3
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d00d      	beq.n	8007c12 <vPortEnterCritical+0x56>
	__asm volatile
 8007bf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bfa:	b672      	cpsid	i
 8007bfc:	f383 8811 	msr	BASEPRI, r3
 8007c00:	f3bf 8f6f 	isb	sy
 8007c04:	f3bf 8f4f 	dsb	sy
 8007c08:	b662      	cpsie	i
 8007c0a:	603b      	str	r3, [r7, #0]
}
 8007c0c:	bf00      	nop
 8007c0e:	bf00      	nop
 8007c10:	e7fd      	b.n	8007c0e <vPortEnterCritical+0x52>
	}
}
 8007c12:	bf00      	nop
 8007c14:	370c      	adds	r7, #12
 8007c16:	46bd      	mov	sp, r7
 8007c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1c:	4770      	bx	lr
 8007c1e:	bf00      	nop
 8007c20:	2000000c 	.word	0x2000000c
 8007c24:	e000ed04 	.word	0xe000ed04

08007c28 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007c28:	b480      	push	{r7}
 8007c2a:	b083      	sub	sp, #12
 8007c2c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007c2e:	4b13      	ldr	r3, [pc, #76]	@ (8007c7c <vPortExitCritical+0x54>)
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d10d      	bne.n	8007c52 <vPortExitCritical+0x2a>
	__asm volatile
 8007c36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c3a:	b672      	cpsid	i
 8007c3c:	f383 8811 	msr	BASEPRI, r3
 8007c40:	f3bf 8f6f 	isb	sy
 8007c44:	f3bf 8f4f 	dsb	sy
 8007c48:	b662      	cpsie	i
 8007c4a:	607b      	str	r3, [r7, #4]
}
 8007c4c:	bf00      	nop
 8007c4e:	bf00      	nop
 8007c50:	e7fd      	b.n	8007c4e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8007c52:	4b0a      	ldr	r3, [pc, #40]	@ (8007c7c <vPortExitCritical+0x54>)
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	3b01      	subs	r3, #1
 8007c58:	4a08      	ldr	r2, [pc, #32]	@ (8007c7c <vPortExitCritical+0x54>)
 8007c5a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007c5c:	4b07      	ldr	r3, [pc, #28]	@ (8007c7c <vPortExitCritical+0x54>)
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d105      	bne.n	8007c70 <vPortExitCritical+0x48>
 8007c64:	2300      	movs	r3, #0
 8007c66:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007c68:	683b      	ldr	r3, [r7, #0]
 8007c6a:	f383 8811 	msr	BASEPRI, r3
}
 8007c6e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007c70:	bf00      	nop
 8007c72:	370c      	adds	r7, #12
 8007c74:	46bd      	mov	sp, r7
 8007c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7a:	4770      	bx	lr
 8007c7c:	2000000c 	.word	0x2000000c

08007c80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007c80:	f3ef 8009 	mrs	r0, PSP
 8007c84:	f3bf 8f6f 	isb	sy
 8007c88:	4b15      	ldr	r3, [pc, #84]	@ (8007ce0 <pxCurrentTCBConst>)
 8007c8a:	681a      	ldr	r2, [r3, #0]
 8007c8c:	f01e 0f10 	tst.w	lr, #16
 8007c90:	bf08      	it	eq
 8007c92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007c96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c9a:	6010      	str	r0, [r2, #0]
 8007c9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007ca0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007ca4:	b672      	cpsid	i
 8007ca6:	f380 8811 	msr	BASEPRI, r0
 8007caa:	f3bf 8f4f 	dsb	sy
 8007cae:	f3bf 8f6f 	isb	sy
 8007cb2:	b662      	cpsie	i
 8007cb4:	f7fe fe98 	bl	80069e8 <vTaskSwitchContext>
 8007cb8:	f04f 0000 	mov.w	r0, #0
 8007cbc:	f380 8811 	msr	BASEPRI, r0
 8007cc0:	bc09      	pop	{r0, r3}
 8007cc2:	6819      	ldr	r1, [r3, #0]
 8007cc4:	6808      	ldr	r0, [r1, #0]
 8007cc6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cca:	f01e 0f10 	tst.w	lr, #16
 8007cce:	bf08      	it	eq
 8007cd0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007cd4:	f380 8809 	msr	PSP, r0
 8007cd8:	f3bf 8f6f 	isb	sy
 8007cdc:	4770      	bx	lr
 8007cde:	bf00      	nop

08007ce0 <pxCurrentTCBConst>:
 8007ce0:	2000100c 	.word	0x2000100c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007ce4:	bf00      	nop
 8007ce6:	bf00      	nop

08007ce8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	b082      	sub	sp, #8
 8007cec:	af00      	add	r7, sp, #0
	__asm volatile
 8007cee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cf2:	b672      	cpsid	i
 8007cf4:	f383 8811 	msr	BASEPRI, r3
 8007cf8:	f3bf 8f6f 	isb	sy
 8007cfc:	f3bf 8f4f 	dsb	sy
 8007d00:	b662      	cpsie	i
 8007d02:	607b      	str	r3, [r7, #4]
}
 8007d04:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007d06:	f7fe fdb3 	bl	8006870 <xTaskIncrementTick>
 8007d0a:	4603      	mov	r3, r0
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d003      	beq.n	8007d18 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007d10:	4b06      	ldr	r3, [pc, #24]	@ (8007d2c <SysTick_Handler+0x44>)
 8007d12:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007d16:	601a      	str	r2, [r3, #0]
 8007d18:	2300      	movs	r3, #0
 8007d1a:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007d1c:	683b      	ldr	r3, [r7, #0]
 8007d1e:	f383 8811 	msr	BASEPRI, r3
}
 8007d22:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007d24:	bf00      	nop
 8007d26:	3708      	adds	r7, #8
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	bd80      	pop	{r7, pc}
 8007d2c:	e000ed04 	.word	0xe000ed04

08007d30 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007d30:	b480      	push	{r7}
 8007d32:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007d34:	4b0b      	ldr	r3, [pc, #44]	@ (8007d64 <vPortSetupTimerInterrupt+0x34>)
 8007d36:	2200      	movs	r2, #0
 8007d38:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007d3a:	4b0b      	ldr	r3, [pc, #44]	@ (8007d68 <vPortSetupTimerInterrupt+0x38>)
 8007d3c:	2200      	movs	r2, #0
 8007d3e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007d40:	4b0a      	ldr	r3, [pc, #40]	@ (8007d6c <vPortSetupTimerInterrupt+0x3c>)
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	4a0a      	ldr	r2, [pc, #40]	@ (8007d70 <vPortSetupTimerInterrupt+0x40>)
 8007d46:	fba2 2303 	umull	r2, r3, r2, r3
 8007d4a:	099b      	lsrs	r3, r3, #6
 8007d4c:	4a09      	ldr	r2, [pc, #36]	@ (8007d74 <vPortSetupTimerInterrupt+0x44>)
 8007d4e:	3b01      	subs	r3, #1
 8007d50:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007d52:	4b04      	ldr	r3, [pc, #16]	@ (8007d64 <vPortSetupTimerInterrupt+0x34>)
 8007d54:	2207      	movs	r2, #7
 8007d56:	601a      	str	r2, [r3, #0]
}
 8007d58:	bf00      	nop
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d60:	4770      	bx	lr
 8007d62:	bf00      	nop
 8007d64:	e000e010 	.word	0xe000e010
 8007d68:	e000e018 	.word	0xe000e018
 8007d6c:	20000000 	.word	0x20000000
 8007d70:	10624dd3 	.word	0x10624dd3
 8007d74:	e000e014 	.word	0xe000e014

08007d78 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007d78:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007d88 <vPortEnableVFP+0x10>
 8007d7c:	6801      	ldr	r1, [r0, #0]
 8007d7e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8007d82:	6001      	str	r1, [r0, #0]
 8007d84:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007d86:	bf00      	nop
 8007d88:	e000ed88 	.word	0xe000ed88

08007d8c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007d8c:	b480      	push	{r7}
 8007d8e:	b085      	sub	sp, #20
 8007d90:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007d92:	f3ef 8305 	mrs	r3, IPSR
 8007d96:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	2b0f      	cmp	r3, #15
 8007d9c:	d917      	bls.n	8007dce <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007d9e:	4a1a      	ldr	r2, [pc, #104]	@ (8007e08 <vPortValidateInterruptPriority+0x7c>)
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	4413      	add	r3, r2
 8007da4:	781b      	ldrb	r3, [r3, #0]
 8007da6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007da8:	4b18      	ldr	r3, [pc, #96]	@ (8007e0c <vPortValidateInterruptPriority+0x80>)
 8007daa:	781b      	ldrb	r3, [r3, #0]
 8007dac:	7afa      	ldrb	r2, [r7, #11]
 8007dae:	429a      	cmp	r2, r3
 8007db0:	d20d      	bcs.n	8007dce <vPortValidateInterruptPriority+0x42>
	__asm volatile
 8007db2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007db6:	b672      	cpsid	i
 8007db8:	f383 8811 	msr	BASEPRI, r3
 8007dbc:	f3bf 8f6f 	isb	sy
 8007dc0:	f3bf 8f4f 	dsb	sy
 8007dc4:	b662      	cpsie	i
 8007dc6:	607b      	str	r3, [r7, #4]
}
 8007dc8:	bf00      	nop
 8007dca:	bf00      	nop
 8007dcc:	e7fd      	b.n	8007dca <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007dce:	4b10      	ldr	r3, [pc, #64]	@ (8007e10 <vPortValidateInterruptPriority+0x84>)
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8007dd6:	4b0f      	ldr	r3, [pc, #60]	@ (8007e14 <vPortValidateInterruptPriority+0x88>)
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	429a      	cmp	r2, r3
 8007ddc:	d90d      	bls.n	8007dfa <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 8007dde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007de2:	b672      	cpsid	i
 8007de4:	f383 8811 	msr	BASEPRI, r3
 8007de8:	f3bf 8f6f 	isb	sy
 8007dec:	f3bf 8f4f 	dsb	sy
 8007df0:	b662      	cpsie	i
 8007df2:	603b      	str	r3, [r7, #0]
}
 8007df4:	bf00      	nop
 8007df6:	bf00      	nop
 8007df8:	e7fd      	b.n	8007df6 <vPortValidateInterruptPriority+0x6a>
	}
 8007dfa:	bf00      	nop
 8007dfc:	3714      	adds	r7, #20
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e04:	4770      	bx	lr
 8007e06:	bf00      	nop
 8007e08:	e000e3f0 	.word	0xe000e3f0
 8007e0c:	20001638 	.word	0x20001638
 8007e10:	e000ed0c 	.word	0xe000ed0c
 8007e14:	2000163c 	.word	0x2000163c

08007e18 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007e18:	b580      	push	{r7, lr}
 8007e1a:	b08a      	sub	sp, #40	@ 0x28
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007e20:	2300      	movs	r3, #0
 8007e22:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007e24:	f7fe fc66 	bl	80066f4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007e28:	4b5d      	ldr	r3, [pc, #372]	@ (8007fa0 <pvPortMalloc+0x188>)
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d101      	bne.n	8007e34 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007e30:	f000 f920 	bl	8008074 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007e34:	4b5b      	ldr	r3, [pc, #364]	@ (8007fa4 <pvPortMalloc+0x18c>)
 8007e36:	681a      	ldr	r2, [r3, #0]
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	4013      	ands	r3, r2
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	f040 8094 	bne.w	8007f6a <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d020      	beq.n	8007e8a <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 8007e48:	2208      	movs	r2, #8
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	4413      	add	r3, r2
 8007e4e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	f003 0307 	and.w	r3, r3, #7
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d017      	beq.n	8007e8a <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	f023 0307 	bic.w	r3, r3, #7
 8007e60:	3308      	adds	r3, #8
 8007e62:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	f003 0307 	and.w	r3, r3, #7
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d00d      	beq.n	8007e8a <pvPortMalloc+0x72>
	__asm volatile
 8007e6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e72:	b672      	cpsid	i
 8007e74:	f383 8811 	msr	BASEPRI, r3
 8007e78:	f3bf 8f6f 	isb	sy
 8007e7c:	f3bf 8f4f 	dsb	sy
 8007e80:	b662      	cpsie	i
 8007e82:	617b      	str	r3, [r7, #20]
}
 8007e84:	bf00      	nop
 8007e86:	bf00      	nop
 8007e88:	e7fd      	b.n	8007e86 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d06c      	beq.n	8007f6a <pvPortMalloc+0x152>
 8007e90:	4b45      	ldr	r3, [pc, #276]	@ (8007fa8 <pvPortMalloc+0x190>)
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	687a      	ldr	r2, [r7, #4]
 8007e96:	429a      	cmp	r2, r3
 8007e98:	d867      	bhi.n	8007f6a <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007e9a:	4b44      	ldr	r3, [pc, #272]	@ (8007fac <pvPortMalloc+0x194>)
 8007e9c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007e9e:	4b43      	ldr	r3, [pc, #268]	@ (8007fac <pvPortMalloc+0x194>)
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007ea4:	e004      	b.n	8007eb0 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 8007ea6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ea8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007eaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007eb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007eb2:	685b      	ldr	r3, [r3, #4]
 8007eb4:	687a      	ldr	r2, [r7, #4]
 8007eb6:	429a      	cmp	r2, r3
 8007eb8:	d903      	bls.n	8007ec2 <pvPortMalloc+0xaa>
 8007eba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d1f1      	bne.n	8007ea6 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007ec2:	4b37      	ldr	r3, [pc, #220]	@ (8007fa0 <pvPortMalloc+0x188>)
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007ec8:	429a      	cmp	r2, r3
 8007eca:	d04e      	beq.n	8007f6a <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007ecc:	6a3b      	ldr	r3, [r7, #32]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	2208      	movs	r2, #8
 8007ed2:	4413      	add	r3, r2
 8007ed4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007ed6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ed8:	681a      	ldr	r2, [r3, #0]
 8007eda:	6a3b      	ldr	r3, [r7, #32]
 8007edc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007ede:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ee0:	685a      	ldr	r2, [r3, #4]
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	1ad2      	subs	r2, r2, r3
 8007ee6:	2308      	movs	r3, #8
 8007ee8:	005b      	lsls	r3, r3, #1
 8007eea:	429a      	cmp	r2, r3
 8007eec:	d922      	bls.n	8007f34 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007eee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	4413      	add	r3, r2
 8007ef4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007ef6:	69bb      	ldr	r3, [r7, #24]
 8007ef8:	f003 0307 	and.w	r3, r3, #7
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d00d      	beq.n	8007f1c <pvPortMalloc+0x104>
	__asm volatile
 8007f00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f04:	b672      	cpsid	i
 8007f06:	f383 8811 	msr	BASEPRI, r3
 8007f0a:	f3bf 8f6f 	isb	sy
 8007f0e:	f3bf 8f4f 	dsb	sy
 8007f12:	b662      	cpsie	i
 8007f14:	613b      	str	r3, [r7, #16]
}
 8007f16:	bf00      	nop
 8007f18:	bf00      	nop
 8007f1a:	e7fd      	b.n	8007f18 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007f1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f1e:	685a      	ldr	r2, [r3, #4]
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	1ad2      	subs	r2, r2, r3
 8007f24:	69bb      	ldr	r3, [r7, #24]
 8007f26:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007f28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f2a:	687a      	ldr	r2, [r7, #4]
 8007f2c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007f2e:	69b8      	ldr	r0, [r7, #24]
 8007f30:	f000 f902 	bl	8008138 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007f34:	4b1c      	ldr	r3, [pc, #112]	@ (8007fa8 <pvPortMalloc+0x190>)
 8007f36:	681a      	ldr	r2, [r3, #0]
 8007f38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f3a:	685b      	ldr	r3, [r3, #4]
 8007f3c:	1ad3      	subs	r3, r2, r3
 8007f3e:	4a1a      	ldr	r2, [pc, #104]	@ (8007fa8 <pvPortMalloc+0x190>)
 8007f40:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007f42:	4b19      	ldr	r3, [pc, #100]	@ (8007fa8 <pvPortMalloc+0x190>)
 8007f44:	681a      	ldr	r2, [r3, #0]
 8007f46:	4b1a      	ldr	r3, [pc, #104]	@ (8007fb0 <pvPortMalloc+0x198>)
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	429a      	cmp	r2, r3
 8007f4c:	d203      	bcs.n	8007f56 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007f4e:	4b16      	ldr	r3, [pc, #88]	@ (8007fa8 <pvPortMalloc+0x190>)
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	4a17      	ldr	r2, [pc, #92]	@ (8007fb0 <pvPortMalloc+0x198>)
 8007f54:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007f56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f58:	685a      	ldr	r2, [r3, #4]
 8007f5a:	4b12      	ldr	r3, [pc, #72]	@ (8007fa4 <pvPortMalloc+0x18c>)
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	431a      	orrs	r2, r3
 8007f60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f62:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007f64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f66:	2200      	movs	r2, #0
 8007f68:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007f6a:	f7fe fbd1 	bl	8006710 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007f6e:	69fb      	ldr	r3, [r7, #28]
 8007f70:	f003 0307 	and.w	r3, r3, #7
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d00d      	beq.n	8007f94 <pvPortMalloc+0x17c>
	__asm volatile
 8007f78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f7c:	b672      	cpsid	i
 8007f7e:	f383 8811 	msr	BASEPRI, r3
 8007f82:	f3bf 8f6f 	isb	sy
 8007f86:	f3bf 8f4f 	dsb	sy
 8007f8a:	b662      	cpsie	i
 8007f8c:	60fb      	str	r3, [r7, #12]
}
 8007f8e:	bf00      	nop
 8007f90:	bf00      	nop
 8007f92:	e7fd      	b.n	8007f90 <pvPortMalloc+0x178>
	return pvReturn;
 8007f94:	69fb      	ldr	r3, [r7, #28]
}
 8007f96:	4618      	mov	r0, r3
 8007f98:	3728      	adds	r7, #40	@ 0x28
 8007f9a:	46bd      	mov	sp, r7
 8007f9c:	bd80      	pop	{r7, pc}
 8007f9e:	bf00      	nop
 8007fa0:	20005248 	.word	0x20005248
 8007fa4:	20005254 	.word	0x20005254
 8007fa8:	2000524c 	.word	0x2000524c
 8007fac:	20005240 	.word	0x20005240
 8007fb0:	20005250 	.word	0x20005250

08007fb4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007fb4:	b580      	push	{r7, lr}
 8007fb6:	b086      	sub	sp, #24
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d04e      	beq.n	8008064 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007fc6:	2308      	movs	r3, #8
 8007fc8:	425b      	negs	r3, r3
 8007fca:	697a      	ldr	r2, [r7, #20]
 8007fcc:	4413      	add	r3, r2
 8007fce:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007fd0:	697b      	ldr	r3, [r7, #20]
 8007fd2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007fd4:	693b      	ldr	r3, [r7, #16]
 8007fd6:	685a      	ldr	r2, [r3, #4]
 8007fd8:	4b24      	ldr	r3, [pc, #144]	@ (800806c <vPortFree+0xb8>)
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	4013      	ands	r3, r2
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d10d      	bne.n	8007ffe <vPortFree+0x4a>
	__asm volatile
 8007fe2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fe6:	b672      	cpsid	i
 8007fe8:	f383 8811 	msr	BASEPRI, r3
 8007fec:	f3bf 8f6f 	isb	sy
 8007ff0:	f3bf 8f4f 	dsb	sy
 8007ff4:	b662      	cpsie	i
 8007ff6:	60fb      	str	r3, [r7, #12]
}
 8007ff8:	bf00      	nop
 8007ffa:	bf00      	nop
 8007ffc:	e7fd      	b.n	8007ffa <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007ffe:	693b      	ldr	r3, [r7, #16]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	2b00      	cmp	r3, #0
 8008004:	d00d      	beq.n	8008022 <vPortFree+0x6e>
	__asm volatile
 8008006:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800800a:	b672      	cpsid	i
 800800c:	f383 8811 	msr	BASEPRI, r3
 8008010:	f3bf 8f6f 	isb	sy
 8008014:	f3bf 8f4f 	dsb	sy
 8008018:	b662      	cpsie	i
 800801a:	60bb      	str	r3, [r7, #8]
}
 800801c:	bf00      	nop
 800801e:	bf00      	nop
 8008020:	e7fd      	b.n	800801e <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008022:	693b      	ldr	r3, [r7, #16]
 8008024:	685a      	ldr	r2, [r3, #4]
 8008026:	4b11      	ldr	r3, [pc, #68]	@ (800806c <vPortFree+0xb8>)
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	4013      	ands	r3, r2
 800802c:	2b00      	cmp	r3, #0
 800802e:	d019      	beq.n	8008064 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008030:	693b      	ldr	r3, [r7, #16]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	2b00      	cmp	r3, #0
 8008036:	d115      	bne.n	8008064 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008038:	693b      	ldr	r3, [r7, #16]
 800803a:	685a      	ldr	r2, [r3, #4]
 800803c:	4b0b      	ldr	r3, [pc, #44]	@ (800806c <vPortFree+0xb8>)
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	43db      	mvns	r3, r3
 8008042:	401a      	ands	r2, r3
 8008044:	693b      	ldr	r3, [r7, #16]
 8008046:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008048:	f7fe fb54 	bl	80066f4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800804c:	693b      	ldr	r3, [r7, #16]
 800804e:	685a      	ldr	r2, [r3, #4]
 8008050:	4b07      	ldr	r3, [pc, #28]	@ (8008070 <vPortFree+0xbc>)
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	4413      	add	r3, r2
 8008056:	4a06      	ldr	r2, [pc, #24]	@ (8008070 <vPortFree+0xbc>)
 8008058:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800805a:	6938      	ldr	r0, [r7, #16]
 800805c:	f000 f86c 	bl	8008138 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008060:	f7fe fb56 	bl	8006710 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008064:	bf00      	nop
 8008066:	3718      	adds	r7, #24
 8008068:	46bd      	mov	sp, r7
 800806a:	bd80      	pop	{r7, pc}
 800806c:	20005254 	.word	0x20005254
 8008070:	2000524c 	.word	0x2000524c

08008074 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008074:	b480      	push	{r7}
 8008076:	b085      	sub	sp, #20
 8008078:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800807a:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800807e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008080:	4b27      	ldr	r3, [pc, #156]	@ (8008120 <prvHeapInit+0xac>)
 8008082:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	f003 0307 	and.w	r3, r3, #7
 800808a:	2b00      	cmp	r3, #0
 800808c:	d00c      	beq.n	80080a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	3307      	adds	r3, #7
 8008092:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	f023 0307 	bic.w	r3, r3, #7
 800809a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800809c:	68ba      	ldr	r2, [r7, #8]
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	1ad3      	subs	r3, r2, r3
 80080a2:	4a1f      	ldr	r2, [pc, #124]	@ (8008120 <prvHeapInit+0xac>)
 80080a4:	4413      	add	r3, r2
 80080a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80080ac:	4a1d      	ldr	r2, [pc, #116]	@ (8008124 <prvHeapInit+0xb0>)
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80080b2:	4b1c      	ldr	r3, [pc, #112]	@ (8008124 <prvHeapInit+0xb0>)
 80080b4:	2200      	movs	r2, #0
 80080b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	68ba      	ldr	r2, [r7, #8]
 80080bc:	4413      	add	r3, r2
 80080be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80080c0:	2208      	movs	r2, #8
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	1a9b      	subs	r3, r3, r2
 80080c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	f023 0307 	bic.w	r3, r3, #7
 80080ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	4a15      	ldr	r2, [pc, #84]	@ (8008128 <prvHeapInit+0xb4>)
 80080d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80080d6:	4b14      	ldr	r3, [pc, #80]	@ (8008128 <prvHeapInit+0xb4>)
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	2200      	movs	r2, #0
 80080dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80080de:	4b12      	ldr	r3, [pc, #72]	@ (8008128 <prvHeapInit+0xb4>)
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	2200      	movs	r2, #0
 80080e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80080ea:	683b      	ldr	r3, [r7, #0]
 80080ec:	68fa      	ldr	r2, [r7, #12]
 80080ee:	1ad2      	subs	r2, r2, r3
 80080f0:	683b      	ldr	r3, [r7, #0]
 80080f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80080f4:	4b0c      	ldr	r3, [pc, #48]	@ (8008128 <prvHeapInit+0xb4>)
 80080f6:	681a      	ldr	r2, [r3, #0]
 80080f8:	683b      	ldr	r3, [r7, #0]
 80080fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80080fc:	683b      	ldr	r3, [r7, #0]
 80080fe:	685b      	ldr	r3, [r3, #4]
 8008100:	4a0a      	ldr	r2, [pc, #40]	@ (800812c <prvHeapInit+0xb8>)
 8008102:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008104:	683b      	ldr	r3, [r7, #0]
 8008106:	685b      	ldr	r3, [r3, #4]
 8008108:	4a09      	ldr	r2, [pc, #36]	@ (8008130 <prvHeapInit+0xbc>)
 800810a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800810c:	4b09      	ldr	r3, [pc, #36]	@ (8008134 <prvHeapInit+0xc0>)
 800810e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8008112:	601a      	str	r2, [r3, #0]
}
 8008114:	bf00      	nop
 8008116:	3714      	adds	r7, #20
 8008118:	46bd      	mov	sp, r7
 800811a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800811e:	4770      	bx	lr
 8008120:	20001640 	.word	0x20001640
 8008124:	20005240 	.word	0x20005240
 8008128:	20005248 	.word	0x20005248
 800812c:	20005250 	.word	0x20005250
 8008130:	2000524c 	.word	0x2000524c
 8008134:	20005254 	.word	0x20005254

08008138 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008138:	b480      	push	{r7}
 800813a:	b085      	sub	sp, #20
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008140:	4b28      	ldr	r3, [pc, #160]	@ (80081e4 <prvInsertBlockIntoFreeList+0xac>)
 8008142:	60fb      	str	r3, [r7, #12]
 8008144:	e002      	b.n	800814c <prvInsertBlockIntoFreeList+0x14>
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	60fb      	str	r3, [r7, #12]
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	687a      	ldr	r2, [r7, #4]
 8008152:	429a      	cmp	r2, r3
 8008154:	d8f7      	bhi.n	8008146 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	685b      	ldr	r3, [r3, #4]
 800815e:	68ba      	ldr	r2, [r7, #8]
 8008160:	4413      	add	r3, r2
 8008162:	687a      	ldr	r2, [r7, #4]
 8008164:	429a      	cmp	r2, r3
 8008166:	d108      	bne.n	800817a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	685a      	ldr	r2, [r3, #4]
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	685b      	ldr	r3, [r3, #4]
 8008170:	441a      	add	r2, r3
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	685b      	ldr	r3, [r3, #4]
 8008182:	68ba      	ldr	r2, [r7, #8]
 8008184:	441a      	add	r2, r3
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	429a      	cmp	r2, r3
 800818c:	d118      	bne.n	80081c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	681a      	ldr	r2, [r3, #0]
 8008192:	4b15      	ldr	r3, [pc, #84]	@ (80081e8 <prvInsertBlockIntoFreeList+0xb0>)
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	429a      	cmp	r2, r3
 8008198:	d00d      	beq.n	80081b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	685a      	ldr	r2, [r3, #4]
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	685b      	ldr	r3, [r3, #4]
 80081a4:	441a      	add	r2, r3
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	681a      	ldr	r2, [r3, #0]
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	601a      	str	r2, [r3, #0]
 80081b4:	e008      	b.n	80081c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80081b6:	4b0c      	ldr	r3, [pc, #48]	@ (80081e8 <prvInsertBlockIntoFreeList+0xb0>)
 80081b8:	681a      	ldr	r2, [r3, #0]
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	601a      	str	r2, [r3, #0]
 80081be:	e003      	b.n	80081c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	681a      	ldr	r2, [r3, #0]
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80081c8:	68fa      	ldr	r2, [r7, #12]
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	429a      	cmp	r2, r3
 80081ce:	d002      	beq.n	80081d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	687a      	ldr	r2, [r7, #4]
 80081d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80081d6:	bf00      	nop
 80081d8:	3714      	adds	r7, #20
 80081da:	46bd      	mov	sp, r7
 80081dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e0:	4770      	bx	lr
 80081e2:	bf00      	nop
 80081e4:	20005240 	.word	0x20005240
 80081e8:	20005248 	.word	0x20005248

080081ec <memset>:
 80081ec:	4402      	add	r2, r0
 80081ee:	4603      	mov	r3, r0
 80081f0:	4293      	cmp	r3, r2
 80081f2:	d100      	bne.n	80081f6 <memset+0xa>
 80081f4:	4770      	bx	lr
 80081f6:	f803 1b01 	strb.w	r1, [r3], #1
 80081fa:	e7f9      	b.n	80081f0 <memset+0x4>

080081fc <_reclaim_reent>:
 80081fc:	4b2d      	ldr	r3, [pc, #180]	@ (80082b4 <_reclaim_reent+0xb8>)
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	4283      	cmp	r3, r0
 8008202:	b570      	push	{r4, r5, r6, lr}
 8008204:	4604      	mov	r4, r0
 8008206:	d053      	beq.n	80082b0 <_reclaim_reent+0xb4>
 8008208:	69c3      	ldr	r3, [r0, #28]
 800820a:	b31b      	cbz	r3, 8008254 <_reclaim_reent+0x58>
 800820c:	68db      	ldr	r3, [r3, #12]
 800820e:	b163      	cbz	r3, 800822a <_reclaim_reent+0x2e>
 8008210:	2500      	movs	r5, #0
 8008212:	69e3      	ldr	r3, [r4, #28]
 8008214:	68db      	ldr	r3, [r3, #12]
 8008216:	5959      	ldr	r1, [r3, r5]
 8008218:	b9b1      	cbnz	r1, 8008248 <_reclaim_reent+0x4c>
 800821a:	3504      	adds	r5, #4
 800821c:	2d80      	cmp	r5, #128	@ 0x80
 800821e:	d1f8      	bne.n	8008212 <_reclaim_reent+0x16>
 8008220:	69e3      	ldr	r3, [r4, #28]
 8008222:	4620      	mov	r0, r4
 8008224:	68d9      	ldr	r1, [r3, #12]
 8008226:	f000 f87b 	bl	8008320 <_free_r>
 800822a:	69e3      	ldr	r3, [r4, #28]
 800822c:	6819      	ldr	r1, [r3, #0]
 800822e:	b111      	cbz	r1, 8008236 <_reclaim_reent+0x3a>
 8008230:	4620      	mov	r0, r4
 8008232:	f000 f875 	bl	8008320 <_free_r>
 8008236:	69e3      	ldr	r3, [r4, #28]
 8008238:	689d      	ldr	r5, [r3, #8]
 800823a:	b15d      	cbz	r5, 8008254 <_reclaim_reent+0x58>
 800823c:	4629      	mov	r1, r5
 800823e:	4620      	mov	r0, r4
 8008240:	682d      	ldr	r5, [r5, #0]
 8008242:	f000 f86d 	bl	8008320 <_free_r>
 8008246:	e7f8      	b.n	800823a <_reclaim_reent+0x3e>
 8008248:	680e      	ldr	r6, [r1, #0]
 800824a:	4620      	mov	r0, r4
 800824c:	f000 f868 	bl	8008320 <_free_r>
 8008250:	4631      	mov	r1, r6
 8008252:	e7e1      	b.n	8008218 <_reclaim_reent+0x1c>
 8008254:	6961      	ldr	r1, [r4, #20]
 8008256:	b111      	cbz	r1, 800825e <_reclaim_reent+0x62>
 8008258:	4620      	mov	r0, r4
 800825a:	f000 f861 	bl	8008320 <_free_r>
 800825e:	69e1      	ldr	r1, [r4, #28]
 8008260:	b111      	cbz	r1, 8008268 <_reclaim_reent+0x6c>
 8008262:	4620      	mov	r0, r4
 8008264:	f000 f85c 	bl	8008320 <_free_r>
 8008268:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800826a:	b111      	cbz	r1, 8008272 <_reclaim_reent+0x76>
 800826c:	4620      	mov	r0, r4
 800826e:	f000 f857 	bl	8008320 <_free_r>
 8008272:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008274:	b111      	cbz	r1, 800827c <_reclaim_reent+0x80>
 8008276:	4620      	mov	r0, r4
 8008278:	f000 f852 	bl	8008320 <_free_r>
 800827c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800827e:	b111      	cbz	r1, 8008286 <_reclaim_reent+0x8a>
 8008280:	4620      	mov	r0, r4
 8008282:	f000 f84d 	bl	8008320 <_free_r>
 8008286:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8008288:	b111      	cbz	r1, 8008290 <_reclaim_reent+0x94>
 800828a:	4620      	mov	r0, r4
 800828c:	f000 f848 	bl	8008320 <_free_r>
 8008290:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8008292:	b111      	cbz	r1, 800829a <_reclaim_reent+0x9e>
 8008294:	4620      	mov	r0, r4
 8008296:	f000 f843 	bl	8008320 <_free_r>
 800829a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800829c:	b111      	cbz	r1, 80082a4 <_reclaim_reent+0xa8>
 800829e:	4620      	mov	r0, r4
 80082a0:	f000 f83e 	bl	8008320 <_free_r>
 80082a4:	6a23      	ldr	r3, [r4, #32]
 80082a6:	b11b      	cbz	r3, 80082b0 <_reclaim_reent+0xb4>
 80082a8:	4620      	mov	r0, r4
 80082aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80082ae:	4718      	bx	r3
 80082b0:	bd70      	pop	{r4, r5, r6, pc}
 80082b2:	bf00      	nop
 80082b4:	20000010 	.word	0x20000010

080082b8 <__libc_init_array>:
 80082b8:	b570      	push	{r4, r5, r6, lr}
 80082ba:	4d0d      	ldr	r5, [pc, #52]	@ (80082f0 <__libc_init_array+0x38>)
 80082bc:	4c0d      	ldr	r4, [pc, #52]	@ (80082f4 <__libc_init_array+0x3c>)
 80082be:	1b64      	subs	r4, r4, r5
 80082c0:	10a4      	asrs	r4, r4, #2
 80082c2:	2600      	movs	r6, #0
 80082c4:	42a6      	cmp	r6, r4
 80082c6:	d109      	bne.n	80082dc <__libc_init_array+0x24>
 80082c8:	4d0b      	ldr	r5, [pc, #44]	@ (80082f8 <__libc_init_array+0x40>)
 80082ca:	4c0c      	ldr	r4, [pc, #48]	@ (80082fc <__libc_init_array+0x44>)
 80082cc:	f000 f87e 	bl	80083cc <_init>
 80082d0:	1b64      	subs	r4, r4, r5
 80082d2:	10a4      	asrs	r4, r4, #2
 80082d4:	2600      	movs	r6, #0
 80082d6:	42a6      	cmp	r6, r4
 80082d8:	d105      	bne.n	80082e6 <__libc_init_array+0x2e>
 80082da:	bd70      	pop	{r4, r5, r6, pc}
 80082dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80082e0:	4798      	blx	r3
 80082e2:	3601      	adds	r6, #1
 80082e4:	e7ee      	b.n	80082c4 <__libc_init_array+0xc>
 80082e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80082ea:	4798      	blx	r3
 80082ec:	3601      	adds	r6, #1
 80082ee:	e7f2      	b.n	80082d6 <__libc_init_array+0x1e>
 80082f0:	08008520 	.word	0x08008520
 80082f4:	08008520 	.word	0x08008520
 80082f8:	08008520 	.word	0x08008520
 80082fc:	08008524 	.word	0x08008524

08008300 <__retarget_lock_acquire_recursive>:
 8008300:	4770      	bx	lr

08008302 <__retarget_lock_release_recursive>:
 8008302:	4770      	bx	lr

08008304 <memcpy>:
 8008304:	440a      	add	r2, r1
 8008306:	4291      	cmp	r1, r2
 8008308:	f100 33ff 	add.w	r3, r0, #4294967295
 800830c:	d100      	bne.n	8008310 <memcpy+0xc>
 800830e:	4770      	bx	lr
 8008310:	b510      	push	{r4, lr}
 8008312:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008316:	f803 4f01 	strb.w	r4, [r3, #1]!
 800831a:	4291      	cmp	r1, r2
 800831c:	d1f9      	bne.n	8008312 <memcpy+0xe>
 800831e:	bd10      	pop	{r4, pc}

08008320 <_free_r>:
 8008320:	b538      	push	{r3, r4, r5, lr}
 8008322:	4605      	mov	r5, r0
 8008324:	2900      	cmp	r1, #0
 8008326:	d041      	beq.n	80083ac <_free_r+0x8c>
 8008328:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800832c:	1f0c      	subs	r4, r1, #4
 800832e:	2b00      	cmp	r3, #0
 8008330:	bfb8      	it	lt
 8008332:	18e4      	addlt	r4, r4, r3
 8008334:	f000 f83e 	bl	80083b4 <__malloc_lock>
 8008338:	4a1d      	ldr	r2, [pc, #116]	@ (80083b0 <_free_r+0x90>)
 800833a:	6813      	ldr	r3, [r2, #0]
 800833c:	b933      	cbnz	r3, 800834c <_free_r+0x2c>
 800833e:	6063      	str	r3, [r4, #4]
 8008340:	6014      	str	r4, [r2, #0]
 8008342:	4628      	mov	r0, r5
 8008344:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008348:	f000 b83a 	b.w	80083c0 <__malloc_unlock>
 800834c:	42a3      	cmp	r3, r4
 800834e:	d908      	bls.n	8008362 <_free_r+0x42>
 8008350:	6820      	ldr	r0, [r4, #0]
 8008352:	1821      	adds	r1, r4, r0
 8008354:	428b      	cmp	r3, r1
 8008356:	bf01      	itttt	eq
 8008358:	6819      	ldreq	r1, [r3, #0]
 800835a:	685b      	ldreq	r3, [r3, #4]
 800835c:	1809      	addeq	r1, r1, r0
 800835e:	6021      	streq	r1, [r4, #0]
 8008360:	e7ed      	b.n	800833e <_free_r+0x1e>
 8008362:	461a      	mov	r2, r3
 8008364:	685b      	ldr	r3, [r3, #4]
 8008366:	b10b      	cbz	r3, 800836c <_free_r+0x4c>
 8008368:	42a3      	cmp	r3, r4
 800836a:	d9fa      	bls.n	8008362 <_free_r+0x42>
 800836c:	6811      	ldr	r1, [r2, #0]
 800836e:	1850      	adds	r0, r2, r1
 8008370:	42a0      	cmp	r0, r4
 8008372:	d10b      	bne.n	800838c <_free_r+0x6c>
 8008374:	6820      	ldr	r0, [r4, #0]
 8008376:	4401      	add	r1, r0
 8008378:	1850      	adds	r0, r2, r1
 800837a:	4283      	cmp	r3, r0
 800837c:	6011      	str	r1, [r2, #0]
 800837e:	d1e0      	bne.n	8008342 <_free_r+0x22>
 8008380:	6818      	ldr	r0, [r3, #0]
 8008382:	685b      	ldr	r3, [r3, #4]
 8008384:	6053      	str	r3, [r2, #4]
 8008386:	4408      	add	r0, r1
 8008388:	6010      	str	r0, [r2, #0]
 800838a:	e7da      	b.n	8008342 <_free_r+0x22>
 800838c:	d902      	bls.n	8008394 <_free_r+0x74>
 800838e:	230c      	movs	r3, #12
 8008390:	602b      	str	r3, [r5, #0]
 8008392:	e7d6      	b.n	8008342 <_free_r+0x22>
 8008394:	6820      	ldr	r0, [r4, #0]
 8008396:	1821      	adds	r1, r4, r0
 8008398:	428b      	cmp	r3, r1
 800839a:	bf04      	itt	eq
 800839c:	6819      	ldreq	r1, [r3, #0]
 800839e:	685b      	ldreq	r3, [r3, #4]
 80083a0:	6063      	str	r3, [r4, #4]
 80083a2:	bf04      	itt	eq
 80083a4:	1809      	addeq	r1, r1, r0
 80083a6:	6021      	streq	r1, [r4, #0]
 80083a8:	6054      	str	r4, [r2, #4]
 80083aa:	e7ca      	b.n	8008342 <_free_r+0x22>
 80083ac:	bd38      	pop	{r3, r4, r5, pc}
 80083ae:	bf00      	nop
 80083b0:	20005394 	.word	0x20005394

080083b4 <__malloc_lock>:
 80083b4:	4801      	ldr	r0, [pc, #4]	@ (80083bc <__malloc_lock+0x8>)
 80083b6:	f7ff bfa3 	b.w	8008300 <__retarget_lock_acquire_recursive>
 80083ba:	bf00      	nop
 80083bc:	20005390 	.word	0x20005390

080083c0 <__malloc_unlock>:
 80083c0:	4801      	ldr	r0, [pc, #4]	@ (80083c8 <__malloc_unlock+0x8>)
 80083c2:	f7ff bf9e 	b.w	8008302 <__retarget_lock_release_recursive>
 80083c6:	bf00      	nop
 80083c8:	20005390 	.word	0x20005390

080083cc <_init>:
 80083cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083ce:	bf00      	nop
 80083d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80083d2:	bc08      	pop	{r3}
 80083d4:	469e      	mov	lr, r3
 80083d6:	4770      	bx	lr

080083d8 <_fini>:
 80083d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083da:	bf00      	nop
 80083dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80083de:	bc08      	pop	{r3}
 80083e0:	469e      	mov	lr, r3
 80083e2:	4770      	bx	lr
